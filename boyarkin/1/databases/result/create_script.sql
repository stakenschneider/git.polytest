/* ------------------------------ CREATE DATABASE ------------------------------ */

/*
CONNECT 'tiger.ftk.spbstu.ru:/var/lib/firebird/435013/pharmacy.fdb' USER 'SYSDBA' PASSWORD 'masterkey';
DROP DATABASE;
COMMIT;
CREATE DATABASE 'tiger.ftk.spbstu.ru:/var/lib/firebird/435013/pharmacy.fdb' USER 'SYSDBA' PASSWORD 'masterkey';
COMMIT;
CONNECT 'tiger.ftk.spbstu.ru:/var/lib/firebird/435013/pharmacy.fdb' USER 'SYSDBA' PASSWORD 'masterkey';
*/

CONNECT '127.0.0.1/3050:D:\afiles\student\7\databases\result\PHARMACY.FDB' USER 'SYSDBA' PASSWORD 'masterkey';
DROP DATABASE;
CREATE DATABASE '127.0.0.1/3050:D:\afiles\student\7\databases\result\PHARMACY.FDB' USER 'SYSDBA' PASSWORD 'masterkey';
COMMIT;
CONNECT '127.0.0.1/3050:D:\afiles\student\7\databases\result\PHARMACY.FDB' USER 'SYSDBA' PASSWORD 'masterkey';


/* ------------------------------ CREATE TABLES ------------------------------ */

SET NAMES CYRL;

CREATE TABLE DISEASE 
(
  ID_DISEASE                INTEGER         NOT NULL,
  DISEASE_NAME              VARCHAR(256)    NOT NULL COLLATE NONE,
CONSTRAINT PK_DISEASE PRIMARY KEY (ID_DISEASE)
); 

COMMIT;

CREATE TABLE DRUG 
(
  ID_DRUG                INTEGER         NOT NULL,
  DRUG_NAME              VARCHAR(256)    NOT NULL COLLATE NONE,  
  DRUG_SHELF_LIFE        INTEGER     NOT NULL,  
  DRUG_CURRENT_COST      DECIMAL(18,4)   NOT NULL, 
  DRUG_RECIPE_NEEDED     CHAR(1)         NOT NULL,
  CONSTRAINT PK_DRUG PRIMARY KEY (ID_DRUG)
);

COMMIT;

CREATE TABLE CONTRAINDICATION 
(
  ID_CONTRAINDICATION               INTEGER         NOT NULL,
  ID_DISEASE                        INTEGER         NOT NULL REFERENCES DISEASE,
  ID_DRAG                           INTEGER         NOT NULL REFERENCES DRUG,
 CONSTRAINT PK_CONTRAINDICATION PRIMARY KEY (ID_CONTRAINDICATION)
);

COMMIT;

CREATE TABLE INCOMPATIBILITY 
(
  ID_INCOMPATIBILITY              INTEGER         NOT NULL,
  ID_DRAG_FIRST                   INTEGER         NOT NULL  REFERENCES DRUG,
  ID_DRAG_SECOND                  INTEGER         NOT NULL  REFERENCES DRUG,
 CONSTRAINT PK_INCOMPATIBILITY PRIMARY KEY (ID_INCOMPATIBILITY)
);

COMMIT;

CREATE TABLE PROVIDER 
(
  ID_PROVIDER                     INTEGER         NOT NULL,
  PROVIDER_NAME                   VARCHAR(256)    NOT NULL,
 CONSTRAINT PK_PROVIDER PRIMARY KEY (ID_PROVIDER)
);

COMMIT;

CREATE TABLE CONSIGNMENT 
(
  ID_CONSIGNMENT                  INTEGER         NOT NULL,
  ID_DRAG                         INTEGER         NOT NULL  REFERENCES DRUG,
  ID_PROVIDER                     INTEGER         NOT NULL  REFERENCES PROVIDER,
  CONSIGNMENT_DRAG_COUNT          INTEGER         NOT NULL,
  CONSIGNMENT_ARRIVAL_DATE        TIMESTAMP       NOT NULL, 
  CONSIGNMENT_MANUFACTURE_DATE    TIMESTAMP       NOT NULL,
 CONSTRAINT PK_CONSIGNMENT PRIMARY KEY (ID_CONSIGNMENT)
);

COMMIT;

CREATE TABLE REQUEST 
(
  ID_REQUEST                     INTEGER         NOT NULL,
  REQUEST_DATE                   TIMESTAMP       NOT NULL,
 CONSTRAINT PK_REQUEST PRIMARY KEY (ID_REQUEST)
);

COMMIT;

CREATE TABLE REQUEST_FROM_CONSIGNMENT
(
  ID_REQUEST_FROM_CONSIGNMENT    INTEGER         NOT NULL,
  ID_REQUEST                     INTEGER         NOT NULL  REFERENCES REQUEST,
  ID_CONSIGNMENT                 INTEGER         NOT NULL  REFERENCES CONSIGNMENT,
  DRUG_PREVIOUS_COST             DECIMAL(18,4)   NOT NULL,
  DRUG_COUNT                  INTEGER        NOT NULL,
 CONSTRAINT PK_REQUEST_FROM_CONSIGNMENT PRIMARY KEY (ID_REQUEST_FROM_CONSIGNMENT)
);

COMMIT;

/* ------------------------------ ALTER TABLES ------------------------------ */

CREATE TABLE DRUGSTORE
(
  ID_DRUGSTORE                  INTEGER         NOT NULL,
  DRUGSTORE_ADDRESS             VARCHAR(256)    NOT NULL,
 CONSTRAINT PK_DRUGSTORE PRIMARY KEY (ID_DRUGSTORE)
);  

COMMIT;

DROP TABLE REQUEST_FROM_CONSIGNMENT;

CREATE TABLE REQUEST_FROM_DRUGSTORE
(
  ID_REQUEST_FROM_DRUGSTORE      INTEGER         NOT NULL,
  ID_REQUEST                     INTEGER         NOT NULL  REFERENCES REQUEST,
  ID_DRUGSTORE                   INTEGER         NOT NULL  REFERENCES DRUGSTORE,
  DRUG_PREVIOUS_COST             DECIMAL(18,4)   NOT NULL,
  DRUG_COUNT                     INTEGER        NOT NULL,
 CONSTRAINT PK_REQUEST_FROM_DRUGSTORE PRIMARY KEY (ID_REQUEST_FROM_DRUGSTORE)
);    

COMMIT;

ALTER TABLE CONSIGNMENT ADD ID_DRUGSTORE INTEGER NOT NULL;

ALTER TABLE CONSIGNMENT ADD
CONSTRAINT FK_CONSIGNMENT FOREIGN KEY (ID_DRUGSTORE) REFERENCES DRUGSTORE;

COMMIT;

CREATE TABLE INDICATION
(
    ID_INDICATION   INTEGER     NOT NULL,
    ID_DISEASE      INTEGER     NOT NULL REFERENCES DISEASE,
    ID_DRUG         INTEGER     NOT NULL REFERENCES DRUG,
    CONSTRAINT PK_INDICATION PRIMARY KEY (ID_INDICATION)
);

COMMIT;

ALTER TABLE REQUEST_FROM_DRUGSTORE
DROP ID_DRUGSTORE;

COMMIT;

ALTER TABLE REQUEST_FROM_DRUGSTORE
ADD ID_CONSIGNMENT INTEGER NOT NULL;

COMMIT;

ALTER TABLE REQUEST_FROM_DRUGSTORE
ADD CONSTRAINT FK_REQUEST_FROM_DRUGSTORE
FOREIGN KEY (ID_CONSIGNMENT) REFERENCES CONSIGNMENT;

COMMIT;

CREATE TABLE CLIENT
(
    ID_CLIENT       INTEGER         NOT NULL,
    CLIENT_NAME     VARCHAR(256)    NOT NULL,
   CONSTRAINT PK_CLIENT PRIMARY KEY (ID_CLIENT)
);

COMMIT;

ALTER TABLE REQUEST
ADD ID_CLIENT INTEGER NOT NULL;

COMMIT;

ALTER TABLE REQUEST
ADD CONSTRAINT FK_REQUEST
FOREIGN KEY (ID_CLIENT) REFERENCES CLIENT;

COMMIT;

/* ------------------------------ INSERT DATA ------------------------------ */

INSERT INTO DISEASE (ID_DISEASE, DISEASE_NAME) VALUES (1, 'Ветрянка'); 
INSERT INTO DISEASE (ID_DISEASE, DISEASE_NAME) VALUES (2, 'Корь'); 
INSERT INTO DISEASE (ID_DISEASE, DISEASE_NAME) VALUES (3, 'ОРЗ'); 
INSERT INTO DISEASE (ID_DISEASE, DISEASE_NAME) VALUES (4, 'Язва'); 
INSERT INTO DISEASE (ID_DISEASE, DISEASE_NAME) VALUES (5, 'Импотенция'); 

COMMIT;

INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (1, 'Аспирин', 30, 32.22, 0); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (2, 'Нурафен', 40, 55.10, 0); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (3, 'Аспоркам', 20, 69.80, 1); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (4, 'Ношпа', 35, 20.90, 0); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (5, 'Диазолин', 50, 11.0, 0); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (6, 'Мезим', 30, 41.20, 0); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (7, 'Регидрон', 70, 5.40, 0); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (8, 'Флуоксетин', 50, 15.40, 1); 
INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
VALUES (9, 'Супрадин', 30, 25.0, 0);           

COMMIT;

INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (1, 1, 8);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (2, 2, 3);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (3, 1, 2);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (4, 4, 3);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (5, 6, 8);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (6, 3, 7);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (7, 9, 1);
INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) VALUES (8, 3, 4);       

COMMIT;

INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (1, 1, 1);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (2, 2, 2);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (3, 3, 4);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (4, 4, 4);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (5, 5, 5);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (6, 5, 7);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (7, 4, 7);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (8, 4, 9);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (9, 3, 8);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (10, 3, 5);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (11, 2, 6);
INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG) VALUES (12, 1, 5);  

COMMIT;

INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (1, 4, 8);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (2, 4, 3);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (3, 1, 6);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (4, 1, 2);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (5, 3, 3);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (6, 3, 7);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (7, 3, 9);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (8, 4, 2);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (9, 5, 6);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (10, 5, 1);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (11, 2, 4);
INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) VALUES (12, 2, 5);  

COMMIT;

INSERT INTO PROVIDER (ID_PROVIDER,  PROVIDER_NAME) VALUES (1, 'Добрый доктор');
INSERT INTO PROVIDER (ID_PROVIDER,  PROVIDER_NAME) VALUES (2, 'Доставщики9000');
INSERT INTO PROVIDER (ID_PROVIDER,  PROVIDER_NAME) VALUES (3, 'Фармаштекер');
INSERT INTO PROVIDER (ID_PROVIDER,  PROVIDER_NAME) VALUES (4, 'Компания Бориса');
INSERT INTO PROVIDER (ID_PROVIDER,  PROVIDER_NAME) VALUES (5, 'Доктор силач');  

COMMIT;

INSERT INTO DRUGSTORE (ID_DRUGSTORE,  DRUGSTORE_ADDRESS) VALUES (1, 'Москва, ул. Ленина 21к1');
INSERT INTO DRUGSTORE (ID_DRUGSTORE,  DRUGSTORE_ADDRESS) VALUES (2, 'Санкт-Петербург, пр. Энгельса 10к2');
INSERT INTO DRUGSTORE (ID_DRUGSTORE,  DRUGSTORE_ADDRESS) VALUES (3, 'Санкт-Петербург, пр. Невский 5к1');
INSERT INTO DRUGSTORE (ID_DRUGSTORE,  DRUGSTORE_ADDRESS) VALUES (4, 'Санкт-Петербург, ул. Парашютная 12к1'); 

COMMIT;

INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (1, 5, 3, 1200, '01-10-2011', '09-25-2010', 1);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (2, 2, 5, 1000, '02-13-2011', '02-11-2011', 1);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (3, 7, 4, 3000, '01-14-2011', '01-10-2011', 4);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (4, 1, 2, 3000, '02-15-2011', '02-01-2011', 3);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (5, 3, 1, 6000, '01-10-2011', '11-11-2010', 3);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (6, 4, 1, 2000, '01-20-2011', '12-20-2010', 2);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (7, 5, 5, 1000, '01-24-2011', '01-21-2011', 2);
INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
VALUES (8, 8, 3, 1000, '02-10-2011', '02-09-2011', 4); 
   
COMMIT;

INSERT INTO CLIENT (ID_CLIENT,  CLIENT_NAME) VALUES (1, 'Валера');
INSERT INTO CLIENT (ID_CLIENT,  CLIENT_NAME) VALUES (2, 'Игнат');
INSERT INTO CLIENT (ID_CLIENT,  CLIENT_NAME) VALUES (3, 'Борис');

COMMIT;

INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (1, '03-17-2011', 1);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (2, '04-02-2011', 3);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (3, '03-11-2011', 2);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (4, '04-22-2011', 1);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (5, '04-22-2011', 1);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (6, '04-28-2011', 2);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (7, '04-10-2011', 3);
INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) VALUES (8, '03-02-2011', 3);   

COMMIT;

INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (1, 2, 15.0, 100, 1);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (2, 3, 25.0, 50, 2);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (3, 4, 70.0, 20, 3);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (4, 1, 15.0, 200, 4);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (5, 7, 35.0, 100, 5);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (6, 8, 10.0, 400, 6);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (7, 2, 10.0, 100, 7);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (8, 3, 15.0, 50, 8);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (9, 2, 15.0, 50, 1);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (10, 1, 25.0, 150, 2);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (11, 1, 70.0, 120, 3);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (12, 7, 15.0, 250, 4);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (13, 7, 35.0, 130, 5);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (14, 6, 10.0, 100, 6);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (15, 3, 10.0, 150, 7);
INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
VALUES (16, 8, 15.0, 250, 8);

COMMIT;

/* ------------------------------ CREATE VIEWS ------------------------------ */

CREATE VIEW S2P1 AS
    SELECT * FROM CONSIGNMENT
    WHERE CONSIGNMENT.CONSIGNMENT_DRAG_COUNT LIKE 100;
    
COMMIT;

CREATE VIEW S2P2 AS
    SELECT * FROM DRUG
    WHERE DRUG.DRUG_SHELF_LIFE BETWEEN 10 AND 20;

COMMIT;

CREATE VIEW S2P3 AS
    SELECT * FROM REQUEST_FROM_DRUGSTORE
    WHERE REQUEST_FROM_DRUGSTORE.DRUG_COUNT IN (15, 20, 35, 22);

COMMIT;

CREATE VIEW S3P1 AS
    SELECT DRUG.ID_DRUG, DRUG.DRUG_NAME, (DRUG.DRUG_CURRENT_COST * 9 / 10) AS DISCOUNT_PRICE FROM DRUG;

COMMIT;

CREATE VIEW S3P2 AS
    SELECT ('Prefix: ' || DRUG.DRUG_NAME) AS PREFIX_DRUG_NAME FROM DRUG;

COMMIT;

CREATE VIEW S4P1 AS
    SELECT * FROM CONSIGNMENT ORDER BY CONSIGNMENT.CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT.CONSIGNMENT_MANUFACTURE_DATE;

COMMIT;

CREATE VIEW S4P2 AS
    SELECT * FROM DRUG ORDER BY DRUG.DRUG_NAME, DRUG.DRUG_SHELF_LIFE;

COMMIT;

CREATE VIEW S5 AS
    SELECT MIN(DRUG.DRUG_SHELF_LIFE) AS MIN_SHELF_LIFE, AVG(DRUG.DRUG_SHELF_LIFE) AS AVG_SHELF_LIFE, MAX(DRUG.DRUG_SHELF_LIFE) AS MAX_SHELF_LIFE FROM DRUG;

COMMIT;

CREATE VIEW S6P1 AS
    SELECT ('Contraindication: ' || DISEASE.DISEASE_NAME || ' ' || DRUG.DRUG_NAME) AS CONTRAINDICATION_RESULT FROM DISEASE
    JOIN CONTRAINDICATION ON DISEASE.ID_DISEASE = CONTRAINDICATION.ID_DISEASE
    JOIN DRUG ON CONTRAINDICATION.ID_DRAG = DRUG.ID_DRUG;

COMMIT;

CREATE VIEW S6P2 AS
    SELECT PROVIDER.PROVIDER_NAME, SUM(CONSIGNMENT.CONSIGNMENT_DRAG_COUNT) AS RESULT_COUNT FROM PROVIDER
    JOIN CONSIGNMENT ON PROVIDER.ID_PROVIDER = CONSIGNMENT.ID_PROVIDER
    GROUP BY PROVIDER.PROVIDER_NAME;
    
COMMIT;

CREATE VIEW S7 AS
    SELECT DRUG.DRUG_NAME, COUNT(DRUG.DRUG_NAME) AS NAMES_COUNT FROM DRUG
    GROUP BY DRUG.DRUG_NAME
    ORDER BY NAMES_COUNT DESC;

COMMIT;

CREATE VIEW S8 AS
    SELECT * FROM REQUEST
    WHERE REQUEST.ID_REQUEST = (SELECT REQUEST.ID_REQUEST FROM REQUEST WHERE REQUEST.REQUEST_DATE = '09.05.2014  0:15:01');

COMMIT;

CREATE VIEW I1 AS
    SELECT DISEASE.ID_DISEASE, DISEASE.DISEASE_NAME FROM DISEASE
    JOIN INDICATION ON DISEASE.ID_DISEASE = INDICATION.ID_DISEASE
    WHERE INDICATION.ID_DRUG IN (SELECT INCOMPATIBILITY.ID_DRAG_FIRST FROM INCOMPATIBILITY)
       OR INDICATION.ID_DRUG IN (SELECT INCOMPATIBILITY.ID_DRAG_SECOND FROM INCOMPATIBILITY)
    GROUP BY DISEASE.ID_DISEASE, DISEASE.DISEASE_NAME;
    
CREATE VIEW I2 AS
    SELECT FIRST 5 SKIP 0 REQUEST.ID_REQUEST, (REQUEST_FROM_DRUGSTORE.DRUG_PREVIOUS_COST * REQUEST_FROM_DRUGSTORE.DRUG_COUNT) AS DRUG_WEIGHT FROM REQUEST
    JOIN REQUEST_FROM_DRUGSTORE ON REQUEST.ID_REQUEST = REQUEST_FROM_DRUGSTORE.ID_REQUEST
    WHERE REQUEST.REQUEST_DATE > '01.01.2013' AND REQUEST.REQUEST_DATE < '01.01.2014'
    ORDER BY DRUG_WEIGHT DESC;
    
CREATE VIEW I3 AS
    SELECT FIRST 10 SKIP 0 CONSIGNMENT.ID_DRUGSTORE, SUM(CONSIGNMENT.CONSIGNMENT_DRAG_COUNT) AS DRUG_WEIGHT FROM CONSIGNMENT
    GROUP BY CONSIGNMENT.ID_DRUGSTORE
    ORDER BY DRUG_WEIGHT DESC;

/* ------------------------------ CREATE EXCEPTIONS ------------------------------ */

CREATE EXCEPTION CLIENT_IS_NOT_EXIST 'Client is not exist.';
CREATE EXCEPTION DRUG_IS_NOT_EXIST 'Drug is not exist.';

CREATE EXCEPTION PROVIDER_IS_NOT_EXIST 'Provider is not exist.';
CREATE EXCEPTION DRUGSTORE_IS_NOT_EXIST 'Drugstore is not exist.';

CREATE EXCEPTION CLIENT_CONTAINS_IN_OTHER_TABLE 'It is impossible to modify client, besause he is contains in other table.';

CREATE EXCEPTION INCOMPATIBILITY_ALREADY_EXISTS 'Incompatibility is already exists.';
CREATE EXCEPTION INCOMPATIBILITY_DRUGS_THE_SAME 'Drugs the same.';

CREATE EXCEPTION INDICATION_IS_CONTRAINDICATION 'Indicalion contains into contraindication table.';
CREATE EXCEPTION INDICATION_ALREADY_EXISTS 'Indicalion is already exists.';

    
/* ------------------------------ CREATE PROCEDURES ------------------------------ */

CREATE PROCEDURE S9 AS
BEGIN
    INSERT INTO DISEASE (ID_DISEASE, DISEASE_NAME) 
    VALUES (100001, 'ОРЗ');

    INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
    VALUES (100001, 'Супрадин', 30, 25.0, 0);

    INSERT INTO INCOMPATIBILITY (ID_INCOMPATIBILITY,  ID_DRAG_FIRST, ID_DRAG_SECOND) 
    VALUES (100001, 3, 4);

    INSERT INTO INDICATION (ID_INDICATION,  ID_DISEASE, ID_DRUG)
    VALUES (100001, 1, 1);
    
    INSERT INTO CONTRAINDICATION (ID_CONTRAINDICATION,  ID_DISEASE, ID_DRAG) 
    VALUES (100001, 2, 5);

    INSERT INTO PROVIDER (ID_PROVIDER,  PROVIDER_NAME) 
    VALUES (100001, 'Доктор силач');

    INSERT INTO DRUGSTORE (ID_DRUGSTORE,  DRUGSTORE_ADDRESS) 
    VALUES (100001, 'Санкт-Петербург, ул. Парашютная 12к1');

    INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
    VALUES (100001, 8, 3, 1000, '02-10-2011', '02-09-2011', 4);

    INSERT INTO CLIENT (ID_CLIENT,  CLIENT_NAME) 
    VALUES (100001, 'Федор');
    
    INSERT INTO REQUEST (ID_REQUEST,  REQUEST_DATE, ID_CLIENT) 
    VALUES (100001, '03-02-2011', 1);

    INSERT INTO REQUEST_FROM_DRUGSTORE (ID_REQUEST_FROM_DRUGSTORE,  ID_REQUEST, DRUG_PREVIOUS_COST, DRUG_COUNT, ID_CONSIGNMENT)
    VALUES (100001, 8, 10.0, 40, 1);
END;

COMMIT;

CREATE PROCEDURE S10 AS
BEGIN
    UPDATE DRUG SET DRUG.DRUG_SHELF_LIFE = DRUG.DRUG_SHELF_LIFE + 1;
END;

COMMIT;

CREATE PROCEDURE S11 AS
BEGIN
    INSERT INTO DRUG (ID_DRUG, DRUG_NAME, DRUG_SHELF_LIFE, DRUG_CURRENT_COST, DRUG_RECIPE_NEEDED)
    VALUES (100001, 'јспирин', 9999999.0, 9999999.0, 1);

    DELETE FROM DRUG
    WHERE DRUG.DRUG_CURRENT_COST = (SELECT MAX(DRUG.DRUG_CURRENT_COST) FROM DRUG);
END;

COMMIT;

CREATE PROCEDURE S12 AS
BEGIN
    DELETE FROM DRUG
    WHERE DRUG.ID_DRUG IN 
    (
        SELECT DRUG.ID_DRUG FROM DRUG
        WHERE DRUG.ID_DRUG NOT IN (SELECT CONTRAINDICATION.ID_DRAG FROM CONTRAINDICATION)
        AND DRUG.ID_DRUG NOT IN (SELECT CONSIGNMENT.ID_DRAG FROM CONSIGNMENT)
        AND DRUG.ID_DRUG NOT IN (SELECT INCOMPATIBILITY.ID_DRAG_FIRST FROM INCOMPATIBILITY)
        AND DRUG.ID_DRUG NOT IN (SELECT INCOMPATIBILITY.ID_DRAG_SECOND FROM INCOMPATIBILITY)
    );
END;

COMMIT;

CREATE PROCEDURE GET_DRUG_COST_BY_CLIENT(ID_DRUG INTEGER NOT NULL, ID_CLIENT INTEGER NOT NULL)
    RETURNS(RESULT_DRUG_COST DECIMAL(18,4) NOT NULL)
AS
    DECLARE VARIABLE CHECK_NULL INTEGER;
    DECLARE VARIABLE COEFF DECIMAL(18,4) NOT NULL;
    DECLARE VARIABLE CLIENT_SUMM DECIMAL(18,4);
    DECLARE VARIABLE DRUG_COST DECIMAL(18,4);
BEGIN

    /* Throw exception if client is not exist. */

    CHECK_NULL = NULL;
    CHECK_NULL = ( SELECT CLIENT.ID_CLIENT FROM CLIENT
                   WHERE CLIENT.ID_CLIENT = :ID_CLIENT );

    IF (CHECK_NULL IS NULL) THEN
        EXCEPTION CLIENT_IS_NOT_EXIST;


    /* Throw exception if drug is not exist. */

    CHECK_NULL = NULL;
    CHECK_NULL = ( SELECT DRUG.ID_DRUG FROM DRUG
                   WHERE DRUG.ID_DRUG = :ID_DRUG );

    IF (CHECK_NULL IS NULL) THEN
        EXCEPTION DRUG_IS_NOT_EXIST;


    /* Getting all money, that client spent. */

    CLIENT_SUMM = NULL;
    CLIENT_SUMM = ( SELECT SUM(REQUEST_FROM_DRUGSTORE.DRUG_PREVIOUS_COST * REQUEST_FROM_DRUGSTORE.DRUG_COUNT) FROM REQUEST_FROM_DRUGSTORE
                    JOIN REQUEST ON REQUEST_FROM_DRUGSTORE.ID_REQUEST = REQUEST.ID_REQUEST
                    JOIN CLIENT ON REQUEST.ID_CLIENT = CLIENT.ID_CLIENT
                    WHERE CLIENT.ID_CLIENT = :ID_CLIENT );


    /* Calculate sale coefficient.  */

    IF (CLIENT_SUMM IS NULL) THEN
        COEFF = 1;
    ELSE IF(CLIENT_SUMM < 10000) THEN
        COEFF = 1;
    ELSE IF(CLIENT_SUMM < 50000) THEN
        COEFF = 0.95;
    ELSE IF(CLIENT_SUMM < 90000) THEN
        COEFF = 0.9;
    ELSE
        COEFF = 0.85;


    /* Calculate result drug cost.  */

    RESULT_DRUG_COST = ( SELECT (DRUG.DRUG_CURRENT_COST * :COEFF) FROM DRUG
                         WHERE DRUG.ID_DRUG = :ID_DRUG );

END;

COMMIT;

CREATE PROCEDURE CREATE_NEW_CONSIGMENTS()
AS
    DECLARE VARIABLE CURRENT_DRUG_ID INTEGER NOT NULL;
    DECLARE VARIABLE CONSIGNMENT_COUNT INTEGER;
    DECLARE VARIABLE REQUEST_COUNT INTEGER;

    DECLARE VARIABLE RESULT_COUNT INTEGER NOT NULL;
    DECLARE VARIABLE RESULT_MANUFACTURE_DATE TIMESTAMP NOT NULL;
    DECLARE VARIABLE RESULT_ARRIVAL_DATE TIMESTAMP NOT NULL;
    DECLARE VARIABLE PROVIDER_ID INTEGER;
    DECLARE VARIABLE DRUGSTORE_ID INTEGER;
BEGIN

     /* Throw exception if provider is not exist. */

    PROVIDER_ID = NULL;
    PROVIDER_ID = ( SELECT FIRST 1 PROVIDER.ID_PROVIDER FROM PROVIDER );

    IF (PROVIDER_ID IS NULL) THEN
        EXCEPTION PROVIDER_IS_NOT_EXIST;


    /* Throw exception if drugstore is not exist. */

    DRUGSTORE_ID = NULL;
    DRUGSTORE_ID = ( SELECT FIRST 1 DRUGSTORE.ID_DRUGSTORE FROM DRUGSTORE );

    IF (DRUGSTORE_ID IS NULL) THEN
        EXCEPTION DRUGSTORE_IS_NOT_EXIST;


    FOR
        /*
            Special table for loop:
                First column - drug_id.
                Second column - count of drugs in all consignments.
                Third column - count of drugs in all requests.
        */
        SELECT
            DRUG.ID_DRUG,
            SUM(BUFFER_CONSIGNMENT.CONSIGNMENT_COUNT) AS CONSIGNMENT_COUNT,
            SUM(BUFFER_REQUEST.REQUEST_COUNT) AS REQUEST_COUNT FROM DRUG
        LEFT JOIN (
            SELECT CONSIGNMENT.ID_DRAG AS ID_DRUG, CONSIGNMENT.ID_CONSIGNMENT AS ID_CONSIGNMENT, SUM(CONSIGNMENT.CONSIGNMENT_DRAG_COUNT) AS CONSIGNMENT_COUNT
            FROM CONSIGNMENT
            GROUP BY CONSIGNMENT.ID_DRAG, CONSIGNMENT.ID_CONSIGNMENT
        ) BUFFER_CONSIGNMENT ON BUFFER_CONSIGNMENT.ID_DRUG = DRUG.ID_DRUG
        LEFT JOIN (
            SELECT REQUEST_FROM_DRUGSTORE.ID_CONSIGNMENT AS ID_CONSIGNMENT, SUM(REQUEST_FROM_DRUGSTORE.DRUG_COUNT) AS REQUEST_COUNT
            FROM REQUEST_FROM_DRUGSTORE
            GROUP BY REQUEST_FROM_DRUGSTORE.ID_CONSIGNMENT
        ) AS BUFFER_REQUEST ON BUFFER_REQUEST.ID_CONSIGNMENT = BUFFER_CONSIGNMENT.ID_CONSIGNMENT
        GROUP BY DRUG.ID_DRUG
        ORDER BY DRUG.ID_DRUG
        INTO :CURRENT_DRUG_ID, :CONSIGNMENT_COUNT, :REQUEST_COUNT
    DO
    BEGIN

        /* Calculate result count of drugs (1000 is minimum). */

        IF(CONSIGNMENT_COUNT IS NULL) THEN
            RESULT_COUNT = 1000;
        ELSE IF(CONSIGNMENT_COUNT - REQUEST_COUNT < 1000) THEN
            RESULT_COUNT = 1000 - (CONSIGNMENT_COUNT - REQUEST_COUNT);
        ELSE
            CONTINUE;

        /* Get current time. */

        RESULT_MANUFACTURE_DATE = ( SELECT CURRENT_TIMESTAMP FROM RDB$DATABASE );
        RESULT_ARRIVAL_DATE = DATEADD(10 DAY TO RESULT_MANUFACTURE_DATE);

        /* Insert consignments into table. */

        INSERT INTO CONSIGNMENT (ID_CONSIGNMENT,  ID_DRAG, ID_PROVIDER, CONSIGNMENT_DRAG_COUNT, CONSIGNMENT_ARRIVAL_DATE, CONSIGNMENT_MANUFACTURE_DATE, ID_DRUGSTORE)
        VALUES (
            (SELECT (MAX(CONSIGNMENT.ID_CONSIGNMENT) + 1) FROM CONSIGNMENT),
            :CURRENT_DRUG_ID,
            :PROVIDER_ID,
            :RESULT_COUNT,
            :RESULT_ARRIVAL_DATE,
            :RESULT_MANUFACTURE_DATE,
            :DRUGSTORE_ID
        );

    END

END;

COMMIT;

CREATE PROCEDURE GET_INDICATION_ID(ID_DISEASE INTEGER NOT NULL, ID_DRUG INTEGER NOT NULL)
    RETURNS(INDICATION_ID INTEGER)
AS
BEGIN
    INDICATION_ID = NULL;
    INDICATION_ID = ( SELECT INDICATION.ID_INDICATION FROM INDICATION
                      WHERE INDICATION.ID_DISEASE = :ID_DISEASE AND INDICATION.ID_DRUG = :ID_DRUG );
END;

COMMIT;

CREATE PROCEDURE GET_CONTRAINDICATION_ID(ID_DISEASE INTEGER NOT NULL, ID_DRUG INTEGER NOT NULL)
    RETURNS(CONTRAINDICATION_ID INTEGER)
AS
BEGIN
    CONTRAINDICATION_ID = NULL;
    CONTRAINDICATION_ID = ( SELECT CONTRAINDICATION.ID_CONTRAINDICATION FROM CONTRAINDICATION
                            WHERE CONTRAINDICATION.ID_DISEASE = :ID_DISEASE AND CONTRAINDICATION.ID_DRAG = :ID_DRUG );
END;

COMMIT;

/* ------------------------------ CREATE GENERATORS ------------------------------ */

CREATE SEQUENCE DISEASE_GENERATOR;
ALTER SEQUENCE DISEASE_GENERATOR RESTART WITH 5;

COMMIT;

/* ------------------------------ CREATE TRIGGERS ------------------------------ */

CREATE TRIGGER DISEASE_AUTOINCREMENT FOR DISEASE
    ACTIVE BEFORE INSERT POSITION 0
AS
    DECLARE VARIABLE TEMP DECIMAL(18,0) NOT NULL;
BEGIN
   IF(NEW.ID_DISEASE IS NULL) THEN
        NEW.ID_DISEASE = GEN_ID(DISEASE_GENERATOR, 1);
   ELSE
   BEGIN
        TEMP = GEN_ID(DISEASE_GENERATOR, 0);
        IF(TEMP < NEW.ID_DISEASE) THEN
            TEMP = GEN_ID(DISEASE_GENERATOR, NEW.ID_DISEASE - TEMP);
   END

END;

COMMIT;

CREATE TRIGGER CLIENT_MODIFY FOR CLIENT
    BEFORE DELETE OR UPDATE
AS
BEGIN
    IF(OLD.ID_CLIENT IN (SELECT REQUEST.ID_CLIENT FROM REQUEST)) THEN
        EXCEPTION CLIENT_CONTAINS_IN_OTHER_TABLE;
END;

COMMIT;

CREATE TRIGGER INCOMPATIBILITY_CHECK_DOUBLE FOR INCOMPATIBILITY
    ACTIVE BEFORE INSERT
AS
    DECLARE VARIABLE CHECK_NULL INTEGER;
BEGIN
    CHECK_NULL = NULL;
    CHECK_NULL = ( SELECT INCOMPATIBILITY.ID_INCOMPATIBILITY FROM INCOMPATIBILITY
                   WHERE INCOMPATIBILITY.ID_DRAG_FIRST = NEW.ID_DRAG_FIRST AND INCOMPATIBILITY.ID_DRAG_SECOND = NEW.ID_DRAG_SECOND );

    IF(NOT (CHECK_NULL IS NULL)) THEN
        EXCEPTION INCOMPATIBILITY_ALREADY_EXISTS;

    CHECK_NULL = NULL;
    CHECK_NULL = ( SELECT INCOMPATIBILITY.ID_INCOMPATIBILITY FROM INCOMPATIBILITY
                   WHERE INCOMPATIBILITY.ID_DRAG_FIRST = NEW.ID_DRAG_SECOND AND INCOMPATIBILITY.ID_DRAG_SECOND = NEW.ID_DRAG_FIRST );

    IF(NOT (CHECK_NULL IS NULL)) THEN
        EXCEPTION INCOMPATIBILITY_ALREADY_EXISTS;

    IF(NEW.ID_DRAG_FIRST = NEW.ID_DRAG_SECOND) THEN
        EXCEPTION INCOMPATIBILITY_DRUGS_THE_SAME;
END;

COMMIT;

CREATE TRIGGER INDICATION_CHECK_CONFLICT FOR INDICATION
    ACTIVE BEFORE INSERT
AS
    DECLARE VARIABLE CHECK_NULL INTEGER;
BEGIN
    EXECUTE PROCEDURE GET_INDICATION_ID
        NEW.ID_DISEASE, NEW.ID_DRUG
        RETURNING_VALUES :CHECK_NULL;

    IF(NOT (CHECK_NULL IS NULL)) THEN
        EXCEPTION INDICATION_ALREADY_EXISTS;

    EXECUTE PROCEDURE GET_CONTRAINDICATION_ID
        NEW.ID_DISEASE, NEW.ID_DRUG
        RETURNING_VALUES :CHECK_NULL;

    IF(NOT (CHECK_NULL IS NULL)) THEN
        EXCEPTION INDICATION_IS_CONTRAINDICATION;
END;

COMMIT;
