
humidity_temperature_lcd.elf:     file format elf32-littlenios2
humidity_temperature_lcd.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x08000240

Program Header:
    LOAD off    0x00001000 vaddr 0x08000000 paddr 0x08000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x08000020 paddr 0x08000020 align 2**12
         filesz 0x0016610c memsz 0x0016610c flags r-x
    LOAD off    0x0016712c vaddr 0x0816612c paddr 0x08168d54 align 2**12
         filesz 0x00002c28 memsz 0x00002c28 flags rw-
    LOAD off    0x0016a97c vaddr 0x0816b97c paddr 0x0816b97c align 2**12
         filesz 0x00000000 memsz 0x000005c4 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  08000000  08000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000220  08000020  08000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0001fc5c  08000240  08000240  00001240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00146290  0801fe9c  0801fe9c  00020e9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00002c28  0816612c  08168d54  0016712c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000005c4  0816b97c  0816b97c  0016a97c  2**2
                  ALLOC, SMALL_DATA
  6 .mem_if_ddr3_emif 00000000  0816bf40  0816bf40  00169d54  2**0
                  CONTENTS
  7 .comment      00000046  00000000  00000000  00169d54  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000013d0  00000000  00000000  00169da0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00031d6a  00000000  00000000  0016b170  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000c3b1  00000000  00000000  0019ceda  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00010a5c  00000000  00000000  001a928b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00003bb0  00000000  00000000  001b9ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00005e04  00000000  00000000  001bd898  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0001de85  00000000  00000000  001c369c  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  001e1524  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001b30  00000000  00000000  001e1588  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  001e8ab4  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  001e8ab7  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  001e8ac3  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  001e8ac4  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  001e8ac5  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  001e8ac9  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  001e8acd  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   00000009  00000000  00000000  001e8ad1  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    00000009  00000000  00000000  001e8ada  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   00000009  00000000  00000000  001e8ae3  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000a  00000000  00000000  001e8aec  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000034  00000000  00000000  001e8af6  2**0
                  CONTENTS, READONLY
 29 .sopcinfo     000ed2d2  00000000  00000000  001e8b2a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
08000000 l    d  .entry	00000000 .entry
08000020 l    d  .exceptions	00000000 .exceptions
08000240 l    d  .text	00000000 .text
0801fe9c l    d  .rodata	00000000 .rodata
0816612c l    d  .rwdata	00000000 .rwdata
0816b97c l    d  .bss	00000000 .bss
0816bf40 l    d  .mem_if_ddr3_emif	00000000 .mem_if_ddr3_emif
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../humidity_temperature_lcd_bsp//obj/HAL/src/crt0.o
08000288 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 alt_video_display.c
00000000 l    df *ABS*	00000000 tahomabold_32.c
0801fe9c l     O .rodata	000001b8 tahomabold_32_33
08020054 l     O .rodata	00000280 tahomabold_32_34
080202d4 l     O .rodata	00000410 tahomabold_32_35
080206e4 l     O .rodata	00000320 tahomabold_32_36
08020a04 l     O .rodata	000005f0 tahomabold_32_37
08020ff4 l     O .rodata	00000410 tahomabold_32_38
08021404 l     O .rodata	00000168 tahomabold_32_39
0802156c l     O .rodata	00000258 tahomabold_32_40
080217c4 l     O .rodata	00000258 tahomabold_32_41
08021a1c l     O .rodata	00000320 tahomabold_32_42
08021d3c l     O .rodata	00000410 tahomabold_32_43
0802214c l     O .rodata	00000190 tahomabold_32_44
080222dc l     O .rodata	00000230 tahomabold_32_45
0802250c l     O .rodata	00000190 tahomabold_32_46
0802269c l     O .rodata	000002d0 tahomabold_32_47
0802296c l     O .rodata	00000320 tahomabold_32_48
08022c8c l     O .rodata	00000320 tahomabold_32_49
08022fac l     O .rodata	00000320 tahomabold_32_50
080232cc l     O .rodata	00000320 tahomabold_32_51
080235ec l     O .rodata	00000320 tahomabold_32_52
0802390c l     O .rodata	00000320 tahomabold_32_53
08023c2c l     O .rodata	00000320 tahomabold_32_54
08023f4c l     O .rodata	00000320 tahomabold_32_55
0802426c l     O .rodata	00000320 tahomabold_32_56
0802458c l     O .rodata	00000320 tahomabold_32_57
080248ac l     O .rodata	000001e0 tahomabold_32_58
08024a8c l     O .rodata	000001e0 tahomabold_32_59
08024c6c l     O .rodata	00000410 tahomabold_32_60
0802507c l     O .rodata	00000410 tahomabold_32_61
0802548c l     O .rodata	00000410 tahomabold_32_62
0802589c l     O .rodata	000002d0 tahomabold_32_63
08025b6c l     O .rodata	00000488 tahomabold_32_64
08025ff4 l     O .rodata	00000370 tahomabold_32_65
08026364 l     O .rodata	00000370 tahomabold_32_66
080266d4 l     O .rodata	00000348 tahomabold_32_67
08026a1c l     O .rodata	000003c0 tahomabold_32_68
08026ddc l     O .rodata	00000320 tahomabold_32_69
080270fc l     O .rodata	000002f8 tahomabold_32_70
080273f4 l     O .rodata	000003c0 tahomabold_32_71
080277b4 l     O .rodata	000003c0 tahomabold_32_72
08027b74 l     O .rodata	00000258 tahomabold_32_73
08027dcc l     O .rodata	00000280 tahomabold_32_74
0802804c l     O .rodata	00000398 tahomabold_32_75
080283e4 l     O .rodata	000002d0 tahomabold_32_76
080286b4 l     O .rodata	00000488 tahomabold_32_77
08028b3c l     O .rodata	000003e8 tahomabold_32_78
08028f24 l     O .rodata	000003e8 tahomabold_32_79
0802930c l     O .rodata	00000348 tahomabold_32_80
08029654 l     O .rodata	000003e8 tahomabold_32_81
08029a3c l     O .rodata	000003c0 tahomabold_32_82
08029dfc l     O .rodata	00000320 tahomabold_32_83
0802a11c l     O .rodata	00000320 tahomabold_32_84
0802a43c l     O .rodata	000003c0 tahomabold_32_85
0802a7fc l     O .rodata	00000370 tahomabold_32_86
0802ab6c l     O .rodata	00000528 tahomabold_32_87
0802b094 l     O .rodata	00000370 tahomabold_32_88
0802b404 l     O .rodata	00000370 tahomabold_32_89
0802b774 l     O .rodata	00000320 tahomabold_32_90
0802ba94 l     O .rodata	00000258 tahomabold_32_91
0802bcec l     O .rodata	000002d0 tahomabold_32_92
0802bfbc l     O .rodata	00000258 tahomabold_32_93
0802c214 l     O .rodata	00000410 tahomabold_32_94
0802c624 l     O .rodata	00000320 tahomabold_32_95
0802c944 l     O .rodata	000002a8 tahomabold_32_96
0802cbec l     O .rodata	000002f8 tahomabold_32_97
0802cee4 l     O .rodata	00000320 tahomabold_32_98
0802d204 l     O .rodata	000002a8 tahomabold_32_99
0802d4ac l     O .rodata	00000320 tahomabold_32_100
0802d7cc l     O .rodata	000002f8 tahomabold_32_101
0802dac4 l     O .rodata	00000230 tahomabold_32_102
0802dcf4 l     O .rodata	00000320 tahomabold_32_103
0802e014 l     O .rodata	00000320 tahomabold_32_104
0802e334 l     O .rodata	00000190 tahomabold_32_105
0802e4c4 l     O .rodata	00000208 tahomabold_32_106
0802e6cc l     O .rodata	000002f8 tahomabold_32_107
0802e9c4 l     O .rodata	00000190 tahomabold_32_108
0802eb54 l     O .rodata	000004d8 tahomabold_32_109
0802f02c l     O .rodata	00000320 tahomabold_32_110
0802f34c l     O .rodata	00000320 tahomabold_32_111
0802f66c l     O .rodata	00000320 tahomabold_32_112
0802f98c l     O .rodata	00000320 tahomabold_32_113
0802fcac l     O .rodata	00000230 tahomabold_32_114
0802fedc l     O .rodata	00000280 tahomabold_32_115
0803015c l     O .rodata	00000208 tahomabold_32_116
08030364 l     O .rodata	00000320 tahomabold_32_117
08030684 l     O .rodata	000002f8 tahomabold_32_118
0803097c l     O .rodata	00000460 tahomabold_32_119
08030ddc l     O .rodata	000002f8 tahomabold_32_120
080310d4 l     O .rodata	000002d0 tahomabold_32_121
080313a4 l     O .rodata	000002a8 tahomabold_32_122
0803164c l     O .rodata	00000320 tahomabold_32_123
0803196c l     O .rodata	00000320 tahomabold_32_124
08031c8c l     O .rodata	00000320 tahomabold_32_125
08031fac l     O .rodata	00000410 tahomabold_32_126
00000000 l    df *ABS*	00000000 gimp_bmp.c
00000000 l    df *ABS*	00000000 simple_graphics.c
00000000 l    df *ABS*	00000000 simple_text.c
00000000 l    df *ABS*	00000000 background.c
00000000 l    df *ABS*	00000000 bright.c
00000000 l    df *ABS*	00000000 dot.c
00000000 l    df *ABS*	00000000 main.c
00000000 l    df *ABS*	00000000 my_ui.c
00000000 l    df *ABS*	00000000 srec.c
08167104 l     O .rwdata	00000100 ctab
08167204 l     O .rwdata	00000028 ltab
00000000 l    df *ABS*	00000000 I2C.c
00000000 l    df *ABS*	00000000 Temp_RH.c
00000000 l    df *ABS*	00000000 multi_touch2.c
08009db8 l     F .text	00000348 mtc2_QueryData
0800a100 l     F .text	00000074 mtc2_ISR
00000000 l    df *ABS*	00000000 queue.c
00000000 l    df *ABS*	00000000 s_cos.c
00000000 l    df *ABS*	00000000 s_sin.c
00000000 l    df *ABS*	00000000 e_rem_pio2.c
08165c8c l     O .rodata	00000108 two_over_pi
08165c0c l     O .rodata	00000080 npio2_hw
00000000 l    df *ABS*	00000000 k_cos.c
00000000 l    df *ABS*	00000000 k_rem_pio2.c
08165dd4 l     O .rodata	00000010 init_jk
08165d94 l     O .rodata	00000040 PIo2
00000000 l    df *ABS*	00000000 k_sin.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_floor.c
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
0800c8e4 l     F .text	0000006c udivmodsi4
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 malign.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 malloc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 sprintf.c
00000000 l    df *ABS*	00000000 strcpy.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
08165f2a l     O .rodata	00000010 zeroes.4240
08165f3a l     O .rodata	00000010 blanks.4239
00000000 l    df *ABS*	00000000 vfprintf.c
08165f4a l     O .rodata	00000010 zeroes.4255
080142d8 l     F .text	000000bc __sbprintf
08165f5a l     O .rodata	00000010 blanks.4254
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 dtoa.c
080144e8 l     F .text	00000200 quorem
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
080160a4 l     F .text	00000008 __fp_lock
080160ac l     F .text	00000008 __fp_unlock
080160c0 l     F .text	0000019c __sinit.part.1
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 impure.c
08167634 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
08167a78 l     O .rwdata	00000020 lc_ctype_charset
08167a58 l     O .rwdata	00000020 lc_message_charset
08167a98 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mprec.c
08165f8c l     O .rodata	0000000c p05.2710
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
081660b0 l     O .rodata	00000010 zeroes.4184
081660c0 l     O .rodata	00000010 blanks.4183
00000000 l    df *ABS*	00000000 vfprintf.c
08019cdc l     F .text	000000fc __sprint_r.part.0
081660e0 l     O .rodata	00000010 blanks.4199
081660d0 l     O .rodata	00000010 zeroes.4200
0801b0e4 l     F .text	000000bc __sbprintf
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0801c5e8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0801c708 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0801c734 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0801cb04 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0801cbf8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0801cce4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0801cec8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_remap_cached.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
08168d40 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 alt_uncached_malloc.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0801d39c l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0801d4e4 l     F .text	00000038 alt_dev_reg
08167c78 l     O .rwdata	00001060 jtag_uart
08168cd8 l     O .rwdata	00000030 lcd_sgdma
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0801d7e8 l     F .text	00000204 altera_avalon_jtag_uart_irq
0801d9ec l     F .text	000000a8 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_sgdma.c
0801e00c l     F .text	00000050 alt_get_errno
0801ec20 l     F .text	000000b8 alt_avalon_sgdma_irq
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0801ed7c l     F .text	00000074 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0801f1c8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0801f4d8 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0801f610 l     F .text	00000050 alt_get_errno
0801f660 l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0816b9cc g     O .bss	00000004 alt_instruction_exception_handler
080028a0 g     F .text	00000338 vid_draw_horiz_line
080181a4 g     F .text	00000074 _mprec_log10
080077b4 g     F .text	000000ac AsVidCopyImageToBuffer
080087f8 g     F .text	00000100 I2C_Read
08018290 g     F .text	0000008c __any_on
0801b650 g     F .text	00000054 _isatty_r
08165f98 g     O .rodata	00000028 __mprec_tinytens
0801ce08 g     F .text	00000078 alt_main
080102ac g     F .text	00000090 strcpy
0800ff1c g     F .text	000000a8 _puts_r
0816be40 g     O .bss	00000100 alt_irq
0800c4f4 g     F .text	00000014 fabs
0801b6a4 g     F .text	0000005c _lseek_r
08000ce0 g     F .text	000003e0 load_gimp_bmp
08009880 g     F .text	00000060 ACK_check
08002cc4 g     F .text	0000006c vid_color_convert16_24
08009448 g     F .text	0000009c I2CL_Read16
08168d54 g       *ABS*	00000000 __flash_rwdata_start
080097f4 g     F .text	0000008c ACK_single_check
0800db78 g     F .text	00000084 .hidden __eqdf2
0816bf40 g       *ABS*	00000000 __alt_heap_start
0800a530 g     F .text	00000064 QUEUE_IsFull
08000574 g     F .text	000000f8 alt_video_display_close
0800fee0 g     F .text	0000003c printf
0801e180 g     F .text	00000110 alt_avalon_sgdma_do_sync_transfer
0801b8b0 g     F .text	0000009c _wcrtomb_r
0800814c g     F .text	00000244 srec_encode
080189d0 g     F .text	0000005c __sseek
080163f4 g     F .text	00000010 __sinit
0801b75c g     F .text	00000138 __swbuf_r
08016ea0 g     F .text	0000007c _setlocale_r
080079fc g     F .text	00000118 DrawTransparentImage
0801625c g     F .text	00000068 __sfmoreglue
0801cea4 g     F .text	00000024 __malloc_unlock
080021b4 g     F .text	00000148 vid_draw_box
0801d074 g     F .text	00000034 alt_remap_cached
0801e86c g     F .text	000003b4 alt_avalon_sgdma_construct_descriptor_burst
080059a8 g     F .text	0000025c vid_print_string_alpha
08017220 g     F .text	0000015c memmove
080163dc g     F .text	00000018 _cleanup
08010104 g     F .text	000000e4 snprintf
0801737c g     F .text	000000a8 _Balloc
08166cec g     O .rwdata	00000415 cour10_font_array
0800dbfc g     F .text	000000e0 .hidden __gtdf2
08001f90 g     F .text	0000011c vid_move_block
0801f884 g     F .text	00000020 altera_nios2_gen2_irq_init
00000000  w      *UND*	00000000 __errno
08009304 g     F .text	00000144 I2CL_MultipleWrite
080064f4 g     F .text	000000e0 vid_string_pixel_length_alpha
08008cac g     F .text	00000130 i2c_write
08000000 g     F .entry	0000001c __reset
0816b98c g     O .bss	00000004 isCelsius
0800855c g     F .text	000000b4 I2C_setchannel
08004b94 g     F .text	00000338 vid_draw_horiz_line_cur
0801e3dc g     F .text	00000074 alt_avalon_sgdma_construct_stream_to_mem_desc_burst
08000020 g       *ABS*	00000000 __flash_exceptions_start
0801b5f8 g     F .text	00000058 _fstat_r
0816b9a4 g     O .bss	00000004 errno
0800c508 g     F .text	000001f4 floor
080088f8 g     F .text	0000015c I2C_Read16
0801894c g     F .text	00000008 __seofread
08018ca4 g     F .text	00001038 ___svfiprintf_internal_r
080010fc g     F .text	00000108 copy_pix_map_32_to_32
0816b9bc g     O .bss	00000004 alt_argv
08170d08 g       *ABS*	00000000 _gp
0801d36c g     F .text	00000030 usleep
080098e0 g     F .text	0000011c RH_Temp_Sensor_init
08000000 g       *ABS*	00000000 __alt_mem_mem_if_ddr3_emif
0801d2f4 g     F .text	00000078 alt_uncached_malloc
08005c04 g     F .text	00000148 seperate_color_channels
08167af8 g     O .rwdata	00000180 alt_fd_list
0800a8c4 g     F .text	0000079c __ieee754_rem_pio2
0801f37c g     F .text	00000090 alt_find_dev
0800fc58 g     F .text	00000138 memcpy
0800663c g     F .text	00000f38 MainMenu
080323bc g     O .rodata	00119410 background
080160b4 g     F .text	0000000c _cleanup_r
0800ee38 g     F .text	000000d0 .hidden __floatsidf
080037ec g     F .text	00000738 vid_round_corner_points
0801f598 g     F .text	00000078 alt_io_redirect
0800a418 g     F .text	00000038 MTC2_ClearEvent
0800dcdc g     F .text	000000e0 .hidden __ltdf2
0801fe9c g       *ABS*	00000000 __DTOR_END__
0800ffc4 g     F .text	00000014 puts
0801f43c g     F .text	0000009c alt_exception_cause_generated_bad_addr
08018884 g     F .text	00000074 __fpclassifyd
08018100 g     F .text	000000a4 __ratio
0801b0c0 g     F .text	00000024 __vfiprintf_internal
0801e4c8 g     F .text	00000088 alt_avalon_sgdma_construct_mem_to_stream_desc_burst
0800a4f0 g     F .text	00000040 QUEUE_IsEmpty
08001acc g     F .text	00000154 vid_scroll_string_init
0801dbe8 g     F .text	0000020c altera_avalon_jtag_uart_read
0800f488 g     F .text	00000014 malloc
0800feb4 g     F .text	0000002c _printf_r
0800ca00 g     F .text	00000008 .hidden __udivsi3
0801cb54 g     F .text	000000a4 isatty
08165fe8 g     O .rodata	000000c8 __mprec_tens
0800a2b8 g     F .text	00000160 MTC2_GetStatus
08016f1c g     F .text	0000000c __locale_charset
0800b060 g     F .text	000004a4 __kernel_cos
0801fa6c g     F .text	0000008c alt_icache_flush
08008a54 g     F .text	0000015c I2C_MultipleRead
0816b9a0 g     O .bss	00000004 __malloc_top_pad
0800a6b8 g     F .text	00000030 QUEUE_Empty
08168d1c g     O .rwdata	00000004 __mb_cur_max
08016f4c g     F .text	0000000c _localeconv_r
08017788 g     F .text	0000003c __i2b
08016858 g     F .text	000004c0 __sfvwrite_r
0800a628 g     F .text	00000090 QUEUE_Pop
0801e5f4 g     F .text	00000058 alt_avalon_sgdma_stop
0800ffd8 g     F .text	00000054 _sbrk_r
08001354 g     F .text	0000013c copy_pix_map_32_to_16
08008390 g     F .text	000000d4 srec_strerror
0801b700 g     F .text	0000005c _read_r
0801f110 g     F .text	00000074 alt_dcache_flush
08168d34 g     O .rwdata	00000004 alt_max_fd
0800028c g     F .text	000002e8 alt_video_display_init
0801b314 g     F .text	000000f0 _fclose_r
08016074 g     F .text	00000030 fflush
0816b99c g     O .bss	00000004 __malloc_max_sbrked_mem
08009040 g     F .text	00000138 I2CL_Read
0800c22c g     F .text	000002c8 __kernel_sin
0800efac g     F .text	00000110 .hidden __extendsfdf2
0816b97c g     O .bss	00000008 temp
0816612c g     O .rwdata	00000bc0 tahomabold_32
0800ca10 g     F .text	0000089c .hidden __adddf3
0800192c g     F .text	00000040 PtSet
08017ea8 g     F .text	0000011c __b2d
0801c058 g     F .text	00000590 .hidden __umoddi3
0801cd34 g     F .text	000000d4 lseek
08168d14 g     O .rwdata	00000004 _global_impure_ptr
08003314 g     F .text	0000013c vid_draw_circle
0801831c g     F .text	00000568 _realloc_r
0816bf40 g       *ABS*	00000000 __bss_end
0801ca14 g     F .text	000000f0 alt_iic_isr_register
0801e05c g     F .text	00000124 alt_avalon_sgdma_do_async_transfer
0801d1f0 g     F .text	00000104 alt_tick
080086e8 g     F .text	00000110 I2C_Write16
0800a174 g     F .text	000000fc MTC2_Init
0801ba98 g     F .text	000005c0 .hidden __udivdi3
0801b418 g     F .text	00000184 _fputwc_r
08165fc0 g     O .rodata	00000028 __mprec_bigtens
0801756c g     F .text	00000104 __s2b
08002fec g     F .text	00000328 vid_draw_sloped_line
0800ef08 g     F .text	000000a4 .hidden __floatunsidf
08017c50 g     F .text	00000060 __mcmp
08016414 g     F .text	00000018 __fp_lock_all
0801c9c8 g     F .text	0000004c alt_ic_irq_enabled
08008610 g     F .text	000000d8 I2C_Write
08003450 g     F .text	0000039c vid_draw_round_corner_box
0801d158 g     F .text	00000098 alt_alarm_stop
0816b9b4 g     O .bss	00000004 alt_irq_active
08000930 g     F .text	00000184 alt_video_display_setup_frame_descriptors
08009790 g     F .text	00000064 ACK_judge_for_read
080000fc g     F .exceptions	000000d0 alt_irq_handler
08167ad0 g     O .rwdata	00000028 alt_dev_null
0800b504 g     F .text	00000d28 __kernel_rem_pio2
080099fc g     F .text	000001e8 sensor_getdata
080094e4 g     F .text	00000088 I2CL_Write16
0801e64c g     F .text	00000064 alt_avalon_sgdma_check_descriptor_status
08008bb0 g     F .text	00000088 i2c_start
0801f184 g     F .text	00000044 alt_dcache_flush_all
08017670 g     F .text	00000068 __hi0bits
0800edb0 g     F .text	00000088 .hidden __fixdfsi
0816b984 g     O .bss	00000008 rh
08168d54 g       *ABS*	00000000 __ram_rwdata_end
08004370 g     F .text	00000378 vid_draw_triangle
08168d2c g     O .rwdata	00000008 alt_dev_list
0801d3ec g     F .text	000000f8 write
0801e78c g     F .text	00000080 alt_avalon_sgdma_enable_desc_poll
080047cc g     F .text	00000130 CropImage16
0816612c g       *ABS*	00000000 __ram_rodata_end
0801c784 g     F .text	000000b0 fstat
0800dcdc g     F .text	000000e0 .hidden __ledf2
08001c20 g     F .text	00000370 vid_scroll_string
08004ecc g     F .text	00000268 vid_draw_sloped_line_cur
080179c0 g     F .text	00000140 __pow5mult
08019df0 g     F .text	000012d0 ___vfiprintf_internal_r
0816b9b0 g     O .bss	00000004 __nlocale_changed
0800ca08 g     F .text	00000008 .hidden __umodsi3
0801e450 g     F .text	00000078 alt_avalon_sgdma_construct_mem_to_stream_desc
0801e550 g     F .text	00000050 alt_avalon_sgdma_register_callback
080046e8 g     F .text	000000e4 CopyImage16
0816bf40 g       *ABS*	00000000 end
0801d724 g     F .text	000000c4 altera_avalon_jtag_uart_init
080001cc g     F .exceptions	00000074 alt_instruction_exception_entry
080022fc g     F .text	000000f0 vid_print_char
0801fe9c g       *ABS*	00000000 __CTOR_LIST__
10000000 g       *ABS*	00000000 __alt_stack_pointer
0801e80c g     F .text	00000060 alt_avalon_sgdma_disable_desc_poll
0801edf0 g     F .text	00000088 alt_avalon_timer_sc_init
0800f254 g     F .text	00000064 .hidden __clzsi2
0801002c g     F .text	000000d8 _snprintf_r
0801ddf4 g     F .text	00000218 altera_avalon_jtag_uart_write
0800a6e8 g     F .text	000000ec cos
0801e290 g     F .text	00000070 alt_avalon_sgdma_construct_mem_to_mem_desc
08003f78 g     F .text	00000054 min3
080019c8 g     F .text	000000c4 vid_draw_line
08016404 g     F .text	00000004 __sfp_lock_acquire
08017138 g     F .text	000000e8 memchr
08012364 g     F .text	00001f50 ___vfprintf_internal_r
080101e8 g     F .text	00000058 _sprintf_r
0801e380 g     F .text	0000005c alt_avalon_sgdma_construct_stream_to_mem_desc
08016568 g     F .text	000002f0 _free_r
08016f28 g     F .text	00000010 __locale_mb_cur_max
0801fcd4 g     F .text	00000194 __call_exitprocs
0816b9ac g     O .bss	00000004 __mlocale_changed
08168d0c g     O .rwdata	00000004 __malloc_sbrk_base
08000240 g     F .text	0000004c _start
0816b9c4 g     O .bss	00000004 _alt_tick_rate
08005134 g     F .text	0000013c vid_draw_circle_cur
0801e6b0 g     F .text	00000054 alt_avalon_sgdma_open
0800a7d4 g     F .text	000000f0 sin
0800a270 g     F .text	00000048 MTC2_UnInit
08017b00 g     F .text	00000150 __lshift
0800a594 g     F .text	00000094 QUEUE_Push
0816b9c8 g     O .bss	00000004 _alt_nticks
08004030 g     F .text	00000100 vid_put_pixel_in_span_map
0801cf18 g     F .text	000000fc read
0801d550 g     F .text	00000070 alt_sys_init
08018ad8 g     F .text	000001cc __ssprint_r
0801fbc0 g     F .text	00000114 __register_exitproc
08000ab4 g     F .text	00000030 alt_video_display_get_descriptor_span
080007c4 g     F .text	00000100 alt_video_display_buffer_is_available
080177c4 g     F .text	000001fc __multiply
08002648 g     F .text	00000258 vid_paint_block
0801da94 g     F .text	00000068 altera_avalon_jtag_uart_close
0816612c g       *ABS*	00000000 __ram_rwdata_start
0801fe9c g       *ABS*	00000000 __ram_rodata_start
0816b9d0 g     O .bss	00000028 __malloc_current_mallinfo
08017fc4 g     F .text	0000013c __d2b
08002c24 g     F .text	000000a0 vid_color_convert24_16
0801d5c0 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0801f9b8 g     F .text	000000b4 alt_get_fd
0801efb8 g     F .text	00000158 alt_busy_sleep
0816b9f8 g     O .bss	00000010 kelvinButton
0801b1fc g     F .text	00000054 _close_r
080060f4 g     F .text	0000024c alpha_blending
0801fb44 g     F .text	0000007c memcmp
0801d680 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0816bf40 g       *ABS*	00000000 __alt_stack_base
0801d6d0 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
080008c4 g     F .text	0000006c alt_video_display_clear_screen
08014394 g     F .text	00000154 __swsetup_r
08008464 g     F .text	000000f8 oc_i2c_init
0800d2ac g     F .text	000008cc .hidden __divdf3
080162c4 g     F .text	00000118 __sfp
08018218 g     F .text	00000078 __copybits
0816722c g     O .rwdata	00000408 __malloc_av_
08016410 g     F .text	00000004 __sinit_lock_release
08008c38 g     F .text	00000074 i2c_stop
0800ddbc g     F .text	00000724 .hidden __muldf3
080188f8 g     F .text	00000054 __sread
0801f8a4 g     F .text	00000114 alt_find_file
0801f218 g     F .text	000000a4 alt_dev_llist_insert
0801ce80 g     F .text	00000024 __malloc_lock
08002d30 g     F .text	000002bc vid_copy_line_to_frame_buffer
0801d0a8 g     F .text	000000b0 sbrk
080103d4 g     F .text	00001f90 ___svfprintf_internal_r
0801e5a0 g     F .text	00000054 alt_avalon_sgdma_start
08016018 g     F .text	0000005c _fflush_r
0801b250 g     F .text	000000c4 _calloc_r
0800a450 g     F .text	00000070 QUEUE_New
0816b97c g       *ABS*	00000000 __bss_start
0800fd90 g     F .text	00000124 memset
080065d4 g     F .text	00000068 main
0816b9c0 g     O .bss	00000004 alt_envp
0816b998 g     O .bss	00000004 __malloc_max_total_mem
0816ba08 g     O .bss	00000418 command_buttons
0801d620 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
08008ddc g     F .text	00000154 i2c_read
08001748 g     F .text	00000160 copy_pix_map_24_to_16
0801b894 g     F .text	0000001c __swbuf
08168d4c g     O .rwdata	00000008 alt_sgdma_list
08004ad0 g     F .text	000000c4 vid_draw_line_cur
08018a2c g     F .text	00000008 __sclose
10000000 g       *ABS*	00000000 __alt_heap_limit
08006340 g     F .text	000001b4 vid_print_char_alpha
0801b404 g     F .text	00000014 fclose
0800f0bc g     F .text	00000198 .hidden __truncdfsf2
08168d08 g     O .rwdata	00000004 cour10_font
080146e8 g     F .text	00001728 _dtoa_r
0800f4b0 g     F .text	000007a8 _malloc_r
0801ba0c g     F .text	00000030 __ascii_wctomb
08168d38 g     O .rwdata	00000004 alt_errno
08001204 g     F .text	00000150 copy_pix_map_32_to_24
08007860 g     F .text	00000128 draw_array
08016d18 g     F .text	000000c4 _fwalk
0800196c g     F .text	0000005c RectSet
08009be4 g     F .text	00000138 Read_Configuration
0800c950 g     F .text	00000054 .hidden __divsi3
08016444 g     F .text	00000124 _malloc_trim_r
0801fe9c g       *ABS*	00000000 __CTOR_END__
08018a34 g     F .text	000000a4 strcmp
08005e7c g     F .text	00000278 read_from_frame
0800066c g     F .text	00000158 alt_video_display_register_written_buffer
0801fe9c g       *ABS*	00000000 __flash_rodata_start
0801fe9c g       *ABS*	00000000 __DTOR_LIST__
080025c0 g     F .text	00000088 vid_get_pixel
0800c8c8 g     F .text	0000001c copysign
0800db78 g     F .text	00000084 .hidden __nedf2
0801d51c g     F .text	00000034 alt_irq_init
0801d014 g     F .text	00000060 alt_release_fd
0800f2b8 g     F .text	0000001c memalign
08010240 g     F .text	0000006c sprintf
08165de4 g     O .rodata	00000100 .hidden __clz_tab
080048fc g     F .text	000001d4 vid_set_pixel_cur
0816b9a8 g     O .bss	00000004 _PathLocale
08007b14 g     F .text	0000013c DRAW_CopyRGBImageToBuffer
0801faf8 g     F .text	00000014 atexit
0816be20 g     O .bss	00000010 fahrenheitButton
0801b1a0 g     F .text	0000005c _write_r
080018a8 g     F .text	00000084 IsPtInRect
08016f58 g     F .text	0000001c setlocale
08001600 g     F .text	00000148 copy_pix_map_24_to_24
08168d18 g     O .rwdata	00000004 _impure_ptr
0816b9b8 g     O .bss	00000004 alt_argc
08015e10 g     F .text	00000208 __sflush_r
0800c6fc g     F .text	000001cc scalbn
0801f31c g     F .text	00000060 _do_dtors
08016f44 g     F .text	00000008 __locale_cjk_lang
08009178 g     F .text	0000018c I2CL_MultipleRead
0816b990 g     O .bss	00000004 isFahrenheit
08000020 g       .exceptions	00000000 alt_irq_entry
0816550c g     O .rodata	00000220 dot
08017e48 g     F .text	00000060 __ulp
0801642c g     F .text	00000018 __fp_unlock_all
08168d24 g     O .rwdata	00000008 alt_fs_list
08009738 g     F .text	00000058 Read32_Data
080020ac g     F .text	00000108 vid_print_string
08007574 g     F .text	00000134 draw_border
08007988 g     F .text	00000074 InitBackGround
0800956c g     F .text	000001cc OC_I2C_Read
08000020 g       *ABS*	00000000 __ram_exceptions_start
08016f74 g     F .text	0000000c localeconv
0801c834 g     F .text	00000050 alt_ic_isr_register
08001490 g     F .text	00000170 copy_pix_map_24_to_32
08168d54 g       *ABS*	00000000 _edata
0816bf40 g       *ABS*	00000000 _end
08003f24 g     F .text	00000054 max3
08000ae4 g     F .text	000001fc alt_video_display_allocate_buffers
08000240 g       *ABS*	00000000 __ram_exceptions_end
0816b994 g     O .bss	00000004 isKelvin
0801dafc g     F .text	000000ec altera_avalon_jtag_uart_ioctl
080076a8 g     F .text	0000010c DrawImage
0801c924 g     F .text	000000a4 alt_ic_irq_disable
08002bd8 g     F .text	0000004c vid_merge_colors
08007c50 g     F .text	000004fc srec_decode
0801e704 g     F .text	00000088 alt_avalon_sgdma_construct_descriptor
08018954 g     F .text	0000007c __swrite
08168d10 g     O .rwdata	00000004 __malloc_trim_threshold
08016f38 g     F .text	0000000c __locale_msgcharset
0801fb0c g     F .text	00000038 exit
08016ddc g     F .text	000000c4 _fwalk_reent
08017cb0 g     F .text	00000198 __mdiff
0800c9a4 g     F .text	0000005c .hidden __modsi3
0800f2d4 g     F .text	000001b4 _memalign_r
10000000 g       *ABS*	00000000 __alt_data_end
08000020 g     F .exceptions	00000000 alt_exception
08016408 g     F .text	00000004 __sfp_lock_release
0800a4c0 g     F .text	00000030 QUEUE_Delete
08009d1c g     F .text	0000009c Write_Configuration
080023ec g     F .text	000001d4 vid_set_pixel
08005270 g     F .text	00000738 vid_round_corner_points_cur
080010c0 g     F .text	0000003c free_gimp_bmp_data
0801fe68 g     F .text	00000034 _exit
0801ee78 g     F .text	00000140 alt_alarm_start
08001a8c g     F .text	00000040 vid_scroll_string_quit
08016f80 g     F .text	000001b8 __smakebuf_r
0801033c g     F .text	00000098 strlen
0801f72c g     F .text	00000158 open
0800dbfc g     F .text	000000e0 .hidden __gedf2
08168d20 g     O .rwdata	00000004 __wctomb
08019dd8 g     F .text	00000018 __sprint_r
0801f40c g     F .text	00000030 alt_icache_flush_all
0814b7cc g     O .rodata	00019d40 bright
08168d3c g     O .rwdata	00000004 alt_priority_mask
0801c884 g     F .text	000000a0 alt_ic_irq_enable
080142b4 g     F .text	00000024 __vfprintf_internal
0801ba3c g     F .text	0000005c _wctomb_r
0801e300 g     F .text	00000080 alt_avalon_sgdma_construct_mem_to_mem_desc_burst
0800e4e0 g     F .text	000008d0 .hidden __subdf3
08004130 g     F .text	00000240 vid_bres_scan_edges
080176d8 g     F .text	000000b0 __lo0bits
08168d44 g     O .rwdata	00000008 alt_alarm_list
08003fcc g     F .text	00000064 max_diff3
0801f2bc g     F .text	00000060 _do_ctors
08008f30 g     F .text	00000110 I2CL_Write
0816be30 g     O .bss	00000010 celsiusButton
08005d4c g     F .text	00000130 merge_color_channels
0801b94c g     F .text	000000c0 wcrtomb
0801c638 g     F .text	000000d0 close
0801cc60 g     F .text	00000084 alt_load
0801ecd8 g     F .text	000000a4 alt_avalon_sgdma_init
0801b59c g     F .text	0000005c fputwc
0800f49c g     F .text	00000014 free
0801640c g     F .text	00000004 __sinit_lock_acquire
0801744c g     F .text	00000120 __multadd
08017424 g     F .text	00000028 _Bfree



Disassembly of section .entry:

08000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 8000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 8000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 8000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 800000c:	00bffd16 	blt	zero,r2,8000004 <__alt_data_end+0xf8000004>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 8000010:	00420034 	movhi	at,2048
    ori r1, r1, %lo(_start)
 8000014:	08409014 	ori	at,at,576
    jmp r1
 8000018:	0800683a 	jmp	at
 800001c:	00000000 	call	0 <__reset-0x8000000>

Disassembly of section .exceptions:

08000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 8000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 8000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 8000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 800002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 8000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 8000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 8000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 800003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 8000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 8000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 8000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 800004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 8000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 8000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 8000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 800005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 8000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 8000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 8000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 800006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 8000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 8000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 8000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 800007c:	10000326 	beq	r2,zero,800008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 8000080:	20000226 	beq	r4,zero,800008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 8000084:	80000fc0 	call	80000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 8000088:	00000706 	br	80000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 800008c:	df401215 	stw	ea,72(sp)
        ldhu.n  r2, 0(r4)
        ldhu.n  r3, 2(r4)
        slli.n  r3, r3, 16
        or.n    r2, r2, r3 /* Instruction that caused exception */
#else
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 8000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 8000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 8000098:	80001cc0 	call	80001cc <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 800009c:	1000021e 	bne	r2,zero,80000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 80000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 80000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 80000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 80000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 80000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 80000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 80000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 80000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 80000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 80000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 80000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 80000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 80000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 80000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 80000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 80000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 80000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 80000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 80000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 80000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 80000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 80000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 80000f8:	ef80083a 	eret

080000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 80000fc:	defff904 	addi	sp,sp,-28
 8000100:	dfc00615 	stw	ra,24(sp)
 8000104:	df000515 	stw	fp,20(sp)
 8000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 800010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 8000110:	0005313a 	rdctl	r2,ipending
 8000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 8000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 800011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 8000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 8000124:	00800044 	movi	r2,1
 8000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 800012c:	e0fffb17 	ldw	r3,-20(fp)
 8000130:	e0bffc17 	ldw	r2,-16(fp)
 8000134:	1884703a 	and	r2,r3,r2
 8000138:	10001426 	beq	r2,zero,800018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 800013c:	008205f4 	movhi	r2,2071
 8000140:	10af9004 	addi	r2,r2,-16832
 8000144:	e0fffd17 	ldw	r3,-12(fp)
 8000148:	180690fa 	slli	r3,r3,3
 800014c:	10c5883a 	add	r2,r2,r3
 8000150:	10c00017 	ldw	r3,0(r2)
 8000154:	008205f4 	movhi	r2,2071
 8000158:	10af9004 	addi	r2,r2,-16832
 800015c:	e13ffd17 	ldw	r4,-12(fp)
 8000160:	200890fa 	slli	r4,r4,3
 8000164:	21000104 	addi	r4,r4,4
 8000168:	1105883a 	add	r2,r2,r4
 800016c:	10800017 	ldw	r2,0(r2)
 8000170:	1009883a 	mov	r4,r2
 8000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 8000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 800017c:	0005313a 	rdctl	r2,ipending
 8000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 8000184:	e0bfff17 	ldw	r2,-4(fp)
 8000188:	00000706 	br	80001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 800018c:	e0bffc17 	ldw	r2,-16(fp)
 8000190:	1085883a 	add	r2,r2,r2
 8000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 8000198:	e0bffd17 	ldw	r2,-12(fp)
 800019c:	10800044 	addi	r2,r2,1
 80001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 80001a4:	003fe106 	br	800012c <__alt_data_end+0xf800012c>

    active = alt_irq_pending ();
 80001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 80001ac:	e0bffb17 	ldw	r2,-20(fp)
 80001b0:	103fdb1e 	bne	r2,zero,8000120 <__alt_data_end+0xf8000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 80001b4:	0001883a 	nop
}
 80001b8:	e037883a 	mov	sp,fp
 80001bc:	dfc00117 	ldw	ra,4(sp)
 80001c0:	df000017 	ldw	fp,0(sp)
 80001c4:	dec00204 	addi	sp,sp,8
 80001c8:	f800283a 	ret

080001cc <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 80001cc:	defffb04 	addi	sp,sp,-20
 80001d0:	dfc00415 	stw	ra,16(sp)
 80001d4:	df000315 	stw	fp,12(sp)
 80001d8:	df000304 	addi	fp,sp,12
 80001dc:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
 80001e0:	000531fa 	rdctl	r2,exception
 80001e4:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
 80001e8:	e0bffd17 	ldw	r2,-12(fp)
 80001ec:	10801f0c 	andi	r2,r2,124
 80001f0:	1004d0ba 	srli	r2,r2,2
 80001f4:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
 80001f8:	0005333a 	rdctl	r2,badaddr
 80001fc:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 8000200:	d0ab3117 	ldw	r2,-21308(gp)
 8000204:	10000726 	beq	r2,zero,8000224 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 8000208:	d0ab3117 	ldw	r2,-21308(gp)
 800020c:	e0fffd17 	ldw	r3,-12(fp)
 8000210:	1809883a 	mov	r4,r3
 8000214:	e17fff17 	ldw	r5,-4(fp)
 8000218:	e1bffe17 	ldw	r6,-8(fp)
 800021c:	103ee83a 	callr	r2
 8000220:	00000206 	br	800022c <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 8000224:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 8000228:	0005883a 	mov	r2,zero
}
 800022c:	e037883a 	mov	sp,fp
 8000230:	dfc00117 	ldw	ra,4(sp)
 8000234:	df000017 	ldw	fp,0(sp)
 8000238:	dec00204 	addi	sp,sp,8
 800023c:	f800283a 	ret

Disassembly of section .text:

08000240 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 8000240:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 8000244:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 8000248:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 800024c:	00bffd16 	blt	zero,r2,8000244 <__alt_data_end+0xf8000244>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 8000250:	06c40034 	movhi	sp,4096
    ori sp, sp, %lo(__alt_stack_pointer)
 8000254:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 8000258:	068205f4 	movhi	gp,2071
    ori gp, gp, %lo(_gp)
 800025c:	d6834214 	ori	gp,gp,3336
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 8000260:	008205b4 	movhi	r2,2070
    ori r2, r2, %lo(__bss_start)
 8000264:	10ae5f14 	ori	r2,r2,47484

    movhi r3, %hi(__bss_end)
 8000268:	00c205b4 	movhi	r3,2070
    ori r3, r3, %lo(__bss_end)
 800026c:	18efd014 	ori	r3,r3,48960

    beq r2, r3, 1f
 8000270:	10c00326 	beq	r2,r3,8000280 <_start+0x40>

0:
    stw zero, (r2)
 8000274:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 8000278:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 800027c:	10fffd36 	bltu	r2,r3,8000274 <__alt_data_end+0xf8000274>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 8000280:	801cc600 	call	801cc60 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 8000284:	801ce080 	call	801ce08 <alt_main>

08000288 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 8000288:	003fff06 	br	8000288 <__alt_data_end+0xf8000288>

0800028c <alt_video_display_init>:
                                           int height,
                                           int color_depth,
                                           int buffer_location,
                                           int descriptor_location,
                                           int num_buffers)
{
 800028c:	defff304 	addi	sp,sp,-52
 8000290:	dfc00c15 	stw	ra,48(sp)
 8000294:	df000b15 	stw	fp,44(sp)
 8000298:	df000b04 	addi	fp,sp,44
 800029c:	e13ffc15 	stw	r4,-16(fp)
 80002a0:	e17ffd15 	stw	r5,-12(fp)
 80002a4:	e1bffe15 	stw	r6,-8(fp)
 80002a8:	e1ffff15 	stw	r7,-4(fp)
  alt_video_display* display;
  unsigned int bytes_per_pixel, bytes_per_frame, descriptors_per_frame, i;
  int result;
  
  // We'll need these values more than once, so let's pre-calculate them. 
  bytes_per_pixel = color_depth >> 3; // same as /8
 80002ac:	e0bfff17 	ldw	r2,-4(fp)
 80002b0:	1005d0fa 	srai	r2,r2,3
 80002b4:	e0bff815 	stw	r2,-32(fp)
  bytes_per_frame = (( width * height ) * bytes_per_pixel );
 80002b8:	e0fffd17 	ldw	r3,-12(fp)
 80002bc:	e0bffe17 	ldw	r2,-8(fp)
 80002c0:	1885383a 	mul	r2,r3,r2
 80002c4:	1007883a 	mov	r3,r2
 80002c8:	e0bff817 	ldw	r2,-32(fp)
 80002cc:	1885383a 	mul	r2,r3,r2
 80002d0:	e0bff915 	stw	r2,-28(fp)
  
  // Calculate the number of descriptors needed for each frame 
  if( bytes_per_frame <= ALT_VIDEO_DISPLAY_BYTES_PER_DESC ) {
 80002d4:	e0bff917 	ldw	r2,-28(fp)
 80002d8:	10bfc068 	cmpgeui	r2,r2,65281
 80002dc:	1000031e 	bne	r2,zero,80002ec <alt_video_display_init+0x60>
    descriptors_per_frame = 1;
 80002e0:	00800044 	movi	r2,1
 80002e4:	e0bff615 	stw	r2,-40(fp)
 80002e8:	00001106 	br	8000330 <alt_video_display_init+0xa4>
  }
  else if(( bytes_per_frame % ALT_VIDEO_DISPLAY_BYTES_PER_DESC) == 0) {
 80002ec:	e0bff917 	ldw	r2,-28(fp)
 80002f0:	1009883a 	mov	r4,r2
 80002f4:	017fc014 	movui	r5,65280
 80002f8:	800ca080 	call	800ca08 <__umodsi3>
 80002fc:	1000061e 	bne	r2,zero,8000318 <alt_video_display_init+0x8c>
    descriptors_per_frame = bytes_per_frame / ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
 8000300:	e0bff917 	ldw	r2,-28(fp)
 8000304:	1009883a 	mov	r4,r2
 8000308:	017fc014 	movui	r5,65280
 800030c:	800ca000 	call	800ca00 <__udivsi3>
 8000310:	e0bff615 	stw	r2,-40(fp)
 8000314:	00000606 	br	8000330 <alt_video_display_init+0xa4>
  }
  else { 
    descriptors_per_frame = 
      ( bytes_per_frame / ALT_VIDEO_DISPLAY_BYTES_PER_DESC ) + 1;
 8000318:	e0bff917 	ldw	r2,-28(fp)
 800031c:	1009883a 	mov	r4,r2
 8000320:	017fc014 	movui	r5,65280
 8000324:	800ca000 	call	800ca00 <__udivsi3>
  }
  else if(( bytes_per_frame % ALT_VIDEO_DISPLAY_BYTES_PER_DESC) == 0) {
    descriptors_per_frame = bytes_per_frame / ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
  }
  else { 
    descriptors_per_frame = 
 8000328:	10800044 	addi	r2,r2,1
 800032c:	e0bff615 	stw	r2,-40(fp)
      ( bytes_per_frame / ALT_VIDEO_DISPLAY_BYTES_PER_DESC ) + 1;
  }
  
  // Check for too many frame buffers
  if( num_buffers > ALT_VIDEO_DISPLAY_MAX_BUFFERS ) {
 8000330:	e0800417 	ldw	r2,16(fp)
 8000334:	10800150 	cmplti	r2,r2,5
 8000338:	1000021e 	bne	r2,zero,8000344 <alt_video_display_init+0xb8>
  	num_buffers = ALT_VIDEO_DISPLAY_MAX_BUFFERS;
 800033c:	00800104 	movi	r2,4
 8000340:	e0800415 	stw	r2,16(fp)
  }
  
  // Allocate our display struct 
  display = (alt_video_display*) malloc(sizeof(alt_video_display));
 8000344:	01000e04 	movi	r4,56
 8000348:	800f4880 	call	800f488 <malloc>
 800034c:	e0bffa15 	stw	r2,-24(fp)
  if(!display) {
 8000350:	e0bffa17 	ldw	r2,-24(fp)
 8000354:	1000021e 	bne	r2,zero,8000360 <alt_video_display_init+0xd4>
    return NULL;
 8000358:	0005883a 	mov	r2,zero
 800035c:	00008006 	br	8000560 <alt_video_display_init+0x2d4>
  }
  
  // Fill out the display structure 
  display->width = width;
 8000360:	e0bffa17 	ldw	r2,-24(fp)
 8000364:	e0fffd17 	ldw	r3,-12(fp)
 8000368:	10c00715 	stw	r3,28(r2)
  display->height = height;
 800036c:	e0bffa17 	ldw	r2,-24(fp)
 8000370:	e0fffe17 	ldw	r3,-8(fp)
 8000374:	10c00815 	stw	r3,32(r2)
  display->color_depth = color_depth;
 8000378:	e0bffa17 	ldw	r2,-24(fp)
 800037c:	e0ffff17 	ldw	r3,-4(fp)
 8000380:	10c00915 	stw	r3,36(r2)
  display->num_frame_buffers = num_buffers;
 8000384:	e0bffa17 	ldw	r2,-24(fp)
 8000388:	e0c00417 	ldw	r3,16(fp)
 800038c:	10c00c15 	stw	r3,48(r2)
  display->bytes_per_frame = bytes_per_frame;
 8000390:	e0fff917 	ldw	r3,-28(fp)
 8000394:	e0bffa17 	ldw	r2,-24(fp)
 8000398:	10c00b15 	stw	r3,44(r2)
  display->bytes_per_pixel = bytes_per_pixel;
 800039c:	e0fff817 	ldw	r3,-32(fp)
 80003a0:	e0bffa17 	ldw	r2,-24(fp)
 80003a4:	10c00a15 	stw	r3,40(r2)
  display->buffer_being_displayed = 0;
 80003a8:	e0bffa17 	ldw	r2,-24(fp)
 80003ac:	10000515 	stw	zero,20(r2)
  display->buffer_being_written = (num_buffers > 1) ? 1:0;
 80003b0:	e0800417 	ldw	r2,16(fp)
 80003b4:	10800088 	cmpgei	r2,r2,2
 80003b8:	10c03fcc 	andi	r3,r2,255
 80003bc:	e0bffa17 	ldw	r2,-24(fp)
 80003c0:	10c00615 	stw	r3,24(r2)
  display->descriptors_per_frame = descriptors_per_frame;
 80003c4:	e0fff617 	ldw	r3,-40(fp)
 80003c8:	e0bffa17 	ldw	r2,-24(fp)
 80003cc:	10c00d15 	stw	r3,52(r2)
  
  // Allocate our frame and descriptor buffers 
  if(alt_video_display_allocate_buffers( display,
 80003d0:	e0fff917 	ldw	r3,-28(fp)
 80003d4:	e0800417 	ldw	r2,16(fp)
 80003d8:	d8800015 	stw	r2,0(sp)
 80003dc:	e13ffa17 	ldw	r4,-24(fp)
 80003e0:	180b883a 	mov	r5,r3
 80003e4:	e1800217 	ldw	r6,8(fp)
 80003e8:	e1c00317 	ldw	r7,12(fp)
 80003ec:	8000ae40 	call	8000ae4 <alt_video_display_allocate_buffers>
 80003f0:	10000226 	beq	r2,zero,80003fc <alt_video_display_init+0x170>
                                         bytes_per_frame,  
                                         buffer_location, 
                                         descriptor_location, 
                                         num_buffers ) ) {
    return NULL;
 80003f4:	0005883a 	mov	r2,zero
 80003f8:	00005906 	br	8000560 <alt_video_display_init+0x2d4>
  }  
  
  // Now construct SGDMA descriptors for each frame buffer 
  for( i = 0; i < num_buffers; i++ ) {
 80003fc:	e03ff715 	stw	zero,-36(fp)
 8000400:	00001d06 	br	8000478 <alt_video_display_init+0x1ec>
    alt_video_display_setup_frame_descriptors(
 8000404:	e0fffa17 	ldw	r3,-24(fp)
 8000408:	e0bff717 	ldw	r2,-36(fp)
 800040c:	10800044 	addi	r2,r2,1
 8000410:	1085883a 	add	r2,r2,r2
 8000414:	1085883a 	add	r2,r2,r2
 8000418:	1885883a 	add	r2,r3,r2
 800041c:	11400017 	ldw	r5,0(r2)
      display,                                    // our display
      display->buffer_ptrs[i],                    // frame 
      display->buffer_ptrs[i]->buffer,            // frame location
 8000420:	e0fffa17 	ldw	r3,-24(fp)
 8000424:	e0bff717 	ldw	r2,-36(fp)
 8000428:	10800044 	addi	r2,r2,1
 800042c:	1085883a 	add	r2,r2,r2
 8000430:	1085883a 	add	r2,r2,r2
 8000434:	1885883a 	add	r2,r3,r2
 8000438:	10800017 	ldw	r2,0(r2)
 800043c:	11800117 	ldw	r6,4(r2)
      display->buffer_ptrs[i]->desc_base );       // descriptor memory 
 8000440:	e0fffa17 	ldw	r3,-24(fp)
 8000444:	e0bff717 	ldw	r2,-36(fp)
 8000448:	10800044 	addi	r2,r2,1
 800044c:	1085883a 	add	r2,r2,r2
 8000450:	1085883a 	add	r2,r2,r2
 8000454:	1885883a 	add	r2,r3,r2
 8000458:	10800017 	ldw	r2,0(r2)
    return NULL;
  }  
  
  // Now construct SGDMA descriptors for each frame buffer 
  for( i = 0; i < num_buffers; i++ ) {
    alt_video_display_setup_frame_descriptors(
 800045c:	10800017 	ldw	r2,0(r2)
 8000460:	e13ffa17 	ldw	r4,-24(fp)
 8000464:	100f883a 	mov	r7,r2
 8000468:	80009300 	call	8000930 <alt_video_display_setup_frame_descriptors>
                                         num_buffers ) ) {
    return NULL;
  }  
  
  // Now construct SGDMA descriptors for each frame buffer 
  for( i = 0; i < num_buffers; i++ ) {
 800046c:	e0bff717 	ldw	r2,-36(fp)
 8000470:	10800044 	addi	r2,r2,1
 8000474:	e0bff715 	stw	r2,-36(fp)
 8000478:	e0800417 	ldw	r2,16(fp)
 800047c:	e0fff717 	ldw	r3,-36(fp)
 8000480:	18bfe036 	bltu	r3,r2,8000404 <__alt_data_end+0xf8000404>
      display->buffer_ptrs[i]->buffer,            // frame location
      display->buffer_ptrs[i]->desc_base );       // descriptor memory 
  }

  // Clear all frame buffers to black 
  for( i = 0; i < num_buffers; i++ ) {
 8000484:	e03ff715 	stw	zero,-36(fp)
 8000488:	00001106 	br	80004d0 <alt_video_display_init+0x244>
    memset( (void*)(display->buffer_ptrs[i]->buffer), 
 800048c:	e0fffa17 	ldw	r3,-24(fp)
 8000490:	e0bff717 	ldw	r2,-36(fp)
 8000494:	10800044 	addi	r2,r2,1
 8000498:	1085883a 	add	r2,r2,r2
 800049c:	1085883a 	add	r2,r2,r2
 80004a0:	1885883a 	add	r2,r3,r2
 80004a4:	10800017 	ldw	r2,0(r2)
 80004a8:	10c00117 	ldw	r3,4(r2)
      ALT_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame );
 80004ac:	e0bffa17 	ldw	r2,-24(fp)
 80004b0:	10800b17 	ldw	r2,44(r2)
      display->buffer_ptrs[i]->desc_base );       // descriptor memory 
  }

  // Clear all frame buffers to black 
  for( i = 0; i < num_buffers; i++ ) {
    memset( (void*)(display->buffer_ptrs[i]->buffer), 
 80004b4:	1809883a 	mov	r4,r3
 80004b8:	000b883a 	mov	r5,zero
 80004bc:	100d883a 	mov	r6,r2
 80004c0:	800fd900 	call	800fd90 <memset>
      display->buffer_ptrs[i]->buffer,            // frame location
      display->buffer_ptrs[i]->desc_base );       // descriptor memory 
  }

  // Clear all frame buffers to black 
  for( i = 0; i < num_buffers; i++ ) {
 80004c4:	e0bff717 	ldw	r2,-36(fp)
 80004c8:	10800044 	addi	r2,r2,1
 80004cc:	e0bff715 	stw	r2,-36(fp)
 80004d0:	e0800417 	ldw	r2,16(fp)
 80004d4:	e0fff717 	ldw	r3,-36(fp)
 80004d8:	18bfec36 	bltu	r3,r2,800048c <__alt_data_end+0xf800048c>
    memset( (void*)(display->buffer_ptrs[i]->buffer), 
      ALT_VIDEO_DISPLAY_BLACK_8, display->bytes_per_frame );
  }
  
  // Open the SGDMA 
  display->sgdma = alt_avalon_sgdma_open(sgdma_name);
 80004dc:	e13ffc17 	ldw	r4,-16(fp)
 80004e0:	801e6b00 	call	801e6b0 <alt_avalon_sgdma_open>
 80004e4:	1007883a 	mov	r3,r2
 80004e8:	e0bffa17 	ldw	r2,-24(fp)
 80004ec:	10c00015 	stw	r3,0(r2)
  if(!display->sgdma) {
 80004f0:	e0bffa17 	ldw	r2,-24(fp)
 80004f4:	10800017 	ldw	r2,0(r2)
 80004f8:	1000021e 	bne	r2,zero,8000504 <alt_video_display_init+0x278>
    return NULL;
 80004fc:	0005883a 	mov	r2,zero
 8000500:	00001706 	br	8000560 <alt_video_display_init+0x2d4>
  }
  
  /* Enable SGDMA "parking" mode */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(LCD_SGDMA_BASE, 
 8000504:	00c000b4 	movhi	r3,2
 8000508:	00844034 	movhi	r2,4352
 800050c:	10840404 	addi	r2,r2,4112
 8000510:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
  
  /* Now start the SGDMA */
  result = alt_avalon_sgdma_do_async_transfer(
 8000514:	e0bffa17 	ldw	r2,-24(fp)
 8000518:	11000017 	ldw	r4,0(r2)
    display->sgdma, 
    display->buffer_ptrs[display->buffer_being_displayed]->desc_base);
 800051c:	e0bffa17 	ldw	r2,-24(fp)
 8000520:	10800517 	ldw	r2,20(r2)
 8000524:	e0fffa17 	ldw	r3,-24(fp)
 8000528:	10800044 	addi	r2,r2,1
 800052c:	1085883a 	add	r2,r2,r2
 8000530:	1085883a 	add	r2,r2,r2
 8000534:	1885883a 	add	r2,r3,r2
 8000538:	10800017 	ldw	r2,0(r2)
  /* Enable SGDMA "parking" mode */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(LCD_SGDMA_BASE, 
    ALTERA_AVALON_SGDMA_CONTROL_PARK_MSK);
  
  /* Now start the SGDMA */
  result = alt_avalon_sgdma_do_async_transfer(
 800053c:	10800017 	ldw	r2,0(r2)
 8000540:	100b883a 	mov	r5,r2
 8000544:	801e05c0 	call	801e05c <alt_avalon_sgdma_do_async_transfer>
 8000548:	e0bffb15 	stw	r2,-20(fp)
    display->sgdma, 
    display->buffer_ptrs[display->buffer_being_displayed]->desc_base);
  	
  if(result) {
 800054c:	e0bffb17 	ldw	r2,-20(fp)
 8000550:	10000226 	beq	r2,zero,800055c <alt_video_display_init+0x2d0>
    return NULL;
 8000554:	0005883a 	mov	r2,zero
 8000558:	00000106 	br	8000560 <alt_video_display_init+0x2d4>
  }
  
  return ( display );
 800055c:	e0bffa17 	ldw	r2,-24(fp)
}
 8000560:	e037883a 	mov	sp,fp
 8000564:	dfc00117 	ldw	ra,4(sp)
 8000568:	df000017 	ldw	fp,0(sp)
 800056c:	dec00204 	addi	sp,sp,8
 8000570:	f800283a 	ret

08000574 <alt_video_display_close>:
*
******************************************************************/
void alt_video_display_close( alt_video_display* display, 
                              int buffer_location, 
                              int descriptor_location )
{
 8000574:	defffa04 	addi	sp,sp,-24
 8000578:	dfc00515 	stw	ra,20(sp)
 800057c:	df000415 	stw	fp,16(sp)
 8000580:	df000404 	addi	fp,sp,16
 8000584:	e13ffd15 	stw	r4,-12(fp)
 8000588:	e17ffe15 	stw	r5,-8(fp)
 800058c:	e1bfff15 	stw	r6,-4(fp)
  int i;
  
  // Stop the sgdma
  alt_avalon_sgdma_stop( display->sgdma );  
 8000590:	e0bffd17 	ldw	r2,-12(fp)
 8000594:	10800017 	ldw	r2,0(r2)
 8000598:	1009883a 	mov	r4,r2
 800059c:	801e5f40 	call	801e5f4 <alt_avalon_sgdma_stop>

  // Free our frame buffers and descriptor buffers
  for( i = 0; i < display->num_frame_buffers; i++ ) {
 80005a0:	e03ffc15 	stw	zero,-16(fp)
 80005a4:	00002606 	br	8000640 <alt_video_display_close+0xcc>
    // Free the frame buffer if it was on the heap
    if( buffer_location == ALT_VIDEO_DISPLAY_USE_HEAP )
 80005a8:	e0bffe17 	ldw	r2,-8(fp)
 80005ac:	10bfffd8 	cmpnei	r2,r2,-1
 80005b0:	10000a1e 	bne	r2,zero,80005dc <alt_video_display_close+0x68>
      free( display->buffer_ptrs[i]->buffer );
 80005b4:	e0fffd17 	ldw	r3,-12(fp)
 80005b8:	e0bffc17 	ldw	r2,-16(fp)
 80005bc:	10800044 	addi	r2,r2,1
 80005c0:	1085883a 	add	r2,r2,r2
 80005c4:	1085883a 	add	r2,r2,r2
 80005c8:	1885883a 	add	r2,r3,r2
 80005cc:	10800017 	ldw	r2,0(r2)
 80005d0:	10800117 	ldw	r2,4(r2)
 80005d4:	1009883a 	mov	r4,r2
 80005d8:	800f49c0 	call	800f49c <free>
    
    // Free the descriptor buffer it was on the heap
    if( descriptor_location == ALT_VIDEO_DISPLAY_USE_HEAP )
 80005dc:	e0bfff17 	ldw	r2,-4(fp)
 80005e0:	10bfffd8 	cmpnei	r2,r2,-1
 80005e4:	10000a1e 	bne	r2,zero,8000610 <alt_video_display_close+0x9c>
      free( display->buffer_ptrs[i]->desc_base );
 80005e8:	e0fffd17 	ldw	r3,-12(fp)
 80005ec:	e0bffc17 	ldw	r2,-16(fp)
 80005f0:	10800044 	addi	r2,r2,1
 80005f4:	1085883a 	add	r2,r2,r2
 80005f8:	1085883a 	add	r2,r2,r2
 80005fc:	1885883a 	add	r2,r3,r2
 8000600:	10800017 	ldw	r2,0(r2)
 8000604:	10800017 	ldw	r2,0(r2)
 8000608:	1009883a 	mov	r4,r2
 800060c:	800f49c0 	call	800f49c <free>

    // Free the buffer pointer struct
    free( display->buffer_ptrs[i] );
 8000610:	e0fffd17 	ldw	r3,-12(fp)
 8000614:	e0bffc17 	ldw	r2,-16(fp)
 8000618:	10800044 	addi	r2,r2,1
 800061c:	1085883a 	add	r2,r2,r2
 8000620:	1085883a 	add	r2,r2,r2
 8000624:	1885883a 	add	r2,r3,r2
 8000628:	10800017 	ldw	r2,0(r2)
 800062c:	1009883a 	mov	r4,r2
 8000630:	800f49c0 	call	800f49c <free>
  
  // Stop the sgdma
  alt_avalon_sgdma_stop( display->sgdma );  

  // Free our frame buffers and descriptor buffers
  for( i = 0; i < display->num_frame_buffers; i++ ) {
 8000634:	e0bffc17 	ldw	r2,-16(fp)
 8000638:	10800044 	addi	r2,r2,1
 800063c:	e0bffc15 	stw	r2,-16(fp)
 8000640:	e0bffd17 	ldw	r2,-12(fp)
 8000644:	10800c17 	ldw	r2,48(r2)
 8000648:	e0fffc17 	ldw	r3,-16(fp)
 800064c:	18bfd616 	blt	r3,r2,80005a8 <__alt_data_end+0xf80005a8>
    // Free the buffer pointer struct
    free( display->buffer_ptrs[i] );
  }

  // Finally free our display struct
  free( display );
 8000650:	e13ffd17 	ldw	r4,-12(fp)
 8000654:	800f49c0 	call	800f49c <free>
}
 8000658:	e037883a 	mov	sp,fp
 800065c:	dfc00117 	ldw	ra,4(sp)
 8000660:	df000017 	ldw	fp,0(sp)
 8000664:	dec00204 	addi	sp,sp,8
 8000668:	f800283a 	ret

0800066c <alt_video_display_register_written_buffer>:
*                 - It would be a good idea to wait for buffer_being_displayed 
*                   to increment before writing to buffer_being_written.
*
******************************************************************/
int alt_video_display_register_written_buffer( alt_video_display* display )
{
 800066c:	defff804 	addi	sp,sp,-32
 8000670:	dfc00715 	stw	ra,28(sp)
 8000674:	df000615 	stw	fp,24(sp)
 8000678:	df000604 	addi	fp,sp,24
 800067c:	e13fff15 	stw	r4,-4(fp)
   *  - Set the new frame's head-descriptor transfer count to 0
   *  - Ensure that the new frame descriptor chain loops (tail points to head)
   *  - Point the previous frame at the new one to "break" its loop
   */
  desc_being_registered_head = 
    display->buffer_ptrs[display->buffer_being_written]->desc_base;
 8000680:	e0bfff17 	ldw	r2,-4(fp)
 8000684:	10800617 	ldw	r2,24(r2)
 8000688:	e0ffff17 	ldw	r3,-4(fp)
 800068c:	10800044 	addi	r2,r2,1
 8000690:	1085883a 	add	r2,r2,r2
 8000694:	1085883a 	add	r2,r2,r2
 8000698:	1885883a 	add	r2,r3,r2
 800069c:	10800017 	ldw	r2,0(r2)
   * Prepare relevant SGDMA descriptors in the frame being registered:
   *  - Set the new frame's head-descriptor transfer count to 0
   *  - Ensure that the new frame descriptor chain loops (tail points to head)
   *  - Point the previous frame at the new one to "break" its loop
   */
  desc_being_registered_head = 
 80006a0:	10800017 	ldw	r2,0(r2)
 80006a4:	e0bffc15 	stw	r2,-16(fp)
    display->buffer_ptrs[display->buffer_being_written]->desc_base;
  desc_being_registered_tail = desc_being_registered_head + 
    (display->descriptors_per_frame - 1);
 80006a8:	e0bfff17 	ldw	r2,-4(fp)
 80006ac:	10800d17 	ldw	r2,52(r2)
   *  - Ensure that the new frame descriptor chain loops (tail points to head)
   *  - Point the previous frame at the new one to "break" its loop
   */
  desc_being_registered_head = 
    display->buffer_ptrs[display->buffer_being_written]->desc_base;
  desc_being_registered_tail = desc_being_registered_head + 
 80006b0:	1004917a 	slli	r2,r2,5
 80006b4:	10bff804 	addi	r2,r2,-32
 80006b8:	e0fffc17 	ldw	r3,-16(fp)
 80006bc:	1885883a 	add	r2,r3,r2
 80006c0:	e0bffd15 	stw	r2,-12(fp)
    (display->descriptors_per_frame - 1);
      
  IOWR_16DIRECT(
 80006c4:	e0bffc17 	ldw	r2,-16(fp)
 80006c8:	10800704 	addi	r2,r2,28
 80006cc:	0007883a 	mov	r3,zero
 80006d0:	10c0002d 	sthio	r3,0(r2)
    (alt_u32)(&desc_being_registered_head->actual_bytes_transferred), 
    0, (alt_u16) 0x0);
  IOWR_32DIRECT((alt_u32)(&desc_being_registered_tail->next), 0, 
 80006d4:	e0bffd17 	ldw	r2,-12(fp)
 80006d8:	10800404 	addi	r2,r2,16
 80006dc:	e0fffc17 	ldw	r3,-16(fp)
 80006e0:	10c00035 	stwio	r3,0(r2)
    (alt_u32)(desc_being_registered_head)); 
 
  /* Find the tail of the descriptor chain in the last frame registered */
  prev_frame_index = (display->buffer_being_written - 1);
 80006e4:	e0bfff17 	ldw	r2,-4(fp)
 80006e8:	10800617 	ldw	r2,24(r2)
 80006ec:	10bfffc4 	addi	r2,r2,-1
 80006f0:	e0bffb15 	stw	r2,-20(fp)

  if(prev_frame_index < 0) {
 80006f4:	e0bffb17 	ldw	r2,-20(fp)
 80006f8:	1000040e 	bge	r2,zero,800070c <alt_video_display_register_written_buffer+0xa0>
    prev_frame_index = (display->num_frame_buffers - 1);
 80006fc:	e0bfff17 	ldw	r2,-4(fp)
 8000700:	10800c17 	ldw	r2,48(r2)
 8000704:	10bfffc4 	addi	r2,r2,-1
 8000708:	e0bffb15 	stw	r2,-20(fp)
  }

  desc_prev_frame_tail = display->buffer_ptrs[prev_frame_index]->desc_base;
 800070c:	e0ffff17 	ldw	r3,-4(fp)
 8000710:	e0bffb17 	ldw	r2,-20(fp)
 8000714:	10800044 	addi	r2,r2,1
 8000718:	1085883a 	add	r2,r2,r2
 800071c:	1085883a 	add	r2,r2,r2
 8000720:	1885883a 	add	r2,r3,r2
 8000724:	10800017 	ldw	r2,0(r2)
 8000728:	10800017 	ldw	r2,0(r2)
 800072c:	e0bffe15 	stw	r2,-8(fp)
  desc_prev_frame_tail += (display->descriptors_per_frame - 1);
 8000730:	e0bfff17 	ldw	r2,-4(fp)
 8000734:	10800d17 	ldw	r2,52(r2)
 8000738:	1004917a 	slli	r2,r2,5
 800073c:	10bff804 	addi	r2,r2,-32
 8000740:	e0fffe17 	ldw	r3,-8(fp)
 8000744:	1885883a 	add	r2,r3,r2
 8000748:	e0bffe15 	stw	r2,-8(fp)
       
  IOWR_32DIRECT((alt_u32)(&desc_prev_frame_tail->next), 0, 
 800074c:	e0bffe17 	ldw	r2,-8(fp)
 8000750:	10800404 	addi	r2,r2,16
 8000754:	e0fffc17 	ldw	r3,-16(fp)
 8000758:	10c00035 	stwio	r3,0(r2)
   * Update frame_being_written index. Note: The new index may *not* be 
   * safe to write to; alt_video_display_buffer_is_available() must be 
   * called to verify this).
   */
  display->buffer_being_written = 
    ( display->buffer_being_written + 1 ) % display->num_frame_buffers;
 800075c:	e0bfff17 	ldw	r2,-4(fp)
 8000760:	10800617 	ldw	r2,24(r2)
 8000764:	10c00044 	addi	r3,r2,1
 8000768:	e0bfff17 	ldw	r2,-4(fp)
 800076c:	10800c17 	ldw	r2,48(r2)
 8000770:	1809883a 	mov	r4,r3
 8000774:	100b883a 	mov	r5,r2
 8000778:	800c9a40 	call	800c9a4 <__modsi3>
 800077c:	1007883a 	mov	r3,r2
  /* 
   * Update frame_being_written index. Note: The new index may *not* be 
   * safe to write to; alt_video_display_buffer_is_available() must be 
   * called to verify this).
   */
  display->buffer_being_written = 
 8000780:	e0bfff17 	ldw	r2,-4(fp)
 8000784:	10c00615 	stw	r3,24(r2)
    ( display->buffer_being_written + 1 ) % display->num_frame_buffers;

  if( display->buffer_being_written == display->buffer_being_displayed ) {
 8000788:	e0bfff17 	ldw	r2,-4(fp)
 800078c:	10c00617 	ldw	r3,24(r2)
 8000790:	e0bfff17 	ldw	r2,-4(fp)
 8000794:	10800517 	ldw	r2,20(r2)
 8000798:	1880031e 	bne	r3,r2,80007a8 <alt_video_display_register_written_buffer+0x13c>
    ret_code = 1;
 800079c:	00800044 	movi	r2,1
 80007a0:	e0bffa15 	stw	r2,-24(fp)
 80007a4:	00000106 	br	80007ac <alt_video_display_register_written_buffer+0x140>
  }
  else {
    ret_code = 0;
 80007a8:	e03ffa15 	stw	zero,-24(fp)
  }
  
  return(ret_code);
 80007ac:	e0bffa17 	ldw	r2,-24(fp)
}
 80007b0:	e037883a 	mov	sp,fp
 80007b4:	dfc00117 	ldw	ra,4(sp)
 80007b8:	df000017 	ldw	fp,0(sp)
 80007bc:	dec00204 	addi	sp,sp,8
 80007c0:	f800283a 	ret

080007c4 <alt_video_display_buffer_is_available>:
*  Returns:  0 - Found free buffer.  buffer_being_written now points to it.
*           -1 - Free buffer not available at this time. 
*
******************************************************************/
int alt_video_display_buffer_is_available( alt_video_display* display )
{
 80007c4:	defffa04 	addi	sp,sp,-24
 80007c8:	dfc00515 	stw	ra,20(sp)
 80007cc:	df000415 	stw	fp,16(sp)
 80007d0:	df000404 	addi	fp,sp,16
 80007d4:	e13fff15 	stw	r4,-4(fp)
  int ret_code = 0, next_buf_index;
 80007d8:	e03ffc15 	stw	zero,-16(fp)
  alt_sgdma_descriptor *desc;
  
  if(display->num_frame_buffers > 1) {
 80007dc:	e0bfff17 	ldw	r2,-4(fp)
 80007e0:	10800c17 	ldw	r2,48(r2)
 80007e4:	10800090 	cmplti	r2,r2,2
 80007e8:	10002f1e 	bne	r2,zero,80008a8 <alt_video_display_buffer_is_available+0xe4>
     * previous buffer is no longer being transferred to the video display
     * device, and is now safe to be written again, and update
     * the buffer_being_displayed index accordingly.
     */
    next_buf_index = 
      ((display->buffer_being_displayed + 1) % display->num_frame_buffers); 
 80007ec:	e0bfff17 	ldw	r2,-4(fp)
 80007f0:	10800517 	ldw	r2,20(r2)
 80007f4:	10c00044 	addi	r3,r2,1
 80007f8:	e0bfff17 	ldw	r2,-4(fp)
 80007fc:	10800c17 	ldw	r2,48(r2)
     * if the SGDMA has processed them. If it has, then we know that the 
     * previous buffer is no longer being transferred to the video display
     * device, and is now safe to be written again, and update
     * the buffer_being_displayed index accordingly.
     */
    next_buf_index = 
 8000800:	1809883a 	mov	r4,r3
 8000804:	100b883a 	mov	r5,r2
 8000808:	800c9a40 	call	800c9a4 <__modsi3>
 800080c:	e0bffd15 	stw	r2,-12(fp)
      ((display->buffer_being_displayed + 1) % display->num_frame_buffers); 
      
    /* Inspect all buffers until we reach the one being written */
    while(next_buf_index != display->buffer_being_written ) {
 8000810:	00001906 	br	8000878 <alt_video_display_buffer_is_available+0xb4>
      desc = display->buffer_ptrs[next_buf_index]->desc_base;
 8000814:	e0ffff17 	ldw	r3,-4(fp)
 8000818:	e0bffd17 	ldw	r2,-12(fp)
 800081c:	10800044 	addi	r2,r2,1
 8000820:	1085883a 	add	r2,r2,r2
 8000824:	1085883a 	add	r2,r2,r2
 8000828:	1885883a 	add	r2,r3,r2
 800082c:	10800017 	ldw	r2,0(r2)
 8000830:	10800017 	ldw	r2,0(r2)
 8000834:	e0bffe15 	stw	r2,-8(fp)
      /* 
       * If there are signs of actual data transfer having occured, we 
       * can safely increment the buffer_being_displayed index
       */
      if(IORD_16DIRECT(&desc->actual_bytes_transferred, 0) > 0) {
 8000838:	e0bffe17 	ldw	r2,-8(fp)
 800083c:	10800704 	addi	r2,r2,28
 8000840:	1080002b 	ldhuio	r2,0(r2)
 8000844:	10bfffcc 	andi	r2,r2,65535
 8000848:	10000326 	beq	r2,zero,8000858 <alt_video_display_buffer_is_available+0x94>
        display->buffer_being_displayed = next_buf_index; 
 800084c:	e0bfff17 	ldw	r2,-4(fp)
 8000850:	e0fffd17 	ldw	r3,-12(fp)
 8000854:	10c00515 	stw	r3,20(r2)
      }
        
      next_buf_index = ((next_buf_index + 1) % display->num_frame_buffers);
 8000858:	e0bffd17 	ldw	r2,-12(fp)
 800085c:	10c00044 	addi	r3,r2,1
 8000860:	e0bfff17 	ldw	r2,-4(fp)
 8000864:	10800c17 	ldw	r2,48(r2)
 8000868:	1809883a 	mov	r4,r3
 800086c:	100b883a 	mov	r5,r2
 8000870:	800c9a40 	call	800c9a4 <__modsi3>
 8000874:	e0bffd15 	stw	r2,-12(fp)
     */
    next_buf_index = 
      ((display->buffer_being_displayed + 1) % display->num_frame_buffers); 
      
    /* Inspect all buffers until we reach the one being written */
    while(next_buf_index != display->buffer_being_written ) {
 8000878:	e0bfff17 	ldw	r2,-4(fp)
 800087c:	10c00617 	ldw	r3,24(r2)
 8000880:	e0bffd17 	ldw	r2,-12(fp)
 8000884:	18bfe31e 	bne	r3,r2,8000814 <__alt_data_end+0xf8000814>
      }
        
      next_buf_index = ((next_buf_index + 1) % display->num_frame_buffers);
    }
    
    if( display->buffer_being_written == display->buffer_being_displayed ) { 
 8000888:	e0bfff17 	ldw	r2,-4(fp)
 800088c:	10c00617 	ldw	r3,24(r2)
 8000890:	e0bfff17 	ldw	r2,-4(fp)
 8000894:	10800517 	ldw	r2,20(r2)
 8000898:	1880041e 	bne	r3,r2,80008ac <alt_video_display_buffer_is_available+0xe8>
      ret_code = -1;
 800089c:	00bfffc4 	movi	r2,-1
 80008a0:	e0bffc15 	stw	r2,-16(fp)
 80008a4:	00000106 	br	80008ac <alt_video_display_buffer_is_available+0xe8>
   * There is only one display buffer. In this case, you're always 
   * overwriting the "live" buffer on the screen. No sense in reporting 
   * a problem since you asked for it.
   */
  else {
    ret_code = 0;
 80008a8:	e03ffc15 	stw	zero,-16(fp)
  }

  return (ret_code);
 80008ac:	e0bffc17 	ldw	r2,-16(fp)
}
 80008b0:	e037883a 	mov	sp,fp
 80008b4:	dfc00117 	ldw	ra,4(sp)
 80008b8:	df000017 	ldw	fp,0(sp)
 80008bc:	dec00204 	addi	sp,sp,8
 80008c0:	f800283a 	ret

080008c4 <alt_video_display_clear_screen>:
*           buffer.  User can specify black(0x00) or white(0xFF).
*
******************************************************************/
extern inline void alt_video_display_clear_screen(alt_video_display* display,
                                           char color)
{
 80008c4:	defffc04 	addi	sp,sp,-16
 80008c8:	dfc00315 	stw	ra,12(sp)
 80008cc:	df000215 	stw	fp,8(sp)
 80008d0:	df000204 	addi	fp,sp,8
 80008d4:	e13ffe15 	stw	r4,-8(fp)
 80008d8:	2805883a 	mov	r2,r5
 80008dc:	e0bfff05 	stb	r2,-4(fp)
  memset( (void*)(display->buffer_ptrs[display->buffer_being_written]->buffer), 
 80008e0:	e0bffe17 	ldw	r2,-8(fp)
 80008e4:	10800617 	ldw	r2,24(r2)
 80008e8:	e0fffe17 	ldw	r3,-8(fp)
 80008ec:	10800044 	addi	r2,r2,1
 80008f0:	1085883a 	add	r2,r2,r2
 80008f4:	1085883a 	add	r2,r2,r2
 80008f8:	1885883a 	add	r2,r3,r2
 80008fc:	10800017 	ldw	r2,0(r2)
 8000900:	11000117 	ldw	r4,4(r2)
 8000904:	e0ffff07 	ldb	r3,-4(fp)
    color, display->bytes_per_frame );
 8000908:	e0bffe17 	ldw	r2,-8(fp)
 800090c:	10800b17 	ldw	r2,44(r2)
*
******************************************************************/
extern inline void alt_video_display_clear_screen(alt_video_display* display,
                                           char color)
{
  memset( (void*)(display->buffer_ptrs[display->buffer_being_written]->buffer), 
 8000910:	180b883a 	mov	r5,r3
 8000914:	100d883a 	mov	r6,r2
 8000918:	800fd900 	call	800fd90 <memset>
    color, display->bytes_per_frame );
}
 800091c:	e037883a 	mov	sp,fp
 8000920:	dfc00117 	ldw	ra,4(sp)
 8000924:	df000017 	ldw	fp,0(sp)
 8000928:	dec00204 	addi	sp,sp,8
 800092c:	f800283a 	ret

08000930 <alt_video_display_setup_frame_descriptors>:
void alt_video_display_setup_frame_descriptors(
  alt_video_display *display,
  alt_video_frame *frame,
  alt_u32 *buffer,
  alt_sgdma_descriptor *desc_base)
{
 8000930:	defff204 	addi	sp,sp,-56
 8000934:	dfc00d15 	stw	ra,52(sp)
 8000938:	df000c15 	stw	fp,48(sp)
 800093c:	df000c04 	addi	fp,sp,48
 8000940:	e13ffc15 	stw	r4,-16(fp)
 8000944:	e17ffd15 	stw	r5,-12(fp)
 8000948:	e1bffe15 	stw	r6,-8(fp)
 800094c:	e1ffff15 	stw	r7,-4(fp)
  /*
   * We don't want the "uncached" bit set in the buffer address we hand
   * off to the SGDMA, so we mask it out here.
   */
  buffer_no_cache_bypass = 
    (alt_u32) alt_remap_cached( buffer, display->bytes_per_frame );
 8000950:	e0bffc17 	ldw	r2,-16(fp)
 8000954:	10800b17 	ldw	r2,44(r2)
 8000958:	e13ffe17 	ldw	r4,-8(fp)
 800095c:	100b883a 	mov	r5,r2
 8000960:	801d0740 	call	801d074 <alt_remap_cached>
  
  /*
   * We don't want the "uncached" bit set in the buffer address we hand
   * off to the SGDMA, so we mask it out here.
   */
  buffer_no_cache_bypass = 
 8000964:	e0bffa15 	stw	r2,-24(fp)
    (alt_u32) alt_remap_cached( buffer, display->bytes_per_frame );
  
  for(i=0; i<display->descriptors_per_frame; i++){
 8000968:	e03ff815 	stw	zero,-32(fp)
 800096c:	00004806 	br	8000a90 <alt_video_display_setup_frame_descriptors+0x160>
    /* 
     * Calculate the data length associated with each descriptor, taking
     * into account the edge cases 
     */
    if(i == (display->descriptors_per_frame-1)) {
 8000970:	e0bffc17 	ldw	r2,-16(fp)
 8000974:	10800d17 	ldw	r2,52(r2)
 8000978:	10ffffc4 	addi	r3,r2,-1
 800097c:	e0bff817 	ldw	r2,-32(fp)
 8000980:	18800b1e 	bne	r3,r2,80009b0 <alt_video_display_setup_frame_descriptors+0x80>
      length = (display->bytes_per_frame % ALT_VIDEO_DISPLAY_BYTES_PER_DESC);
 8000984:	e0bffc17 	ldw	r2,-16(fp)
 8000988:	10800b17 	ldw	r2,44(r2)
 800098c:	1009883a 	mov	r4,r2
 8000990:	017fc014 	movui	r5,65280
 8000994:	800c9a40 	call	800c9a4 <__modsi3>
 8000998:	e0bff90d 	sth	r2,-28(fp)
       /* 
        * The init routine calculated the number of desriptors per frame, 
        * based on frame size (bytes) and bytes per descriptor. Being evenly
        * divisible on this last frame means a full-length sized frame.
        */
       if(length == 0) {
 800099c:	e0bff90b 	ldhu	r2,-28(fp)
 80009a0:	1000051e 	bne	r2,zero,80009b8 <alt_video_display_setup_frame_descriptors+0x88>
         length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
 80009a4:	00bfc004 	movi	r2,-256
 80009a8:	e0bff90d 	sth	r2,-28(fp)
 80009ac:	00000206 	br	80009b8 <alt_video_display_setup_frame_descriptors+0x88>
       }
    }
    else {
      length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
 80009b0:	00bfc004 	movi	r2,-256
 80009b4:	e0bff90d 	sth	r2,-28(fp)
    }
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
      (frame->desc_base + i),                    /* Descriptor */
 80009b8:	e0bffd17 	ldw	r2,-12(fp)
 80009bc:	10c00017 	ldw	r3,0(r2)
    else {
      length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
    }
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
 80009c0:	e0bff817 	ldw	r2,-32(fp)
      (frame->desc_base + i),                    /* Descriptor */
 80009c4:	1004917a 	slli	r2,r2,5
    else {
      length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
    }
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
 80009c8:	188d883a 	add	r6,r3,r2
      (frame->desc_base + i),                    /* Descriptor */
      ( frame->desc_base + i + 1 ),              /* Next descriptor */
 80009cc:	e0bffd17 	ldw	r2,-12(fp)
 80009d0:	10c00017 	ldw	r3,0(r2)
 80009d4:	e0bff817 	ldw	r2,-32(fp)
    else {
      length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
    }
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
 80009d8:	10800044 	addi	r2,r2,1
 80009dc:	1004917a 	slli	r2,r2,5
 80009e0:	188b883a 	add	r5,r3,r2
      (frame->desc_base + i),                    /* Descriptor */
      ( frame->desc_base + i + 1 ),              /* Next descriptor */
      (alt_u32*)( (alt_u8*)buffer_no_cache_bypass +
         (ALT_VIDEO_DISPLAY_BYTES_PER_DESC*i) ), /* Read Address */
 80009e4:	e0fff817 	ldw	r3,-32(fp)
 80009e8:	00bfc014 	movui	r2,65280
 80009ec:	1885383a 	mul	r2,r3,r2
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
      (frame->desc_base + i),                    /* Descriptor */
      ( frame->desc_base + i + 1 ),              /* Next descriptor */
      (alt_u32*)( (alt_u8*)buffer_no_cache_bypass +
 80009f0:	1007883a 	mov	r3,r2
 80009f4:	e0bffa17 	ldw	r2,-24(fp)
 80009f8:	1885883a 	add	r2,r3,r2
    else {
      length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
    }
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
 80009fc:	1011883a 	mov	r8,r2
 8000a00:	e1fff90b 	ldhu	r7,-28(fp)
 8000a04:	e0bff817 	ldw	r2,-32(fp)
 8000a08:	1005003a 	cmpeq	r2,r2,zero
 8000a0c:	10c03fcc 	andi	r3,r2,255
      (alt_u32*)( (alt_u8*)buffer_no_cache_bypass +
         (ALT_VIDEO_DISPLAY_BYTES_PER_DESC*i) ), /* Read Address */
      length,                                    /* Transfer length */
      0,                                         /* Don't read fixed addr */
      i==0?1:0,                                  /* Generate SOP @ first desc */
      i==(display->descriptors_per_frame-1)?1:0, /* Generate EOP @ last desc */
 8000a10:	e0bffc17 	ldw	r2,-16(fp)
 8000a14:	10800d17 	ldw	r2,52(r2)
 8000a18:	113fffc4 	addi	r4,r2,-1
    else {
      length = ALT_VIDEO_DISPLAY_BYTES_PER_DESC;
    }
    
    /* Construct the descriptor */
    alt_avalon_sgdma_construct_mem_to_stream_desc(
 8000a1c:	e0bff817 	ldw	r2,-32(fp)
 8000a20:	2085003a 	cmpeq	r2,r4,r2
 8000a24:	10803fcc 	andi	r2,r2,255
 8000a28:	d8000015 	stw	zero,0(sp)
 8000a2c:	d8c00115 	stw	r3,4(sp)
 8000a30:	d8800215 	stw	r2,8(sp)
 8000a34:	d8000315 	stw	zero,12(sp)
 8000a38:	3009883a 	mov	r4,r6
 8000a3c:	400d883a 	mov	r6,r8
 8000a40:	801e4500 	call	801e450 <alt_avalon_sgdma_construct_mem_to_stream_desc>
     * 
     * This was not done done in the above SGDMA descriptor creation routine 
     * call because that routine always terminates the 'next' descriptor 
     * pointer to prevent the SGDMA from continuing into unknown memory.
     */
    if( i == ( display->descriptors_per_frame - 1 ) ) {  
 8000a44:	e0bffc17 	ldw	r2,-16(fp)
 8000a48:	10800d17 	ldw	r2,52(r2)
 8000a4c:	10ffffc4 	addi	r3,r2,-1
 8000a50:	e0bff817 	ldw	r2,-32(fp)
 8000a54:	18800b1e 	bne	r3,r2,8000a84 <alt_video_display_setup_frame_descriptors+0x154>
      last_descriptor = (alt_sgdma_descriptor *) (frame->desc_base + i);
 8000a58:	e0bffd17 	ldw	r2,-12(fp)
 8000a5c:	10c00017 	ldw	r3,0(r2)
 8000a60:	e0bff817 	ldw	r2,-32(fp)
 8000a64:	1004917a 	slli	r2,r2,5
 8000a68:	1885883a 	add	r2,r3,r2
 8000a6c:	e0bffb15 	stw	r2,-20(fp)
      
      IOWR_32DIRECT((alt_u32)(&last_descriptor->next), 0, 
 8000a70:	e0bffb17 	ldw	r2,-20(fp)
 8000a74:	10800404 	addi	r2,r2,16
 8000a78:	e0fffd17 	ldw	r3,-12(fp)
 8000a7c:	18c00017 	ldw	r3,0(r3)
 8000a80:	10c00035 	stwio	r3,0(r2)
   * off to the SGDMA, so we mask it out here.
   */
  buffer_no_cache_bypass = 
    (alt_u32) alt_remap_cached( buffer, display->bytes_per_frame );
  
  for(i=0; i<display->descriptors_per_frame; i++){
 8000a84:	e0bff817 	ldw	r2,-32(fp)
 8000a88:	10800044 	addi	r2,r2,1
 8000a8c:	e0bff815 	stw	r2,-32(fp)
 8000a90:	e0bffc17 	ldw	r2,-16(fp)
 8000a94:	10800d17 	ldw	r2,52(r2)
 8000a98:	e0fff817 	ldw	r3,-32(fp)
 8000a9c:	18bfb416 	blt	r3,r2,8000970 <__alt_data_end+0xf8000970>
      
      IOWR_32DIRECT((alt_u32)(&last_descriptor->next), 0, 
        (alt_u32)(frame->desc_base));
    }
  }
}
 8000aa0:	e037883a 	mov	sp,fp
 8000aa4:	dfc00117 	ldw	ra,4(sp)
 8000aa8:	df000017 	ldw	fp,0(sp)
 8000aac:	dec00204 	addi	sp,sp,8
 8000ab0:	f800283a 	ret

08000ab4 <alt_video_display_get_descriptor_span>:
 * 
 * Returns:
 *   - Size (bytes) of descriptor memory required.
 ******************************************************************/
alt_u32 alt_video_display_get_descriptor_span(alt_video_display *display)
{
 8000ab4:	defffe04 	addi	sp,sp,-8
 8000ab8:	df000115 	stw	fp,4(sp)
 8000abc:	df000104 	addi	fp,sp,4
 8000ac0:	e13fff15 	stw	r4,-4(fp)
  return ((display->descriptors_per_frame+2) * sizeof(alt_sgdma_descriptor));
 8000ac4:	e0bfff17 	ldw	r2,-4(fp)
 8000ac8:	10800d17 	ldw	r2,52(r2)
 8000acc:	10800084 	addi	r2,r2,2
 8000ad0:	1004917a 	slli	r2,r2,5
}
 8000ad4:	e037883a 	mov	sp,fp
 8000ad8:	df000017 	ldw	fp,0(sp)
 8000adc:	dec00104 	addi	sp,sp,4
 8000ae0:	f800283a 	ret

08000ae4 <alt_video_display_allocate_buffers>:
int alt_video_display_allocate_buffers( alt_video_display* display,
                                       int bytes_per_frame,
                                       int buffer_location,
                                       int descriptor_location,
                                       int num_buffers )
{
 8000ae4:	defff704 	addi	sp,sp,-36
 8000ae8:	dfc00815 	stw	ra,32(sp)
 8000aec:	df000715 	stw	fp,28(sp)
 8000af0:	dc000615 	stw	r16,24(sp)
 8000af4:	df000704 	addi	fp,sp,28
 8000af8:	e13ffb15 	stw	r4,-20(fp)
 8000afc:	e17ffc15 	stw	r5,-16(fp)
 8000b00:	e1bffd15 	stw	r6,-12(fp)
 8000b04:	e1fffe15 	stw	r7,-8(fp)
  int i, ret_code = 0;
 8000b08:	e03ffa15 	stw	zero,-24(fp)
  
  /* Allocate our frame buffers and descriptor buffers */
  for( i = 0; i < num_buffers; i++ ) {
 8000b0c:	e03ff915 	stw	zero,-28(fp)
 8000b10:	00006906 	br	8000cb8 <alt_video_display_allocate_buffers+0x1d4>
    display->buffer_ptrs[i] = 
      (alt_video_frame*) malloc( sizeof( alt_video_frame ));
 8000b14:	01000204 	movi	r4,8
 8000b18:	800f4880 	call	800f488 <malloc>
 8000b1c:	1009883a 	mov	r4,r2
{
  int i, ret_code = 0;
  
  /* Allocate our frame buffers and descriptor buffers */
  for( i = 0; i < num_buffers; i++ ) {
    display->buffer_ptrs[i] = 
 8000b20:	e0fffb17 	ldw	r3,-20(fp)
 8000b24:	e0bff917 	ldw	r2,-28(fp)
 8000b28:	10800044 	addi	r2,r2,1
 8000b2c:	1085883a 	add	r2,r2,r2
 8000b30:	1085883a 	add	r2,r2,r2
 8000b34:	1885883a 	add	r2,r3,r2
 8000b38:	11000015 	stw	r4,0(r2)
      (alt_video_frame*) malloc( sizeof( alt_video_frame ));
      
    if(display->buffer_ptrs[i] == NULL) {
 8000b3c:	e0fffb17 	ldw	r3,-20(fp)
 8000b40:	e0bff917 	ldw	r2,-28(fp)
 8000b44:	10800044 	addi	r2,r2,1
 8000b48:	1085883a 	add	r2,r2,r2
 8000b4c:	1085883a 	add	r2,r2,r2
 8000b50:	1885883a 	add	r2,r3,r2
 8000b54:	10800017 	ldw	r2,0(r2)
 8000b58:	1000021e 	bne	r2,zero,8000b64 <alt_video_display_allocate_buffers+0x80>
      ret_code = -1;
 8000b5c:	00bfffc4 	movi	r2,-1
 8000b60:	e0bffa15 	stw	r2,-24(fp)
    }
    
    if( buffer_location == ALT_VIDEO_DISPLAY_USE_HEAP ) {
 8000b64:	e0bffd17 	ldw	r2,-12(fp)
 8000b68:	10bfffd8 	cmpnei	r2,r2,-1
 8000b6c:	1000171e 	bne	r2,zero,8000bcc <alt_video_display_allocate_buffers+0xe8>
      display->buffer_ptrs[i]->buffer = 
 8000b70:	e0fffb17 	ldw	r3,-20(fp)
 8000b74:	e0bff917 	ldw	r2,-28(fp)
 8000b78:	10800044 	addi	r2,r2,1
 8000b7c:	1085883a 	add	r2,r2,r2
 8000b80:	1085883a 	add	r2,r2,r2
 8000b84:	1885883a 	add	r2,r3,r2
 8000b88:	14000017 	ldw	r16,0(r2)
        (void*) alt_uncached_malloc(( bytes_per_frame ));
 8000b8c:	e0bffc17 	ldw	r2,-16(fp)
 8000b90:	1009883a 	mov	r4,r2
 8000b94:	801d2f40 	call	801d2f4 <alt_uncached_malloc>
    if(display->buffer_ptrs[i] == NULL) {
      ret_code = -1;
    }
    
    if( buffer_location == ALT_VIDEO_DISPLAY_USE_HEAP ) {
      display->buffer_ptrs[i]->buffer = 
 8000b98:	80800115 	stw	r2,4(r16)
        (void*) alt_uncached_malloc(( bytes_per_frame ));
        
      if( display->buffer_ptrs[i]->buffer == NULL )
 8000b9c:	e0fffb17 	ldw	r3,-20(fp)
 8000ba0:	e0bff917 	ldw	r2,-28(fp)
 8000ba4:	10800044 	addi	r2,r2,1
 8000ba8:	1085883a 	add	r2,r2,r2
 8000bac:	1085883a 	add	r2,r2,r2
 8000bb0:	1885883a 	add	r2,r3,r2
 8000bb4:	10800017 	ldw	r2,0(r2)
 8000bb8:	10800117 	ldw	r2,4(r2)
 8000bbc:	1000101e 	bne	r2,zero,8000c00 <alt_video_display_allocate_buffers+0x11c>
        ret_code = -1;
 8000bc0:	00bfffc4 	movi	r2,-1
 8000bc4:	e0bffa15 	stw	r2,-24(fp)
 8000bc8:	00000d06 	br	8000c00 <alt_video_display_allocate_buffers+0x11c>
    }
    else {
     // display->buffer_ptrs[i]->buffer = (void*)alt_remap_uncached(
     //   (void*)(buffer_location + (i * bytes_per_frame)), bytes_per_frame);
      display->buffer_ptrs[i]->buffer = (void*)(buffer_location + (i * bytes_per_frame));
 8000bcc:	e0fffb17 	ldw	r3,-20(fp)
 8000bd0:	e0bff917 	ldw	r2,-28(fp)
 8000bd4:	10800044 	addi	r2,r2,1
 8000bd8:	1085883a 	add	r2,r2,r2
 8000bdc:	1085883a 	add	r2,r2,r2
 8000be0:	1885883a 	add	r2,r3,r2
 8000be4:	10800017 	ldw	r2,0(r2)
 8000be8:	e13ff917 	ldw	r4,-28(fp)
 8000bec:	e0fffc17 	ldw	r3,-16(fp)
 8000bf0:	20c9383a 	mul	r4,r4,r3
 8000bf4:	e0fffd17 	ldw	r3,-12(fp)
 8000bf8:	20c7883a 	add	r3,r4,r3
 8000bfc:	10c00115 	stw	r3,4(r2)
    }
    
    if( descriptor_location == ALT_VIDEO_DISPLAY_USE_HEAP ) {
 8000c00:	e0bffe17 	ldw	r2,-8(fp)
 8000c04:	10bfffd8 	cmpnei	r2,r2,-1
 8000c08:	1000191e 	bne	r2,zero,8000c70 <alt_video_display_allocate_buffers+0x18c>
      /*
       * The SGDMA controller requires all descriptors to be aligned to
       * the size of an SGDMA descriptor (32 bytes).  Use memalign() to 
       * get properly aligned address.
       */
      display->buffer_ptrs[i]->desc_base = (alt_sgdma_descriptor*)
 8000c0c:	e0fffb17 	ldw	r3,-20(fp)
 8000c10:	e0bff917 	ldw	r2,-28(fp)
 8000c14:	10800044 	addi	r2,r2,1
 8000c18:	1085883a 	add	r2,r2,r2
 8000c1c:	1085883a 	add	r2,r2,r2
 8000c20:	1885883a 	add	r2,r3,r2
 8000c24:	14000017 	ldw	r16,0(r2)
        memalign( 32, alt_video_display_get_descriptor_span( display ) );
 8000c28:	e13ffb17 	ldw	r4,-20(fp)
 8000c2c:	8000ab40 	call	8000ab4 <alt_video_display_get_descriptor_span>
 8000c30:	01000804 	movi	r4,32
 8000c34:	100b883a 	mov	r5,r2
 8000c38:	800f2b80 	call	800f2b8 <memalign>
      /*
       * The SGDMA controller requires all descriptors to be aligned to
       * the size of an SGDMA descriptor (32 bytes).  Use memalign() to 
       * get properly aligned address.
       */
      display->buffer_ptrs[i]->desc_base = (alt_sgdma_descriptor*)
 8000c3c:	80800015 	stw	r2,0(r16)
        memalign( 32, alt_video_display_get_descriptor_span( display ) );
      
      if( display->buffer_ptrs[i]->desc_base == NULL ) {
 8000c40:	e0fffb17 	ldw	r3,-20(fp)
 8000c44:	e0bff917 	ldw	r2,-28(fp)
 8000c48:	10800044 	addi	r2,r2,1
 8000c4c:	1085883a 	add	r2,r2,r2
 8000c50:	1085883a 	add	r2,r2,r2
 8000c54:	1885883a 	add	r2,r3,r2
 8000c58:	10800017 	ldw	r2,0(r2)
 8000c5c:	10800017 	ldw	r2,0(r2)
 8000c60:	1000121e 	bne	r2,zero,8000cac <alt_video_display_allocate_buffers+0x1c8>
        ret_code = -1;
 8000c64:	00bfffc4 	movi	r2,-1
 8000c68:	e0bffa15 	stw	r2,-24(fp)
 8000c6c:	00000f06 	br	8000cac <alt_video_display_allocate_buffers+0x1c8>
      }
    }
    else {
      display->buffer_ptrs[i]->desc_base = 
 8000c70:	e0fffb17 	ldw	r3,-20(fp)
 8000c74:	e0bff917 	ldw	r2,-28(fp)
 8000c78:	10800044 	addi	r2,r2,1
 8000c7c:	1085883a 	add	r2,r2,r2
 8000c80:	1085883a 	add	r2,r2,r2
 8000c84:	1885883a 	add	r2,r3,r2
 8000c88:	14000017 	ldw	r16,0(r2)
        (alt_sgdma_descriptor*)((void*)descriptor_location + 
          (i * alt_video_display_get_descriptor_span( display )));
 8000c8c:	e13ffb17 	ldw	r4,-20(fp)
 8000c90:	8000ab40 	call	8000ab4 <alt_video_display_get_descriptor_span>
 8000c94:	1007883a 	mov	r3,r2
        ret_code = -1;
      }
    }
    else {
      display->buffer_ptrs[i]->desc_base = 
        (alt_sgdma_descriptor*)((void*)descriptor_location + 
 8000c98:	e0bff917 	ldw	r2,-28(fp)
 8000c9c:	1887383a 	mul	r3,r3,r2
 8000ca0:	e0bffe17 	ldw	r2,-8(fp)
 8000ca4:	1885883a 	add	r2,r3,r2
      if( display->buffer_ptrs[i]->desc_base == NULL ) {
        ret_code = -1;
      }
    }
    else {
      display->buffer_ptrs[i]->desc_base = 
 8000ca8:	80800015 	stw	r2,0(r16)
                                       int num_buffers )
{
  int i, ret_code = 0;
  
  /* Allocate our frame buffers and descriptor buffers */
  for( i = 0; i < num_buffers; i++ ) {
 8000cac:	e0bff917 	ldw	r2,-28(fp)
 8000cb0:	10800044 	addi	r2,r2,1
 8000cb4:	e0bff915 	stw	r2,-28(fp)
 8000cb8:	e0fff917 	ldw	r3,-28(fp)
 8000cbc:	e0800217 	ldw	r2,8(fp)
 8000cc0:	18bf9416 	blt	r3,r2,8000b14 <__alt_data_end+0xf8000b14>
        (alt_sgdma_descriptor*)((void*)descriptor_location + 
          (i * alt_video_display_get_descriptor_span( display )));
    } 
  }
 
  return ret_code;
 8000cc4:	e0bffa17 	ldw	r2,-24(fp)
}
 8000cc8:	e6ffff04 	addi	sp,fp,-4
 8000ccc:	dfc00217 	ldw	ra,8(sp)
 8000cd0:	df000117 	ldw	fp,4(sp)
 8000cd4:	dc000017 	ldw	r16,0(sp)
 8000cd8:	dec00304 	addi	sp,sp,12
 8000cdc:	f800283a 	ret

08000ce0 <load_gimp_bmp>:
 8000ce0:	defff604 	addi	sp,sp,-40
 8000ce4:	dfc00915 	stw	ra,36(sp)
 8000ce8:	df000815 	stw	fp,32(sp)
 8000cec:	df000804 	addi	fp,sp,32
 8000cf0:	e13ffd15 	stw	r4,-12(fp)
 8000cf4:	e17ffe15 	stw	r5,-8(fp)
 8000cf8:	e1bfff15 	stw	r6,-4(fp)
 8000cfc:	e03ffa15 	stw	zero,-24(fp)
 8000d00:	e0bfff17 	ldw	r2,-4(fp)
 8000d04:	1000010e 	bge	r2,zero,8000d0c <load_gimp_bmp+0x2c>
 8000d08:	108001c4 	addi	r2,r2,7
 8000d0c:	1005d0fa 	srai	r2,r2,3
 8000d10:	e0bffb15 	stw	r2,-20(fp)
 8000d14:	e0bffd17 	ldw	r2,-12(fp)
 8000d18:	10c00017 	ldw	r3,0(r2)
 8000d1c:	e0bffd17 	ldw	r2,-12(fp)
 8000d20:	10800117 	ldw	r2,4(r2)
 8000d24:	1885383a 	mul	r2,r3,r2
 8000d28:	e0bffc15 	stw	r2,-16(fp)
 8000d2c:	e0bffd17 	ldw	r2,-12(fp)
 8000d30:	10800017 	ldw	r2,0(r2)
 8000d34:	1007883a 	mov	r3,r2
 8000d38:	e0bffe17 	ldw	r2,-8(fp)
 8000d3c:	10c0000d 	sth	r3,0(r2)
 8000d40:	e0bffd17 	ldw	r2,-12(fp)
 8000d44:	10800117 	ldw	r2,4(r2)
 8000d48:	1007883a 	mov	r3,r2
 8000d4c:	e0bffe17 	ldw	r2,-8(fp)
 8000d50:	10c0008d 	sth	r3,2(r2)
 8000d54:	e0bfff17 	ldw	r2,-4(fp)
 8000d58:	1007883a 	mov	r3,r2
 8000d5c:	e0bffe17 	ldw	r2,-8(fp)
 8000d60:	10c0010d 	sth	r3,4(r2)
 8000d64:	e0fffc17 	ldw	r3,-16(fp)
 8000d68:	e0bffb17 	ldw	r2,-20(fp)
 8000d6c:	1885383a 	mul	r2,r3,r2
 8000d70:	1009883a 	mov	r4,r2
 8000d74:	800f4880 	call	800f488 <malloc>
 8000d78:	1007883a 	mov	r3,r2
 8000d7c:	e0bffe17 	ldw	r2,-8(fp)
 8000d80:	10c00315 	stw	r3,12(r2)
 8000d84:	e0bffe17 	ldw	r2,-8(fp)
 8000d88:	10800317 	ldw	r2,12(r2)
 8000d8c:	1000031e 	bne	r2,zero,8000d9c <load_gimp_bmp+0xbc>
 8000d90:	00bfffc4 	movi	r2,-1
 8000d94:	e0bffa15 	stw	r2,-24(fp)
 8000d98:	0000c306 	br	80010a8 <load_gimp_bmp+0x3c8>
 8000d9c:	e0bfff17 	ldw	r2,-4(fp)
 8000da0:	10800418 	cmpnei	r2,r2,16
 8000da4:	10003e1e 	bne	r2,zero,8000ea0 <load_gimp_bmp+0x1c0>
 8000da8:	e0bffd17 	ldw	r2,-12(fp)
 8000dac:	10800217 	ldw	r2,8(r2)
 8000db0:	10800118 	cmpnei	r2,r2,4
 8000db4:	10001b1e 	bne	r2,zero,8000e24 <load_gimp_bmp+0x144>
 8000db8:	e0bffd17 	ldw	r2,-12(fp)
 8000dbc:	11000304 	addi	r4,r2,12
 8000dc0:	e0bffe17 	ldw	r2,-8(fp)
 8000dc4:	1080000b 	ldhu	r2,0(r2)
 8000dc8:	117fffcc 	andi	r5,r2,65535
 8000dcc:	2960001c 	xori	r5,r5,32768
 8000dd0:	29600004 	addi	r5,r5,-32768
 8000dd4:	e0bffe17 	ldw	r2,-8(fp)
 8000dd8:	1080008b 	ldhu	r2,2(r2)
 8000ddc:	11bfffcc 	andi	r6,r2,65535
 8000de0:	31a0001c 	xori	r6,r6,32768
 8000de4:	31a00004 	addi	r6,r6,-32768
 8000de8:	e0bffe17 	ldw	r2,-8(fp)
 8000dec:	1080000b 	ldhu	r2,0(r2)
 8000df0:	11ffffcc 	andi	r7,r2,65535
 8000df4:	39e0001c 	xori	r7,r7,32768
 8000df8:	39e00004 	addi	r7,r7,-32768
 8000dfc:	e0bffe17 	ldw	r2,-8(fp)
 8000e00:	10800317 	ldw	r2,12(r2)
 8000e04:	e0fffe17 	ldw	r3,-8(fp)
 8000e08:	18c0000b 	ldhu	r3,0(r3)
 8000e0c:	18ffffcc 	andi	r3,r3,65535
 8000e10:	18e0001c 	xori	r3,r3,32768
 8000e14:	18e00004 	addi	r3,r3,-32768
 8000e18:	d8c00115 	stw	r3,4(sp)
 8000e1c:	d8800015 	stw	r2,0(sp)
 8000e20:	80013540 	call	8001354 <copy_pix_map_32_to_16>
 8000e24:	e0bffd17 	ldw	r2,-12(fp)
 8000e28:	10800217 	ldw	r2,8(r2)
 8000e2c:	108000d8 	cmpnei	r2,r2,3
 8000e30:	10001b1e 	bne	r2,zero,8000ea0 <load_gimp_bmp+0x1c0>
 8000e34:	e0bffd17 	ldw	r2,-12(fp)
 8000e38:	11000304 	addi	r4,r2,12
 8000e3c:	e0bffe17 	ldw	r2,-8(fp)
 8000e40:	1080000b 	ldhu	r2,0(r2)
 8000e44:	117fffcc 	andi	r5,r2,65535
 8000e48:	2960001c 	xori	r5,r5,32768
 8000e4c:	29600004 	addi	r5,r5,-32768
 8000e50:	e0bffe17 	ldw	r2,-8(fp)
 8000e54:	1080008b 	ldhu	r2,2(r2)
 8000e58:	11bfffcc 	andi	r6,r2,65535
 8000e5c:	31a0001c 	xori	r6,r6,32768
 8000e60:	31a00004 	addi	r6,r6,-32768
 8000e64:	e0bffe17 	ldw	r2,-8(fp)
 8000e68:	1080000b 	ldhu	r2,0(r2)
 8000e6c:	11ffffcc 	andi	r7,r2,65535
 8000e70:	39e0001c 	xori	r7,r7,32768
 8000e74:	39e00004 	addi	r7,r7,-32768
 8000e78:	e0bffe17 	ldw	r2,-8(fp)
 8000e7c:	10800317 	ldw	r2,12(r2)
 8000e80:	e0fffe17 	ldw	r3,-8(fp)
 8000e84:	18c0000b 	ldhu	r3,0(r3)
 8000e88:	18ffffcc 	andi	r3,r3,65535
 8000e8c:	18e0001c 	xori	r3,r3,32768
 8000e90:	18e00004 	addi	r3,r3,-32768
 8000e94:	d8c00115 	stw	r3,4(sp)
 8000e98:	d8800015 	stw	r2,0(sp)
 8000e9c:	80017480 	call	8001748 <copy_pix_map_24_to_16>
 8000ea0:	e0bfff17 	ldw	r2,-4(fp)
 8000ea4:	10800618 	cmpnei	r2,r2,24
 8000ea8:	10003e1e 	bne	r2,zero,8000fa4 <load_gimp_bmp+0x2c4>
 8000eac:	e0bffd17 	ldw	r2,-12(fp)
 8000eb0:	10800217 	ldw	r2,8(r2)
 8000eb4:	10800118 	cmpnei	r2,r2,4
 8000eb8:	10001b1e 	bne	r2,zero,8000f28 <load_gimp_bmp+0x248>
 8000ebc:	e0bffd17 	ldw	r2,-12(fp)
 8000ec0:	11000304 	addi	r4,r2,12
 8000ec4:	e0bffe17 	ldw	r2,-8(fp)
 8000ec8:	1080000b 	ldhu	r2,0(r2)
 8000ecc:	117fffcc 	andi	r5,r2,65535
 8000ed0:	2960001c 	xori	r5,r5,32768
 8000ed4:	29600004 	addi	r5,r5,-32768
 8000ed8:	e0bffe17 	ldw	r2,-8(fp)
 8000edc:	1080008b 	ldhu	r2,2(r2)
 8000ee0:	11bfffcc 	andi	r6,r2,65535
 8000ee4:	31a0001c 	xori	r6,r6,32768
 8000ee8:	31a00004 	addi	r6,r6,-32768
 8000eec:	e0bffe17 	ldw	r2,-8(fp)
 8000ef0:	1080000b 	ldhu	r2,0(r2)
 8000ef4:	11ffffcc 	andi	r7,r2,65535
 8000ef8:	39e0001c 	xori	r7,r7,32768
 8000efc:	39e00004 	addi	r7,r7,-32768
 8000f00:	e0bffe17 	ldw	r2,-8(fp)
 8000f04:	10800317 	ldw	r2,12(r2)
 8000f08:	e0fffe17 	ldw	r3,-8(fp)
 8000f0c:	18c0000b 	ldhu	r3,0(r3)
 8000f10:	18ffffcc 	andi	r3,r3,65535
 8000f14:	18e0001c 	xori	r3,r3,32768
 8000f18:	18e00004 	addi	r3,r3,-32768
 8000f1c:	d8c00115 	stw	r3,4(sp)
 8000f20:	d8800015 	stw	r2,0(sp)
 8000f24:	80012040 	call	8001204 <copy_pix_map_32_to_24>
 8000f28:	e0bffd17 	ldw	r2,-12(fp)
 8000f2c:	10800217 	ldw	r2,8(r2)
 8000f30:	108000d8 	cmpnei	r2,r2,3
 8000f34:	10001b1e 	bne	r2,zero,8000fa4 <load_gimp_bmp+0x2c4>
 8000f38:	e0bffd17 	ldw	r2,-12(fp)
 8000f3c:	11000304 	addi	r4,r2,12
 8000f40:	e0bffe17 	ldw	r2,-8(fp)
 8000f44:	1080000b 	ldhu	r2,0(r2)
 8000f48:	117fffcc 	andi	r5,r2,65535
 8000f4c:	2960001c 	xori	r5,r5,32768
 8000f50:	29600004 	addi	r5,r5,-32768
 8000f54:	e0bffe17 	ldw	r2,-8(fp)
 8000f58:	1080008b 	ldhu	r2,2(r2)
 8000f5c:	11bfffcc 	andi	r6,r2,65535
 8000f60:	31a0001c 	xori	r6,r6,32768
 8000f64:	31a00004 	addi	r6,r6,-32768
 8000f68:	e0bffe17 	ldw	r2,-8(fp)
 8000f6c:	1080000b 	ldhu	r2,0(r2)
 8000f70:	11ffffcc 	andi	r7,r2,65535
 8000f74:	39e0001c 	xori	r7,r7,32768
 8000f78:	39e00004 	addi	r7,r7,-32768
 8000f7c:	e0bffe17 	ldw	r2,-8(fp)
 8000f80:	10800317 	ldw	r2,12(r2)
 8000f84:	e0fffe17 	ldw	r3,-8(fp)
 8000f88:	18c0000b 	ldhu	r3,0(r3)
 8000f8c:	18ffffcc 	andi	r3,r3,65535
 8000f90:	18e0001c 	xori	r3,r3,32768
 8000f94:	18e00004 	addi	r3,r3,-32768
 8000f98:	d8c00115 	stw	r3,4(sp)
 8000f9c:	d8800015 	stw	r2,0(sp)
 8000fa0:	80016000 	call	8001600 <copy_pix_map_24_to_24>
 8000fa4:	e0bfff17 	ldw	r2,-4(fp)
 8000fa8:	10800818 	cmpnei	r2,r2,32
 8000fac:	10003e1e 	bne	r2,zero,80010a8 <load_gimp_bmp+0x3c8>
 8000fb0:	e0bffd17 	ldw	r2,-12(fp)
 8000fb4:	10800217 	ldw	r2,8(r2)
 8000fb8:	10800118 	cmpnei	r2,r2,4
 8000fbc:	10001b1e 	bne	r2,zero,800102c <load_gimp_bmp+0x34c>
 8000fc0:	e0bffd17 	ldw	r2,-12(fp)
 8000fc4:	11000304 	addi	r4,r2,12
 8000fc8:	e0bffe17 	ldw	r2,-8(fp)
 8000fcc:	1080000b 	ldhu	r2,0(r2)
 8000fd0:	117fffcc 	andi	r5,r2,65535
 8000fd4:	2960001c 	xori	r5,r5,32768
 8000fd8:	29600004 	addi	r5,r5,-32768
 8000fdc:	e0bffe17 	ldw	r2,-8(fp)
 8000fe0:	1080008b 	ldhu	r2,2(r2)
 8000fe4:	11bfffcc 	andi	r6,r2,65535
 8000fe8:	31a0001c 	xori	r6,r6,32768
 8000fec:	31a00004 	addi	r6,r6,-32768
 8000ff0:	e0bffe17 	ldw	r2,-8(fp)
 8000ff4:	1080000b 	ldhu	r2,0(r2)
 8000ff8:	11ffffcc 	andi	r7,r2,65535
 8000ffc:	39e0001c 	xori	r7,r7,32768
 8001000:	39e00004 	addi	r7,r7,-32768
 8001004:	e0bffe17 	ldw	r2,-8(fp)
 8001008:	10800317 	ldw	r2,12(r2)
 800100c:	e0fffe17 	ldw	r3,-8(fp)
 8001010:	18c0000b 	ldhu	r3,0(r3)
 8001014:	18ffffcc 	andi	r3,r3,65535
 8001018:	18e0001c 	xori	r3,r3,32768
 800101c:	18e00004 	addi	r3,r3,-32768
 8001020:	d8c00115 	stw	r3,4(sp)
 8001024:	d8800015 	stw	r2,0(sp)
 8001028:	80010fc0 	call	80010fc <copy_pix_map_32_to_32>
 800102c:	e0bffd17 	ldw	r2,-12(fp)
 8001030:	10800217 	ldw	r2,8(r2)
 8001034:	108000d8 	cmpnei	r2,r2,3
 8001038:	10001b1e 	bne	r2,zero,80010a8 <load_gimp_bmp+0x3c8>
 800103c:	e0bffd17 	ldw	r2,-12(fp)
 8001040:	11000304 	addi	r4,r2,12
 8001044:	e0bffe17 	ldw	r2,-8(fp)
 8001048:	1080000b 	ldhu	r2,0(r2)
 800104c:	117fffcc 	andi	r5,r2,65535
 8001050:	2960001c 	xori	r5,r5,32768
 8001054:	29600004 	addi	r5,r5,-32768
 8001058:	e0bffe17 	ldw	r2,-8(fp)
 800105c:	1080008b 	ldhu	r2,2(r2)
 8001060:	11bfffcc 	andi	r6,r2,65535
 8001064:	31a0001c 	xori	r6,r6,32768
 8001068:	31a00004 	addi	r6,r6,-32768
 800106c:	e0bffe17 	ldw	r2,-8(fp)
 8001070:	1080000b 	ldhu	r2,0(r2)
 8001074:	11ffffcc 	andi	r7,r2,65535
 8001078:	39e0001c 	xori	r7,r7,32768
 800107c:	39e00004 	addi	r7,r7,-32768
 8001080:	e0bffe17 	ldw	r2,-8(fp)
 8001084:	10800317 	ldw	r2,12(r2)
 8001088:	e0fffe17 	ldw	r3,-8(fp)
 800108c:	18c0000b 	ldhu	r3,0(r3)
 8001090:	18ffffcc 	andi	r3,r3,65535
 8001094:	18e0001c 	xori	r3,r3,32768
 8001098:	18e00004 	addi	r3,r3,-32768
 800109c:	d8c00115 	stw	r3,4(sp)
 80010a0:	d8800015 	stw	r2,0(sp)
 80010a4:	80014900 	call	8001490 <copy_pix_map_24_to_32>
 80010a8:	e0bffa17 	ldw	r2,-24(fp)
 80010ac:	e037883a 	mov	sp,fp
 80010b0:	dfc00117 	ldw	ra,4(sp)
 80010b4:	df000017 	ldw	fp,0(sp)
 80010b8:	dec00204 	addi	sp,sp,8
 80010bc:	f800283a 	ret

080010c0 <free_gimp_bmp_data>:
 80010c0:	defffd04 	addi	sp,sp,-12
 80010c4:	dfc00215 	stw	ra,8(sp)
 80010c8:	df000115 	stw	fp,4(sp)
 80010cc:	df000104 	addi	fp,sp,4
 80010d0:	e13fff15 	stw	r4,-4(fp)
 80010d4:	e0bfff17 	ldw	r2,-4(fp)
 80010d8:	10800317 	ldw	r2,12(r2)
 80010dc:	1009883a 	mov	r4,r2
 80010e0:	800f49c0 	call	800f49c <free>
 80010e4:	0001883a 	nop
 80010e8:	e037883a 	mov	sp,fp
 80010ec:	dfc00117 	ldw	ra,4(sp)
 80010f0:	df000017 	ldw	fp,0(sp)
 80010f4:	dec00204 	addi	sp,sp,8
 80010f8:	f800283a 	ret

080010fc <copy_pix_map_32_to_32>:
 80010fc:	defff504 	addi	sp,sp,-44
 8001100:	df000a15 	stw	fp,40(sp)
 8001104:	df000a04 	addi	fp,sp,40
 8001108:	e13ffc15 	stw	r4,-16(fp)
 800110c:	e17ffd15 	stw	r5,-12(fp)
 8001110:	e1bffe15 	stw	r6,-8(fp)
 8001114:	e1ffff15 	stw	r7,-4(fp)
 8001118:	e0ffff17 	ldw	r3,-4(fp)
 800111c:	e0bfff17 	ldw	r2,-4(fp)
 8001120:	1887883a 	add	r3,r3,r2
 8001124:	e0bfff17 	ldw	r2,-4(fp)
 8001128:	1887883a 	add	r3,r3,r2
 800112c:	e0bfff17 	ldw	r2,-4(fp)
 8001130:	1885883a 	add	r2,r3,r2
 8001134:	e0bffa15 	stw	r2,-24(fp)
 8001138:	e0c00217 	ldw	r3,8(fp)
 800113c:	e0800217 	ldw	r2,8(fp)
 8001140:	1887883a 	add	r3,r3,r2
 8001144:	e0800217 	ldw	r2,8(fp)
 8001148:	1887883a 	add	r3,r3,r2
 800114c:	e0800217 	ldw	r2,8(fp)
 8001150:	1885883a 	add	r2,r3,r2
 8001154:	e0bffb15 	stw	r2,-20(fp)
 8001158:	e03ff615 	stw	zero,-40(fp)
 800115c:	00002106 	br	80011e4 <copy_pix_map_32_to_32+0xe8>
 8001160:	e0bffc17 	ldw	r2,-16(fp)
 8001164:	e0bff815 	stw	r2,-32(fp)
 8001168:	e0800117 	ldw	r2,4(fp)
 800116c:	e0bff915 	stw	r2,-28(fp)
 8001170:	e03ff715 	stw	zero,-36(fp)
 8001174:	00000d06 	br	80011ac <copy_pix_map_32_to_32+0xb0>
 8001178:	e0bff817 	ldw	r2,-32(fp)
 800117c:	10c00017 	ldw	r3,0(r2)
 8001180:	e0bff917 	ldw	r2,-28(fp)
 8001184:	10c00015 	stw	r3,0(r2)
 8001188:	e0bff817 	ldw	r2,-32(fp)
 800118c:	10800104 	addi	r2,r2,4
 8001190:	e0bff815 	stw	r2,-32(fp)
 8001194:	e0bff917 	ldw	r2,-28(fp)
 8001198:	10800104 	addi	r2,r2,4
 800119c:	e0bff915 	stw	r2,-28(fp)
 80011a0:	e0bff717 	ldw	r2,-36(fp)
 80011a4:	10800044 	addi	r2,r2,1
 80011a8:	e0bff715 	stw	r2,-36(fp)
 80011ac:	e0fff717 	ldw	r3,-36(fp)
 80011b0:	e0bffd17 	ldw	r2,-12(fp)
 80011b4:	18bff016 	blt	r3,r2,8001178 <__alt_data_end+0xf8001178>
 80011b8:	e0bffa17 	ldw	r2,-24(fp)
 80011bc:	e0fffc17 	ldw	r3,-16(fp)
 80011c0:	1885883a 	add	r2,r3,r2
 80011c4:	e0bffc15 	stw	r2,-16(fp)
 80011c8:	e0bffb17 	ldw	r2,-20(fp)
 80011cc:	e0c00117 	ldw	r3,4(fp)
 80011d0:	1885883a 	add	r2,r3,r2
 80011d4:	e0800115 	stw	r2,4(fp)
 80011d8:	e0bff617 	ldw	r2,-40(fp)
 80011dc:	10800044 	addi	r2,r2,1
 80011e0:	e0bff615 	stw	r2,-40(fp)
 80011e4:	e0fff617 	ldw	r3,-40(fp)
 80011e8:	e0bffe17 	ldw	r2,-8(fp)
 80011ec:	18bfdc16 	blt	r3,r2,8001160 <__alt_data_end+0xf8001160>
 80011f0:	0001883a 	nop
 80011f4:	e037883a 	mov	sp,fp
 80011f8:	df000017 	ldw	fp,0(sp)
 80011fc:	dec00104 	addi	sp,sp,4
 8001200:	f800283a 	ret

08001204 <copy_pix_map_32_to_24>:
 8001204:	defff504 	addi	sp,sp,-44
 8001208:	df000a15 	stw	fp,40(sp)
 800120c:	df000a04 	addi	fp,sp,40
 8001210:	e13ffc15 	stw	r4,-16(fp)
 8001214:	e17ffd15 	stw	r5,-12(fp)
 8001218:	e1bffe15 	stw	r6,-8(fp)
 800121c:	e1ffff15 	stw	r7,-4(fp)
 8001220:	e0ffff17 	ldw	r3,-4(fp)
 8001224:	e0bfff17 	ldw	r2,-4(fp)
 8001228:	1887883a 	add	r3,r3,r2
 800122c:	e0bfff17 	ldw	r2,-4(fp)
 8001230:	1887883a 	add	r3,r3,r2
 8001234:	e0bfff17 	ldw	r2,-4(fp)
 8001238:	1885883a 	add	r2,r3,r2
 800123c:	e0bffa15 	stw	r2,-24(fp)
 8001240:	e0c00217 	ldw	r3,8(fp)
 8001244:	e0800217 	ldw	r2,8(fp)
 8001248:	1887883a 	add	r3,r3,r2
 800124c:	e0800217 	ldw	r2,8(fp)
 8001250:	1885883a 	add	r2,r3,r2
 8001254:	e0bffb15 	stw	r2,-20(fp)
 8001258:	e03ff615 	stw	zero,-40(fp)
 800125c:	00003506 	br	8001334 <copy_pix_map_32_to_24+0x130>
 8001260:	e0bffc17 	ldw	r2,-16(fp)
 8001264:	e0bff815 	stw	r2,-32(fp)
 8001268:	e0800117 	ldw	r2,4(fp)
 800126c:	e0bff915 	stw	r2,-28(fp)
 8001270:	e03ff715 	stw	zero,-36(fp)
 8001274:	00002106 	br	80012fc <copy_pix_map_32_to_24+0xf8>
 8001278:	e0bff817 	ldw	r2,-32(fp)
 800127c:	10c00003 	ldbu	r3,0(r2)
 8001280:	e0bff917 	ldw	r2,-28(fp)
 8001284:	10c00005 	stb	r3,0(r2)
 8001288:	e0bff817 	ldw	r2,-32(fp)
 800128c:	10800044 	addi	r2,r2,1
 8001290:	e0bff815 	stw	r2,-32(fp)
 8001294:	e0bff917 	ldw	r2,-28(fp)
 8001298:	10800044 	addi	r2,r2,1
 800129c:	e0bff915 	stw	r2,-28(fp)
 80012a0:	e0bff817 	ldw	r2,-32(fp)
 80012a4:	10c00003 	ldbu	r3,0(r2)
 80012a8:	e0bff917 	ldw	r2,-28(fp)
 80012ac:	10c00005 	stb	r3,0(r2)
 80012b0:	e0bff817 	ldw	r2,-32(fp)
 80012b4:	10800044 	addi	r2,r2,1
 80012b8:	e0bff815 	stw	r2,-32(fp)
 80012bc:	e0bff917 	ldw	r2,-28(fp)
 80012c0:	10800044 	addi	r2,r2,1
 80012c4:	e0bff915 	stw	r2,-28(fp)
 80012c8:	e0bff817 	ldw	r2,-32(fp)
 80012cc:	10c00003 	ldbu	r3,0(r2)
 80012d0:	e0bff917 	ldw	r2,-28(fp)
 80012d4:	10c00005 	stb	r3,0(r2)
 80012d8:	e0bff817 	ldw	r2,-32(fp)
 80012dc:	10800084 	addi	r2,r2,2
 80012e0:	e0bff815 	stw	r2,-32(fp)
 80012e4:	e0bff917 	ldw	r2,-28(fp)
 80012e8:	10800044 	addi	r2,r2,1
 80012ec:	e0bff915 	stw	r2,-28(fp)
 80012f0:	e0bff717 	ldw	r2,-36(fp)
 80012f4:	10800044 	addi	r2,r2,1
 80012f8:	e0bff715 	stw	r2,-36(fp)
 80012fc:	e0fff717 	ldw	r3,-36(fp)
 8001300:	e0bffd17 	ldw	r2,-12(fp)
 8001304:	18bfdc16 	blt	r3,r2,8001278 <__alt_data_end+0xf8001278>
 8001308:	e0bffa17 	ldw	r2,-24(fp)
 800130c:	e0fffc17 	ldw	r3,-16(fp)
 8001310:	1885883a 	add	r2,r3,r2
 8001314:	e0bffc15 	stw	r2,-16(fp)
 8001318:	e0bffb17 	ldw	r2,-20(fp)
 800131c:	e0c00117 	ldw	r3,4(fp)
 8001320:	1885883a 	add	r2,r3,r2
 8001324:	e0800115 	stw	r2,4(fp)
 8001328:	e0bff617 	ldw	r2,-40(fp)
 800132c:	10800044 	addi	r2,r2,1
 8001330:	e0bff615 	stw	r2,-40(fp)
 8001334:	e0fff617 	ldw	r3,-40(fp)
 8001338:	e0bffe17 	ldw	r2,-8(fp)
 800133c:	18bfc816 	blt	r3,r2,8001260 <__alt_data_end+0xf8001260>
 8001340:	0001883a 	nop
 8001344:	e037883a 	mov	sp,fp
 8001348:	df000017 	ldw	fp,0(sp)
 800134c:	dec00104 	addi	sp,sp,4
 8001350:	f800283a 	ret

08001354 <copy_pix_map_32_to_16>:
 8001354:	defff304 	addi	sp,sp,-52
 8001358:	df000c15 	stw	fp,48(sp)
 800135c:	df000c04 	addi	fp,sp,48
 8001360:	e13ffc15 	stw	r4,-16(fp)
 8001364:	e17ffd15 	stw	r5,-12(fp)
 8001368:	e1bffe15 	stw	r6,-8(fp)
 800136c:	e1ffff15 	stw	r7,-4(fp)
 8001370:	e0ffff17 	ldw	r3,-4(fp)
 8001374:	e0bfff17 	ldw	r2,-4(fp)
 8001378:	1887883a 	add	r3,r3,r2
 800137c:	e0bfff17 	ldw	r2,-4(fp)
 8001380:	1887883a 	add	r3,r3,r2
 8001384:	e0bfff17 	ldw	r2,-4(fp)
 8001388:	1885883a 	add	r2,r3,r2
 800138c:	e0bff815 	stw	r2,-32(fp)
 8001390:	e0c00217 	ldw	r3,8(fp)
 8001394:	e0800217 	ldw	r2,8(fp)
 8001398:	1885883a 	add	r2,r3,r2
 800139c:	e0bff915 	stw	r2,-28(fp)
 80013a0:	e03ff415 	stw	zero,-48(fp)
 80013a4:	00003206 	br	8001470 <copy_pix_map_32_to_16+0x11c>
 80013a8:	e0bffc17 	ldw	r2,-16(fp)
 80013ac:	e0bff615 	stw	r2,-40(fp)
 80013b0:	e0800117 	ldw	r2,4(fp)
 80013b4:	e0bff715 	stw	r2,-36(fp)
 80013b8:	e03ff515 	stw	zero,-44(fp)
 80013bc:	00001e06 	br	8001438 <copy_pix_map_32_to_16+0xe4>
 80013c0:	e0bff617 	ldw	r2,-40(fp)
 80013c4:	10800017 	ldw	r2,0(r2)
 80013c8:	e0bffa15 	stw	r2,-24(fp)
 80013cc:	e0bff617 	ldw	r2,-40(fp)
 80013d0:	10800104 	addi	r2,r2,4
 80013d4:	e0bff615 	stw	r2,-40(fp)
 80013d8:	e0bffa17 	ldw	r2,-24(fp)
 80013dc:	1004d0fa 	srli	r2,r2,3
 80013e0:	100492fa 	slli	r2,r2,11
 80013e4:	1007883a 	mov	r3,r2
 80013e8:	e0bffa17 	ldw	r2,-24(fp)
 80013ec:	1004d2ba 	srli	r2,r2,10
 80013f0:	10800fcc 	andi	r2,r2,63
 80013f4:	1004917a 	slli	r2,r2,5
 80013f8:	1884b03a 	or	r2,r3,r2
 80013fc:	1007883a 	mov	r3,r2
 8001400:	e0bffa17 	ldw	r2,-24(fp)
 8001404:	1004d4fa 	srli	r2,r2,19
 8001408:	108007cc 	andi	r2,r2,31
 800140c:	1884b03a 	or	r2,r3,r2
 8001410:	e0bffb0d 	sth	r2,-20(fp)
 8001414:	e0bff717 	ldw	r2,-36(fp)
 8001418:	e0fffb0b 	ldhu	r3,-20(fp)
 800141c:	10c0000d 	sth	r3,0(r2)
 8001420:	e0bff717 	ldw	r2,-36(fp)
 8001424:	10800084 	addi	r2,r2,2
 8001428:	e0bff715 	stw	r2,-36(fp)
 800142c:	e0bff517 	ldw	r2,-44(fp)
 8001430:	10800044 	addi	r2,r2,1
 8001434:	e0bff515 	stw	r2,-44(fp)
 8001438:	e0fff517 	ldw	r3,-44(fp)
 800143c:	e0bffd17 	ldw	r2,-12(fp)
 8001440:	18bfdf16 	blt	r3,r2,80013c0 <__alt_data_end+0xf80013c0>
 8001444:	e0bff817 	ldw	r2,-32(fp)
 8001448:	e0fffc17 	ldw	r3,-16(fp)
 800144c:	1885883a 	add	r2,r3,r2
 8001450:	e0bffc15 	stw	r2,-16(fp)
 8001454:	e0bff917 	ldw	r2,-28(fp)
 8001458:	e0c00117 	ldw	r3,4(fp)
 800145c:	1885883a 	add	r2,r3,r2
 8001460:	e0800115 	stw	r2,4(fp)
 8001464:	e0bff417 	ldw	r2,-48(fp)
 8001468:	10800044 	addi	r2,r2,1
 800146c:	e0bff415 	stw	r2,-48(fp)
 8001470:	e0fff417 	ldw	r3,-48(fp)
 8001474:	e0bffe17 	ldw	r2,-8(fp)
 8001478:	18bfcb16 	blt	r3,r2,80013a8 <__alt_data_end+0xf80013a8>
 800147c:	0001883a 	nop
 8001480:	e037883a 	mov	sp,fp
 8001484:	df000017 	ldw	fp,0(sp)
 8001488:	dec00104 	addi	sp,sp,4
 800148c:	f800283a 	ret

08001490 <copy_pix_map_24_to_32>:
 8001490:	defff504 	addi	sp,sp,-44
 8001494:	df000a15 	stw	fp,40(sp)
 8001498:	df000a04 	addi	fp,sp,40
 800149c:	e13ffc15 	stw	r4,-16(fp)
 80014a0:	e17ffd15 	stw	r5,-12(fp)
 80014a4:	e1bffe15 	stw	r6,-8(fp)
 80014a8:	e1ffff15 	stw	r7,-4(fp)
 80014ac:	e0ffff17 	ldw	r3,-4(fp)
 80014b0:	e0bfff17 	ldw	r2,-4(fp)
 80014b4:	1887883a 	add	r3,r3,r2
 80014b8:	e0bfff17 	ldw	r2,-4(fp)
 80014bc:	1885883a 	add	r2,r3,r2
 80014c0:	e0bffa15 	stw	r2,-24(fp)
 80014c4:	e0c00217 	ldw	r3,8(fp)
 80014c8:	e0800217 	ldw	r2,8(fp)
 80014cc:	1887883a 	add	r3,r3,r2
 80014d0:	e0800217 	ldw	r2,8(fp)
 80014d4:	1887883a 	add	r3,r3,r2
 80014d8:	e0800217 	ldw	r2,8(fp)
 80014dc:	1885883a 	add	r2,r3,r2
 80014e0:	e0bffb15 	stw	r2,-20(fp)
 80014e4:	e03ff615 	stw	zero,-40(fp)
 80014e8:	00003d06 	br	80015e0 <copy_pix_map_24_to_32+0x150>
 80014ec:	e0bffc17 	ldw	r2,-16(fp)
 80014f0:	e0bff815 	stw	r2,-32(fp)
 80014f4:	e0800117 	ldw	r2,4(fp)
 80014f8:	e0bff915 	stw	r2,-28(fp)
 80014fc:	e03ff715 	stw	zero,-36(fp)
 8001500:	00002906 	br	80015a8 <copy_pix_map_24_to_32+0x118>
 8001504:	e0bff917 	ldw	r2,-28(fp)
 8001508:	10800084 	addi	r2,r2,2
 800150c:	e0fff817 	ldw	r3,-32(fp)
 8001510:	18c00003 	ldbu	r3,0(r3)
 8001514:	10c00005 	stb	r3,0(r2)
 8001518:	e0bff817 	ldw	r2,-32(fp)
 800151c:	10800044 	addi	r2,r2,1
 8001520:	e0bff815 	stw	r2,-32(fp)
 8001524:	e0bff917 	ldw	r2,-28(fp)
 8001528:	10800044 	addi	r2,r2,1
 800152c:	e0bff915 	stw	r2,-28(fp)
 8001530:	e0bff817 	ldw	r2,-32(fp)
 8001534:	10c00003 	ldbu	r3,0(r2)
 8001538:	e0bff917 	ldw	r2,-28(fp)
 800153c:	10c00005 	stb	r3,0(r2)
 8001540:	e0bff817 	ldw	r2,-32(fp)
 8001544:	10800044 	addi	r2,r2,1
 8001548:	e0bff815 	stw	r2,-32(fp)
 800154c:	e0bff917 	ldw	r2,-28(fp)
 8001550:	10800044 	addi	r2,r2,1
 8001554:	e0bff915 	stw	r2,-28(fp)
 8001558:	e0bff917 	ldw	r2,-28(fp)
 800155c:	10bfff84 	addi	r2,r2,-2
 8001560:	e0fff817 	ldw	r3,-32(fp)
 8001564:	18c00003 	ldbu	r3,0(r3)
 8001568:	10c00005 	stb	r3,0(r2)
 800156c:	e0bff817 	ldw	r2,-32(fp)
 8001570:	10800044 	addi	r2,r2,1
 8001574:	e0bff815 	stw	r2,-32(fp)
 8001578:	e0bff917 	ldw	r2,-28(fp)
 800157c:	10800044 	addi	r2,r2,1
 8001580:	e0bff915 	stw	r2,-28(fp)
 8001584:	e0bff917 	ldw	r2,-28(fp)
 8001588:	00ffffc4 	movi	r3,-1
 800158c:	10c00005 	stb	r3,0(r2)
 8001590:	e0bff917 	ldw	r2,-28(fp)
 8001594:	10800044 	addi	r2,r2,1
 8001598:	e0bff915 	stw	r2,-28(fp)
 800159c:	e0bff717 	ldw	r2,-36(fp)
 80015a0:	10800044 	addi	r2,r2,1
 80015a4:	e0bff715 	stw	r2,-36(fp)
 80015a8:	e0fff717 	ldw	r3,-36(fp)
 80015ac:	e0bffd17 	ldw	r2,-12(fp)
 80015b0:	18bfd416 	blt	r3,r2,8001504 <__alt_data_end+0xf8001504>
 80015b4:	e0bffa17 	ldw	r2,-24(fp)
 80015b8:	e0fffc17 	ldw	r3,-16(fp)
 80015bc:	1885883a 	add	r2,r3,r2
 80015c0:	e0bffc15 	stw	r2,-16(fp)
 80015c4:	e0bffb17 	ldw	r2,-20(fp)
 80015c8:	e0c00117 	ldw	r3,4(fp)
 80015cc:	1885883a 	add	r2,r3,r2
 80015d0:	e0800115 	stw	r2,4(fp)
 80015d4:	e0bff617 	ldw	r2,-40(fp)
 80015d8:	10800044 	addi	r2,r2,1
 80015dc:	e0bff615 	stw	r2,-40(fp)
 80015e0:	e0fff617 	ldw	r3,-40(fp)
 80015e4:	e0bffe17 	ldw	r2,-8(fp)
 80015e8:	18bfc016 	blt	r3,r2,80014ec <__alt_data_end+0xf80014ec>
 80015ec:	0001883a 	nop
 80015f0:	e037883a 	mov	sp,fp
 80015f4:	df000017 	ldw	fp,0(sp)
 80015f8:	dec00104 	addi	sp,sp,4
 80015fc:	f800283a 	ret

08001600 <copy_pix_map_24_to_24>:
 8001600:	defff504 	addi	sp,sp,-44
 8001604:	df000a15 	stw	fp,40(sp)
 8001608:	df000a04 	addi	fp,sp,40
 800160c:	e13ffc15 	stw	r4,-16(fp)
 8001610:	e17ffd15 	stw	r5,-12(fp)
 8001614:	e1bffe15 	stw	r6,-8(fp)
 8001618:	e1ffff15 	stw	r7,-4(fp)
 800161c:	e0ffff17 	ldw	r3,-4(fp)
 8001620:	e0bfff17 	ldw	r2,-4(fp)
 8001624:	1887883a 	add	r3,r3,r2
 8001628:	e0bfff17 	ldw	r2,-4(fp)
 800162c:	1885883a 	add	r2,r3,r2
 8001630:	e0bffa15 	stw	r2,-24(fp)
 8001634:	e0c00217 	ldw	r3,8(fp)
 8001638:	e0800217 	ldw	r2,8(fp)
 800163c:	1887883a 	add	r3,r3,r2
 8001640:	e0800217 	ldw	r2,8(fp)
 8001644:	1885883a 	add	r2,r3,r2
 8001648:	e0bffb15 	stw	r2,-20(fp)
 800164c:	e03ff615 	stw	zero,-40(fp)
 8001650:	00003506 	br	8001728 <copy_pix_map_24_to_24+0x128>
 8001654:	e0bffc17 	ldw	r2,-16(fp)
 8001658:	e0bff815 	stw	r2,-32(fp)
 800165c:	e0800117 	ldw	r2,4(fp)
 8001660:	e0bff915 	stw	r2,-28(fp)
 8001664:	e03ff715 	stw	zero,-36(fp)
 8001668:	00002106 	br	80016f0 <copy_pix_map_24_to_24+0xf0>
 800166c:	e0bff817 	ldw	r2,-32(fp)
 8001670:	10c00003 	ldbu	r3,0(r2)
 8001674:	e0bff917 	ldw	r2,-28(fp)
 8001678:	10c00005 	stb	r3,0(r2)
 800167c:	e0bff817 	ldw	r2,-32(fp)
 8001680:	10800044 	addi	r2,r2,1
 8001684:	e0bff815 	stw	r2,-32(fp)
 8001688:	e0bff917 	ldw	r2,-28(fp)
 800168c:	10800044 	addi	r2,r2,1
 8001690:	e0bff915 	stw	r2,-28(fp)
 8001694:	e0bff817 	ldw	r2,-32(fp)
 8001698:	10c00003 	ldbu	r3,0(r2)
 800169c:	e0bff917 	ldw	r2,-28(fp)
 80016a0:	10c00005 	stb	r3,0(r2)
 80016a4:	e0bff817 	ldw	r2,-32(fp)
 80016a8:	10800044 	addi	r2,r2,1
 80016ac:	e0bff815 	stw	r2,-32(fp)
 80016b0:	e0bff917 	ldw	r2,-28(fp)
 80016b4:	10800044 	addi	r2,r2,1
 80016b8:	e0bff915 	stw	r2,-28(fp)
 80016bc:	e0bff817 	ldw	r2,-32(fp)
 80016c0:	10c00003 	ldbu	r3,0(r2)
 80016c4:	e0bff917 	ldw	r2,-28(fp)
 80016c8:	10c00005 	stb	r3,0(r2)
 80016cc:	e0bff817 	ldw	r2,-32(fp)
 80016d0:	10800044 	addi	r2,r2,1
 80016d4:	e0bff815 	stw	r2,-32(fp)
 80016d8:	e0bff917 	ldw	r2,-28(fp)
 80016dc:	10800044 	addi	r2,r2,1
 80016e0:	e0bff915 	stw	r2,-28(fp)
 80016e4:	e0bff717 	ldw	r2,-36(fp)
 80016e8:	10800044 	addi	r2,r2,1
 80016ec:	e0bff715 	stw	r2,-36(fp)
 80016f0:	e0fff717 	ldw	r3,-36(fp)
 80016f4:	e0bffd17 	ldw	r2,-12(fp)
 80016f8:	18bfdc16 	blt	r3,r2,800166c <__alt_data_end+0xf800166c>
 80016fc:	e0bffa17 	ldw	r2,-24(fp)
 8001700:	e0fffc17 	ldw	r3,-16(fp)
 8001704:	1885883a 	add	r2,r3,r2
 8001708:	e0bffc15 	stw	r2,-16(fp)
 800170c:	e0bffb17 	ldw	r2,-20(fp)
 8001710:	e0c00117 	ldw	r3,4(fp)
 8001714:	1885883a 	add	r2,r3,r2
 8001718:	e0800115 	stw	r2,4(fp)
 800171c:	e0bff617 	ldw	r2,-40(fp)
 8001720:	10800044 	addi	r2,r2,1
 8001724:	e0bff615 	stw	r2,-40(fp)
 8001728:	e0fff617 	ldw	r3,-40(fp)
 800172c:	e0bffe17 	ldw	r2,-8(fp)
 8001730:	18bfc816 	blt	r3,r2,8001654 <__alt_data_end+0xf8001654>
 8001734:	0001883a 	nop
 8001738:	e037883a 	mov	sp,fp
 800173c:	df000017 	ldw	fp,0(sp)
 8001740:	dec00104 	addi	sp,sp,4
 8001744:	f800283a 	ret

08001748 <copy_pix_map_24_to_16>:
 8001748:	defff404 	addi	sp,sp,-48
 800174c:	df000b15 	stw	fp,44(sp)
 8001750:	df000b04 	addi	fp,sp,44
 8001754:	e13ffc15 	stw	r4,-16(fp)
 8001758:	e17ffd15 	stw	r5,-12(fp)
 800175c:	e1bffe15 	stw	r6,-8(fp)
 8001760:	e1ffff15 	stw	r7,-4(fp)
 8001764:	e0ffff17 	ldw	r3,-4(fp)
 8001768:	e0bfff17 	ldw	r2,-4(fp)
 800176c:	1887883a 	add	r3,r3,r2
 8001770:	e0bfff17 	ldw	r2,-4(fp)
 8001774:	1885883a 	add	r2,r3,r2
 8001778:	e0bff915 	stw	r2,-28(fp)
 800177c:	e0c00217 	ldw	r3,8(fp)
 8001780:	e0800217 	ldw	r2,8(fp)
 8001784:	1885883a 	add	r2,r3,r2
 8001788:	e0bffa15 	stw	r2,-24(fp)
 800178c:	e03ff515 	stw	zero,-44(fp)
 8001790:	00003d06 	br	8001888 <copy_pix_map_24_to_16+0x140>
 8001794:	e0bffc17 	ldw	r2,-16(fp)
 8001798:	e0bff715 	stw	r2,-36(fp)
 800179c:	e0800117 	ldw	r2,4(fp)
 80017a0:	e0bff815 	stw	r2,-32(fp)
 80017a4:	e03ff615 	stw	zero,-40(fp)
 80017a8:	00002906 	br	8001850 <copy_pix_map_24_to_16+0x108>
 80017ac:	e0bff717 	ldw	r2,-36(fp)
 80017b0:	10800003 	ldbu	r2,0(r2)
 80017b4:	10803fcc 	andi	r2,r2,255
 80017b8:	10803e0c 	andi	r2,r2,248
 80017bc:	1004923a 	slli	r2,r2,8
 80017c0:	e0bffb0d 	sth	r2,-20(fp)
 80017c4:	e0bff717 	ldw	r2,-36(fp)
 80017c8:	10800044 	addi	r2,r2,1
 80017cc:	e0bff715 	stw	r2,-36(fp)
 80017d0:	e0bff717 	ldw	r2,-36(fp)
 80017d4:	10800003 	ldbu	r2,0(r2)
 80017d8:	10803fcc 	andi	r2,r2,255
 80017dc:	10803f0c 	andi	r2,r2,252
 80017e0:	100490fa 	slli	r2,r2,3
 80017e4:	1007883a 	mov	r3,r2
 80017e8:	e0bffb0b 	ldhu	r2,-20(fp)
 80017ec:	1884b03a 	or	r2,r3,r2
 80017f0:	e0bffb0d 	sth	r2,-20(fp)
 80017f4:	e0bff717 	ldw	r2,-36(fp)
 80017f8:	10800044 	addi	r2,r2,1
 80017fc:	e0bff715 	stw	r2,-36(fp)
 8001800:	e0bff717 	ldw	r2,-36(fp)
 8001804:	10800003 	ldbu	r2,0(r2)
 8001808:	10803fcc 	andi	r2,r2,255
 800180c:	1004d0fa 	srli	r2,r2,3
 8001810:	10c03fcc 	andi	r3,r2,255
 8001814:	e0bffb0b 	ldhu	r2,-20(fp)
 8001818:	1884b03a 	or	r2,r3,r2
 800181c:	e0bffb0d 	sth	r2,-20(fp)
 8001820:	e0bff717 	ldw	r2,-36(fp)
 8001824:	10800044 	addi	r2,r2,1
 8001828:	e0bff715 	stw	r2,-36(fp)
 800182c:	e0bff817 	ldw	r2,-32(fp)
 8001830:	e0fffb0b 	ldhu	r3,-20(fp)
 8001834:	10c0000d 	sth	r3,0(r2)
 8001838:	e0bff817 	ldw	r2,-32(fp)
 800183c:	10800084 	addi	r2,r2,2
 8001840:	e0bff815 	stw	r2,-32(fp)
 8001844:	e0bff617 	ldw	r2,-40(fp)
 8001848:	10800044 	addi	r2,r2,1
 800184c:	e0bff615 	stw	r2,-40(fp)
 8001850:	e0fff617 	ldw	r3,-40(fp)
 8001854:	e0bffd17 	ldw	r2,-12(fp)
 8001858:	18bfd416 	blt	r3,r2,80017ac <__alt_data_end+0xf80017ac>
 800185c:	e0bff917 	ldw	r2,-28(fp)
 8001860:	e0fffc17 	ldw	r3,-16(fp)
 8001864:	1885883a 	add	r2,r3,r2
 8001868:	e0bffc15 	stw	r2,-16(fp)
 800186c:	e0bffa17 	ldw	r2,-24(fp)
 8001870:	e0c00117 	ldw	r3,4(fp)
 8001874:	1885883a 	add	r2,r3,r2
 8001878:	e0800115 	stw	r2,4(fp)
 800187c:	e0bff517 	ldw	r2,-44(fp)
 8001880:	10800044 	addi	r2,r2,1
 8001884:	e0bff515 	stw	r2,-44(fp)
 8001888:	e0fff517 	ldw	r3,-44(fp)
 800188c:	e0bffe17 	ldw	r2,-8(fp)
 8001890:	18bfc016 	blt	r3,r2,8001794 <__alt_data_end+0xf8001794>
 8001894:	0001883a 	nop
 8001898:	e037883a 	mov	sp,fp
 800189c:	df000017 	ldw	fp,0(sp)
 80018a0:	dec00104 	addi	sp,sp,4
 80018a4:	f800283a 	ret

080018a8 <IsPtInRect>:
#include "simple_graphics.h"
#include "sys/alt_alarm.h"
#include "sys/alt_cache.h"
#include "system.h"

int IsPtInRect(POINT *pt, RECT *rc){
 80018a8:	defffc04 	addi	sp,sp,-16
 80018ac:	df000315 	stw	fp,12(sp)
 80018b0:	df000304 	addi	fp,sp,12
 80018b4:	e13ffe15 	stw	r4,-8(fp)
 80018b8:	e17fff15 	stw	r5,-4(fp)
	int bYes = FALSE;
 80018bc:	e03ffd15 	stw	zero,-12(fp)

    if (pt->x >= rc->left && pt->x <= rc->right && pt->y >= rc->top && pt->y <= rc->bottom)
 80018c0:	e0bffe17 	ldw	r2,-8(fp)
 80018c4:	10c00017 	ldw	r3,0(r2)
 80018c8:	e0bfff17 	ldw	r2,-4(fp)
 80018cc:	10800017 	ldw	r2,0(r2)
 80018d0:	18801116 	blt	r3,r2,8001918 <IsPtInRect+0x70>
 80018d4:	e0bffe17 	ldw	r2,-8(fp)
 80018d8:	10800017 	ldw	r2,0(r2)
 80018dc:	e0ffff17 	ldw	r3,-4(fp)
 80018e0:	18c00117 	ldw	r3,4(r3)
 80018e4:	18800c16 	blt	r3,r2,8001918 <IsPtInRect+0x70>
 80018e8:	e0bffe17 	ldw	r2,-8(fp)
 80018ec:	10c00117 	ldw	r3,4(r2)
 80018f0:	e0bfff17 	ldw	r2,-4(fp)
 80018f4:	10800217 	ldw	r2,8(r2)
 80018f8:	18800716 	blt	r3,r2,8001918 <IsPtInRect+0x70>
 80018fc:	e0bffe17 	ldw	r2,-8(fp)
 8001900:	10800117 	ldw	r2,4(r2)
 8001904:	e0ffff17 	ldw	r3,-4(fp)
 8001908:	18c00317 	ldw	r3,12(r3)
 800190c:	18800216 	blt	r3,r2,8001918 <IsPtInRect+0x70>
        bYes = TRUE;
 8001910:	00800044 	movi	r2,1
 8001914:	e0bffd15 	stw	r2,-12(fp)

    return bYes;
 8001918:	e0bffd17 	ldw	r2,-12(fp)
}
 800191c:	e037883a 	mov	sp,fp
 8001920:	df000017 	ldw	fp,0(sp)
 8001924:	dec00104 	addi	sp,sp,4
 8001928:	f800283a 	ret

0800192c <PtSet>:

void PtSet(POINT *pt, int x, int y){
 800192c:	defffc04 	addi	sp,sp,-16
 8001930:	df000315 	stw	fp,12(sp)
 8001934:	df000304 	addi	fp,sp,12
 8001938:	e13ffd15 	stw	r4,-12(fp)
 800193c:	e17ffe15 	stw	r5,-8(fp)
 8001940:	e1bfff15 	stw	r6,-4(fp)
    pt->x = x;
 8001944:	e0bffd17 	ldw	r2,-12(fp)
 8001948:	e0fffe17 	ldw	r3,-8(fp)
 800194c:	10c00015 	stw	r3,0(r2)
    pt->y = y;
 8001950:	e0bffd17 	ldw	r2,-12(fp)
 8001954:	e0ffff17 	ldw	r3,-4(fp)
 8001958:	10c00115 	stw	r3,4(r2)
}
 800195c:	e037883a 	mov	sp,fp
 8001960:	df000017 	ldw	fp,0(sp)
 8001964:	dec00104 	addi	sp,sp,4
 8001968:	f800283a 	ret

0800196c <RectSet>:

void RectSet(RECT *rc, int left, int right, int top, int bottom){
 800196c:	defffb04 	addi	sp,sp,-20
 8001970:	df000415 	stw	fp,16(sp)
 8001974:	df000404 	addi	fp,sp,16
 8001978:	e13ffc15 	stw	r4,-16(fp)
 800197c:	e17ffd15 	stw	r5,-12(fp)
 8001980:	e1bffe15 	stw	r6,-8(fp)
 8001984:	e1ffff15 	stw	r7,-4(fp)
    rc->left = left;
 8001988:	e0bffc17 	ldw	r2,-16(fp)
 800198c:	e0fffd17 	ldw	r3,-12(fp)
 8001990:	10c00015 	stw	r3,0(r2)
    rc->right = right;
 8001994:	e0bffc17 	ldw	r2,-16(fp)
 8001998:	e0fffe17 	ldw	r3,-8(fp)
 800199c:	10c00115 	stw	r3,4(r2)
    rc->top = top;
 80019a0:	e0bffc17 	ldw	r2,-16(fp)
 80019a4:	e0ffff17 	ldw	r3,-4(fp)
 80019a8:	10c00215 	stw	r3,8(r2)
    rc->bottom = bottom;
 80019ac:	e0bffc17 	ldw	r2,-16(fp)
 80019b0:	e0c00117 	ldw	r3,4(fp)
 80019b4:	10c00315 	stw	r3,12(r2)
}
 80019b8:	e037883a 	mov	sp,fp
 80019bc:	df000017 	ldw	fp,0(sp)
 80019c0:	dec00104 	addi	sp,sp,4
 80019c4:	f800283a 	ret

080019c8 <vid_draw_line>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 80019c8:	defff704 	addi	sp,sp,-36
 80019cc:	dfc00815 	stw	ra,32(sp)
 80019d0:	df000715 	stw	fp,28(sp)
 80019d4:	df000704 	addi	fp,sp,28
 80019d8:	e13ffc15 	stw	r4,-16(fp)
 80019dc:	e17ffd15 	stw	r5,-12(fp)
 80019e0:	e1bffe15 	stw	r6,-8(fp)
 80019e4:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 80019e8:	e0fffd17 	ldw	r3,-12(fp)
 80019ec:	e0bfff17 	ldw	r2,-4(fp)
 80019f0:	1880101e 	bne	r3,r2,8001a34 <vid_draw_line+0x6c>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 80019f4:	e0bffc17 	ldw	r2,-16(fp)
 80019f8:	113fffcc 	andi	r4,r2,65535
 80019fc:	2120001c 	xori	r4,r4,32768
 8001a00:	21200004 	addi	r4,r4,-32768
 8001a04:	e0bffe17 	ldw	r2,-8(fp)
 8001a08:	117fffcc 	andi	r5,r2,65535
 8001a0c:	2960001c 	xori	r5,r5,32768
 8001a10:	29600004 	addi	r5,r5,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
 8001a14:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line( (unsigned short)horiz_start, 
 8001a18:	10ffffcc 	andi	r3,r2,65535
 8001a1c:	e0800417 	ldw	r2,16(fp)
 8001a20:	d8800015 	stw	r2,0(sp)
 8001a24:	180d883a 	mov	r6,r3
 8001a28:	e1c00317 	ldw	r7,12(fp)
 8001a2c:	80028a00 	call	80028a0 <vid_draw_horiz_line>
 8001a30:	00001106 	br	8001a78 <vid_draw_line+0xb0>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 8001a34:	e0bffc17 	ldw	r2,-16(fp)
 8001a38:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
 8001a3c:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 8001a40:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
 8001a44:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 8001a48:	11bfffcc 	andi	r6,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
 8001a4c:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 8001a50:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
 8001a54:	e0800217 	ldw	r2,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line( (unsigned short)horiz_start, 
 8001a58:	10bfffcc 	andi	r2,r2,65535
 8001a5c:	d8800015 	stw	r2,0(sp)
 8001a60:	e0800317 	ldw	r2,12(fp)
 8001a64:	d8800115 	stw	r2,4(sp)
 8001a68:	e0800417 	ldw	r2,16(fp)
 8001a6c:	d8800215 	stw	r2,8(sp)
 8001a70:	180f883a 	mov	r7,r3
 8001a74:	8002fec0 	call	8002fec <vid_draw_sloped_line>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 8001a78:	e037883a 	mov	sp,fp
 8001a7c:	dfc00117 	ldw	ra,4(sp)
 8001a80:	df000017 	ldw	fp,0(sp)
 8001a84:	dec00204 	addi	sp,sp,8
 8001a88:	f800283a 	ret

08001a8c <vid_scroll_string_quit>:



void vid_scroll_string_quit(vid_text_scroll_struct* scroll)
{
 8001a8c:	defffd04 	addi	sp,sp,-12
 8001a90:	dfc00215 	stw	ra,8(sp)
 8001a94:	df000115 	stw	fp,4(sp)
 8001a98:	df000104 	addi	fp,sp,4
 8001a9c:	e13fff15 	stw	r4,-4(fp)
  free(scroll->string);
 8001aa0:	e0bfff17 	ldw	r2,-4(fp)
 8001aa4:	10800517 	ldw	r2,20(r2)
 8001aa8:	1009883a 	mov	r4,r2
 8001aac:	800f49c0 	call	800f49c <free>
  free(scroll);
 8001ab0:	e13fff17 	ldw	r4,-4(fp)
 8001ab4:	800f49c0 	call	800f49c <free>
}
 8001ab8:	e037883a 	mov	sp,fp
 8001abc:	dfc00117 	ldw	ra,4(sp)
 8001ac0:	df000017 	ldw	fp,0(sp)
 8001ac4:	dec00204 	addi	sp,sp,8
 8001ac8:	f800283a 	ret

08001acc <vid_scroll_string_init>:

vid_text_scroll_struct* vid_scroll_string_init(int hbegin, int vbegin, int hend, int f_color, int b_color, char* font, int ms_delay, char *string)
{
 8001acc:	defff904 	addi	sp,sp,-28
 8001ad0:	dfc00615 	stw	ra,24(sp)
 8001ad4:	df000515 	stw	fp,20(sp)
 8001ad8:	df000504 	addi	fp,sp,20
 8001adc:	e13ffc15 	stw	r4,-16(fp)
 8001ae0:	e17ffd15 	stw	r5,-12(fp)
 8001ae4:	e1bffe15 	stw	r6,-8(fp)
 8001ae8:	e1ffff15 	stw	r7,-4(fp)
  vid_text_scroll_struct* scroll;
  scroll = malloc(sizeof (vid_text_scroll_struct));
 8001aec:	01000f04 	movi	r4,60
 8001af0:	800f4880 	call	800f488 <malloc>
 8001af4:	e0bffb15 	stw	r2,-20(fp)
  
  scroll->hbegin = hbegin;
 8001af8:	e0bffb17 	ldw	r2,-20(fp)
 8001afc:	e0fffc17 	ldw	r3,-16(fp)
 8001b00:	10c00015 	stw	r3,0(r2)
  scroll->vbegin = vbegin;
 8001b04:	e0bffb17 	ldw	r2,-20(fp)
 8001b08:	e0fffd17 	ldw	r3,-12(fp)
 8001b0c:	10c00115 	stw	r3,4(r2)
  scroll->hend = hend;
 8001b10:	e0bffb17 	ldw	r2,-20(fp)
 8001b14:	e0fffe17 	ldw	r3,-8(fp)
 8001b18:	10c00215 	stw	r3,8(r2)
  scroll->f_color = f_color;
 8001b1c:	e0bffb17 	ldw	r2,-20(fp)
 8001b20:	e0ffff17 	ldw	r3,-4(fp)
 8001b24:	10c00315 	stw	r3,12(r2)
  scroll->b_color = b_color;
 8001b28:	e0bffb17 	ldw	r2,-20(fp)
 8001b2c:	e0c00217 	ldw	r3,8(fp)
 8001b30:	10c00415 	stw	r3,16(r2)
  scroll->string = malloc(strlen(string)+2);
 8001b34:	e1000517 	ldw	r4,20(fp)
 8001b38:	801033c0 	call	801033c <strlen>
 8001b3c:	10800084 	addi	r2,r2,2
 8001b40:	1009883a 	mov	r4,r2
 8001b44:	800f4880 	call	800f488 <malloc>
 8001b48:	1007883a 	mov	r3,r2
 8001b4c:	e0bffb17 	ldw	r2,-20(fp)
 8001b50:	10c00515 	stw	r3,20(r2)
  strcpy(scroll->string, string);
 8001b54:	e0bffb17 	ldw	r2,-20(fp)
 8001b58:	10800517 	ldw	r2,20(r2)
 8001b5c:	1009883a 	mov	r4,r2
 8001b60:	e1400517 	ldw	r5,20(fp)
 8001b64:	80102ac0 	call	80102ac <strcpy>
  scroll->font = font;
 8001b68:	e0bffb17 	ldw	r2,-20(fp)
 8001b6c:	e0c00317 	ldw	r3,12(fp)
 8001b70:	10c00615 	stw	r3,24(r2)
  scroll->ms_delay = ms_delay;
 8001b74:	e0bffb17 	ldw	r2,-20(fp)
 8001b78:	e0c00417 	ldw	r3,16(fp)
 8001b7c:	10c00715 	stw	r3,28(r2)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001b80:	008205f4 	movhi	r2,2071
 8001b84:	10ae7204 	addi	r2,r2,-17976
 8001b88:	10800017 	ldw	r2,0(r2)
  scroll->ticks_at_last_move = alt_nticks();
 8001b8c:	1007883a 	mov	r3,r2
 8001b90:	e0bffb17 	ldw	r2,-20(fp)
 8001b94:	10c00815 	stw	r3,32(r2)
  scroll->text_scroll_index = 0;
 8001b98:	e0bffb17 	ldw	r2,-20(fp)
 8001b9c:	10000915 	stw	zero,36(r2)
  scroll->text_scroll_started = 0;
 8001ba0:	e0bffb17 	ldw	r2,-20(fp)
 8001ba4:	10000a05 	stb	zero,40(r2)
  scroll->window_width = scroll->hend - scroll->hbegin;
 8001ba8:	e0bffb17 	ldw	r2,-20(fp)
 8001bac:	10c00217 	ldw	r3,8(r2)
 8001bb0:	e0bffb17 	ldw	r2,-20(fp)
 8001bb4:	10800017 	ldw	r2,0(r2)
 8001bb8:	1887c83a 	sub	r3,r3,r2
 8001bbc:	e0bffb17 	ldw	r2,-20(fp)
 8001bc0:	10c00b15 	stw	r3,44(r2)
  scroll->length_of_string = strlen(string);
 8001bc4:	e1000517 	ldw	r4,20(fp)
 8001bc8:	801033c0 	call	801033c <strlen>
 8001bcc:	1007883a 	mov	r3,r2
 8001bd0:	e0bffb17 	ldw	r2,-20(fp)
 8001bd4:	10c00c15 	stw	r3,48(r2)
  scroll->string_points = scroll->length_of_string * 8;
 8001bd8:	e0bffb17 	ldw	r2,-20(fp)
 8001bdc:	10800c17 	ldw	r2,48(r2)
 8001be0:	100690fa 	slli	r3,r2,3
 8001be4:	e0bffb17 	ldw	r2,-20(fp)
 8001be8:	10c00e15 	stw	r3,56(r2)
  scroll->scroll_points = (scroll->window_width + scroll->string_points);
 8001bec:	e0bffb17 	ldw	r2,-20(fp)
 8001bf0:	10c00b17 	ldw	r3,44(r2)
 8001bf4:	e0bffb17 	ldw	r2,-20(fp)
 8001bf8:	10800e17 	ldw	r2,56(r2)
 8001bfc:	1887883a 	add	r3,r3,r2
 8001c00:	e0bffb17 	ldw	r2,-20(fp)
 8001c04:	10c00d15 	stw	r3,52(r2)
 
  return(scroll);
 8001c08:	e0bffb17 	ldw	r2,-20(fp)
  
}
 8001c0c:	e037883a 	mov	sp,fp
 8001c10:	dfc00117 	ldw	ra,4(sp)
 8001c14:	df000017 	ldw	fp,0(sp)
 8001c18:	dec00204 	addi	sp,sp,8
 8001c1c:	f800283a 	ret

08001c20 <vid_scroll_string>:


int vid_scroll_string(vid_text_scroll_struct* scroll, alt_video_display* display)
{
 8001c20:	deffec04 	addi	sp,sp,-80
 8001c24:	dfc01315 	stw	ra,76(sp)
 8001c28:	df001215 	stw	fp,72(sp)
 8001c2c:	dc401115 	stw	r17,68(sp)
 8001c30:	dc001015 	stw	r16,64(sp)
 8001c34:	df001204 	addi	fp,sp,72
 8001c38:	e13ffc15 	stw	r4,-16(fp)
 8001c3c:	e17ffd15 	stw	r5,-12(fp)

  int x_start, x_end, x_index, string_x_index, string_char_index, char_row, char_column;
  char character, column_mask;
  char* font_char_ptr;
  char pixels_to_move_by = 1;
 8001c40:	00800044 	movi	r2,1
 8001c44:	e0bff605 	stb	r2,-40(fp)
 8001c48:	008205f4 	movhi	r2,2071
 8001c4c:	10ae7204 	addi	r2,r2,-17976
 8001c50:	14000017 	ldw	r16,0(r2)

  // If it's time to move the scroll..
  if (alt_nticks() >= (scroll->ticks_at_last_move + ((alt_ticks_per_second() * (scroll->ms_delay)) / 1000))) {
 8001c54:	e0bffc17 	ldw	r2,-16(fp)
 8001c58:	10800817 	ldw	r2,32(r2)
 8001c5c:	1023883a 	mov	r17,r2
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 8001c60:	008205f4 	movhi	r2,2071
 8001c64:	10ae7104 	addi	r2,r2,-17980
 8001c68:	10800017 	ldw	r2,0(r2)
 8001c6c:	e0fffc17 	ldw	r3,-16(fp)
 8001c70:	18c00717 	ldw	r3,28(r3)
 8001c74:	10c5383a 	mul	r2,r2,r3
 8001c78:	1009883a 	mov	r4,r2
 8001c7c:	0140fa04 	movi	r5,1000
 8001c80:	800ca000 	call	800ca00 <__udivsi3>
 8001c84:	8885883a 	add	r2,r17,r2
 8001c88:	8080b936 	bltu	r16,r2,8001f70 <vid_scroll_string+0x350>
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 8001c8c:	008205f4 	movhi	r2,2071
 8001c90:	10ae7204 	addi	r2,r2,-17976
 8001c94:	10800017 	ldw	r2,0(r2)
    scroll->ticks_at_last_move = alt_nticks();
 8001c98:	1007883a 	mov	r3,r2
 8001c9c:	e0bffc17 	ldw	r2,-16(fp)
 8001ca0:	10c00815 	stw	r3,32(r2)
    
    // Track where we are in the scroll.
    if(scroll->text_scroll_started == 0) {
 8001ca4:	e0bffc17 	ldw	r2,-16(fp)
 8001ca8:	10800a03 	ldbu	r2,40(r2)
 8001cac:	10803fcc 	andi	r2,r2,255
 8001cb0:	1080201c 	xori	r2,r2,128
 8001cb4:	10bfe004 	addi	r2,r2,-128
 8001cb8:	1000061e 	bne	r2,zero,8001cd4 <vid_scroll_string+0xb4>
      scroll->text_scroll_index = 0;
 8001cbc:	e0bffc17 	ldw	r2,-16(fp)
 8001cc0:	10000915 	stw	zero,36(r2)
      scroll->text_scroll_started = 1;
 8001cc4:	e0bffc17 	ldw	r2,-16(fp)
 8001cc8:	00c00044 	movi	r3,1
 8001ccc:	10c00a05 	stb	r3,40(r2)
 8001cd0:	00000e06 	br	8001d0c <vid_scroll_string+0xec>
    } else if(scroll->text_scroll_index >= scroll->scroll_points)  {
 8001cd4:	e0bffc17 	ldw	r2,-16(fp)
 8001cd8:	10c00917 	ldw	r3,36(r2)
 8001cdc:	e0bffc17 	ldw	r2,-16(fp)
 8001ce0:	10800d17 	ldw	r2,52(r2)
 8001ce4:	18800316 	blt	r3,r2,8001cf4 <vid_scroll_string+0xd4>
      scroll->text_scroll_started = 0;
 8001ce8:	e0bffc17 	ldw	r2,-16(fp)
 8001cec:	10000a05 	stb	zero,40(r2)
 8001cf0:	00000606 	br	8001d0c <vid_scroll_string+0xec>
    } else {
      scroll->text_scroll_index += pixels_to_move_by;
 8001cf4:	e0bffc17 	ldw	r2,-16(fp)
 8001cf8:	10c00917 	ldw	r3,36(r2)
 8001cfc:	e0bff607 	ldb	r2,-40(fp)
 8001d00:	1887883a 	add	r3,r3,r2
 8001d04:	e0bffc17 	ldw	r2,-16(fp)
 8001d08:	10c00915 	stw	r3,36(r2)
    }
    
    //Find out where we start
    if (scroll->text_scroll_index < scroll->window_width) {
 8001d0c:	e0bffc17 	ldw	r2,-16(fp)
 8001d10:	10c00917 	ldw	r3,36(r2)
 8001d14:	e0bffc17 	ldw	r2,-16(fp)
 8001d18:	10800b17 	ldw	r2,44(r2)
 8001d1c:	18800a0e 	bge	r3,r2,8001d48 <vid_scroll_string+0x128>
      x_start = scroll->hbegin + scroll->window_width - scroll->text_scroll_index;
 8001d20:	e0bffc17 	ldw	r2,-16(fp)
 8001d24:	10c00017 	ldw	r3,0(r2)
 8001d28:	e0bffc17 	ldw	r2,-16(fp)
 8001d2c:	10800b17 	ldw	r2,44(r2)
 8001d30:	1887883a 	add	r3,r3,r2
 8001d34:	e0bffc17 	ldw	r2,-16(fp)
 8001d38:	10800917 	ldw	r2,36(r2)
 8001d3c:	1885c83a 	sub	r2,r3,r2
 8001d40:	e0bff115 	stw	r2,-60(fp)
 8001d44:	00000306 	br	8001d54 <vid_scroll_string+0x134>
    } else {
      x_start = scroll->hbegin;
 8001d48:	e0bffc17 	ldw	r2,-16(fp)
 8001d4c:	10800017 	ldw	r2,0(r2)
 8001d50:	e0bff115 	stw	r2,-60(fp)
    }
    //Find out where we end
    if (scroll->string_points > scroll->text_scroll_index) {
 8001d54:	e0bffc17 	ldw	r2,-16(fp)
 8001d58:	10800e17 	ldw	r2,56(r2)
 8001d5c:	e0fffc17 	ldw	r3,-16(fp)
 8001d60:	18c00917 	ldw	r3,36(r3)
 8001d64:	1880040e 	bge	r3,r2,8001d78 <vid_scroll_string+0x158>
      x_end = scroll->hend;
 8001d68:	e0bffc17 	ldw	r2,-16(fp)
 8001d6c:	10800217 	ldw	r2,8(r2)
 8001d70:	e0bff215 	stw	r2,-56(fp)
 8001d74:	00000906 	br	8001d9c <vid_scroll_string+0x17c>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
 8001d78:	e0bffc17 	ldw	r2,-16(fp)
 8001d7c:	10c00217 	ldw	r3,8(r2)
 8001d80:	e0bffc17 	ldw	r2,-16(fp)
 8001d84:	10800917 	ldw	r2,36(r2)
 8001d88:	1887c83a 	sub	r3,r3,r2
 8001d8c:	e0bffc17 	ldw	r2,-16(fp)
 8001d90:	10800e17 	ldw	r2,56(r2)
 8001d94:	1885883a 	add	r2,r3,r2
 8001d98:	e0bff215 	stw	r2,-56(fp)
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 8001d9c:	e0bff117 	ldw	r2,-60(fp)
 8001da0:	e0bff315 	stw	r2,-52(fp)
 8001da4:	00006006 	br	8001f28 <vid_scroll_string+0x308>
      // Find the x index we're at within the string
      // If first part of string hasnt yet reached left side of scroll window
      if (scroll->text_scroll_index < scroll->window_width) {
 8001da8:	e0bffc17 	ldw	r2,-16(fp)
 8001dac:	10c00917 	ldw	r3,36(r2)
 8001db0:	e0bffc17 	ldw	r2,-16(fp)
 8001db4:	10800b17 	ldw	r2,44(r2)
 8001db8:	1880050e 	bge	r3,r2,8001dd0 <vid_scroll_string+0x1b0>
        string_x_index = (x_index - x_start);
 8001dbc:	e0fff317 	ldw	r3,-52(fp)
 8001dc0:	e0bff117 	ldw	r2,-60(fp)
 8001dc4:	1885c83a 	sub	r2,r3,r2
 8001dc8:	e0bff415 	stw	r2,-48(fp)
 8001dcc:	00000a06 	br	8001df8 <vid_scroll_string+0x1d8>
      } else {
        string_x_index = scroll->text_scroll_index - scroll->window_width + x_index - x_start;
 8001dd0:	e0bffc17 	ldw	r2,-16(fp)
 8001dd4:	10c00917 	ldw	r3,36(r2)
 8001dd8:	e0bffc17 	ldw	r2,-16(fp)
 8001ddc:	10800b17 	ldw	r2,44(r2)
 8001de0:	1887c83a 	sub	r3,r3,r2
 8001de4:	e0bff317 	ldw	r2,-52(fp)
 8001de8:	1887883a 	add	r3,r3,r2
 8001dec:	e0bff117 	ldw	r2,-60(fp)
 8001df0:	1885c83a 	sub	r2,r3,r2
 8001df4:	e0bff415 	stw	r2,-48(fp)
      }
      //Find the character we're supposed to be writing
      string_char_index = (string_x_index / 8);
 8001df8:	e0bff417 	ldw	r2,-48(fp)
 8001dfc:	1000010e 	bge	r2,zero,8001e04 <vid_scroll_string+0x1e4>
 8001e00:	108001c4 	addi	r2,r2,7
 8001e04:	1005d0fa 	srai	r2,r2,3
 8001e08:	e0bff715 	stw	r2,-36(fp)
      character = scroll->string[string_char_index];
 8001e0c:	e0bffc17 	ldw	r2,-16(fp)
 8001e10:	10c00517 	ldw	r3,20(r2)
 8001e14:	e0bff717 	ldw	r2,-36(fp)
 8001e18:	1885883a 	add	r2,r3,r2
 8001e1c:	10800003 	ldbu	r2,0(r2)
 8001e20:	e0bff805 	stb	r2,-32(fp)
      char_column = (string_x_index % 8);
 8001e24:	e0fff417 	ldw	r3,-48(fp)
 8001e28:	00a00034 	movhi	r2,32768
 8001e2c:	108001c4 	addi	r2,r2,7
 8001e30:	1884703a 	and	r2,r3,r2
 8001e34:	1000040e 	bge	r2,zero,8001e48 <vid_scroll_string+0x228>
 8001e38:	10bfffc4 	addi	r2,r2,-1
 8001e3c:	00fffe04 	movi	r3,-8
 8001e40:	10c4b03a 	or	r2,r2,r3
 8001e44:	10800044 	addi	r2,r2,1
 8001e48:	e0bff915 	stw	r2,-28(fp)
      column_mask = (((unsigned int)0x80) >> char_column);
 8001e4c:	00c02004 	movi	r3,128
 8001e50:	e0bff917 	ldw	r2,-28(fp)
 8001e54:	1884d83a 	srl	r2,r3,r2
 8001e58:	e0bffa05 	stb	r2,-24(fp)
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
 8001e5c:	e0bffc17 	ldw	r2,-16(fp)
 8001e60:	10800617 	ldw	r2,24(r2)
 8001e64:	e0fff807 	ldb	r3,-32(fp)
 8001e68:	18fff804 	addi	r3,r3,-32
 8001e6c:	18c002e4 	muli	r3,r3,11
 8001e70:	10c5883a 	add	r2,r2,r3
 8001e74:	e0bffb15 	stw	r2,-20(fp)
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 8001e78:	e03ff515 	stw	zero,-44(fp)
 8001e7c:	00002406 	br	8001f10 <vid_scroll_string+0x2f0>
        // If the font table says this pixel is on, then set it to the foreground color
        if (*(font_char_ptr + char_row) & column_mask) {
 8001e80:	e0bff517 	ldw	r2,-44(fp)
 8001e84:	e0fffb17 	ldw	r3,-20(fp)
 8001e88:	1885883a 	add	r2,r3,r2
 8001e8c:	10c00003 	ldbu	r3,0(r2)
 8001e90:	e0bffa03 	ldbu	r2,-24(fp)
 8001e94:	1884703a 	and	r2,r3,r2
 8001e98:	10803fcc 	andi	r2,r2,255
 8001e9c:	1080201c 	xori	r2,r2,128
 8001ea0:	10bfe004 	addi	r2,r2,-128
 8001ea4:	10000c26 	beq	r2,zero,8001ed8 <vid_scroll_string+0x2b8>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->f_color, display); 
 8001ea8:	e0bffc17 	ldw	r2,-16(fp)
 8001eac:	10c00117 	ldw	r3,4(r2)
 8001eb0:	e0bff517 	ldw	r2,-44(fp)
 8001eb4:	1887883a 	add	r3,r3,r2
 8001eb8:	e0bffc17 	ldw	r2,-16(fp)
 8001ebc:	10800317 	ldw	r2,12(r2)
 8001ec0:	e13ff317 	ldw	r4,-52(fp)
 8001ec4:	180b883a 	mov	r5,r3
 8001ec8:	100d883a 	mov	r6,r2
 8001ecc:	e1fffd17 	ldw	r7,-12(fp)
 8001ed0:	80023ec0 	call	80023ec <vid_set_pixel>
 8001ed4:	00000b06 	br	8001f04 <vid_scroll_string+0x2e4>
        // Otherwise, set it to the background color.
        } else {
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
 8001ed8:	e0bffc17 	ldw	r2,-16(fp)
 8001edc:	10c00117 	ldw	r3,4(r2)
 8001ee0:	e0bff517 	ldw	r2,-44(fp)
 8001ee4:	1887883a 	add	r3,r3,r2
 8001ee8:	e0bffc17 	ldw	r2,-16(fp)
 8001eec:	10800417 	ldw	r2,16(r2)
 8001ef0:	e13ff317 	ldw	r4,-52(fp)
 8001ef4:	180b883a 	mov	r5,r3
 8001ef8:	100d883a 	mov	r6,r2
 8001efc:	e1fffd17 	ldw	r7,-12(fp)
 8001f00:	80023ec0 	call	80023ec <vid_set_pixel>
      character = scroll->string[string_char_index];
      char_column = (string_x_index % 8);
      column_mask = (((unsigned int)0x80) >> char_column);
      font_char_ptr = (scroll->font + ((character - 0x20) * FONT_10PT_ROW));
      //We have all the data now, so let's write a column
      for(char_row = 0; char_row < 11; char_row++) {
 8001f04:	e0bff517 	ldw	r2,-44(fp)
 8001f08:	10800044 	addi	r2,r2,1
 8001f0c:	e0bff515 	stw	r2,-44(fp)
 8001f10:	e0bff517 	ldw	r2,-44(fp)
 8001f14:	108002d0 	cmplti	r2,r2,11
 8001f18:	103fd91e 	bne	r2,zero,8001e80 <__alt_data_end+0xf8001e80>
    } else {
      x_end = (scroll->hend - scroll->text_scroll_index + scroll->string_points);
    }

    // Write the string segment a column (x) at a time
    for(x_index = x_start; x_index < x_end; x_index++) {
 8001f1c:	e0bff317 	ldw	r2,-52(fp)
 8001f20:	10800044 	addi	r2,r2,1
 8001f24:	e0bff315 	stw	r2,-52(fp)
 8001f28:	e0fff317 	ldw	r3,-52(fp)
 8001f2c:	e0bff217 	ldw	r2,-56(fp)
 8001f30:	18bf9d16 	blt	r3,r2,8001da8 <__alt_data_end+0xf8001da8>
          vid_set_pixel(x_index, scroll->vbegin + char_row, scroll->b_color, display); //background color
        }
      }
    }
    // Erase the leftover column (x) of the last string we wrote.
    vid_draw_line(x_end, scroll->vbegin, x_end, scroll->vbegin + 10, 1, scroll->b_color, display);
 8001f34:	e0bffc17 	ldw	r2,-16(fp)
 8001f38:	11400117 	ldw	r5,4(r2)
 8001f3c:	e0bffc17 	ldw	r2,-16(fp)
 8001f40:	10800117 	ldw	r2,4(r2)
 8001f44:	11c00284 	addi	r7,r2,10
 8001f48:	e0bffc17 	ldw	r2,-16(fp)
 8001f4c:	10800417 	ldw	r2,16(r2)
 8001f50:	00c00044 	movi	r3,1
 8001f54:	d8c00015 	stw	r3,0(sp)
 8001f58:	d8800115 	stw	r2,4(sp)
 8001f5c:	e0bffd17 	ldw	r2,-12(fp)
 8001f60:	d8800215 	stw	r2,8(sp)
 8001f64:	e13ff217 	ldw	r4,-56(fp)
 8001f68:	e1bff217 	ldw	r6,-56(fp)
 8001f6c:	80019c80 	call	80019c8 <vid_draw_line>
    // Log what time we moved the scroll.
  }
  return(0);
 8001f70:	0005883a 	mov	r2,zero
}
 8001f74:	e6fffe04 	addi	sp,fp,-8
 8001f78:	dfc00317 	ldw	ra,12(sp)
 8001f7c:	df000217 	ldw	fp,8(sp)
 8001f80:	dc400117 	ldw	r17,4(sp)
 8001f84:	dc000017 	ldw	r16,0(sp)
 8001f88:	dec00404 	addi	sp,sp,16
 8001f8c:	f800283a 	ret

08001f90 <vid_move_block>:
*           the backfill_color parameter.
*
******************************************************************/

int vid_move_block(int xbegin, int ybegin, int xend, int yend, int x_distance, int y_distance, int backfill_color, alt_video_display* display)
{
 8001f90:	defff504 	addi	sp,sp,-44
 8001f94:	dfc00a15 	stw	ra,40(sp)
 8001f98:	df000915 	stw	fp,36(sp)
 8001f9c:	df000904 	addi	fp,sp,36
 8001fa0:	e13ffc15 	stw	r4,-16(fp)
 8001fa4:	e17ffd15 	stw	r5,-12(fp)
 8001fa8:	e1bffe15 	stw	r6,-8(fp)
 8001fac:	e1ffff15 	stw	r7,-4(fp)
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
 8001fb0:	e0800217 	ldw	r2,8(fp)
 8001fb4:	00803716 	blt	zero,r2,8002094 <vid_move_block+0x104>
 8001fb8:	e0800317 	ldw	r2,12(fp)
 8001fbc:	00803516 	blt	zero,r2,8002094 <vid_move_block+0x104>
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 8001fc0:	e0bffd17 	ldw	r2,-12(fp)
 8001fc4:	e0bff815 	stw	r2,-32(fp)
 8001fc8:	00002f06 	br	8002088 <vid_move_block+0xf8>
      write_y = read_y + y_distance;
 8001fcc:	e0fff817 	ldw	r3,-32(fp)
 8001fd0:	e0800317 	ldw	r2,12(fp)
 8001fd4:	1885883a 	add	r2,r3,r2
 8001fd8:	e0bff915 	stw	r2,-28(fp)
      for(read_x = xbegin; read_x < xend; read_x++) {
 8001fdc:	e0bffc17 	ldw	r2,-16(fp)
 8001fe0:	e0bff715 	stw	r2,-36(fp)
 8001fe4:	00002206 	br	8002070 <vid_move_block+0xe0>
        write_x = read_x + x_distance;
 8001fe8:	e0fff717 	ldw	r3,-36(fp)
 8001fec:	e0800217 	ldw	r2,8(fp)
 8001ff0:	1885883a 	add	r2,r3,r2
 8001ff4:	e0bffa15 	stw	r2,-24(fp)
        temp_pixel = vid_get_pixel(read_x, read_y, display);
 8001ff8:	e13ff717 	ldw	r4,-36(fp)
 8001ffc:	e17ff817 	ldw	r5,-32(fp)
 8002000:	e1800517 	ldw	r6,20(fp)
 8002004:	80025c00 	call	80025c0 <vid_get_pixel>
 8002008:	e0bffb0d 	sth	r2,-20(fp)
        vid_set_pixel(write_x, write_y, temp_pixel, display);
 800200c:	e0bffb0f 	ldh	r2,-20(fp)
 8002010:	e13ffa17 	ldw	r4,-24(fp)
 8002014:	e17ff917 	ldw	r5,-28(fp)
 8002018:	100d883a 	mov	r6,r2
 800201c:	e1c00517 	ldw	r7,20(fp)
 8002020:	80023ec0 	call	80023ec <vid_set_pixel>
        if(read_x >= xend + x_distance || read_y >= yend + y_distance) 
 8002024:	e0fffe17 	ldw	r3,-8(fp)
 8002028:	e0800217 	ldw	r2,8(fp)
 800202c:	1885883a 	add	r2,r3,r2
 8002030:	e0fff717 	ldw	r3,-36(fp)
 8002034:	1880050e 	bge	r3,r2,800204c <vid_move_block+0xbc>
 8002038:	e0ffff17 	ldw	r3,-4(fp)
 800203c:	e0800317 	ldw	r2,12(fp)
 8002040:	1885883a 	add	r2,r3,r2
 8002044:	e0fff817 	ldw	r3,-32(fp)
 8002048:	18800616 	blt	r3,r2,8002064 <vid_move_block+0xd4>
        {
	        vid_set_pixel(read_x, read_y, backfill_color, display);
 800204c:	e0800417 	ldw	r2,16(fp)
 8002050:	e13ff717 	ldw	r4,-36(fp)
 8002054:	e17ff817 	ldw	r5,-32(fp)
 8002058:	100d883a 	mov	r6,r2
 800205c:	e1c00517 	ldw	r7,20(fp)
 8002060:	80023ec0 	call	80023ec <vid_set_pixel>
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
      write_y = read_y + y_distance;
      for(read_x = xbegin; read_x < xend; read_x++) {
 8002064:	e0bff717 	ldw	r2,-36(fp)
 8002068:	10800044 	addi	r2,r2,1
 800206c:	e0bff715 	stw	r2,-36(fp)
 8002070:	e0fff717 	ldw	r3,-36(fp)
 8002074:	e0bffe17 	ldw	r2,-8(fp)
 8002078:	18bfdb16 	blt	r3,r2,8001fe8 <__alt_data_end+0xf8001fe8>
  int read_x, read_y, write_x, write_y;
  short temp_pixel;
  
  if(x_distance <= 0 && y_distance <= 0) {  
    //Move by rows because they are contiguous in memory (could help speed if in SDRAM)
    for (read_y = ybegin; read_y < yend; read_y++) {
 800207c:	e0bff817 	ldw	r2,-32(fp)
 8002080:	10800044 	addi	r2,r2,1
 8002084:	e0bff815 	stw	r2,-32(fp)
 8002088:	e0fff817 	ldw	r3,-32(fp)
 800208c:	e0bfff17 	ldw	r2,-4(fp)
 8002090:	18bfce16 	blt	r3,r2,8001fcc <__alt_data_end+0xf8001fcc>
	        vid_set_pixel(read_x, read_y, backfill_color, display);
        }
      }
    }
  }
  return (0);
 8002094:	0005883a 	mov	r2,zero
}
 8002098:	e037883a 	mov	sp,fp
 800209c:	dfc00117 	ldw	ra,4(sp)
 80020a0:	df000017 	ldw	fp,0(sp)
 80020a4:	dec00204 	addi	sp,sp,8
 80020a8:	f800283a 	ret

080020ac <vid_print_string>:
*           using the specified font and color.
*           Calls vid_print_char
*
******************************************************************/
int vid_print_string(int horiz_offset, int vert_offset, int color, char *font, alt_video_display* display, char string[])
{
 80020ac:	defff604 	addi	sp,sp,-40
 80020b0:	dfc00915 	stw	ra,36(sp)
 80020b4:	df000815 	stw	fp,32(sp)
 80020b8:	df000804 	addi	fp,sp,32
 80020bc:	e13ffc15 	stw	r4,-16(fp)
 80020c0:	e17ffd15 	stw	r5,-12(fp)
 80020c4:	e1bffe15 	stw	r6,-8(fp)
 80020c8:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 80020cc:	e03ffa15 	stw	zero,-24(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 80020d0:	e0bffc17 	ldw	r2,-16(fp)
 80020d4:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 80020d8:	00002806 	br	800217c <vid_print_string+0xd0>
    //Handle newline char here.
    if (string[i] == '\n') {
 80020dc:	e0bffa17 	ldw	r2,-24(fp)
 80020e0:	e0c00317 	ldw	r3,12(fp)
 80020e4:	1885883a 	add	r2,r3,r2
 80020e8:	10800003 	ldbu	r2,0(r2)
 80020ec:	10803fcc 	andi	r2,r2,255
 80020f0:	1080201c 	xori	r2,r2,128
 80020f4:	10bfe004 	addi	r2,r2,-128
 80020f8:	10800298 	cmpnei	r2,r2,10
 80020fc:	1000091e 	bne	r2,zero,8002124 <vid_print_string+0x78>
      horiz_offset = original_horiz_offset;
 8002100:	e0bffb17 	ldw	r2,-20(fp)
 8002104:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += 12;
 8002108:	e0bffd17 	ldw	r2,-12(fp)
 800210c:	10800304 	addi	r2,r2,12
 8002110:	e0bffd15 	stw	r2,-12(fp)
      i++;
 8002114:	e0bffa17 	ldw	r2,-24(fp)
 8002118:	10800044 	addi	r2,r2,1
 800211c:	e0bffa15 	stw	r2,-24(fp)
      continue;
 8002120:	00001606 	br	800217c <vid_print_string+0xd0>
    }
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
 8002124:	e0bffa17 	ldw	r2,-24(fp)
 8002128:	e0c00317 	ldw	r3,12(fp)
 800212c:	1885883a 	add	r2,r3,r2
 8002130:	10800003 	ldbu	r2,0(r2)
 8002134:	10c03fcc 	andi	r3,r2,255
 8002138:	18c0201c 	xori	r3,r3,128
 800213c:	18ffe004 	addi	r3,r3,-128
 8002140:	e0bfff17 	ldw	r2,-4(fp)
 8002144:	d8800015 	stw	r2,0(sp)
 8002148:	e0800217 	ldw	r2,8(fp)
 800214c:	d8800115 	stw	r2,4(sp)
 8002150:	e13ffc17 	ldw	r4,-16(fp)
 8002154:	e17ffd17 	ldw	r5,-12(fp)
 8002158:	e1bffe17 	ldw	r6,-8(fp)
 800215c:	180f883a 	mov	r7,r3
 8002160:	80022fc0 	call	80022fc <vid_print_char>
    i++;
 8002164:	e0bffa17 	ldw	r2,-24(fp)
 8002168:	10800044 	addi	r2,r2,1
 800216c:	e0bffa15 	stw	r2,-24(fp)
    horiz_offset += 8;
 8002170:	e0bffc17 	ldw	r2,-16(fp)
 8002174:	10800204 	addi	r2,r2,8
 8002178:	e0bffc15 	stw	r2,-16(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 800217c:	e0bffa17 	ldw	r2,-24(fp)
 8002180:	e0c00317 	ldw	r3,12(fp)
 8002184:	1885883a 	add	r2,r3,r2
 8002188:	10800003 	ldbu	r2,0(r2)
 800218c:	10803fcc 	andi	r2,r2,255
 8002190:	1080201c 	xori	r2,r2,128
 8002194:	10bfe004 	addi	r2,r2,-128
 8002198:	103fd01e 	bne	r2,zero,80020dc <__alt_data_end+0xf80020dc>
    // Lay down that character and increment our offsets.
    vid_print_char (horiz_offset, vert_offset, color, string[i], font, display);
    i++;
    horiz_offset += 8;
  }
  return (0);
 800219c:	0005883a 	mov	r2,zero
}
 80021a0:	e037883a 	mov	sp,fp
 80021a4:	dfc00117 	ldw	ra,4(sp)
 80021a8:	df000017 	ldw	fp,0(sp)
 80021ac:	dec00204 	addi	sp,sp,8
 80021b0:	f800283a 	ret

080021b4 <vid_draw_box>:
*  points.  The fill parameter tells the function whether or not
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_box (int horiz_start, int vert_start, int horiz_end, int vert_end, int color, int fill, alt_video_display* display)
{
 80021b4:	defff704 	addi	sp,sp,-36
 80021b8:	dfc00815 	stw	ra,32(sp)
 80021bc:	df000715 	stw	fp,28(sp)
 80021c0:	df000704 	addi	fp,sp,28
 80021c4:	e13ffc15 	stw	r4,-16(fp)
 80021c8:	e17ffd15 	stw	r5,-12(fp)
 80021cc:	e1bffe15 	stw	r6,-8(fp)
 80021d0:	e1ffff15 	stw	r7,-4(fp)

  // If we want to fill in our box
  if (fill) {
 80021d4:	e0800317 	ldw	r2,12(fp)
 80021d8:	10000a26 	beq	r2,zero,8002204 <vid_draw_box+0x50>
     vid_paint_block (horiz_start, vert_start, horiz_end, vert_end, color, display);
 80021dc:	e0800217 	ldw	r2,8(fp)
 80021e0:	d8800015 	stw	r2,0(sp)
 80021e4:	e0800417 	ldw	r2,16(fp)
 80021e8:	d8800115 	stw	r2,4(sp)
 80021ec:	e13ffc17 	ldw	r4,-16(fp)
 80021f0:	e17ffd17 	ldw	r5,-12(fp)
 80021f4:	e1bffe17 	ldw	r6,-8(fp)
 80021f8:	e1ffff17 	ldw	r7,-4(fp)
 80021fc:	80026480 	call	8002648 <vid_paint_block>
 8002200:	00003806 	br	80022e4 <vid_draw_box+0x130>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start, horiz_start, vert_end-1, 1, color, display);
 8002204:	e0bfff17 	ldw	r2,-4(fp)
 8002208:	10ffffc4 	addi	r3,r2,-1
 800220c:	00800044 	movi	r2,1
 8002210:	d8800015 	stw	r2,0(sp)
 8002214:	e0800217 	ldw	r2,8(fp)
 8002218:	d8800115 	stw	r2,4(sp)
 800221c:	e0800417 	ldw	r2,16(fp)
 8002220:	d8800215 	stw	r2,8(sp)
 8002224:	e13ffc17 	ldw	r4,-16(fp)
 8002228:	e17ffd17 	ldw	r5,-12(fp)
 800222c:	e1bffc17 	ldw	r6,-16(fp)
 8002230:	180f883a 	mov	r7,r3
 8002234:	80019c80 	call	80019c8 <vid_draw_line>
    vid_draw_line(horiz_end-1, vert_start, horiz_end-1, vert_end-1, 1, color, display);
 8002238:	e0bffe17 	ldw	r2,-8(fp)
 800223c:	113fffc4 	addi	r4,r2,-1
 8002240:	e0bffe17 	ldw	r2,-8(fp)
 8002244:	11bfffc4 	addi	r6,r2,-1
 8002248:	e0bfff17 	ldw	r2,-4(fp)
 800224c:	10ffffc4 	addi	r3,r2,-1
 8002250:	00800044 	movi	r2,1
 8002254:	d8800015 	stw	r2,0(sp)
 8002258:	e0800217 	ldw	r2,8(fp)
 800225c:	d8800115 	stw	r2,4(sp)
 8002260:	e0800417 	ldw	r2,16(fp)
 8002264:	d8800215 	stw	r2,8(sp)
 8002268:	e17ffd17 	ldw	r5,-12(fp)
 800226c:	180f883a 	mov	r7,r3
 8002270:	80019c80 	call	80019c8 <vid_draw_line>
    vid_draw_line(horiz_start, vert_start, horiz_end-1, vert_start, 1, color, display);
 8002274:	e0bffe17 	ldw	r2,-8(fp)
 8002278:	10ffffc4 	addi	r3,r2,-1
 800227c:	00800044 	movi	r2,1
 8002280:	d8800015 	stw	r2,0(sp)
 8002284:	e0800217 	ldw	r2,8(fp)
 8002288:	d8800115 	stw	r2,4(sp)
 800228c:	e0800417 	ldw	r2,16(fp)
 8002290:	d8800215 	stw	r2,8(sp)
 8002294:	e13ffc17 	ldw	r4,-16(fp)
 8002298:	e17ffd17 	ldw	r5,-12(fp)
 800229c:	180d883a 	mov	r6,r3
 80022a0:	e1fffd17 	ldw	r7,-12(fp)
 80022a4:	80019c80 	call	80019c8 <vid_draw_line>
    vid_draw_line(horiz_start, vert_end-1, horiz_end-1, vert_end-1, 1, color, display);
 80022a8:	e0bfff17 	ldw	r2,-4(fp)
 80022ac:	117fffc4 	addi	r5,r2,-1
 80022b0:	e0bffe17 	ldw	r2,-8(fp)
 80022b4:	11bfffc4 	addi	r6,r2,-1
 80022b8:	e0bfff17 	ldw	r2,-4(fp)
 80022bc:	10ffffc4 	addi	r3,r2,-1
 80022c0:	00800044 	movi	r2,1
 80022c4:	d8800015 	stw	r2,0(sp)
 80022c8:	e0800217 	ldw	r2,8(fp)
 80022cc:	d8800115 	stw	r2,4(sp)
 80022d0:	e0800417 	ldw	r2,16(fp)
 80022d4:	d8800215 	stw	r2,8(sp)
 80022d8:	e13ffc17 	ldw	r4,-16(fp)
 80022dc:	180f883a 	mov	r7,r3
 80022e0:	80019c80 	call	80019c8 <vid_draw_line>
  }

  return (0);
 80022e4:	0005883a 	mov	r2,zero
}
 80022e8:	e037883a 	mov	sp,fp
 80022ec:	dfc00117 	ldw	ra,4(sp)
 80022f0:	df000017 	ldw	fp,0(sp)
 80022f4:	dec00204 	addi	sp,sp,8
 80022f8:	f800283a 	ret

080022fc <vid_print_char>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char (int horiz_offset, int vert_offset, int color, char character, char *font, alt_video_display* display)
{
 80022fc:	defff704 	addi	sp,sp,-36
 8002300:	dfc00815 	stw	ra,32(sp)
 8002304:	df000715 	stw	fp,28(sp)
 8002308:	df000704 	addi	fp,sp,28
 800230c:	e13ffc15 	stw	r4,-16(fp)
 8002310:	e17ffd15 	stw	r5,-12(fp)
 8002314:	e1bffe15 	stw	r6,-8(fp)
 8002318:	3805883a 	mov	r2,r7
 800231c:	e0bfff05 	stb	r2,-4(fp)
  int i, j;
  
  char temp_char, char_row;

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);
 8002320:	e0bfff03 	ldbu	r2,-4(fp)
 8002324:	10bff804 	addi	r2,r2,-32
 8002328:	e0bffb05 	stb	r2,-20(fp)

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 800232c:	e03ff915 	stw	zero,-28(fp)
 8002330:	00002506 	br	80023c8 <vid_print_char+0xcc>
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
 8002334:	e0bffb07 	ldb	r2,-20(fp)
 8002338:	108002e4 	muli	r2,r2,11
 800233c:	1007883a 	mov	r3,r2
 8002340:	e0bff917 	ldw	r2,-28(fp)
 8002344:	1885883a 	add	r2,r3,r2
 8002348:	e0c00217 	ldw	r3,8(fp)
 800234c:	1885883a 	add	r2,r3,r2
 8002350:	10800003 	ldbu	r2,0(r2)
 8002354:	e0bffb45 	stb	r2,-19(fp)
    for (j = 0; j < 8; j++) {
 8002358:	e03ffa15 	stw	zero,-24(fp)
 800235c:	00001406 	br	80023b0 <vid_print_char+0xb4>
      //If the font table says the pixel in this location is on for this character, then set it.
      if (char_row & (((unsigned char)0x80) >> j)) {
 8002360:	e0fffb47 	ldb	r3,-19(fp)
 8002364:	01002004 	movi	r4,128
 8002368:	e0bffa17 	ldw	r2,-24(fp)
 800236c:	2085d83a 	sra	r2,r4,r2
 8002370:	1884703a 	and	r2,r3,r2
 8002374:	10000b26 	beq	r2,zero,80023a4 <vid_print_char+0xa8>
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
 8002378:	e0fffc17 	ldw	r3,-16(fp)
 800237c:	e0bffa17 	ldw	r2,-24(fp)
 8002380:	1889883a 	add	r4,r3,r2
 8002384:	e0fffd17 	ldw	r3,-12(fp)
 8002388:	e0bff917 	ldw	r2,-28(fp)
 800238c:	1887883a 	add	r3,r3,r2
 8002390:	e0bffe17 	ldw	r2,-8(fp)
 8002394:	180b883a 	mov	r5,r3
 8002398:	100d883a 	mov	r6,r2
 800239c:	e1c00317 	ldw	r7,12(fp)
 80023a0:	80023ec0 	call	80023ec <vid_set_pixel>
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
      char_row = *(font + (temp_char * FONT_10PT_ROW) + i);
    for (j = 0; j < 8; j++) {
 80023a4:	e0bffa17 	ldw	r2,-24(fp)
 80023a8:	10800044 	addi	r2,r2,1
 80023ac:	e0bffa15 	stw	r2,-24(fp)
 80023b0:	e0bffa17 	ldw	r2,-24(fp)
 80023b4:	10800210 	cmplti	r2,r2,8
 80023b8:	103fe91e 	bne	r2,zero,8002360 <__alt_data_end+0xf8002360>

  // Convert the ASCII value to an array offset
  temp_char = (character - 0x20);

  //Each character is 8 pixels wide and 11 tall.
  for(i = 0; i < 11; i++) {
 80023bc:	e0bff917 	ldw	r2,-28(fp)
 80023c0:	10800044 	addi	r2,r2,1
 80023c4:	e0bff915 	stw	r2,-28(fp)
 80023c8:	e0bff917 	ldw	r2,-28(fp)
 80023cc:	108002d0 	cmplti	r2,r2,11
 80023d0:	103fd81e 	bne	r2,zero,8002334 <__alt_data_end+0xf8002334>
      if (char_row & (((unsigned char)0x80) >> j)) {
        vid_set_pixel((horiz_offset + j), (vert_offset + i), color, display); // plot the pixel
      }
    }
  }
  return(0);
 80023d4:	0005883a 	mov	r2,zero
}
 80023d8:	e037883a 	mov	sp,fp
 80023dc:	dfc00117 	ldw	ra,4(sp)
 80023e0:	df000017 	ldw	fp,0(sp)
 80023e4:	dec00204 	addi	sp,sp,8
 80023e8:	f800283a 	ret

080023ec <vid_set_pixel>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 80023ec:	defffa04 	addi	sp,sp,-24
 80023f0:	df000515 	stw	fp,20(sp)
 80023f4:	df000504 	addi	fp,sp,20
 80023f8:	e13ffc15 	stw	r4,-16(fp)
 80023fc:	e17ffd15 	stw	r5,-12(fp)
 8002400:	e1bffe15 	stw	r6,-8(fp)
 8002404:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
 8002408:	e0bfff17 	ldw	r2,-4(fp)
 800240c:	10800917 	ldw	r2,36(r2)
 8002410:	10800818 	cmpnei	r2,r2,32
 8002414:	10001b1e 	bne	r2,zero,8002484 <vid_set_pixel+0x98>
  {
//  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) )+ (vert * (display->width * 4)) + horiz * 4);
 8002418:	e0bfff17 	ldw	r2,-4(fp)
 800241c:	10800617 	ldw	r2,24(r2)
 8002420:	e0ffff17 	ldw	r3,-4(fp)
 8002424:	10800044 	addi	r2,r2,1
 8002428:	1085883a 	add	r2,r2,r2
 800242c:	1085883a 	add	r2,r2,r2
 8002430:	1885883a 	add	r2,r3,r2
 8002434:	10800017 	ldw	r2,0(r2)
 8002438:	10800117 	ldw	r2,4(r2)
 800243c:	1007883a 	mov	r3,r2
 8002440:	e0bfff17 	ldw	r2,-4(fp)
 8002444:	10800717 	ldw	r2,28(r2)
 8002448:	1085883a 	add	r2,r2,r2
 800244c:	1085883a 	add	r2,r2,r2
 8002450:	1009883a 	mov	r4,r2
 8002454:	e0bffd17 	ldw	r2,-12(fp)
 8002458:	2085383a 	mul	r2,r4,r2
 800245c:	1887883a 	add	r3,r3,r2
 8002460:	e0bffc17 	ldw	r2,-16(fp)
 8002464:	1085883a 	add	r2,r2,r2
 8002468:	1085883a 	add	r2,r2,r2
 800246c:	1885883a 	add	r2,r3,r2
 8002470:	e0bffb15 	stw	r2,-20(fp)
		IOWR_32DIRECT( addr, 0, (unsigned int)(color));
 8002474:	e0bffb17 	ldw	r2,-20(fp)
 8002478:	e0fffe17 	ldw	r3,-8(fp)
 800247c:	10c00035 	stwio	r3,0(r2)
 8002480:	00004b06 	br	80025b0 <vid_set_pixel+0x1c4>
  }
  
  else if( display->color_depth == 24 )
 8002484:	e0bfff17 	ldw	r2,-4(fp)
 8002488:	10800917 	ldw	r2,36(r2)
 800248c:	10800618 	cmpnei	r2,r2,24
 8002490:	10002b1e 	bne	r2,zero,8002540 <vid_set_pixel+0x154>
  {
  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) )+ (vert * (display->width * 3)) + horiz * 3);
 8002494:	e0bfff17 	ldw	r2,-4(fp)
 8002498:	10800617 	ldw	r2,24(r2)
 800249c:	e0ffff17 	ldw	r3,-4(fp)
 80024a0:	10800044 	addi	r2,r2,1
 80024a4:	1085883a 	add	r2,r2,r2
 80024a8:	1085883a 	add	r2,r2,r2
 80024ac:	1885883a 	add	r2,r3,r2
 80024b0:	10800017 	ldw	r2,0(r2)
 80024b4:	10800117 	ldw	r2,4(r2)
 80024b8:	1009883a 	mov	r4,r2
 80024bc:	e0bfff17 	ldw	r2,-4(fp)
 80024c0:	10c00717 	ldw	r3,28(r2)
 80024c4:	1805883a 	mov	r2,r3
 80024c8:	1085883a 	add	r2,r2,r2
 80024cc:	10c7883a 	add	r3,r2,r3
 80024d0:	e0bffd17 	ldw	r2,-12(fp)
 80024d4:	1885383a 	mul	r2,r3,r2
 80024d8:	2089883a 	add	r4,r4,r2
 80024dc:	e0fffc17 	ldw	r3,-16(fp)
 80024e0:	1805883a 	mov	r2,r3
 80024e4:	1085883a 	add	r2,r2,r2
 80024e8:	10c5883a 	add	r2,r2,r3
 80024ec:	2085883a 	add	r2,r4,r2
 80024f0:	e0bffb15 	stw	r2,-20(fp)
		IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 80024f4:	e0bffb17 	ldw	r2,-20(fp)
 80024f8:	e0fffe17 	ldw	r3,-8(fp)
 80024fc:	18c03fcc 	andi	r3,r3,255
 8002500:	10c00025 	stbio	r3,0(r2)
 		IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
 8002504:	e0bffb17 	ldw	r2,-20(fp)
 8002508:	10800044 	addi	r2,r2,1
 800250c:	1007883a 	mov	r3,r2
 8002510:	e0bffe17 	ldw	r2,-8(fp)
 8002514:	1004d23a 	srli	r2,r2,8
 8002518:	10803fcc 	andi	r2,r2,255
 800251c:	18800025 	stbio	r2,0(r3)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
 8002520:	e0bffb17 	ldw	r2,-20(fp)
 8002524:	10800084 	addi	r2,r2,2
 8002528:	1007883a 	mov	r3,r2
 800252c:	e0bffe17 	ldw	r2,-8(fp)
 8002530:	1004d43a 	srli	r2,r2,16
 8002534:	10803fcc 	andi	r2,r2,255
 8002538:	18800025 	stbio	r2,0(r3)
 800253c:	00001c06 	br	80025b0 <vid_set_pixel+0x1c4>
  }
  
  else if( display->color_depth == 16 )
 8002540:	e0bfff17 	ldw	r2,-4(fp)
 8002544:	10800917 	ldw	r2,36(r2)
 8002548:	10800418 	cmpnei	r2,r2,16
 800254c:	1000181e 	bne	r2,zero,80025b0 <vid_set_pixel+0x1c4>
  {
  	addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) )+ (vert * (display->width * 2)) + horiz * 2);
 8002550:	e0bfff17 	ldw	r2,-4(fp)
 8002554:	10800617 	ldw	r2,24(r2)
 8002558:	e0ffff17 	ldw	r3,-4(fp)
 800255c:	10800044 	addi	r2,r2,1
 8002560:	1085883a 	add	r2,r2,r2
 8002564:	1085883a 	add	r2,r2,r2
 8002568:	1885883a 	add	r2,r3,r2
 800256c:	10800017 	ldw	r2,0(r2)
 8002570:	10800117 	ldw	r2,4(r2)
 8002574:	1007883a 	mov	r3,r2
 8002578:	e0bfff17 	ldw	r2,-4(fp)
 800257c:	10800717 	ldw	r2,28(r2)
 8002580:	1085883a 	add	r2,r2,r2
 8002584:	1009883a 	mov	r4,r2
 8002588:	e0bffd17 	ldw	r2,-12(fp)
 800258c:	2085383a 	mul	r2,r4,r2
 8002590:	1887883a 	add	r3,r3,r2
 8002594:	e0bffc17 	ldw	r2,-16(fp)
 8002598:	1085883a 	add	r2,r2,r2
 800259c:	1885883a 	add	r2,r3,r2
 80025a0:	e0bffb15 	stw	r2,-20(fp)
  	IOWR_16DIRECT( addr, 0, (int)(color));
 80025a4:	e0bffb17 	ldw	r2,-20(fp)
 80025a8:	e0fffe17 	ldw	r3,-8(fp)
 80025ac:	10c0002d 	sthio	r3,0(r2)
	}


}
 80025b0:	e037883a 	mov	sp,fp
 80025b4:	df000017 	ldw	fp,0(sp)
 80025b8:	dec00104 	addi	sp,sp,4
 80025bc:	f800283a 	ret

080025c0 <vid_get_pixel>:
*  Purpose: Reads the color of the pixel at the given coordinates
*
******************************************************************/

short vid_get_pixel(int horiz, int vert, alt_video_display* display)
{
 80025c0:	defffb04 	addi	sp,sp,-20
 80025c4:	df000415 	stw	fp,16(sp)
 80025c8:	df000404 	addi	fp,sp,16
 80025cc:	e13ffd15 	stw	r4,-12(fp)
 80025d0:	e17ffe15 	stw	r5,-8(fp)
 80025d4:	e1bfff15 	stw	r6,-4(fp)
  int addr;
  
  addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) )+ (vert * (display->width * 2)) + horiz * 2);
 80025d8:	e0bfff17 	ldw	r2,-4(fp)
 80025dc:	10800617 	ldw	r2,24(r2)
 80025e0:	e0ffff17 	ldw	r3,-4(fp)
 80025e4:	10800044 	addi	r2,r2,1
 80025e8:	1085883a 	add	r2,r2,r2
 80025ec:	1085883a 	add	r2,r2,r2
 80025f0:	1885883a 	add	r2,r3,r2
 80025f4:	10800017 	ldw	r2,0(r2)
 80025f8:	10800117 	ldw	r2,4(r2)
 80025fc:	1007883a 	mov	r3,r2
 8002600:	e0bfff17 	ldw	r2,-4(fp)
 8002604:	10800717 	ldw	r2,28(r2)
 8002608:	1085883a 	add	r2,r2,r2
 800260c:	1009883a 	mov	r4,r2
 8002610:	e0bffe17 	ldw	r2,-8(fp)
 8002614:	2085383a 	mul	r2,r4,r2
 8002618:	1887883a 	add	r3,r3,r2
 800261c:	e0bffd17 	ldw	r2,-12(fp)
 8002620:	1085883a 	add	r2,r2,r2
 8002624:	1885883a 	add	r2,r3,r2
 8002628:	e0bffc15 	stw	r2,-16(fp)
  return(IORD_16DIRECT(addr, 0));
 800262c:	e0bffc17 	ldw	r2,-16(fp)
 8002630:	1080002b 	ldhuio	r2,0(r2)
 8002634:	10bfffcc 	andi	r2,r2,65535

}
 8002638:	e037883a 	mov	sp,fp
 800263c:	df000017 	ldw	fp,0(sp)
 8002640:	dec00104 	addi	sp,sp,4
 8002644:	f800283a 	ret

08002648 <vid_paint_block>:
*           The color parameter must contain two pixel's worth
*           (32 bits).
*
******************************************************************/
void vid_paint_block (int Hstart,int Vstart, int Hend, int Vend, int color, alt_video_display* display)
{
 8002648:	defff504 	addi	sp,sp,-44
 800264c:	dfc00a15 	stw	ra,40(sp)
 8002650:	df000915 	stw	fp,36(sp)
 8002654:	df000904 	addi	fp,sp,36
 8002658:	e13ffc15 	stw	r4,-16(fp)
 800265c:	e17ffd15 	stw	r5,-12(fp)
 8002660:	e1bffe15 	stw	r6,-8(fp)
 8002664:	e1ffff15 	stw	r7,-4(fp)
  int i;
  int addr;
  int bytes_per_line, bytes_per_pixel;
  char* line;
  
  bytes_per_pixel = (display->color_depth / 8);
 8002668:	e0800317 	ldw	r2,12(fp)
 800266c:	10800917 	ldw	r2,36(r2)
 8002670:	1000010e 	bge	r2,zero,8002678 <vid_paint_block+0x30>
 8002674:	108001c4 	addi	r2,r2,7
 8002678:	1005d0fa 	srai	r2,r2,3
 800267c:	e0bff915 	stw	r2,-28(fp)
  bytes_per_line = ((Hend - Hstart) * bytes_per_pixel);
 8002680:	e0fffe17 	ldw	r3,-8(fp)
 8002684:	e0bffc17 	ldw	r2,-16(fp)
 8002688:	1887c83a 	sub	r3,r3,r2
 800268c:	e0bff917 	ldw	r2,-28(fp)
 8002690:	1885383a 	mul	r2,r3,r2
 8002694:	e0bffa15 	stw	r2,-24(fp)

  line = malloc(bytes_per_line + 12);
 8002698:	e0bffa17 	ldw	r2,-24(fp)
 800269c:	10800304 	addi	r2,r2,12
 80026a0:	1009883a 	mov	r4,r2
 80026a4:	800f4880 	call	800f488 <malloc>
 80026a8:	e0bffb15 	stw	r2,-20(fp)

	if(display->color_depth == 16)
 80026ac:	e0800317 	ldw	r2,12(fp)
 80026b0:	10800917 	ldw	r2,36(r2)
 80026b4:	10800418 	cmpnei	r2,r2,16
 80026b8:	1000151e 	bne	r2,zero,8002710 <vid_paint_block+0xc8>
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 80026bc:	e03ff715 	stw	zero,-36(fp)
 80026c0:	00000f06 	br	8002700 <vid_paint_block+0xb8>
    {
      *(line + i) = (unsigned char)color;
 80026c4:	e0bff717 	ldw	r2,-36(fp)
 80026c8:	e0fffb17 	ldw	r3,-20(fp)
 80026cc:	1885883a 	add	r2,r3,r2
 80026d0:	e0c00217 	ldw	r3,8(fp)
 80026d4:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 80026d8:	e0bff717 	ldw	r2,-36(fp)
 80026dc:	10800044 	addi	r2,r2,1
 80026e0:	e0fffb17 	ldw	r3,-20(fp)
 80026e4:	1885883a 	add	r2,r3,r2
 80026e8:	e0c00217 	ldw	r3,8(fp)
 80026ec:	1807d23a 	srai	r3,r3,8
 80026f0:	10c00005 	stb	r3,0(r2)

  line = malloc(bytes_per_line + 12);

	if(display->color_depth == 16)
	{
    for (i = 0; i < bytes_per_line; i+=2) 
 80026f4:	e0bff717 	ldw	r2,-36(fp)
 80026f8:	10800084 	addi	r2,r2,2
 80026fc:	e0bff715 	stw	r2,-36(fp)
 8002700:	e0fff717 	ldw	r3,-36(fp)
 8002704:	e0bffa17 	ldw	r2,-24(fp)
 8002708:	18bfee16 	blt	r3,r2,80026c4 <__alt_data_end+0xf80026c4>
 800270c:	00003106 	br	80027d4 <vid_paint_block+0x18c>
    {
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
 8002710:	e0800317 	ldw	r2,12(fp)
 8002714:	10800917 	ldw	r2,36(r2)
 8002718:	10800618 	cmpnei	r2,r2,24
 800271c:	10001c1e 	bne	r2,zero,8002790 <vid_paint_block+0x148>
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 8002720:	e03ff715 	stw	zero,-36(fp)
 8002724:	00001606 	br	8002780 <vid_paint_block+0x138>
    {
      *(line + i) = (unsigned char)color;
 8002728:	e0bff717 	ldw	r2,-36(fp)
 800272c:	e0fffb17 	ldw	r3,-20(fp)
 8002730:	1885883a 	add	r2,r3,r2
 8002734:	e0c00217 	ldw	r3,8(fp)
 8002738:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
 800273c:	e0bff717 	ldw	r2,-36(fp)
 8002740:	10800044 	addi	r2,r2,1
 8002744:	e0fffb17 	ldw	r3,-20(fp)
 8002748:	1885883a 	add	r2,r3,r2
 800274c:	e0c00217 	ldw	r3,8(fp)
 8002750:	1807d23a 	srai	r3,r3,8
 8002754:	10c00005 	stb	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
 8002758:	e0bff717 	ldw	r2,-36(fp)
 800275c:	10800084 	addi	r2,r2,2
 8002760:	e0fffb17 	ldw	r3,-20(fp)
 8002764:	1885883a 	add	r2,r3,r2
 8002768:	e0c00217 	ldw	r3,8(fp)
 800276c:	1807d43a 	srai	r3,r3,16
 8002770:	10c00005 	stb	r3,0(r2)
      *(line + i + 1) = (unsigned char)(color >> 8);
    }
  }
  else if(display->color_depth == 24)
  { 
    for (i = 0; i < bytes_per_line; i+=3) 
 8002774:	e0bff717 	ldw	r2,-36(fp)
 8002778:	108000c4 	addi	r2,r2,3
 800277c:	e0bff715 	stw	r2,-36(fp)
 8002780:	e0fff717 	ldw	r3,-36(fp)
 8002784:	e0bffa17 	ldw	r2,-24(fp)
 8002788:	18bfe716 	blt	r3,r2,8002728 <__alt_data_end+0xf8002728>
 800278c:	00001106 	br	80027d4 <vid_paint_block+0x18c>
      *(line + i) = (unsigned char)color;
      *(line + i + 1) = (unsigned char)(color >> 8);
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
 8002790:	e0800317 	ldw	r2,12(fp)
 8002794:	10800917 	ldw	r2,36(r2)
 8002798:	10800818 	cmpnei	r2,r2,32
 800279c:	10000d1e 	bne	r2,zero,80027d4 <vid_paint_block+0x18c>
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 80027a0:	e03ff715 	stw	zero,-36(fp)
 80027a4:	00000806 	br	80027c8 <vid_paint_block+0x180>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(line + i) = (unsigned int)color;
 80027a8:	e0bff717 	ldw	r2,-36(fp)
 80027ac:	e0fffb17 	ldw	r3,-20(fp)
 80027b0:	1885883a 	add	r2,r3,r2
 80027b4:	e0c00217 	ldw	r3,8(fp)
 80027b8:	10c00015 	stw	r3,0(r2)
      *(line + i + 2) = (unsigned char)(color >> 16);
    }
  }
  else if(display->color_depth == 32)
  { 
    for (i = 0; i < bytes_per_line; i+=4) 
 80027bc:	e0bff717 	ldw	r2,-36(fp)
 80027c0:	10800104 	addi	r2,r2,4
 80027c4:	e0bff715 	stw	r2,-36(fp)
 80027c8:	e0fff717 	ldw	r3,-36(fp)
 80027cc:	e0bffa17 	ldw	r2,-24(fp)
 80027d0:	18bff516 	blt	r3,r2,80027a8 <__alt_data_end+0xf80027a8>
      *(int*)(line + i) = (unsigned int)color;
    }
  }
  
  /* Initial Address */
  addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
 80027d4:	e0800317 	ldw	r2,12(fp)
 80027d8:	10800617 	ldw	r2,24(r2)
 80027dc:	e0c00317 	ldw	r3,12(fp)
 80027e0:	10800044 	addi	r2,r2,1
 80027e4:	1085883a 	add	r2,r2,r2
 80027e8:	1085883a 	add	r2,r2,r2
 80027ec:	1885883a 	add	r2,r3,r2
 80027f0:	10800017 	ldw	r2,0(r2)
 80027f4:	10800117 	ldw	r2,4(r2)
 80027f8:	100b883a 	mov	r5,r2
 80027fc:	e0800317 	ldw	r2,12(fp)
 8002800:	10c00717 	ldw	r3,28(r2)
 8002804:	e0bff917 	ldw	r2,-28(fp)
 8002808:	1887383a 	mul	r3,r3,r2
 800280c:	e0bffd17 	ldw	r2,-12(fp)
 8002810:	1887383a 	mul	r3,r3,r2
 8002814:	e13ffc17 	ldw	r4,-16(fp)
 8002818:	e0bff917 	ldw	r2,-28(fp)
 800281c:	2085383a 	mul	r2,r4,r2
 8002820:	1885883a 	add	r2,r3,r2
 8002824:	2885883a 	add	r2,r5,r2
 8002828:	e0bff815 	stw	r2,-32(fp)
  
  for (i = Vstart; i < Vend; i++)
 800282c:	e0bffd17 	ldw	r2,-12(fp)
 8002830:	e0bff715 	stw	r2,-36(fp)
 8002834:	00001006 	br	8002878 <vid_paint_block+0x230>
  {
    memcpy( (void*)addr, line, bytes_per_line );
 8002838:	e0fff817 	ldw	r3,-32(fp)
 800283c:	e0bffa17 	ldw	r2,-24(fp)
 8002840:	1809883a 	mov	r4,r3
 8002844:	e17ffb17 	ldw	r5,-20(fp)
 8002848:	100d883a 	mov	r6,r2
 800284c:	800fc580 	call	800fc58 <memcpy>
    addr += (display->width * bytes_per_pixel);
 8002850:	e0800317 	ldw	r2,12(fp)
 8002854:	10c00717 	ldw	r3,28(r2)
 8002858:	e0bff917 	ldw	r2,-28(fp)
 800285c:	1885383a 	mul	r2,r3,r2
 8002860:	e0fff817 	ldw	r3,-32(fp)
 8002864:	1885883a 	add	r2,r3,r2
 8002868:	e0bff815 	stw	r2,-32(fp)
  }
  
  /* Initial Address */
  addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((Vstart * (display->width * bytes_per_pixel)) + (Hstart * bytes_per_pixel));
  
  for (i = Vstart; i < Vend; i++)
 800286c:	e0bff717 	ldw	r2,-36(fp)
 8002870:	10800044 	addi	r2,r2,1
 8002874:	e0bff715 	stw	r2,-36(fp)
 8002878:	e0fff717 	ldw	r3,-36(fp)
 800287c:	e0bfff17 	ldw	r2,-4(fp)
 8002880:	18bfed16 	blt	r3,r2,8002838 <__alt_data_end+0xf8002838>
  {
    memcpy( (void*)addr, line, bytes_per_line );
    addr += (display->width * bytes_per_pixel);
  }
  free (line);
 8002884:	e13ffb17 	ldw	r4,-20(fp)
 8002888:	800f49c0 	call	800f49c <free>
}
 800288c:	e037883a 	mov	sp,fp
 8002890:	dfc00117 	ldw	ra,4(sp)
 8002894:	df000017 	ldw	fp,0(sp)
 8002898:	dec00204 	addi	sp,sp,8
 800289c:	f800283a 	ret

080028a0 <vid_draw_horiz_line>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 80028a0:	defff504 	addi	sp,sp,-44
 80028a4:	dfc00a15 	stw	ra,40(sp)
 80028a8:	df000915 	stw	fp,36(sp)
 80028ac:	df000904 	addi	fp,sp,36
 80028b0:	2007883a 	mov	r3,r4
 80028b4:	2805883a 	mov	r2,r5
 80028b8:	e1bffe15 	stw	r6,-8(fp)
 80028bc:	e1ffff15 	stw	r7,-4(fp)
 80028c0:	e0fffc0d 	sth	r3,-16(fp)
 80028c4:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = malloc(1024 * 3);
 80028c8:	01030004 	movi	r4,3072
 80028cc:	800f4880 	call	800f488 <malloc>
 80028d0:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
 80028d4:	e0bffc0f 	ldh	r2,-16(fp)
 80028d8:	e0fffd0f 	ldh	r3,-12(fp)
 80028dc:	1880060e 	bge	r3,r2,80028f8 <vid_draw_horiz_line+0x58>
  {
    short temp = Hstart;
 80028e0:	e0bffc0b 	ldhu	r2,-16(fp)
 80028e4:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
 80028e8:	e0bffd0b 	ldhu	r2,-12(fp)
 80028ec:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
 80028f0:	e0bff90b 	ldhu	r2,-28(fp)
 80028f4:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
 80028f8:	e0800217 	ldw	r2,8(fp)
 80028fc:	10800917 	ldw	r2,36(r2)
 8002900:	10800818 	cmpnei	r2,r2,32
 8002904:	1000301e 	bne	r2,zero,80029c8 <vid_draw_horiz_line+0x128>
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((V * (display->width * 4)) + (Hstart * 4));
 8002908:	e0800217 	ldw	r2,8(fp)
 800290c:	10800617 	ldw	r2,24(r2)
 8002910:	e0c00217 	ldw	r3,8(fp)
 8002914:	10800044 	addi	r2,r2,1
 8002918:	1085883a 	add	r2,r2,r2
 800291c:	1085883a 	add	r2,r2,r2
 8002920:	1885883a 	add	r2,r3,r2
 8002924:	10800017 	ldw	r2,0(r2)
 8002928:	10800117 	ldw	r2,4(r2)
 800292c:	1009883a 	mov	r4,r2
 8002930:	e0800217 	ldw	r2,8(fp)
 8002934:	10800717 	ldw	r2,28(r2)
 8002938:	1085883a 	add	r2,r2,r2
 800293c:	1085883a 	add	r2,r2,r2
 8002940:	1007883a 	mov	r3,r2
 8002944:	e0bffe17 	ldw	r2,-8(fp)
 8002948:	1887383a 	mul	r3,r3,r2
 800294c:	e0bffc0f 	ldh	r2,-16(fp)
 8002950:	1085883a 	add	r2,r2,r2
 8002954:	1085883a 	add	r2,r2,r2
 8002958:	1885883a 	add	r2,r3,r2
 800295c:	2085883a 	add	r2,r4,r2
 8002960:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
 8002964:	e0fffd0f 	ldh	r3,-12(fp)
 8002968:	e0bffc0f 	ldh	r2,-16(fp)
 800296c:	1885c83a 	sub	r2,r3,r2
 8002970:	1085883a 	add	r2,r2,r2
 8002974:	1085883a 	add	r2,r2,r2
 8002978:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
 800297c:	e03ff715 	stw	zero,-36(fp)
 8002980:	00000806 	br	80029a4 <vid_draw_horiz_line+0x104>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
 8002984:	e0bff717 	ldw	r2,-36(fp)
 8002988:	e0fff817 	ldw	r3,-32(fp)
 800298c:	1885883a 	add	r2,r3,r2
 8002990:	e0ffff17 	ldw	r3,-4(fp)
 8002994:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
 8002998:	e0bff717 	ldw	r2,-36(fp)
 800299c:	10800104 	addi	r2,r2,4
 80029a0:	e0bff715 	stw	r2,-36(fp)
 80029a4:	e0fff717 	ldw	r3,-36(fp)
 80029a8:	e0bffb17 	ldw	r2,-20(fp)
 80029ac:	18bff516 	blt	r3,r2,8002984 <__alt_data_end+0xf8002984>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 80029b0:	e0fffa17 	ldw	r3,-24(fp)
 80029b4:	e0bffb17 	ldw	r2,-20(fp)
 80029b8:	1809883a 	mov	r4,r3
 80029bc:	e17ff817 	ldw	r5,-32(fp)
 80029c0:	100d883a 	mov	r6,r2
 80029c4:	800fc580 	call	800fc58 <memcpy>
  }
  if(display->color_depth == 24)
 80029c8:	e0800217 	ldw	r2,8(fp)
 80029cc:	10800917 	ldw	r2,36(r2)
 80029d0:	10800618 	cmpnei	r2,r2,24
 80029d4:	1000411e 	bne	r2,zero,8002adc <vid_draw_horiz_line+0x23c>
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((V * (display->width * 3)) + (Hstart * 3));
 80029d8:	e0800217 	ldw	r2,8(fp)
 80029dc:	10800617 	ldw	r2,24(r2)
 80029e0:	e0c00217 	ldw	r3,8(fp)
 80029e4:	10800044 	addi	r2,r2,1
 80029e8:	1085883a 	add	r2,r2,r2
 80029ec:	1085883a 	add	r2,r2,r2
 80029f0:	1885883a 	add	r2,r3,r2
 80029f4:	10800017 	ldw	r2,0(r2)
 80029f8:	10800117 	ldw	r2,4(r2)
 80029fc:	100b883a 	mov	r5,r2
 8002a00:	e0800217 	ldw	r2,8(fp)
 8002a04:	10c00717 	ldw	r3,28(r2)
 8002a08:	1805883a 	mov	r2,r3
 8002a0c:	1085883a 	add	r2,r2,r2
 8002a10:	10c7883a 	add	r3,r2,r3
 8002a14:	e0bffe17 	ldw	r2,-8(fp)
 8002a18:	1889383a 	mul	r4,r3,r2
 8002a1c:	e0fffc0f 	ldh	r3,-16(fp)
 8002a20:	1805883a 	mov	r2,r3
 8002a24:	1085883a 	add	r2,r2,r2
 8002a28:	10c5883a 	add	r2,r2,r3
 8002a2c:	2085883a 	add	r2,r4,r2
 8002a30:	2885883a 	add	r2,r5,r2
 8002a34:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
 8002a38:	e0fffd0f 	ldh	r3,-12(fp)
 8002a3c:	e0bffc0f 	ldh	r2,-16(fp)
 8002a40:	1887c83a 	sub	r3,r3,r2
 8002a44:	1805883a 	mov	r2,r3
 8002a48:	1085883a 	add	r2,r2,r2
 8002a4c:	10c5883a 	add	r2,r2,r3
 8002a50:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
 8002a54:	e03ff715 	stw	zero,-36(fp)
 8002a58:	00001606 	br	8002ab4 <vid_draw_horiz_line+0x214>
    {
      *(fast_buffer + i) = (unsigned char)color;
 8002a5c:	e0bff717 	ldw	r2,-36(fp)
 8002a60:	e0fff817 	ldw	r3,-32(fp)
 8002a64:	1885883a 	add	r2,r3,r2
 8002a68:	e0ffff17 	ldw	r3,-4(fp)
 8002a6c:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 8002a70:	e0bff717 	ldw	r2,-36(fp)
 8002a74:	10800044 	addi	r2,r2,1
 8002a78:	e0fff817 	ldw	r3,-32(fp)
 8002a7c:	1885883a 	add	r2,r3,r2
 8002a80:	e0ffff17 	ldw	r3,-4(fp)
 8002a84:	1807d23a 	srai	r3,r3,8
 8002a88:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
 8002a8c:	e0bff717 	ldw	r2,-36(fp)
 8002a90:	10800084 	addi	r2,r2,2
 8002a94:	e0fff817 	ldw	r3,-32(fp)
 8002a98:	1885883a 	add	r2,r3,r2
 8002a9c:	e0ffff17 	ldw	r3,-4(fp)
 8002aa0:	1807d43a 	srai	r3,r3,16
 8002aa4:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
 8002aa8:	e0bff717 	ldw	r2,-36(fp)
 8002aac:	108000c4 	addi	r2,r2,3
 8002ab0:	e0bff715 	stw	r2,-36(fp)
 8002ab4:	e0fff717 	ldw	r3,-36(fp)
 8002ab8:	e0bffb17 	ldw	r2,-20(fp)
 8002abc:	18bfe716 	blt	r3,r2,8002a5c <__alt_data_end+0xf8002a5c>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 8002ac0:	e0fffa17 	ldw	r3,-24(fp)
 8002ac4:	e0bffb17 	ldw	r2,-20(fp)
 8002ac8:	1809883a 	mov	r4,r3
 8002acc:	e17ff817 	ldw	r5,-32(fp)
 8002ad0:	100d883a 	mov	r6,r2
 8002ad4:	800fc580 	call	800fc58 <memcpy>
 8002ad8:	00003806 	br	8002bbc <vid_draw_horiz_line+0x31c>
  }
  else if(display->color_depth == 16)
 8002adc:	e0800217 	ldw	r2,8(fp)
 8002ae0:	10800917 	ldw	r2,36(r2)
 8002ae4:	10800418 	cmpnei	r2,r2,16
 8002ae8:	1000341e 	bne	r2,zero,8002bbc <vid_draw_horiz_line+0x31c>
  {
    addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((V * (display->width * 2)) + (Hstart * 2));
 8002aec:	e0800217 	ldw	r2,8(fp)
 8002af0:	10800617 	ldw	r2,24(r2)
 8002af4:	e0c00217 	ldw	r3,8(fp)
 8002af8:	10800044 	addi	r2,r2,1
 8002afc:	1085883a 	add	r2,r2,r2
 8002b00:	1085883a 	add	r2,r2,r2
 8002b04:	1885883a 	add	r2,r3,r2
 8002b08:	10800017 	ldw	r2,0(r2)
 8002b0c:	10800117 	ldw	r2,4(r2)
 8002b10:	1009883a 	mov	r4,r2
 8002b14:	e0800217 	ldw	r2,8(fp)
 8002b18:	10800717 	ldw	r2,28(r2)
 8002b1c:	1085883a 	add	r2,r2,r2
 8002b20:	1007883a 	mov	r3,r2
 8002b24:	e0bffe17 	ldw	r2,-8(fp)
 8002b28:	1887383a 	mul	r3,r3,r2
 8002b2c:	e0bffc0f 	ldh	r2,-16(fp)
 8002b30:	1085883a 	add	r2,r2,r2
 8002b34:	1885883a 	add	r2,r3,r2
 8002b38:	2085883a 	add	r2,r4,r2
 8002b3c:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
 8002b40:	e0fffd0f 	ldh	r3,-12(fp)
 8002b44:	e0bffc0f 	ldh	r2,-16(fp)
 8002b48:	1885c83a 	sub	r2,r3,r2
 8002b4c:	1085883a 	add	r2,r2,r2
 8002b50:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
 8002b54:	e03ff715 	stw	zero,-36(fp)
 8002b58:	00000f06 	br	8002b98 <vid_draw_horiz_line+0x2f8>
    {
      *(fast_buffer + i) = (unsigned char)color;
 8002b5c:	e0bff717 	ldw	r2,-36(fp)
 8002b60:	e0fff817 	ldw	r3,-32(fp)
 8002b64:	1885883a 	add	r2,r3,r2
 8002b68:	e0ffff17 	ldw	r3,-4(fp)
 8002b6c:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 8002b70:	e0bff717 	ldw	r2,-36(fp)
 8002b74:	10800044 	addi	r2,r2,1
 8002b78:	e0fff817 	ldw	r3,-32(fp)
 8002b7c:	1885883a 	add	r2,r3,r2
 8002b80:	e0ffff17 	ldw	r3,-4(fp)
 8002b84:	1807d23a 	srai	r3,r3,8
 8002b88:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
 8002b8c:	e0bff717 	ldw	r2,-36(fp)
 8002b90:	10800084 	addi	r2,r2,2
 8002b94:	e0bff715 	stw	r2,-36(fp)
 8002b98:	e0fff717 	ldw	r3,-36(fp)
 8002b9c:	e0bffb17 	ldw	r2,-20(fp)
 8002ba0:	18bfee16 	blt	r3,r2,8002b5c <__alt_data_end+0xf8002b5c>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 8002ba4:	e0fffa17 	ldw	r3,-24(fp)
 8002ba8:	e0bffb17 	ldw	r2,-20(fp)
 8002bac:	1809883a 	mov	r4,r3
 8002bb0:	e17ff817 	ldw	r5,-32(fp)
 8002bb4:	100d883a 	mov	r6,r2
 8002bb8:	800fc580 	call	800fc58 <memcpy>
  }
  free(fast_buffer);
 8002bbc:	e13ff817 	ldw	r4,-32(fp)
 8002bc0:	800f49c0 	call	800f49c <free>
}
 8002bc4:	e037883a 	mov	sp,fp
 8002bc8:	dfc00117 	ldw	ra,4(sp)
 8002bcc:	df000017 	ldw	fp,0(sp)
 8002bd0:	dec00204 	addi	sp,sp,8
 8002bd4:	f800283a 	ret

08002bd8 <vid_merge_colors>:
*  Purpose: Takes 5-bit color values for each red, green, and blue
*           and merges them into one 16-bit color value.
*
******************************************************************/
int vid_merge_colors(int red, int green, int blue)
{
 8002bd8:	defffc04 	addi	sp,sp,-16
 8002bdc:	df000315 	stw	fp,12(sp)
 8002be0:	df000304 	addi	fp,sp,12
 8002be4:	e13ffd15 	stw	r4,-12(fp)
 8002be8:	e17ffe15 	stw	r5,-8(fp)
 8002bec:	e1bfff15 	stw	r6,-4(fp)
  // Green actually has 6-bits, but we'll make it's LSB 1 to be consistent.
  return ((blue) | (((green << 1) | 0x1) << 5) | (red << 11));
 8002bf0:	e0bffe17 	ldw	r2,-8(fp)
 8002bf4:	1085883a 	add	r2,r2,r2
 8002bf8:	10800054 	ori	r2,r2,1
 8002bfc:	1006917a 	slli	r3,r2,5
 8002c00:	e0bfff17 	ldw	r2,-4(fp)
 8002c04:	1886b03a 	or	r3,r3,r2
 8002c08:	e0bffd17 	ldw	r2,-12(fp)
 8002c0c:	100492fa 	slli	r2,r2,11
 8002c10:	1884b03a 	or	r2,r3,r2
}
 8002c14:	e037883a 	mov	sp,fp
 8002c18:	df000017 	ldw	fp,0(sp)
 8002c1c:	dec00104 	addi	sp,sp,4
 8002c20:	f800283a 	ret

08002c24 <vid_color_convert24_16>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
unsigned short vid_color_convert24_16(char* color24)
{
 8002c24:	defffc04 	addi	sp,sp,-16
 8002c28:	df000315 	stw	fp,12(sp)
 8002c2c:	df000304 	addi	fp,sp,12
 8002c30:	e13fff15 	stw	r4,-4(fp)
	unsigned char red, green, blue;
	unsigned short output;
	
	red = *(color24 + 0) & 0xF8;
 8002c34:	e0bfff17 	ldw	r2,-4(fp)
 8002c38:	10800003 	ldbu	r2,0(r2)
 8002c3c:	1007883a 	mov	r3,r2
 8002c40:	00bffe04 	movi	r2,-8
 8002c44:	1884703a 	and	r2,r3,r2
 8002c48:	e0bffd05 	stb	r2,-12(fp)
	green = *(color24 + 1) & 0xFC; // green is actualy 6 bits
 8002c4c:	e0bfff17 	ldw	r2,-4(fp)
 8002c50:	10800044 	addi	r2,r2,1
 8002c54:	10800003 	ldbu	r2,0(r2)
 8002c58:	1007883a 	mov	r3,r2
 8002c5c:	00bfff04 	movi	r2,-4
 8002c60:	1884703a 	and	r2,r3,r2
 8002c64:	e0bffd45 	stb	r2,-11(fp)
	blue = *(color24 + 2) & 0xF8;
 8002c68:	e0bfff17 	ldw	r2,-4(fp)
 8002c6c:	10800084 	addi	r2,r2,2
 8002c70:	10800003 	ldbu	r2,0(r2)
 8002c74:	1007883a 	mov	r3,r2
 8002c78:	00bffe04 	movi	r2,-8
 8002c7c:	1884703a 	and	r2,r3,r2
 8002c80:	e0bffd85 	stb	r2,-10(fp)

	output = ((blue >> 3) | (green << 3) | (red << 8));  
 8002c84:	e0bffd83 	ldbu	r2,-10(fp)
 8002c88:	1004d0fa 	srli	r2,r2,3
 8002c8c:	10803fcc 	andi	r2,r2,255
 8002c90:	e0fffd43 	ldbu	r3,-11(fp)
 8002c94:	180690fa 	slli	r3,r3,3
 8002c98:	10c4b03a 	or	r2,r2,r3
 8002c9c:	1007883a 	mov	r3,r2
 8002ca0:	e0bffd03 	ldbu	r2,-12(fp)
 8002ca4:	1004923a 	slli	r2,r2,8
 8002ca8:	1884b03a 	or	r2,r3,r2
 8002cac:	e0bffe0d 	sth	r2,-8(fp)
	return output;
 8002cb0:	e0bffe0b 	ldhu	r2,-8(fp)
}
 8002cb4:	e037883a 	mov	sp,fp
 8002cb8:	df000017 	ldw	fp,0(sp)
 8002cbc:	dec00104 	addi	sp,sp,4
 8002cc0:	f800283a 	ret

08002cc4 <vid_color_convert16_24>:
*           sample and converts it to 16-bits, displayable by the 
*           VGA controller in 16-bit mode
*
******************************************************************/
int vid_color_convert16_24(unsigned short color16, char* color24)
{
 8002cc4:	defffd04 	addi	sp,sp,-12
 8002cc8:	df000215 	stw	fp,8(sp)
 8002ccc:	df000204 	addi	fp,sp,8
 8002cd0:	2005883a 	mov	r2,r4
 8002cd4:	e17fff15 	stw	r5,-4(fp)
 8002cd8:	e0bffe0d 	sth	r2,-8(fp)
	*(color24 + 0) = color16 >> 11;
 8002cdc:	e0bffe0b 	ldhu	r2,-8(fp)
 8002ce0:	1004d2fa 	srli	r2,r2,11
 8002ce4:	1007883a 	mov	r3,r2
 8002ce8:	e0bfff17 	ldw	r2,-4(fp)
 8002cec:	10c00005 	stb	r3,0(r2)
	*(color24 + 1) = ((color16 & 0x3E) >> 5);
 8002cf0:	e0bfff17 	ldw	r2,-4(fp)
 8002cf4:	10800044 	addi	r2,r2,1
 8002cf8:	e0fffe0b 	ldhu	r3,-8(fp)
 8002cfc:	18c00f8c 	andi	r3,r3,62
 8002d00:	1807d17a 	srai	r3,r3,5
 8002d04:	10c00005 	stb	r3,0(r2)
	*(color24 + 2) = (color16 & 0x1F);
 8002d08:	e0bfff17 	ldw	r2,-4(fp)
 8002d0c:	10800084 	addi	r2,r2,2
 8002d10:	e0fffe0b 	ldhu	r3,-8(fp)
 8002d14:	18c007cc 	andi	r3,r3,31
 8002d18:	10c00005 	stb	r3,0(r2)
	
	return (0);
 8002d1c:	0005883a 	mov	r2,zero
}
 8002d20:	e037883a 	mov	sp,fp
 8002d24:	df000017 	ldw	fp,0(sp)
 8002d28:	dec00104 	addi	sp,sp,4
 8002d2c:	f800283a 	ret

08002d30 <vid_copy_line_to_frame_buffer>:
*           the specified coordinates.  Converts color depth if
*           necessary.
*
******************************************************************/
int vid_copy_line_to_frame_buffer( int x, int y, char* buffer, int num_pixels, int source_color_depth, alt_video_display* display )
{
 8002d30:	defff504 	addi	sp,sp,-44
 8002d34:	dfc00a15 	stw	ra,40(sp)
 8002d38:	df000915 	stw	fp,36(sp)
 8002d3c:	df000904 	addi	fp,sp,36
 8002d40:	e13ffc15 	stw	r4,-16(fp)
 8002d44:	e17ffd15 	stw	r5,-12(fp)
 8002d48:	e1bffe15 	stw	r6,-8(fp)
 8002d4c:	e1ffff15 	stw	r7,-4(fp)
  unsigned short* temp_line;
  int index_24 = 0;
 8002d50:	e03ff715 	stw	zero,-36(fp)
  int index_16 = 0;
 8002d54:	e03ff815 	stw	zero,-32(fp)
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + 
 8002d58:	e0800317 	ldw	r2,12(fp)
 8002d5c:	10800617 	ldw	r2,24(r2)
 8002d60:	e0c00317 	ldw	r3,12(fp)
 8002d64:	10800044 	addi	r2,r2,1
 8002d68:	1085883a 	add	r2,r2,r2
 8002d6c:	1085883a 	add	r2,r2,r2
 8002d70:	1885883a 	add	r2,r3,r2
 8002d74:	10800017 	ldw	r2,0(r2)
 8002d78:	10800117 	ldw	r2,4(r2)
 8002d7c:	100b883a 	mov	r5,r2
    ((y * (display->width * (display->bytes_per_pixel))) + 
 8002d80:	e0800317 	ldw	r2,12(fp)
 8002d84:	10c00717 	ldw	r3,28(r2)
 8002d88:	e0800317 	ldw	r2,12(fp)
 8002d8c:	10800a17 	ldw	r2,40(r2)
 8002d90:	1887383a 	mul	r3,r3,r2
 8002d94:	e0bffd17 	ldw	r2,-12(fp)
 8002d98:	1887383a 	mul	r3,r3,r2
    (x * (display->bytes_per_pixel)));
 8002d9c:	e0800317 	ldw	r2,12(fp)
 8002da0:	11000a17 	ldw	r4,40(r2)
 8002da4:	e0bffc17 	ldw	r2,-16(fp)
 8002da8:	2085383a 	mul	r2,r4,r2
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + 
    ((y * (display->width * (display->bytes_per_pixel))) + 
 8002dac:	1885883a 	add	r2,r3,r2
  int index_24 = 0;
  int index_16 = 0;
  unsigned int dest_addr;
  unsigned int bytes_in_line;
  
  dest_addr = (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) + 
 8002db0:	2885883a 	add	r2,r5,r2
 8002db4:	e0bff915 	stw	r2,-28(fp)
    ((y * (display->width * (display->bytes_per_pixel))) + 
    (x * (display->bytes_per_pixel)));
  
  bytes_in_line = num_pixels * display->bytes_per_pixel;
 8002db8:	e0800317 	ldw	r2,12(fp)
 8002dbc:	10c00a17 	ldw	r3,40(r2)
 8002dc0:	e0bfff17 	ldw	r2,-4(fp)
 8002dc4:	1885383a 	mul	r2,r3,r2
 8002dc8:	e0bffa15 	stw	r2,-24(fp)
  
  if(source_color_depth == 24)
 8002dcc:	e0800217 	ldw	r2,8(fp)
 8002dd0:	10800618 	cmpnei	r2,r2,24
 8002dd4:	10004a1e 	bne	r2,zero,8002f00 <vid_copy_line_to_frame_buffer+0x1d0>
  {
    if(display->color_depth == 16)
 8002dd8:	e0800317 	ldw	r2,12(fp)
 8002ddc:	10800917 	ldw	r2,36(r2)
 8002de0:	10800418 	cmpnei	r2,r2,16
 8002de4:	10003c1e 	bne	r2,zero,8002ed8 <vid_copy_line_to_frame_buffer+0x1a8>
    {
      temp_line = malloc(bytes_in_line);
 8002de8:	e13ffa17 	ldw	r4,-24(fp)
 8002dec:	800f4880 	call	800f488 <malloc>
 8002df0:	e0bffb15 	stw	r2,-20(fp)
      while(index_24 < bytes_in_line)
 8002df4:	00002d06 	br	8002eac <vid_copy_line_to_frame_buffer+0x17c>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
 8002df8:	e0bff817 	ldw	r2,-32(fp)
 8002dfc:	1085883a 	add	r2,r2,r2
 8002e00:	1007883a 	mov	r3,r2
 8002e04:	e0bffb17 	ldw	r2,-20(fp)
 8002e08:	10c5883a 	add	r2,r2,r3
 8002e0c:	e0fff717 	ldw	r3,-36(fp)
 8002e10:	18c00084 	addi	r3,r3,2
 8002e14:	e13ffe17 	ldw	r4,-8(fp)
 8002e18:	20c7883a 	add	r3,r4,r3
 8002e1c:	18c00003 	ldbu	r3,0(r3)
 8002e20:	18c03fcc 	andi	r3,r3,255
 8002e24:	18c0201c 	xori	r3,r3,128
 8002e28:	18ffe004 	addi	r3,r3,-128
 8002e2c:	18c03e0c 	andi	r3,r3,248
 8002e30:	1807d0fa 	srai	r3,r3,3
 8002e34:	180b883a 	mov	r5,r3
 8002e38:	e0fff717 	ldw	r3,-36(fp)
 8002e3c:	18c00044 	addi	r3,r3,1
 8002e40:	e13ffe17 	ldw	r4,-8(fp)
 8002e44:	20c7883a 	add	r3,r4,r3
 8002e48:	18c00003 	ldbu	r3,0(r3)
 8002e4c:	18c03fcc 	andi	r3,r3,255
 8002e50:	18c0201c 	xori	r3,r3,128
 8002e54:	18ffe004 	addi	r3,r3,-128
 8002e58:	18c03f0c 	andi	r3,r3,252
 8002e5c:	180690fa 	slli	r3,r3,3
 8002e60:	28c6b03a 	or	r3,r5,r3
 8002e64:	180b883a 	mov	r5,r3
 8002e68:	e0fff717 	ldw	r3,-36(fp)
 8002e6c:	e13ffe17 	ldw	r4,-8(fp)
 8002e70:	20c7883a 	add	r3,r4,r3
 8002e74:	18c00003 	ldbu	r3,0(r3)
 8002e78:	18c03fcc 	andi	r3,r3,255
 8002e7c:	18c0201c 	xori	r3,r3,128
 8002e80:	18ffe004 	addi	r3,r3,-128
 8002e84:	18c03e0c 	andi	r3,r3,248
 8002e88:	1806923a 	slli	r3,r3,8
 8002e8c:	28c6b03a 	or	r3,r5,r3
 8002e90:	10c0000d 	sth	r3,0(r2)
        index_16++;
 8002e94:	e0bff817 	ldw	r2,-32(fp)
 8002e98:	10800044 	addi	r2,r2,1
 8002e9c:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 8002ea0:	e0bff717 	ldw	r2,-36(fp)
 8002ea4:	108000c4 	addi	r2,r2,3
 8002ea8:	e0bff715 	stw	r2,-36(fp)
  if(source_color_depth == 24)
  {
    if(display->color_depth == 16)
    {
      temp_line = malloc(bytes_in_line);
      while(index_24 < bytes_in_line)
 8002eac:	e0fff717 	ldw	r3,-36(fp)
 8002eb0:	e0bffa17 	ldw	r2,-24(fp)
 8002eb4:	18bfd036 	bltu	r3,r2,8002df8 <__alt_data_end+0xf8002df8>
      {
        *(temp_line + index_16) = vid_color_convert24_16_m((char*)(buffer + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 8002eb8:	e0bff917 	ldw	r2,-28(fp)
 8002ebc:	1009883a 	mov	r4,r2
 8002ec0:	e17ffb17 	ldw	r5,-20(fp)
 8002ec4:	e1bffa17 	ldw	r6,-24(fp)
 8002ec8:	800fc580 	call	800fc58 <memcpy>
      free(temp_line);
 8002ecc:	e13ffb17 	ldw	r4,-20(fp)
 8002ed0:	800f49c0 	call	800f49c <free>
 8002ed4:	00003f06 	br	8002fd4 <vid_copy_line_to_frame_buffer+0x2a4>
    }
    else if(display->color_depth == 24)
 8002ed8:	e0800317 	ldw	r2,12(fp)
 8002edc:	10800917 	ldw	r2,36(r2)
 8002ee0:	10800618 	cmpnei	r2,r2,24
 8002ee4:	10003b1e 	bne	r2,zero,8002fd4 <vid_copy_line_to_frame_buffer+0x2a4>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 8002ee8:	e0bff917 	ldw	r2,-28(fp)
 8002eec:	1009883a 	mov	r4,r2
 8002ef0:	e17ffe17 	ldw	r5,-8(fp)
 8002ef4:	e1bffa17 	ldw	r6,-24(fp)
 8002ef8:	800fc580 	call	800fc58 <memcpy>
 8002efc:	00003506 	br	8002fd4 <vid_copy_line_to_frame_buffer+0x2a4>
    }
  }
  else if(source_color_depth == 16)
 8002f00:	e0800217 	ldw	r2,8(fp)
 8002f04:	10800418 	cmpnei	r2,r2,16
 8002f08:	1000321e 	bne	r2,zero,8002fd4 <vid_copy_line_to_frame_buffer+0x2a4>
  {
    if(display->color_depth == 24)
 8002f0c:	e0800317 	ldw	r2,12(fp)
 8002f10:	10800917 	ldw	r2,36(r2)
 8002f14:	10800618 	cmpnei	r2,r2,24
 8002f18:	1000251e 	bne	r2,zero,8002fb0 <vid_copy_line_to_frame_buffer+0x280>
    {
      temp_line = malloc(bytes_in_line);
 8002f1c:	e13ffa17 	ldw	r4,-24(fp)
 8002f20:	800f4880 	call	800f488 <malloc>
 8002f24:	e0bffb15 	stw	r2,-20(fp)
      while(index_16 < num_pixels )
 8002f28:	00001606 	br	8002f84 <vid_copy_line_to_frame_buffer+0x254>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
 8002f2c:	e0bff817 	ldw	r2,-32(fp)
 8002f30:	e0fffe17 	ldw	r3,-8(fp)
 8002f34:	1885883a 	add	r2,r3,r2
 8002f38:	10800003 	ldbu	r2,0(r2)
 8002f3c:	10803fcc 	andi	r2,r2,255
 8002f40:	1080201c 	xori	r2,r2,128
 8002f44:	10bfe004 	addi	r2,r2,-128
 8002f48:	10ffffcc 	andi	r3,r2,65535
 8002f4c:	e0bff717 	ldw	r2,-36(fp)
 8002f50:	1085883a 	add	r2,r2,r2
 8002f54:	1009883a 	mov	r4,r2
 8002f58:	e0bffb17 	ldw	r2,-20(fp)
 8002f5c:	1105883a 	add	r2,r2,r4
 8002f60:	1809883a 	mov	r4,r3
 8002f64:	100b883a 	mov	r5,r2
 8002f68:	8002cc40 	call	8002cc4 <vid_color_convert16_24>
        index_16++;
 8002f6c:	e0bff817 	ldw	r2,-32(fp)
 8002f70:	10800044 	addi	r2,r2,1
 8002f74:	e0bff815 	stw	r2,-32(fp)
        index_24+=3;
 8002f78:	e0bff717 	ldw	r2,-36(fp)
 8002f7c:	108000c4 	addi	r2,r2,3
 8002f80:	e0bff715 	stw	r2,-36(fp)
  else if(source_color_depth == 16)
  {
    if(display->color_depth == 24)
    {
      temp_line = malloc(bytes_in_line);
      while(index_16 < num_pixels )
 8002f84:	e0fff817 	ldw	r3,-32(fp)
 8002f88:	e0bfff17 	ldw	r2,-4(fp)
 8002f8c:	18bfe716 	blt	r3,r2,8002f2c <__alt_data_end+0xf8002f2c>
      {
        vid_color_convert16_24((short)*(buffer + index_16), (char*)(temp_line + index_24));
        index_16++;
        index_24+=3;
      }
      memcpy( (void*)dest_addr, (void*)temp_line, bytes_in_line );
 8002f90:	e0bff917 	ldw	r2,-28(fp)
 8002f94:	1009883a 	mov	r4,r2
 8002f98:	e17ffb17 	ldw	r5,-20(fp)
 8002f9c:	e1bffa17 	ldw	r6,-24(fp)
 8002fa0:	800fc580 	call	800fc58 <memcpy>
      free(temp_line);
 8002fa4:	e13ffb17 	ldw	r4,-20(fp)
 8002fa8:	800f49c0 	call	800f49c <free>
 8002fac:	00000906 	br	8002fd4 <vid_copy_line_to_frame_buffer+0x2a4>
      
    }
    else if(display->color_depth == 16)
 8002fb0:	e0800317 	ldw	r2,12(fp)
 8002fb4:	10800917 	ldw	r2,36(r2)
 8002fb8:	10800418 	cmpnei	r2,r2,16
 8002fbc:	1000051e 	bne	r2,zero,8002fd4 <vid_copy_line_to_frame_buffer+0x2a4>
    {
      memcpy( (void*)dest_addr, (void*)buffer, bytes_in_line );
 8002fc0:	e0bff917 	ldw	r2,-28(fp)
 8002fc4:	1009883a 	mov	r4,r2
 8002fc8:	e17ffe17 	ldw	r5,-8(fp)
 8002fcc:	e1bffa17 	ldw	r6,-24(fp)
 8002fd0:	800fc580 	call	800fc58 <memcpy>
    }
  }
  return(0);
 8002fd4:	0005883a 	mov	r2,zero
}
 8002fd8:	e037883a 	mov	sp,fp
 8002fdc:	dfc00117 	ldw	ra,4(sp)
 8002fe0:	df000017 	ldw	fp,0(sp)
 8002fe4:	dec00204 	addi	sp,sp,8
 8002fe8:	f800283a 	ret

08002fec <vid_draw_sloped_line>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 8002fec:	deffef04 	addi	sp,sp,-68
 8002ff0:	dfc01015 	stw	ra,64(sp)
 8002ff4:	df000f15 	stw	fp,60(sp)
 8002ff8:	df000f04 	addi	fp,sp,60
 8002ffc:	2011883a 	mov	r8,r4
 8003000:	3009883a 	mov	r4,r6
 8003004:	3807883a 	mov	r3,r7
 8003008:	e0800217 	ldw	r2,8(fp)
 800300c:	e23ffb0d 	sth	r8,-20(fp)
 8003010:	e17ffc0d 	sth	r5,-16(fp)
 8003014:	e13ffd0d 	sth	r4,-12(fp)
 8003018:	e0fffe0d 	sth	r3,-8(fp)
 800301c:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 8003020:	e0fffd0b 	ldhu	r3,-12(fp)
 8003024:	e0bffb0b 	ldhu	r2,-20(fp)
 8003028:	1885c83a 	sub	r2,r3,r2
 800302c:	1000010e 	bge	r2,zero,8003034 <vid_draw_sloped_line+0x48>
 8003030:	0085c83a 	sub	r2,zero,r2
 8003034:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 8003038:	e0fffe0b 	ldhu	r3,-8(fp)
 800303c:	e0bffc0b 	ldhu	r2,-16(fp)
 8003040:	1885c83a 	sub	r2,r3,r2
 8003044:	1000010e 	bge	r2,zero,800304c <vid_draw_sloped_line+0x60>
 8003048:	0085c83a 	sub	r2,zero,r2
 800304c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 8003050:	e0bffb0b 	ldhu	r2,-20(fp)
 8003054:	e0fffd0b 	ldhu	r3,-12(fp)
 8003058:	1880032e 	bgeu	r3,r2,8003068 <vid_draw_sloped_line+0x7c>
 800305c:	00bfffc4 	movi	r2,-1
 8003060:	e0bff315 	stw	r2,-52(fp)
 8003064:	00000206 	br	8003070 <vid_draw_sloped_line+0x84>
 8003068:	00800044 	movi	r2,1
 800306c:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 8003070:	e0bffc0b 	ldhu	r2,-16(fp)
 8003074:	e0fffe0b 	ldhu	r3,-8(fp)
 8003078:	1880032e 	bgeu	r3,r2,8003088 <vid_draw_sloped_line+0x9c>
 800307c:	00bfffc4 	movi	r2,-1
 8003080:	e0bff415 	stw	r2,-48(fp)
 8003084:	00000206 	br	8003090 <vid_draw_sloped_line+0xa4>
 8003088:	00800044 	movi	r2,1
 800308c:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 8003090:	e0fff117 	ldw	r3,-60(fp)
 8003094:	e0bff217 	ldw	r2,-56(fp)
 8003098:	18804d16 	blt	r3,r2,80031d0 <vid_draw_sloped_line+0x1e4>
    int dPr   = vert_delta<<1;
 800309c:	e0bff217 	ldw	r2,-56(fp)
 80030a0:	1085883a 	add	r2,r2,r2
 80030a4:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 80030a8:	e0bff117 	ldw	r2,-60(fp)
 80030ac:	1085883a 	add	r2,r2,r2
 80030b0:	1007883a 	mov	r3,r2
 80030b4:	e0bff717 	ldw	r2,-36(fp)
 80030b8:	10c5c83a 	sub	r2,r2,r3
 80030bc:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 80030c0:	e0fff717 	ldw	r3,-36(fp)
 80030c4:	e0bff117 	ldw	r2,-60(fp)
 80030c8:	1885c83a 	sub	r2,r3,r2
 80030cc:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 80030d0:	00003c06 	br	80031c4 <vid_draw_sloped_line+0x1d8>
      // plot the pixel
      vid_set_pixel(horiz_start, vert_start-1, color, display);
 80030d4:	e13ffb0b 	ldhu	r4,-20(fp)
 80030d8:	e0bffc0b 	ldhu	r2,-16(fp)
 80030dc:	10ffffc4 	addi	r3,r2,-1
 80030e0:	e0800317 	ldw	r2,12(fp)
 80030e4:	180b883a 	mov	r5,r3
 80030e8:	100d883a 	mov	r6,r2
 80030ec:	e1c00417 	ldw	r7,16(fp)
 80030f0:	80023ec0 	call	80023ec <vid_set_pixel>
      vid_set_pixel(horiz_start, vert_start, color, display);
 80030f4:	e13ffb0b 	ldhu	r4,-20(fp)
 80030f8:	e0fffc0b 	ldhu	r3,-16(fp)
 80030fc:	e0800317 	ldw	r2,12(fp)
 8003100:	180b883a 	mov	r5,r3
 8003104:	100d883a 	mov	r6,r2
 8003108:	e1c00417 	ldw	r7,16(fp)
 800310c:	80023ec0 	call	80023ec <vid_set_pixel>
      vid_set_pixel(horiz_start, vert_start+1, color, display);
 8003110:	e13ffb0b 	ldhu	r4,-20(fp)
 8003114:	e0bffc0b 	ldhu	r2,-16(fp)
 8003118:	10c00044 	addi	r3,r2,1
 800311c:	e0800317 	ldw	r2,12(fp)
 8003120:	180b883a 	mov	r5,r3
 8003124:	100d883a 	mov	r6,r2
 8003128:	e1c00417 	ldw	r7,16(fp)
 800312c:	80023ec0 	call	80023ec <vid_set_pixel>
      vid_set_pixel(horiz_start, vert_start+2, color, display);
 8003130:	e13ffb0b 	ldhu	r4,-20(fp)
 8003134:	e0bffc0b 	ldhu	r2,-16(fp)
 8003138:	10c00084 	addi	r3,r2,2
 800313c:	e0800317 	ldw	r2,12(fp)
 8003140:	180b883a 	mov	r5,r3
 8003144:	100d883a 	mov	r6,r2
 8003148:	e1c00417 	ldw	r7,16(fp)
 800314c:	80023ec0 	call	80023ec <vid_set_pixel>


      // If we're moving both up and right
      if (P > 0) {
 8003150:	e0bff517 	ldw	r2,-44(fp)
 8003154:	00800f0e 	bge	zero,r2,8003194 <vid_draw_sloped_line+0x1a8>
        horiz_start+=horiz_incr;
 8003158:	e0bff317 	ldw	r2,-52(fp)
 800315c:	1007883a 	mov	r3,r2
 8003160:	e0bffb0b 	ldhu	r2,-20(fp)
 8003164:	1885883a 	add	r2,r3,r2
 8003168:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 800316c:	e0bff417 	ldw	r2,-48(fp)
 8003170:	1007883a 	mov	r3,r2
 8003174:	e0bffc0b 	ldhu	r2,-16(fp)
 8003178:	1885883a 	add	r2,r3,r2
 800317c:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 8003180:	e0fff517 	ldw	r3,-44(fp)
 8003184:	e0bff817 	ldw	r2,-32(fp)
 8003188:	1885883a 	add	r2,r3,r2
 800318c:	e0bff515 	stw	r2,-44(fp)
 8003190:	00000906 	br	80031b8 <vid_draw_sloped_line+0x1cc>
      } else {
        horiz_start+=horiz_incr;
 8003194:	e0bff317 	ldw	r2,-52(fp)
 8003198:	1007883a 	mov	r3,r2
 800319c:	e0bffb0b 	ldhu	r2,-20(fp)
 80031a0:	1885883a 	add	r2,r3,r2
 80031a4:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 80031a8:	e0fff517 	ldw	r3,-44(fp)
 80031ac:	e0bff717 	ldw	r2,-36(fp)
 80031b0:	1885883a 	add	r2,r3,r2
 80031b4:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 80031b8:	e0bff117 	ldw	r2,-60(fp)
 80031bc:	10bfffc4 	addi	r2,r2,-1
 80031c0:	e0bff115 	stw	r2,-60(fp)
 80031c4:	e0bff117 	ldw	r2,-60(fp)
 80031c8:	103fc20e 	bge	r2,zero,80030d4 <__alt_data_end+0xf80030d4>
 80031cc:	00004c06 	br	8003300 <vid_draw_sloped_line+0x314>
    }


  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 80031d0:	e0bff117 	ldw	r2,-60(fp)
 80031d4:	1085883a 	add	r2,r2,r2
 80031d8:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 80031dc:	e0bff217 	ldw	r2,-56(fp)
 80031e0:	1085883a 	add	r2,r2,r2
 80031e4:	1007883a 	mov	r3,r2
 80031e8:	e0bff917 	ldw	r2,-28(fp)
 80031ec:	10c5c83a 	sub	r2,r2,r3
 80031f0:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 80031f4:	e0fff917 	ldw	r3,-28(fp)
 80031f8:	e0bff217 	ldw	r2,-56(fp)
 80031fc:	1885c83a 	sub	r2,r3,r2
 8003200:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 8003204:	00003c06 	br	80032f8 <vid_draw_sloped_line+0x30c>
      // plot the pixel
       vid_set_pixel(horiz_start-1, vert_start, color, display);
 8003208:	e0bffb0b 	ldhu	r2,-20(fp)
 800320c:	113fffc4 	addi	r4,r2,-1
 8003210:	e0fffc0b 	ldhu	r3,-16(fp)
 8003214:	e0800317 	ldw	r2,12(fp)
 8003218:	180b883a 	mov	r5,r3
 800321c:	100d883a 	mov	r6,r2
 8003220:	e1c00417 	ldw	r7,16(fp)
 8003224:	80023ec0 	call	80023ec <vid_set_pixel>
      vid_set_pixel(horiz_start, vert_start, color, display);
 8003228:	e13ffb0b 	ldhu	r4,-20(fp)
 800322c:	e0fffc0b 	ldhu	r3,-16(fp)
 8003230:	e0800317 	ldw	r2,12(fp)
 8003234:	180b883a 	mov	r5,r3
 8003238:	100d883a 	mov	r6,r2
 800323c:	e1c00417 	ldw	r7,16(fp)
 8003240:	80023ec0 	call	80023ec <vid_set_pixel>
      vid_set_pixel(horiz_start+1, vert_start, color, display);
 8003244:	e0bffb0b 	ldhu	r2,-20(fp)
 8003248:	11000044 	addi	r4,r2,1
 800324c:	e0fffc0b 	ldhu	r3,-16(fp)
 8003250:	e0800317 	ldw	r2,12(fp)
 8003254:	180b883a 	mov	r5,r3
 8003258:	100d883a 	mov	r6,r2
 800325c:	e1c00417 	ldw	r7,16(fp)
 8003260:	80023ec0 	call	80023ec <vid_set_pixel>
      vid_set_pixel(horiz_start+2, vert_start, color, display);
 8003264:	e0bffb0b 	ldhu	r2,-20(fp)
 8003268:	11000084 	addi	r4,r2,2
 800326c:	e0fffc0b 	ldhu	r3,-16(fp)
 8003270:	e0800317 	ldw	r2,12(fp)
 8003274:	180b883a 	mov	r5,r3
 8003278:	100d883a 	mov	r6,r2
 800327c:	e1c00417 	ldw	r7,16(fp)
 8003280:	80023ec0 	call	80023ec <vid_set_pixel>

      // If we're moving both up and right
      if (P > 0) {
 8003284:	e0bff617 	ldw	r2,-40(fp)
 8003288:	00800f0e 	bge	zero,r2,80032c8 <vid_draw_sloped_line+0x2dc>
        horiz_start+=horiz_incr;
 800328c:	e0bff317 	ldw	r2,-52(fp)
 8003290:	1007883a 	mov	r3,r2
 8003294:	e0bffb0b 	ldhu	r2,-20(fp)
 8003298:	1885883a 	add	r2,r3,r2
 800329c:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 80032a0:	e0bff417 	ldw	r2,-48(fp)
 80032a4:	1007883a 	mov	r3,r2
 80032a8:	e0bffc0b 	ldhu	r2,-16(fp)
 80032ac:	1885883a 	add	r2,r3,r2
 80032b0:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 80032b4:	e0fff617 	ldw	r3,-40(fp)
 80032b8:	e0bffa17 	ldw	r2,-24(fp)
 80032bc:	1885883a 	add	r2,r3,r2
 80032c0:	e0bff615 	stw	r2,-40(fp)
 80032c4:	00000906 	br	80032ec <vid_draw_sloped_line+0x300>
      } else {
        vert_start+=vert_incr;
 80032c8:	e0bff417 	ldw	r2,-48(fp)
 80032cc:	1007883a 	mov	r3,r2
 80032d0:	e0bffc0b 	ldhu	r2,-16(fp)
 80032d4:	1885883a 	add	r2,r3,r2
 80032d8:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 80032dc:	e0fff617 	ldw	r3,-40(fp)
 80032e0:	e0bff917 	ldw	r2,-28(fp)
 80032e4:	1885883a 	add	r2,r3,r2
 80032e8:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 80032ec:	e0bff217 	ldw	r2,-56(fp)
 80032f0:	10bfffc4 	addi	r2,r2,-1
 80032f4:	e0bff215 	stw	r2,-56(fp)
 80032f8:	e0bff217 	ldw	r2,-56(fp)
 80032fc:	103fc20e 	bge	r2,zero,8003208 <__alt_data_end+0xf8003208>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 8003300:	e037883a 	mov	sp,fp
 8003304:	dfc00117 	ldw	ra,4(sp)
 8003308:	df000017 	ldw	fp,0(sp)
 800330c:	dec00204 	addi	sp,sp,8
 8003310:	f800283a 	ret

08003314 <vid_draw_circle>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 8003314:	defff104 	addi	sp,sp,-60
 8003318:	dfc00e15 	stw	ra,56(sp)
 800331c:	df000d15 	stw	fp,52(sp)
 8003320:	df000d04 	addi	fp,sp,52
 8003324:	e13ffb15 	stw	r4,-20(fp)
 8003328:	e17ffc15 	stw	r5,-16(fp)
 800332c:	e1bffd15 	stw	r6,-12(fp)
 8003330:	e1fffe15 	stw	r7,-8(fp)
 8003334:	e0800217 	ldw	r2,8(fp)
 8003338:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 800333c:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 8003340:	e0bffd17 	ldw	r2,-12(fp)
 8003344:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 8003348:	e0bffd17 	ldw	r2,-12(fp)
 800334c:	10bfff24 	muli	r2,r2,-4
 8003350:	10800144 	addi	r2,r2,5
 8003354:	1000010e 	bge	r2,zero,800335c <vid_draw_circle+0x48>
 8003358:	108000c4 	addi	r2,r2,3
 800335c:	1005d0ba 	srai	r2,r2,2
 8003360:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 8003364:	e0bfff07 	ldb	r2,-4(fp)
 8003368:	d8000015 	stw	zero,0(sp)
 800336c:	d8000115 	stw	zero,4(sp)
 8003370:	e0fffe17 	ldw	r3,-8(fp)
 8003374:	d8c00215 	stw	r3,8(sp)
 8003378:	d8800315 	stw	r2,12(sp)
 800337c:	e0800317 	ldw	r2,12(fp)
 8003380:	d8800415 	stw	r2,16(sp)
 8003384:	e13ffb17 	ldw	r4,-20(fp)
 8003388:	e17ffc17 	ldw	r5,-16(fp)
 800338c:	e1bff817 	ldw	r6,-32(fp)
 8003390:	e1fff917 	ldw	r7,-28(fp)
 8003394:	80037ec0 	call	80037ec <vid_round_corner_points>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 8003398:	00002406 	br	800342c <vid_draw_circle+0x118>
    x++;
 800339c:	e0bff817 	ldw	r2,-32(fp)
 80033a0:	10800044 	addi	r2,r2,1
 80033a4:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 80033a8:	e0bffa17 	ldw	r2,-24(fp)
 80033ac:	1000070e 	bge	r2,zero,80033cc <vid_draw_circle+0xb8>
      p += 2*x+1;
 80033b0:	e0bff817 	ldw	r2,-32(fp)
 80033b4:	1085883a 	add	r2,r2,r2
 80033b8:	10800044 	addi	r2,r2,1
 80033bc:	e0fffa17 	ldw	r3,-24(fp)
 80033c0:	1885883a 	add	r2,r3,r2
 80033c4:	e0bffa15 	stw	r2,-24(fp)
 80033c8:	00000b06 	br	80033f8 <vid_draw_circle+0xe4>
    } else {
      y--;
 80033cc:	e0bff917 	ldw	r2,-28(fp)
 80033d0:	10bfffc4 	addi	r2,r2,-1
 80033d4:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 80033d8:	e0fff817 	ldw	r3,-32(fp)
 80033dc:	e0bff917 	ldw	r2,-28(fp)
 80033e0:	1885c83a 	sub	r2,r3,r2
 80033e4:	1085883a 	add	r2,r2,r2
 80033e8:	10800044 	addi	r2,r2,1
 80033ec:	e0fffa17 	ldw	r3,-24(fp)
 80033f0:	1885883a 	add	r2,r3,r2
 80033f4:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 80033f8:	e0bfff07 	ldb	r2,-4(fp)
 80033fc:	d8000015 	stw	zero,0(sp)
 8003400:	d8000115 	stw	zero,4(sp)
 8003404:	e0fffe17 	ldw	r3,-8(fp)
 8003408:	d8c00215 	stw	r3,8(sp)
 800340c:	d8800315 	stw	r2,12(sp)
 8003410:	e0800317 	ldw	r2,12(fp)
 8003414:	d8800415 	stw	r2,16(sp)
 8003418:	e13ffb17 	ldw	r4,-20(fp)
 800341c:	e17ffc17 	ldw	r5,-16(fp)
 8003420:	e1bff817 	ldw	r6,-32(fp)
 8003424:	e1fff917 	ldw	r7,-28(fp)
 8003428:	80037ec0 	call	80037ec <vid_round_corner_points>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 800342c:	e0fff817 	ldw	r3,-32(fp)
 8003430:	e0bff917 	ldw	r2,-28(fp)
 8003434:	18bfd916 	blt	r3,r2,800339c <__alt_data_end+0xf800339c>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 8003438:	0005883a 	mov	r2,zero
}
 800343c:	e037883a 	mov	sp,fp
 8003440:	dfc00117 	ldw	ra,4(sp)
 8003444:	df000017 	ldw	fp,0(sp)
 8003448:	dec00204 	addi	sp,sp,8
 800344c:	f800283a 	ret

08003450 <vid_draw_round_corner_box>:
*  to fill in the box.  1 = fill, 0 = do not fill.
*
******************************************************************/
int vid_draw_round_corner_box ( int horiz_start, int vert_start, int horiz_end, int vert_end, 
                                int radius, int color, int fill, alt_video_display* display)
{
 8003450:	deffec04 	addi	sp,sp,-80
 8003454:	dfc01315 	stw	ra,76(sp)
 8003458:	df001215 	stw	fp,72(sp)
 800345c:	df001204 	addi	fp,sp,72
 8003460:	e13ffc15 	stw	r4,-16(fp)
 8003464:	e17ffd15 	stw	r5,-12(fp)
 8003468:	e1bffe15 	stw	r6,-8(fp)
 800346c:	e1ffff15 	stw	r7,-4(fp)
  int diameter;
  int temp;
  unsigned int width, height, straight_width, straight_height;

  // Make sure the start point us up and left of the end point
  if( horiz_start > horiz_end )
 8003470:	e0bffc17 	ldw	r2,-16(fp)
 8003474:	e0fffe17 	ldw	r3,-8(fp)
 8003478:	1880060e 	bge	r3,r2,8003494 <vid_draw_round_corner_box+0x44>
  {
    temp = horiz_end;
 800347c:	e0bffe17 	ldw	r2,-8(fp)
 8003480:	e0bff615 	stw	r2,-40(fp)
    horiz_end = horiz_start;
 8003484:	e0bffc17 	ldw	r2,-16(fp)
 8003488:	e0bffe15 	stw	r2,-8(fp)
    horiz_start = temp;
 800348c:	e0bff617 	ldw	r2,-40(fp)
 8003490:	e0bffc15 	stw	r2,-16(fp)
  }
  
  if( vert_start > vert_end )
 8003494:	e0bffd17 	ldw	r2,-12(fp)
 8003498:	e0ffff17 	ldw	r3,-4(fp)
 800349c:	1880060e 	bge	r3,r2,80034b8 <vid_draw_round_corner_box+0x68>
  {
    temp = vert_end;
 80034a0:	e0bfff17 	ldw	r2,-4(fp)
 80034a4:	e0bff615 	stw	r2,-40(fp)
    vert_end = vert_start;
 80034a8:	e0bffd17 	ldw	r2,-12(fp)
 80034ac:	e0bfff15 	stw	r2,-4(fp)
    vert_start = temp;
 80034b0:	e0bff617 	ldw	r2,-40(fp)
 80034b4:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // These are the overall dimensions of the box
  width = horiz_end - horiz_start;
 80034b8:	e0fffe17 	ldw	r3,-8(fp)
 80034bc:	e0bffc17 	ldw	r2,-16(fp)
 80034c0:	1885c83a 	sub	r2,r3,r2
 80034c4:	e0bff715 	stw	r2,-36(fp)
  height = vert_end - vert_start;
 80034c8:	e0ffff17 	ldw	r3,-4(fp)
 80034cc:	e0bffd17 	ldw	r2,-12(fp)
 80034d0:	1885c83a 	sub	r2,r3,r2
 80034d4:	e0bff815 	stw	r2,-32(fp)

  // Make sure our radius isnt more than the shortest dimension 
  // of the box, or it'll screw us all up
  if( radius > ( width / 2 ))
 80034d8:	e0800217 	ldw	r2,8(fp)
 80034dc:	e0fff717 	ldw	r3,-36(fp)
 80034e0:	1806d07a 	srli	r3,r3,1
 80034e4:	1880032e 	bgeu	r3,r2,80034f4 <vid_draw_round_corner_box+0xa4>
    radius = width / 2;
 80034e8:	e0bff717 	ldw	r2,-36(fp)
 80034ec:	1004d07a 	srli	r2,r2,1
 80034f0:	e0800215 	stw	r2,8(fp)

  if( radius > ( height / 2 ))
 80034f4:	e0800217 	ldw	r2,8(fp)
 80034f8:	e0fff817 	ldw	r3,-32(fp)
 80034fc:	1806d07a 	srli	r3,r3,1
 8003500:	1880032e 	bgeu	r3,r2,8003510 <vid_draw_round_corner_box+0xc0>
    radius = height / 2;
 8003504:	e0bff817 	ldw	r2,-32(fp)
 8003508:	1004d07a 	srli	r2,r2,1
 800350c:	e0800215 	stw	r2,8(fp)
  
  // We use the diameter for some calculations, so we'll pre calculate it here.
  diameter = ( radius * 2 );
 8003510:	e0800217 	ldw	r2,8(fp)
 8003514:	1085883a 	add	r2,r2,r2
 8003518:	e0bff915 	stw	r2,-28(fp)

  // These are the lengths of the straight portions of the box edges.
  straight_width = width - diameter;
 800351c:	e0bff917 	ldw	r2,-28(fp)
 8003520:	e0fff717 	ldw	r3,-36(fp)
 8003524:	1885c83a 	sub	r2,r3,r2
 8003528:	e0bffa15 	stw	r2,-24(fp)
  straight_height = height - diameter;
 800352c:	e0bff917 	ldw	r2,-28(fp)
 8003530:	e0fff817 	ldw	r3,-32(fp)
 8003534:	1885c83a 	sub	r2,r3,r2
 8003538:	e0bffb15 	stw	r2,-20(fp)

  x = 0;
 800353c:	e03ff315 	stw	zero,-52(fp)
  y = radius;
 8003540:	e0800217 	ldw	r2,8(fp)
 8003544:	e0bff415 	stw	r2,-48(fp)
  p = (5 - radius*4)/4;
 8003548:	e0800217 	ldw	r2,8(fp)
 800354c:	10bfff24 	muli	r2,r2,-4
 8003550:	10800144 	addi	r2,r2,5
 8003554:	1000010e 	bge	r2,zero,800355c <vid_draw_round_corner_box+0x10c>
 8003558:	108000c4 	addi	r2,r2,3
 800355c:	1005d0ba 	srai	r2,r2,2
 8003560:	e0bff515 	stw	r2,-44(fp)
   
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 8003564:	e0fffc17 	ldw	r3,-16(fp)
 8003568:	e0800217 	ldw	r2,8(fp)
 800356c:	1891883a 	add	r8,r3,r2
 8003570:	e0fffd17 	ldw	r3,-12(fp)
 8003574:	e0800217 	ldw	r2,8(fp)
 8003578:	188b883a 	add	r5,r3,r2
 800357c:	e1bff317 	ldw	r6,-52(fp)
 8003580:	e1fff417 	ldw	r7,-48(fp)
 8003584:	e13ffa17 	ldw	r4,-24(fp)
 8003588:	e0fffb17 	ldw	r3,-20(fp)
 800358c:	e0800417 	ldw	r2,16(fp)
 8003590:	10803fcc 	andi	r2,r2,255
 8003594:	1080201c 	xori	r2,r2,128
 8003598:	10bfe004 	addi	r2,r2,-128
 800359c:	d9000015 	stw	r4,0(sp)
 80035a0:	d8c00115 	stw	r3,4(sp)
 80035a4:	e0c00317 	ldw	r3,12(fp)
 80035a8:	d8c00215 	stw	r3,8(sp)
 80035ac:	d8800315 	stw	r2,12(sp)
 80035b0:	e0800517 	ldw	r2,20(fp)
 80035b4:	d8800415 	stw	r2,16(sp)
 80035b8:	4009883a 	mov	r4,r8
 80035bc:	80037ec0 	call	80037ec <vid_round_corner_points>
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 80035c0:	00003006 	br	8003684 <vid_draw_round_corner_box+0x234>
    x++;
 80035c4:	e0bff317 	ldw	r2,-52(fp)
 80035c8:	10800044 	addi	r2,r2,1
 80035cc:	e0bff315 	stw	r2,-52(fp)
    if (p < 0) {
 80035d0:	e0bff517 	ldw	r2,-44(fp)
 80035d4:	1000080e 	bge	r2,zero,80035f8 <vid_draw_round_corner_box+0x1a8>
      p += 2*x+1;
 80035d8:	e0bff317 	ldw	r2,-52(fp)
 80035dc:	1085883a 	add	r2,r2,r2
 80035e0:	1007883a 	mov	r3,r2
 80035e4:	e0bff517 	ldw	r2,-44(fp)
 80035e8:	1885883a 	add	r2,r3,r2
 80035ec:	10800044 	addi	r2,r2,1
 80035f0:	e0bff515 	stw	r2,-44(fp)
 80035f4:	00000c06 	br	8003628 <vid_draw_round_corner_box+0x1d8>
    } else {
      y--;
 80035f8:	e0bff417 	ldw	r2,-48(fp)
 80035fc:	10bfffc4 	addi	r2,r2,-1
 8003600:	e0bff415 	stw	r2,-48(fp)
      p += 2*(x-y)+1;
 8003604:	e0fff317 	ldw	r3,-52(fp)
 8003608:	e0bff417 	ldw	r2,-48(fp)
 800360c:	1885c83a 	sub	r2,r3,r2
 8003610:	1085883a 	add	r2,r2,r2
 8003614:	1007883a 	mov	r3,r2
 8003618:	e0bff517 	ldw	r2,-44(fp)
 800361c:	1885883a 	add	r2,r3,r2
 8003620:	10800044 	addi	r2,r2,1
 8003624:	e0bff515 	stw	r2,-44(fp)
    }
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
 8003628:	e0fffc17 	ldw	r3,-16(fp)
 800362c:	e0800217 	ldw	r2,8(fp)
 8003630:	1891883a 	add	r8,r3,r2
 8003634:	e0fffd17 	ldw	r3,-12(fp)
 8003638:	e0800217 	ldw	r2,8(fp)
 800363c:	188b883a 	add	r5,r3,r2
 8003640:	e1bff317 	ldw	r6,-52(fp)
 8003644:	e1fff417 	ldw	r7,-48(fp)
 8003648:	e13ffa17 	ldw	r4,-24(fp)
 800364c:	e0fffb17 	ldw	r3,-20(fp)
 8003650:	e0800417 	ldw	r2,16(fp)
 8003654:	10803fcc 	andi	r2,r2,255
 8003658:	1080201c 	xori	r2,r2,128
 800365c:	10bfe004 	addi	r2,r2,-128
 8003660:	d9000015 	stw	r4,0(sp)
 8003664:	d8c00115 	stw	r3,4(sp)
 8003668:	e0c00317 	ldw	r3,12(fp)
 800366c:	d8c00215 	stw	r3,8(sp)
 8003670:	d8800315 	stw	r2,12(sp)
 8003674:	e0800517 	ldw	r2,20(fp)
 8003678:	d8800415 	stw	r2,16(sp)
 800367c:	4009883a 	mov	r4,r8
 8003680:	80037ec0 	call	80037ec <vid_round_corner_points>
  // Start the corners with the top, bottom, left, and right pixels.
  vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                           straight_width, straight_height, color, fill, display );
  
  // Now start moving out from those points until the lines meet
  while (x < y) {
 8003684:	e0fff317 	ldw	r3,-52(fp)
 8003688:	e0bff417 	ldw	r2,-48(fp)
 800368c:	18bfcd36 	bltu	r3,r2,80035c4 <__alt_data_end+0xf80035c4>
    vid_round_corner_points( horiz_start + radius, vert_start + radius, x, y, 
                             straight_width, straight_height, color, fill, display);
  }

  // If we want to fill in our box
  if (fill) {
 8003690:	e0800417 	ldw	r2,16(fp)
 8003694:	10000f26 	beq	r2,zero,80036d4 <vid_draw_round_corner_box+0x284>
     vid_paint_block (horiz_start, vert_start + radius, horiz_end, vert_end - radius, color, display);
 8003698:	e0fffd17 	ldw	r3,-12(fp)
 800369c:	e0800217 	ldw	r2,8(fp)
 80036a0:	188b883a 	add	r5,r3,r2
 80036a4:	e0ffff17 	ldw	r3,-4(fp)
 80036a8:	e0800217 	ldw	r2,8(fp)
 80036ac:	1887c83a 	sub	r3,r3,r2
 80036b0:	e0800317 	ldw	r2,12(fp)
 80036b4:	d8800015 	stw	r2,0(sp)
 80036b8:	e0800517 	ldw	r2,20(fp)
 80036bc:	d8800115 	stw	r2,4(sp)
 80036c0:	e13ffc17 	ldw	r4,-16(fp)
 80036c4:	e1bffe17 	ldw	r6,-8(fp)
 80036c8:	180f883a 	mov	r7,r3
 80036cc:	80026480 	call	8002648 <vid_paint_block>
 80036d0:	00004006 	br	80037d4 <vid_draw_round_corner_box+0x384>
  // If we're not filling in the box, just draw four lines.
  } else {
    vid_draw_line(horiz_start, vert_start + radius, horiz_start, vert_end - radius , 1, color, display); //left
 80036d4:	e0fffd17 	ldw	r3,-12(fp)
 80036d8:	e0800217 	ldw	r2,8(fp)
 80036dc:	188b883a 	add	r5,r3,r2
 80036e0:	e0ffff17 	ldw	r3,-4(fp)
 80036e4:	e0800217 	ldw	r2,8(fp)
 80036e8:	1887c83a 	sub	r3,r3,r2
 80036ec:	00800044 	movi	r2,1
 80036f0:	d8800015 	stw	r2,0(sp)
 80036f4:	e0800317 	ldw	r2,12(fp)
 80036f8:	d8800115 	stw	r2,4(sp)
 80036fc:	e0800517 	ldw	r2,20(fp)
 8003700:	d8800215 	stw	r2,8(sp)
 8003704:	e13ffc17 	ldw	r4,-16(fp)
 8003708:	e1bffc17 	ldw	r6,-16(fp)
 800370c:	180f883a 	mov	r7,r3
 8003710:	80019c80 	call	80019c8 <vid_draw_line>
    vid_draw_line(horiz_end, vert_start + radius, horiz_end, vert_end - radius , 1, color, display); //right
 8003714:	e0fffd17 	ldw	r3,-12(fp)
 8003718:	e0800217 	ldw	r2,8(fp)
 800371c:	188b883a 	add	r5,r3,r2
 8003720:	e0ffff17 	ldw	r3,-4(fp)
 8003724:	e0800217 	ldw	r2,8(fp)
 8003728:	1887c83a 	sub	r3,r3,r2
 800372c:	00800044 	movi	r2,1
 8003730:	d8800015 	stw	r2,0(sp)
 8003734:	e0800317 	ldw	r2,12(fp)
 8003738:	d8800115 	stw	r2,4(sp)
 800373c:	e0800517 	ldw	r2,20(fp)
 8003740:	d8800215 	stw	r2,8(sp)
 8003744:	e13ffe17 	ldw	r4,-8(fp)
 8003748:	e1bffe17 	ldw	r6,-8(fp)
 800374c:	180f883a 	mov	r7,r3
 8003750:	80019c80 	call	80019c8 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_start, horiz_end - radius , vert_start, 1, color, display); //top
 8003754:	e0fffc17 	ldw	r3,-16(fp)
 8003758:	e0800217 	ldw	r2,8(fp)
 800375c:	1889883a 	add	r4,r3,r2
 8003760:	e0fffe17 	ldw	r3,-8(fp)
 8003764:	e0800217 	ldw	r2,8(fp)
 8003768:	1887c83a 	sub	r3,r3,r2
 800376c:	00800044 	movi	r2,1
 8003770:	d8800015 	stw	r2,0(sp)
 8003774:	e0800317 	ldw	r2,12(fp)
 8003778:	d8800115 	stw	r2,4(sp)
 800377c:	e0800517 	ldw	r2,20(fp)
 8003780:	d8800215 	stw	r2,8(sp)
 8003784:	e17ffd17 	ldw	r5,-12(fp)
 8003788:	180d883a 	mov	r6,r3
 800378c:	e1fffd17 	ldw	r7,-12(fp)
 8003790:	80019c80 	call	80019c8 <vid_draw_line>
    vid_draw_line(horiz_start + radius, vert_end, horiz_end - radius , vert_end, 1, color, display); //bottom
 8003794:	e0fffc17 	ldw	r3,-16(fp)
 8003798:	e0800217 	ldw	r2,8(fp)
 800379c:	1889883a 	add	r4,r3,r2
 80037a0:	e0fffe17 	ldw	r3,-8(fp)
 80037a4:	e0800217 	ldw	r2,8(fp)
 80037a8:	1887c83a 	sub	r3,r3,r2
 80037ac:	00800044 	movi	r2,1
 80037b0:	d8800015 	stw	r2,0(sp)
 80037b4:	e0800317 	ldw	r2,12(fp)
 80037b8:	d8800115 	stw	r2,4(sp)
 80037bc:	e0800517 	ldw	r2,20(fp)
 80037c0:	d8800215 	stw	r2,8(sp)
 80037c4:	e17fff17 	ldw	r5,-4(fp)
 80037c8:	180d883a 	mov	r6,r3
 80037cc:	e1ffff17 	ldw	r7,-4(fp)
 80037d0:	80019c80 	call	80019c8 <vid_draw_line>
  }

  return (0);
 80037d4:	0005883a 	mov	r2,zero
}
 80037d8:	e037883a 	mov	sp,fp
 80037dc:	dfc00117 	ldw	ra,4(sp)
 80037e0:	df000017 	ldw	fp,0(sp)
 80037e4:	dec00204 	addi	sp,sp,8
 80037e8:	f800283a 	ret

080037ec <vid_round_corner_points>:
******************************************************************/

void vid_round_corner_points( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 80037ec:	defff604 	addi	sp,sp,-40
 80037f0:	dfc00915 	stw	ra,36(sp)
 80037f4:	df000815 	stw	fp,32(sp)
 80037f8:	df000804 	addi	fp,sp,32
 80037fc:	e13ffb15 	stw	r4,-20(fp)
 8003800:	e17ffc15 	stw	r5,-16(fp)
 8003804:	e1bffd15 	stw	r6,-12(fp)
 8003808:	e1fffe15 	stw	r7,-8(fp)
 800380c:	e0800517 	ldw	r2,20(fp)
 8003810:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 8003814:	e0bffd17 	ldw	r2,-12(fp)
 8003818:	1000841e 	bne	r2,zero,8003a2c <vid_round_corner_points+0x240>
        // bottom
        vid_set_pixel(cx, cy + y + straight_height, color, display);
 800381c:	e0fffc17 	ldw	r3,-16(fp)
 8003820:	e0bffe17 	ldw	r2,-8(fp)
 8003824:	1887883a 	add	r3,r3,r2
 8003828:	e0800317 	ldw	r2,12(fp)
 800382c:	1887883a 	add	r3,r3,r2
 8003830:	e0800417 	ldw	r2,16(fp)
 8003834:	e13ffb17 	ldw	r4,-20(fp)
 8003838:	180b883a 	mov	r5,r3
 800383c:	100d883a 	mov	r6,r2
 8003840:	e1c00617 	ldw	r7,24(fp)
 8003844:	80023ec0 	call	80023ec <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy + y + straight_height, color, display);
 8003848:	e0fffb17 	ldw	r3,-20(fp)
 800384c:	e0800217 	ldw	r2,8(fp)
 8003850:	1889883a 	add	r4,r3,r2
 8003854:	e0fffc17 	ldw	r3,-16(fp)
 8003858:	e0bffe17 	ldw	r2,-8(fp)
 800385c:	1887883a 	add	r3,r3,r2
 8003860:	e0800317 	ldw	r2,12(fp)
 8003864:	1887883a 	add	r3,r3,r2
 8003868:	e0800417 	ldw	r2,16(fp)
 800386c:	180b883a 	mov	r5,r3
 8003870:	100d883a 	mov	r6,r2
 8003874:	e1c00617 	ldw	r7,24(fp)
 8003878:	80023ec0 	call	80023ec <vid_set_pixel>
        // top
        vid_set_pixel(cx, cy - y, color, display);
 800387c:	e0fffc17 	ldw	r3,-16(fp)
 8003880:	e0bffe17 	ldw	r2,-8(fp)
 8003884:	1887c83a 	sub	r3,r3,r2
 8003888:	e0800417 	ldw	r2,16(fp)
 800388c:	e13ffb17 	ldw	r4,-20(fp)
 8003890:	180b883a 	mov	r5,r3
 8003894:	100d883a 	mov	r6,r2
 8003898:	e1c00617 	ldw	r7,24(fp)
 800389c:	80023ec0 	call	80023ec <vid_set_pixel>
        vid_set_pixel(cx + straight_width, cy - y, color, display);
 80038a0:	e0fffb17 	ldw	r3,-20(fp)
 80038a4:	e0800217 	ldw	r2,8(fp)
 80038a8:	1889883a 	add	r4,r3,r2
 80038ac:	e0fffc17 	ldw	r3,-16(fp)
 80038b0:	e0bffe17 	ldw	r2,-8(fp)
 80038b4:	1887c83a 	sub	r3,r3,r2
 80038b8:	e0800417 	ldw	r2,16(fp)
 80038bc:	180b883a 	mov	r5,r3
 80038c0:	100d883a 	mov	r6,r2
 80038c4:	e1c00617 	ldw	r7,24(fp)
 80038c8:	80023ec0 	call	80023ec <vid_set_pixel>

        if(fill) {
 80038cc:	e0bfff07 	ldb	r2,-4(fp)
 80038d0:	10002926 	beq	r2,zero,8003978 <vid_round_corner_points+0x18c>
          vid_draw_line(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 80038d4:	e0fffb17 	ldw	r3,-20(fp)
 80038d8:	e0bffe17 	ldw	r2,-8(fp)
 80038dc:	1889c83a 	sub	r4,r3,r2
 80038e0:	e0fffb17 	ldw	r3,-20(fp)
 80038e4:	e0bffe17 	ldw	r2,-8(fp)
 80038e8:	1887883a 	add	r3,r3,r2
 80038ec:	e0800217 	ldw	r2,8(fp)
 80038f0:	1887883a 	add	r3,r3,r2
 80038f4:	00800044 	movi	r2,1
 80038f8:	d8800015 	stw	r2,0(sp)
 80038fc:	e0800417 	ldw	r2,16(fp)
 8003900:	d8800115 	stw	r2,4(sp)
 8003904:	e0800617 	ldw	r2,24(fp)
 8003908:	d8800215 	stw	r2,8(sp)
 800390c:	e17ffc17 	ldw	r5,-16(fp)
 8003910:	180d883a 	mov	r6,r3
 8003914:	e1fffc17 	ldw	r7,-16(fp)
 8003918:	80019c80 	call	80019c8 <vid_draw_line>
          vid_draw_line(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 800391c:	e0fffb17 	ldw	r3,-20(fp)
 8003920:	e0bffe17 	ldw	r2,-8(fp)
 8003924:	1889c83a 	sub	r4,r3,r2
 8003928:	e0fffc17 	ldw	r3,-16(fp)
 800392c:	e0800317 	ldw	r2,12(fp)
 8003930:	188b883a 	add	r5,r3,r2
 8003934:	e0fffb17 	ldw	r3,-20(fp)
 8003938:	e0bffe17 	ldw	r2,-8(fp)
 800393c:	1887883a 	add	r3,r3,r2
 8003940:	e0800217 	ldw	r2,8(fp)
 8003944:	188d883a 	add	r6,r3,r2
 8003948:	e0fffc17 	ldw	r3,-16(fp)
 800394c:	e0800317 	ldw	r2,12(fp)
 8003950:	1887883a 	add	r3,r3,r2
 8003954:	00800044 	movi	r2,1
 8003958:	d8800015 	stw	r2,0(sp)
 800395c:	e0800417 	ldw	r2,16(fp)
 8003960:	d8800115 	stw	r2,4(sp)
 8003964:	e0800617 	ldw	r2,24(fp)
 8003968:	d8800215 	stw	r2,8(sp)
 800396c:	180f883a 	mov	r7,r3
 8003970:	80019c80 	call	80019c8 <vid_draw_line>
 8003974:	00016606 	br	8003f10 <vid_round_corner_points+0x724>
        } else {
          //right
          vid_set_pixel(cx + y + straight_width, cy, color, display);
 8003978:	e0fffb17 	ldw	r3,-20(fp)
 800397c:	e0bffe17 	ldw	r2,-8(fp)
 8003980:	1887883a 	add	r3,r3,r2
 8003984:	e0800217 	ldw	r2,8(fp)
 8003988:	1887883a 	add	r3,r3,r2
 800398c:	e0800417 	ldw	r2,16(fp)
 8003990:	1809883a 	mov	r4,r3
 8003994:	e17ffc17 	ldw	r5,-16(fp)
 8003998:	100d883a 	mov	r6,r2
 800399c:	e1c00617 	ldw	r7,24(fp)
 80039a0:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + straight_height, color, display);
 80039a4:	e0fffb17 	ldw	r3,-20(fp)
 80039a8:	e0bffe17 	ldw	r2,-8(fp)
 80039ac:	1887883a 	add	r3,r3,r2
 80039b0:	e0800217 	ldw	r2,8(fp)
 80039b4:	1889883a 	add	r4,r3,r2
 80039b8:	e0fffc17 	ldw	r3,-16(fp)
 80039bc:	e0800317 	ldw	r2,12(fp)
 80039c0:	1887883a 	add	r3,r3,r2
 80039c4:	e0800417 	ldw	r2,16(fp)
 80039c8:	180b883a 	mov	r5,r3
 80039cc:	100d883a 	mov	r6,r2
 80039d0:	e1c00617 	ldw	r7,24(fp)
 80039d4:	80023ec0 	call	80023ec <vid_set_pixel>
          //left
          vid_set_pixel(cx - y, cy, color, display);
 80039d8:	e0fffb17 	ldw	r3,-20(fp)
 80039dc:	e0bffe17 	ldw	r2,-8(fp)
 80039e0:	1887c83a 	sub	r3,r3,r2
 80039e4:	e0800417 	ldw	r2,16(fp)
 80039e8:	1809883a 	mov	r4,r3
 80039ec:	e17ffc17 	ldw	r5,-16(fp)
 80039f0:	100d883a 	mov	r6,r2
 80039f4:	e1c00617 	ldw	r7,24(fp)
 80039f8:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx - y, cy + straight_height, color, display);
 80039fc:	e0fffb17 	ldw	r3,-20(fp)
 8003a00:	e0bffe17 	ldw	r2,-8(fp)
 8003a04:	1889c83a 	sub	r4,r3,r2
 8003a08:	e0fffc17 	ldw	r3,-16(fp)
 8003a0c:	e0800317 	ldw	r2,12(fp)
 8003a10:	1887883a 	add	r3,r3,r2
 8003a14:	e0800417 	ldw	r2,16(fp)
 8003a18:	180b883a 	mov	r5,r3
 8003a1c:	100d883a 	mov	r6,r2
 8003a20:	e1c00617 	ldw	r7,24(fp)
 8003a24:	80023ec0 	call	80023ec <vid_set_pixel>
 8003a28:	00013906 	br	8003f10 <vid_round_corner_points+0x724>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 8003a2c:	e0fffd17 	ldw	r3,-12(fp)
 8003a30:	e0bffe17 	ldw	r2,-8(fp)
 8003a34:	1880681e 	bne	r3,r2,8003bd8 <vid_round_corner_points+0x3ec>
      if(fill) {
 8003a38:	e0bfff07 	ldb	r2,-4(fp)
 8003a3c:	10003126 	beq	r2,zero,8003b04 <vid_round_corner_points+0x318>
        vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 8003a40:	e0fffb17 	ldw	r3,-20(fp)
 8003a44:	e0bffd17 	ldw	r2,-12(fp)
 8003a48:	1889c83a 	sub	r4,r3,r2
 8003a4c:	e0fffc17 	ldw	r3,-16(fp)
 8003a50:	e0bffe17 	ldw	r2,-8(fp)
 8003a54:	1887883a 	add	r3,r3,r2
 8003a58:	e0800317 	ldw	r2,12(fp)
 8003a5c:	188b883a 	add	r5,r3,r2
 8003a60:	e0fffb17 	ldw	r3,-20(fp)
 8003a64:	e0bffd17 	ldw	r2,-12(fp)
 8003a68:	1887883a 	add	r3,r3,r2
 8003a6c:	e0800217 	ldw	r2,8(fp)
 8003a70:	188d883a 	add	r6,r3,r2
 8003a74:	e0fffc17 	ldw	r3,-16(fp)
 8003a78:	e0bffe17 	ldw	r2,-8(fp)
 8003a7c:	1887883a 	add	r3,r3,r2
 8003a80:	e0800317 	ldw	r2,12(fp)
 8003a84:	1887883a 	add	r3,r3,r2
 8003a88:	00800044 	movi	r2,1
 8003a8c:	d8800015 	stw	r2,0(sp)
 8003a90:	e0800417 	ldw	r2,16(fp)
 8003a94:	d8800115 	stw	r2,4(sp)
 8003a98:	e0800617 	ldw	r2,24(fp)
 8003a9c:	d8800215 	stw	r2,8(sp)
 8003aa0:	180f883a 	mov	r7,r3
 8003aa4:	80019c80 	call	80019c8 <vid_draw_line>
        vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 8003aa8:	e0fffb17 	ldw	r3,-20(fp)
 8003aac:	e0bffd17 	ldw	r2,-12(fp)
 8003ab0:	1889c83a 	sub	r4,r3,r2
 8003ab4:	e0fffc17 	ldw	r3,-16(fp)
 8003ab8:	e0bffe17 	ldw	r2,-8(fp)
 8003abc:	188bc83a 	sub	r5,r3,r2
 8003ac0:	e0fffb17 	ldw	r3,-20(fp)
 8003ac4:	e0bffd17 	ldw	r2,-12(fp)
 8003ac8:	1887883a 	add	r3,r3,r2
 8003acc:	e0800217 	ldw	r2,8(fp)
 8003ad0:	188d883a 	add	r6,r3,r2
 8003ad4:	e0fffc17 	ldw	r3,-16(fp)
 8003ad8:	e0bffe17 	ldw	r2,-8(fp)
 8003adc:	1887c83a 	sub	r3,r3,r2
 8003ae0:	00800044 	movi	r2,1
 8003ae4:	d8800015 	stw	r2,0(sp)
 8003ae8:	e0800417 	ldw	r2,16(fp)
 8003aec:	d8800115 	stw	r2,4(sp)
 8003af0:	e0800617 	ldw	r2,24(fp)
 8003af4:	d8800215 	stw	r2,8(sp)
 8003af8:	180f883a 	mov	r7,r3
 8003afc:	80019c80 	call	80019c8 <vid_draw_line>
 8003b00:	00010306 	br	8003f10 <vid_round_corner_points+0x724>
        
      } else {
        vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 8003b04:	e0fffb17 	ldw	r3,-20(fp)
 8003b08:	e0bffd17 	ldw	r2,-12(fp)
 8003b0c:	1887883a 	add	r3,r3,r2
 8003b10:	e0800217 	ldw	r2,8(fp)
 8003b14:	1889883a 	add	r4,r3,r2
 8003b18:	e0fffc17 	ldw	r3,-16(fp)
 8003b1c:	e0bffe17 	ldw	r2,-8(fp)
 8003b20:	1887883a 	add	r3,r3,r2
 8003b24:	e0800317 	ldw	r2,12(fp)
 8003b28:	1887883a 	add	r3,r3,r2
 8003b2c:	e0800417 	ldw	r2,16(fp)
 8003b30:	180b883a 	mov	r5,r3
 8003b34:	100d883a 	mov	r6,r2
 8003b38:	e1c00617 	ldw	r7,24(fp)
 8003b3c:	80023ec0 	call	80023ec <vid_set_pixel>
        vid_set_pixel(cx - x, cy + y + straight_height, color, display); // bottom left
 8003b40:	e0fffb17 	ldw	r3,-20(fp)
 8003b44:	e0bffd17 	ldw	r2,-12(fp)
 8003b48:	1889c83a 	sub	r4,r3,r2
 8003b4c:	e0fffc17 	ldw	r3,-16(fp)
 8003b50:	e0bffe17 	ldw	r2,-8(fp)
 8003b54:	1887883a 	add	r3,r3,r2
 8003b58:	e0800317 	ldw	r2,12(fp)
 8003b5c:	1887883a 	add	r3,r3,r2
 8003b60:	e0800417 	ldw	r2,16(fp)
 8003b64:	180b883a 	mov	r5,r3
 8003b68:	100d883a 	mov	r6,r2
 8003b6c:	e1c00617 	ldw	r7,24(fp)
 8003b70:	80023ec0 	call	80023ec <vid_set_pixel>
        vid_set_pixel(cx + x + straight_width, cy - y, color, display); // top right
 8003b74:	e0fffb17 	ldw	r3,-20(fp)
 8003b78:	e0bffd17 	ldw	r2,-12(fp)
 8003b7c:	1887883a 	add	r3,r3,r2
 8003b80:	e0800217 	ldw	r2,8(fp)
 8003b84:	1889883a 	add	r4,r3,r2
 8003b88:	e0fffc17 	ldw	r3,-16(fp)
 8003b8c:	e0bffe17 	ldw	r2,-8(fp)
 8003b90:	1887c83a 	sub	r3,r3,r2
 8003b94:	e0800417 	ldw	r2,16(fp)
 8003b98:	180b883a 	mov	r5,r3
 8003b9c:	100d883a 	mov	r6,r2
 8003ba0:	e1c00617 	ldw	r7,24(fp)
 8003ba4:	80023ec0 	call	80023ec <vid_set_pixel>
        vid_set_pixel(cx - x, cy - y, color, display); // top left
 8003ba8:	e0fffb17 	ldw	r3,-20(fp)
 8003bac:	e0bffd17 	ldw	r2,-12(fp)
 8003bb0:	1889c83a 	sub	r4,r3,r2
 8003bb4:	e0fffc17 	ldw	r3,-16(fp)
 8003bb8:	e0bffe17 	ldw	r2,-8(fp)
 8003bbc:	1887c83a 	sub	r3,r3,r2
 8003bc0:	e0800417 	ldw	r2,16(fp)
 8003bc4:	180b883a 	mov	r5,r3
 8003bc8:	100d883a 	mov	r6,r2
 8003bcc:	e1c00617 	ldw	r7,24(fp)
 8003bd0:	80023ec0 	call	80023ec <vid_set_pixel>
 8003bd4:	0000ce06 	br	8003f10 <vid_round_corner_points+0x724>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 8003bd8:	e0fffd17 	ldw	r3,-12(fp)
 8003bdc:	e0bffe17 	ldw	r2,-8(fp)
 8003be0:	1880cb0e 	bge	r3,r2,8003f10 <vid_round_corner_points+0x724>
        if(fill) {
 8003be4:	e0bfff07 	ldb	r2,-4(fp)
 8003be8:	10006126 	beq	r2,zero,8003d70 <vid_round_corner_points+0x584>
          vid_draw_line(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 8003bec:	e0fffb17 	ldw	r3,-20(fp)
 8003bf0:	e0bffd17 	ldw	r2,-12(fp)
 8003bf4:	1889c83a 	sub	r4,r3,r2
 8003bf8:	e0fffc17 	ldw	r3,-16(fp)
 8003bfc:	e0bffe17 	ldw	r2,-8(fp)
 8003c00:	1887883a 	add	r3,r3,r2
 8003c04:	e0800317 	ldw	r2,12(fp)
 8003c08:	188b883a 	add	r5,r3,r2
 8003c0c:	e0fffb17 	ldw	r3,-20(fp)
 8003c10:	e0bffd17 	ldw	r2,-12(fp)
 8003c14:	1887883a 	add	r3,r3,r2
 8003c18:	e0800217 	ldw	r2,8(fp)
 8003c1c:	188d883a 	add	r6,r3,r2
 8003c20:	e0fffc17 	ldw	r3,-16(fp)
 8003c24:	e0bffe17 	ldw	r2,-8(fp)
 8003c28:	1887883a 	add	r3,r3,r2
 8003c2c:	e0800317 	ldw	r2,12(fp)
 8003c30:	1887883a 	add	r3,r3,r2
 8003c34:	00800044 	movi	r2,1
 8003c38:	d8800015 	stw	r2,0(sp)
 8003c3c:	e0800417 	ldw	r2,16(fp)
 8003c40:	d8800115 	stw	r2,4(sp)
 8003c44:	e0800617 	ldw	r2,24(fp)
 8003c48:	d8800215 	stw	r2,8(sp)
 8003c4c:	180f883a 	mov	r7,r3
 8003c50:	80019c80 	call	80019c8 <vid_draw_line>
          vid_draw_line(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 8003c54:	e0fffb17 	ldw	r3,-20(fp)
 8003c58:	e0bffe17 	ldw	r2,-8(fp)
 8003c5c:	1889c83a 	sub	r4,r3,r2
 8003c60:	e0fffc17 	ldw	r3,-16(fp)
 8003c64:	e0bffd17 	ldw	r2,-12(fp)
 8003c68:	1887883a 	add	r3,r3,r2
 8003c6c:	e0800317 	ldw	r2,12(fp)
 8003c70:	188b883a 	add	r5,r3,r2
 8003c74:	e0fffb17 	ldw	r3,-20(fp)
 8003c78:	e0bffe17 	ldw	r2,-8(fp)
 8003c7c:	1887883a 	add	r3,r3,r2
 8003c80:	e0800217 	ldw	r2,8(fp)
 8003c84:	188d883a 	add	r6,r3,r2
 8003c88:	e0fffc17 	ldw	r3,-16(fp)
 8003c8c:	e0bffd17 	ldw	r2,-12(fp)
 8003c90:	1887883a 	add	r3,r3,r2
 8003c94:	e0800317 	ldw	r2,12(fp)
 8003c98:	1887883a 	add	r3,r3,r2
 8003c9c:	00800044 	movi	r2,1
 8003ca0:	d8800015 	stw	r2,0(sp)
 8003ca4:	e0800417 	ldw	r2,16(fp)
 8003ca8:	d8800115 	stw	r2,4(sp)
 8003cac:	e0800617 	ldw	r2,24(fp)
 8003cb0:	d8800215 	stw	r2,8(sp)
 8003cb4:	180f883a 	mov	r7,r3
 8003cb8:	80019c80 	call	80019c8 <vid_draw_line>
          vid_draw_line(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 8003cbc:	e0fffb17 	ldw	r3,-20(fp)
 8003cc0:	e0bffe17 	ldw	r2,-8(fp)
 8003cc4:	1889c83a 	sub	r4,r3,r2
 8003cc8:	e0fffc17 	ldw	r3,-16(fp)
 8003ccc:	e0bffd17 	ldw	r2,-12(fp)
 8003cd0:	188bc83a 	sub	r5,r3,r2
 8003cd4:	e0fffb17 	ldw	r3,-20(fp)
 8003cd8:	e0bffe17 	ldw	r2,-8(fp)
 8003cdc:	1887883a 	add	r3,r3,r2
 8003ce0:	e0800217 	ldw	r2,8(fp)
 8003ce4:	188d883a 	add	r6,r3,r2
 8003ce8:	e0fffc17 	ldw	r3,-16(fp)
 8003cec:	e0bffd17 	ldw	r2,-12(fp)
 8003cf0:	1887c83a 	sub	r3,r3,r2
 8003cf4:	00800044 	movi	r2,1
 8003cf8:	d8800015 	stw	r2,0(sp)
 8003cfc:	e0800417 	ldw	r2,16(fp)
 8003d00:	d8800115 	stw	r2,4(sp)
 8003d04:	e0800617 	ldw	r2,24(fp)
 8003d08:	d8800215 	stw	r2,8(sp)
 8003d0c:	180f883a 	mov	r7,r3
 8003d10:	80019c80 	call	80019c8 <vid_draw_line>
          vid_draw_line(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 8003d14:	e0fffb17 	ldw	r3,-20(fp)
 8003d18:	e0bffd17 	ldw	r2,-12(fp)
 8003d1c:	1889c83a 	sub	r4,r3,r2
 8003d20:	e0fffc17 	ldw	r3,-16(fp)
 8003d24:	e0bffe17 	ldw	r2,-8(fp)
 8003d28:	188bc83a 	sub	r5,r3,r2
 8003d2c:	e0fffb17 	ldw	r3,-20(fp)
 8003d30:	e0bffd17 	ldw	r2,-12(fp)
 8003d34:	1887883a 	add	r3,r3,r2
 8003d38:	e0800217 	ldw	r2,8(fp)
 8003d3c:	188d883a 	add	r6,r3,r2
 8003d40:	e0fffc17 	ldw	r3,-16(fp)
 8003d44:	e0bffe17 	ldw	r2,-8(fp)
 8003d48:	1887c83a 	sub	r3,r3,r2
 8003d4c:	00800044 	movi	r2,1
 8003d50:	d8800015 	stw	r2,0(sp)
 8003d54:	e0800417 	ldw	r2,16(fp)
 8003d58:	d8800115 	stw	r2,4(sp)
 8003d5c:	e0800617 	ldw	r2,24(fp)
 8003d60:	d8800215 	stw	r2,8(sp)
 8003d64:	180f883a 	mov	r7,r3
 8003d68:	80019c80 	call	80019c8 <vid_draw_line>
 8003d6c:	00006806 	br	8003f10 <vid_round_corner_points+0x724>
        } else {
          vid_set_pixel(cx + x + straight_width, cy + y + straight_height, color, display);
 8003d70:	e0fffb17 	ldw	r3,-20(fp)
 8003d74:	e0bffd17 	ldw	r2,-12(fp)
 8003d78:	1887883a 	add	r3,r3,r2
 8003d7c:	e0800217 	ldw	r2,8(fp)
 8003d80:	1889883a 	add	r4,r3,r2
 8003d84:	e0fffc17 	ldw	r3,-16(fp)
 8003d88:	e0bffe17 	ldw	r2,-8(fp)
 8003d8c:	1887883a 	add	r3,r3,r2
 8003d90:	e0800317 	ldw	r2,12(fp)
 8003d94:	1887883a 	add	r3,r3,r2
 8003d98:	e0800417 	ldw	r2,16(fp)
 8003d9c:	180b883a 	mov	r5,r3
 8003da0:	100d883a 	mov	r6,r2
 8003da4:	e1c00617 	ldw	r7,24(fp)
 8003da8:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx - x, cy + y + straight_height, color, display);
 8003dac:	e0fffb17 	ldw	r3,-20(fp)
 8003db0:	e0bffd17 	ldw	r2,-12(fp)
 8003db4:	1889c83a 	sub	r4,r3,r2
 8003db8:	e0fffc17 	ldw	r3,-16(fp)
 8003dbc:	e0bffe17 	ldw	r2,-8(fp)
 8003dc0:	1887883a 	add	r3,r3,r2
 8003dc4:	e0800317 	ldw	r2,12(fp)
 8003dc8:	1887883a 	add	r3,r3,r2
 8003dcc:	e0800417 	ldw	r2,16(fp)
 8003dd0:	180b883a 	mov	r5,r3
 8003dd4:	100d883a 	mov	r6,r2
 8003dd8:	e1c00617 	ldw	r7,24(fp)
 8003ddc:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx + x + straight_width, cy - y, color, display);
 8003de0:	e0fffb17 	ldw	r3,-20(fp)
 8003de4:	e0bffd17 	ldw	r2,-12(fp)
 8003de8:	1887883a 	add	r3,r3,r2
 8003dec:	e0800217 	ldw	r2,8(fp)
 8003df0:	1889883a 	add	r4,r3,r2
 8003df4:	e0fffc17 	ldw	r3,-16(fp)
 8003df8:	e0bffe17 	ldw	r2,-8(fp)
 8003dfc:	1887c83a 	sub	r3,r3,r2
 8003e00:	e0800417 	ldw	r2,16(fp)
 8003e04:	180b883a 	mov	r5,r3
 8003e08:	100d883a 	mov	r6,r2
 8003e0c:	e1c00617 	ldw	r7,24(fp)
 8003e10:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx - x, cy - y, color, display);
 8003e14:	e0fffb17 	ldw	r3,-20(fp)
 8003e18:	e0bffd17 	ldw	r2,-12(fp)
 8003e1c:	1889c83a 	sub	r4,r3,r2
 8003e20:	e0fffc17 	ldw	r3,-16(fp)
 8003e24:	e0bffe17 	ldw	r2,-8(fp)
 8003e28:	1887c83a 	sub	r3,r3,r2
 8003e2c:	e0800417 	ldw	r2,16(fp)
 8003e30:	180b883a 	mov	r5,r3
 8003e34:	100d883a 	mov	r6,r2
 8003e38:	e1c00617 	ldw	r7,24(fp)
 8003e3c:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy + x + straight_height, color, display);
 8003e40:	e0fffb17 	ldw	r3,-20(fp)
 8003e44:	e0bffe17 	ldw	r2,-8(fp)
 8003e48:	1887883a 	add	r3,r3,r2
 8003e4c:	e0800217 	ldw	r2,8(fp)
 8003e50:	1889883a 	add	r4,r3,r2
 8003e54:	e0fffc17 	ldw	r3,-16(fp)
 8003e58:	e0bffd17 	ldw	r2,-12(fp)
 8003e5c:	1887883a 	add	r3,r3,r2
 8003e60:	e0800317 	ldw	r2,12(fp)
 8003e64:	1887883a 	add	r3,r3,r2
 8003e68:	e0800417 	ldw	r2,16(fp)
 8003e6c:	180b883a 	mov	r5,r3
 8003e70:	100d883a 	mov	r6,r2
 8003e74:	e1c00617 	ldw	r7,24(fp)
 8003e78:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx - y, cy + x + straight_height, color, display);
 8003e7c:	e0fffb17 	ldw	r3,-20(fp)
 8003e80:	e0bffe17 	ldw	r2,-8(fp)
 8003e84:	1889c83a 	sub	r4,r3,r2
 8003e88:	e0fffc17 	ldw	r3,-16(fp)
 8003e8c:	e0bffd17 	ldw	r2,-12(fp)
 8003e90:	1887883a 	add	r3,r3,r2
 8003e94:	e0800317 	ldw	r2,12(fp)
 8003e98:	1887883a 	add	r3,r3,r2
 8003e9c:	e0800417 	ldw	r2,16(fp)
 8003ea0:	180b883a 	mov	r5,r3
 8003ea4:	100d883a 	mov	r6,r2
 8003ea8:	e1c00617 	ldw	r7,24(fp)
 8003eac:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx + y + straight_width, cy - x, color, display);
 8003eb0:	e0fffb17 	ldw	r3,-20(fp)
 8003eb4:	e0bffe17 	ldw	r2,-8(fp)
 8003eb8:	1887883a 	add	r3,r3,r2
 8003ebc:	e0800217 	ldw	r2,8(fp)
 8003ec0:	1889883a 	add	r4,r3,r2
 8003ec4:	e0fffc17 	ldw	r3,-16(fp)
 8003ec8:	e0bffd17 	ldw	r2,-12(fp)
 8003ecc:	1887c83a 	sub	r3,r3,r2
 8003ed0:	e0800417 	ldw	r2,16(fp)
 8003ed4:	180b883a 	mov	r5,r3
 8003ed8:	100d883a 	mov	r6,r2
 8003edc:	e1c00617 	ldw	r7,24(fp)
 8003ee0:	80023ec0 	call	80023ec <vid_set_pixel>
          vid_set_pixel(cx - y, cy - x, color, display);
 8003ee4:	e0fffb17 	ldw	r3,-20(fp)
 8003ee8:	e0bffe17 	ldw	r2,-8(fp)
 8003eec:	1889c83a 	sub	r4,r3,r2
 8003ef0:	e0fffc17 	ldw	r3,-16(fp)
 8003ef4:	e0bffd17 	ldw	r2,-12(fp)
 8003ef8:	1887c83a 	sub	r3,r3,r2
 8003efc:	e0800417 	ldw	r2,16(fp)
 8003f00:	180b883a 	mov	r5,r3
 8003f04:	100d883a 	mov	r6,r2
 8003f08:	e1c00617 	ldw	r7,24(fp)
 8003f0c:	80023ec0 	call	80023ec <vid_set_pixel>
        }
    }
}
 8003f10:	e037883a 	mov	sp,fp
 8003f14:	dfc00117 	ldw	ra,4(sp)
 8003f18:	df000017 	ldw	fp,0(sp)
 8003f1c:	dec00204 	addi	sp,sp,8
 8003f20:	f800283a 	ret

08003f24 <max3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes
*
******************************************************************/
extern __inline__ int max3( int a, int b, int c )
{
 8003f24:	defffc04 	addi	sp,sp,-16
 8003f28:	df000315 	stw	fp,12(sp)
 8003f2c:	df000304 	addi	fp,sp,12
 8003f30:	e13ffd15 	stw	r4,-12(fp)
 8003f34:	e17ffe15 	stw	r5,-8(fp)
 8003f38:	e1bfff15 	stw	r6,-4(fp)
  if( a < b )
 8003f3c:	e0fffd17 	ldw	r3,-12(fp)
 8003f40:	e0bffe17 	ldw	r2,-8(fp)
 8003f44:	1880020e 	bge	r3,r2,8003f50 <max3+0x2c>
    a = b;
 8003f48:	e0bffe17 	ldw	r2,-8(fp)
 8003f4c:	e0bffd15 	stw	r2,-12(fp)
  if( a < c )
 8003f50:	e0fffd17 	ldw	r3,-12(fp)
 8003f54:	e0bfff17 	ldw	r2,-4(fp)
 8003f58:	1880020e 	bge	r3,r2,8003f64 <max3+0x40>
    a = c;
 8003f5c:	e0bfff17 	ldw	r2,-4(fp)
 8003f60:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 8003f64:	e0bffd17 	ldw	r2,-12(fp)
}
 8003f68:	e037883a 	mov	sp,fp
 8003f6c:	df000017 	ldw	fp,0(sp)
 8003f70:	dec00104 	addi	sp,sp,4
 8003f74:	f800283a 	ret

08003f78 <min3>:
*  Purpose:  Returns the minimum value of 3 parameters
*            Used for drawing filled shapes.
*
******************************************************************/
extern __inline__ int min3( int a, int b, int c )
{
 8003f78:	defffc04 	addi	sp,sp,-16
 8003f7c:	df000315 	stw	fp,12(sp)
 8003f80:	df000304 	addi	fp,sp,12
 8003f84:	e13ffd15 	stw	r4,-12(fp)
 8003f88:	e17ffe15 	stw	r5,-8(fp)
 8003f8c:	e1bfff15 	stw	r6,-4(fp)
  if( a > b )
 8003f90:	e0bffd17 	ldw	r2,-12(fp)
 8003f94:	e0fffe17 	ldw	r3,-8(fp)
 8003f98:	1880020e 	bge	r3,r2,8003fa4 <min3+0x2c>
    a = b;
 8003f9c:	e0bffe17 	ldw	r2,-8(fp)
 8003fa0:	e0bffd15 	stw	r2,-12(fp)
  if( a > c )
 8003fa4:	e0bffd17 	ldw	r2,-12(fp)
 8003fa8:	e0ffff17 	ldw	r3,-4(fp)
 8003fac:	1880020e 	bge	r3,r2,8003fb8 <min3+0x40>
    a = c;
 8003fb0:	e0bfff17 	ldw	r2,-4(fp)
 8003fb4:	e0bffd15 	stw	r2,-12(fp)
  
  return a;
 8003fb8:	e0bffd17 	ldw	r2,-12(fp)
}
 8003fbc:	e037883a 	mov	sp,fp
 8003fc0:	df000017 	ldw	fp,0(sp)
 8003fc4:	dec00104 	addi	sp,sp,4
 8003fc8:	f800283a 	ret

08003fcc <max_diff3>:
*  Purpose:  Returns the positive max difference between 3 
*            parameters.  Used for drawing filled shapes
*
******************************************************************/
__inline__ int max_diff3(int a, int b, int c)
{
 8003fcc:	defff904 	addi	sp,sp,-28
 8003fd0:	dfc00615 	stw	ra,24(sp)
 8003fd4:	df000515 	stw	fp,20(sp)
 8003fd8:	df000504 	addi	fp,sp,20
 8003fdc:	e13ffd15 	stw	r4,-12(fp)
 8003fe0:	e17ffe15 	stw	r5,-8(fp)
 8003fe4:	e1bfff15 	stw	r6,-4(fp)
  int max, min;
    
  max = max3( a, b, c );
 8003fe8:	e13ffd17 	ldw	r4,-12(fp)
 8003fec:	e17ffe17 	ldw	r5,-8(fp)
 8003ff0:	e1bfff17 	ldw	r6,-4(fp)
 8003ff4:	8003f240 	call	8003f24 <max3>
 8003ff8:	e0bffb15 	stw	r2,-20(fp)
  min = min3( a, b, c );
 8003ffc:	e13ffd17 	ldw	r4,-12(fp)
 8004000:	e17ffe17 	ldw	r5,-8(fp)
 8004004:	e1bfff17 	ldw	r6,-4(fp)
 8004008:	8003f780 	call	8003f78 <min3>
 800400c:	e0bffc15 	stw	r2,-16(fp)
  return (max - min);
 8004010:	e0fffb17 	ldw	r3,-20(fp)
 8004014:	e0bffc17 	ldw	r2,-16(fp)
 8004018:	1885c83a 	sub	r2,r3,r2
}
 800401c:	e037883a 	mov	sp,fp
 8004020:	dfc00117 	ldw	ra,4(sp)
 8004024:	df000017 	ldw	fp,0(sp)
 8004028:	dec00204 	addi	sp,sp,8
 800402c:	f800283a 	ret

08004030 <vid_put_pixel_in_span_map>:
*            min value of an element that represents a span, 
*            essentially just a horizontal line used to fill shapes.
*
******************************************************************/
extern inline void vid_put_pixel_in_span_map( int x, int y, int *span_array )
{
 8004030:	defffc04 	addi	sp,sp,-16
 8004034:	df000315 	stw	fp,12(sp)
 8004038:	df000304 	addi	fp,sp,12
 800403c:	e13ffd15 	stw	r4,-12(fp)
 8004040:	e17ffe15 	stw	r5,-8(fp)
 8004044:	e1bfff15 	stw	r6,-4(fp)
  if (span_array[y*2] == -1)
 8004048:	e0bffe17 	ldw	r2,-8(fp)
 800404c:	100490fa 	slli	r2,r2,3
 8004050:	1007883a 	mov	r3,r2
 8004054:	e0bfff17 	ldw	r2,-4(fp)
 8004058:	10c5883a 	add	r2,r2,r3
 800405c:	10800017 	ldw	r2,0(r2)
 8004060:	10bfffd8 	cmpnei	r2,r2,-1
 8004064:	10000f1e 	bne	r2,zero,80040a4 <vid_put_pixel_in_span_map+0x74>
  {
    span_array[y*2] = x;
 8004068:	e0bffe17 	ldw	r2,-8(fp)
 800406c:	100490fa 	slli	r2,r2,3
 8004070:	1007883a 	mov	r3,r2
 8004074:	e0bfff17 	ldw	r2,-4(fp)
 8004078:	10c5883a 	add	r2,r2,r3
 800407c:	e0fffd17 	ldw	r3,-12(fp)
 8004080:	10c00015 	stw	r3,0(r2)
    span_array[(y*2)+1] = x;
 8004084:	e0bffe17 	ldw	r2,-8(fp)
 8004088:	100490fa 	slli	r2,r2,3
 800408c:	10800104 	addi	r2,r2,4
 8004090:	e0ffff17 	ldw	r3,-4(fp)
 8004094:	1885883a 	add	r2,r3,r2
 8004098:	e0fffd17 	ldw	r3,-12(fp)
 800409c:	10c00015 	stw	r3,0(r2)
 80040a0:	00001f06 	br	8004120 <vid_put_pixel_in_span_map+0xf0>
  }
  else if( span_array[y*2] > x )
 80040a4:	e0bffe17 	ldw	r2,-8(fp)
 80040a8:	100490fa 	slli	r2,r2,3
 80040ac:	1007883a 	mov	r3,r2
 80040b0:	e0bfff17 	ldw	r2,-4(fp)
 80040b4:	10c5883a 	add	r2,r2,r3
 80040b8:	10800017 	ldw	r2,0(r2)
 80040bc:	e0fffd17 	ldw	r3,-12(fp)
 80040c0:	1880080e 	bge	r3,r2,80040e4 <vid_put_pixel_in_span_map+0xb4>
    span_array[y*2] = x;
 80040c4:	e0bffe17 	ldw	r2,-8(fp)
 80040c8:	100490fa 	slli	r2,r2,3
 80040cc:	1007883a 	mov	r3,r2
 80040d0:	e0bfff17 	ldw	r2,-4(fp)
 80040d4:	10c5883a 	add	r2,r2,r3
 80040d8:	e0fffd17 	ldw	r3,-12(fp)
 80040dc:	10c00015 	stw	r3,0(r2)
 80040e0:	00000f06 	br	8004120 <vid_put_pixel_in_span_map+0xf0>
  else if( span_array[(y*2)+1] < x )
 80040e4:	e0bffe17 	ldw	r2,-8(fp)
 80040e8:	100490fa 	slli	r2,r2,3
 80040ec:	10800104 	addi	r2,r2,4
 80040f0:	e0ffff17 	ldw	r3,-4(fp)
 80040f4:	1885883a 	add	r2,r3,r2
 80040f8:	10c00017 	ldw	r3,0(r2)
 80040fc:	e0bffd17 	ldw	r2,-12(fp)
 8004100:	1880070e 	bge	r3,r2,8004120 <vid_put_pixel_in_span_map+0xf0>
    span_array[(y*2)+1] = x;
 8004104:	e0bffe17 	ldw	r2,-8(fp)
 8004108:	100490fa 	slli	r2,r2,3
 800410c:	10800104 	addi	r2,r2,4
 8004110:	e0ffff17 	ldw	r3,-4(fp)
 8004114:	1885883a 	add	r2,r3,r2
 8004118:	e0fffd17 	ldw	r3,-12(fp)
 800411c:	10c00015 	stw	r3,0(r2)
}
 8004120:	e037883a 	mov	sp,fp
 8004124:	df000017 	ldw	fp,0(sp)
 8004128:	dec00104 	addi	sp,sp,4
 800412c:	f800283a 	ret

08004130 <vid_bres_scan_edges>:
*            filled shapes where you fill by drawing successive
*            horizontal lines.
*
******************************************************************/
void vid_bres_scan_edges( int x1, int y1, int x2, int y2, int *span_array) 
{
 8004130:	deffee04 	addi	sp,sp,-72
 8004134:	dfc01115 	stw	ra,68(sp)
 8004138:	df001015 	stw	fp,64(sp)
 800413c:	df001004 	addi	fp,sp,64
 8004140:	e13ffc15 	stw	r4,-16(fp)
 8004144:	e17ffd15 	stw	r5,-12(fp)
 8004148:	e1bffe15 	stw	r6,-8(fp)
 800414c:	e1ffff15 	stw	r7,-4(fp)

  int x_incr, y_incr;
  int y_delta, x_delta;

  // Assure we always draw left to right
  if( x1 > x2 )
 8004150:	e0bffc17 	ldw	r2,-16(fp)
 8004154:	e0fffe17 	ldw	r3,-8(fp)
 8004158:	18800c0e 	bge	r3,r2,800418c <vid_bres_scan_edges+0x5c>
  {
    int tempx = x2;
 800415c:	e0bffe17 	ldw	r2,-8(fp)
 8004160:	e0bff515 	stw	r2,-44(fp)
    x2 = x1;
 8004164:	e0bffc17 	ldw	r2,-16(fp)
 8004168:	e0bffe15 	stw	r2,-8(fp)
    x1 = tempx;
 800416c:	e0bff517 	ldw	r2,-44(fp)
 8004170:	e0bffc15 	stw	r2,-16(fp)
    int tempy = y2;
 8004174:	e0bfff17 	ldw	r2,-4(fp)
 8004178:	e0bff615 	stw	r2,-40(fp)
    y2 = y1;
 800417c:	e0bffd17 	ldw	r2,-12(fp)
 8004180:	e0bfff15 	stw	r2,-4(fp)
    y1 = tempy;
 8004184:	e0bff617 	ldw	r2,-40(fp)
 8004188:	e0bffd15 	stw	r2,-12(fp)
  }
  
  // Find the vertical and horizontal distance between the two points
  y_delta = abs(y1-y2);
 800418c:	e0fffd17 	ldw	r3,-12(fp)
 8004190:	e0bfff17 	ldw	r2,-4(fp)
 8004194:	1885c83a 	sub	r2,r3,r2
 8004198:	1000010e 	bge	r2,zero,80041a0 <vid_bres_scan_edges+0x70>
 800419c:	0085c83a 	sub	r2,zero,r2
 80041a0:	e0bff115 	stw	r2,-60(fp)
  x_delta = (x2-x1);
 80041a4:	e0fffe17 	ldw	r3,-8(fp)
 80041a8:	e0bffc17 	ldw	r2,-16(fp)
 80041ac:	1885c83a 	sub	r2,r3,r2
 80041b0:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  if (y1 > y2) { y_incr=-1; } else { y_incr=1; }
 80041b4:	e0bffd17 	ldw	r2,-12(fp)
 80041b8:	e0ffff17 	ldw	r3,-4(fp)
 80041bc:	1880030e 	bge	r3,r2,80041cc <vid_bres_scan_edges+0x9c>
 80041c0:	00bfffc4 	movi	r2,-1
 80041c4:	e0bff015 	stw	r2,-64(fp)
 80041c8:	00000206 	br	80041d4 <vid_bres_scan_edges+0xa4>
 80041cc:	00800044 	movi	r2,1
 80041d0:	e0bff015 	stw	r2,-64(fp)
  x_incr=1;
 80041d4:	00800044 	movi	r2,1
 80041d8:	e0bff715 	stw	r2,-36(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (x_delta >= y_delta) {
 80041dc:	e0fff217 	ldw	r3,-56(fp)
 80041e0:	e0bff117 	ldw	r2,-60(fp)
 80041e4:	18802f16 	blt	r3,r2,80042a4 <vid_bres_scan_edges+0x174>
    int dPr   = y_delta<<1;
 80041e8:	e0bff117 	ldw	r2,-60(fp)
 80041ec:	1085883a 	add	r2,r2,r2
 80041f0:	e0bff815 	stw	r2,-32(fp)
    int dPru  = dPr - (x_delta<<1);
 80041f4:	e0bff217 	ldw	r2,-56(fp)
 80041f8:	1085883a 	add	r2,r2,r2
 80041fc:	1007883a 	mov	r3,r2
 8004200:	e0bff817 	ldw	r2,-32(fp)
 8004204:	10c5c83a 	sub	r2,r2,r3
 8004208:	e0bff915 	stw	r2,-28(fp)
    int P     = dPr - x_delta;
 800420c:	e0fff817 	ldw	r3,-32(fp)
 8004210:	e0bff217 	ldw	r2,-56(fp)
 8004214:	1885c83a 	sub	r2,r3,r2
 8004218:	e0bff315 	stw	r2,-52(fp)

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 800421c:	00001e06 	br	8004298 <vid_bres_scan_edges+0x168>
      // map the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 8004220:	e13ffc17 	ldw	r4,-16(fp)
 8004224:	e17ffd17 	ldw	r5,-12(fp)
 8004228:	e1800217 	ldw	r6,8(fp)
 800422c:	80040300 	call	8004030 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 8004230:	e0bff317 	ldw	r2,-52(fp)
 8004234:	00800d0e 	bge	zero,r2,800426c <vid_bres_scan_edges+0x13c>
        x1+=x_incr;
 8004238:	e0fffc17 	ldw	r3,-16(fp)
 800423c:	e0bff717 	ldw	r2,-36(fp)
 8004240:	1885883a 	add	r2,r3,r2
 8004244:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 8004248:	e0fffd17 	ldw	r3,-12(fp)
 800424c:	e0bff017 	ldw	r2,-64(fp)
 8004250:	1885883a 	add	r2,r3,r2
 8004254:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 8004258:	e0fff317 	ldw	r3,-52(fp)
 800425c:	e0bff917 	ldw	r2,-28(fp)
 8004260:	1885883a 	add	r2,r3,r2
 8004264:	e0bff315 	stw	r2,-52(fp)
 8004268:	00000806 	br	800428c <vid_bres_scan_edges+0x15c>
      } else {
        x1+=x_incr;
 800426c:	e0fffc17 	ldw	r3,-16(fp)
 8004270:	e0bff717 	ldw	r2,-36(fp)
 8004274:	1885883a 	add	r2,r3,r2
 8004278:	e0bffc15 	stw	r2,-16(fp)
        P+=dPr;
 800427c:	e0fff317 	ldw	r3,-52(fp)
 8004280:	e0bff817 	ldw	r2,-32(fp)
 8004284:	1885883a 	add	r2,r3,r2
 8004288:	e0bff315 	stw	r2,-52(fp)
    int dPr   = y_delta<<1;
    int dPru  = dPr - (x_delta<<1);
    int P     = dPr - x_delta;

    // Process the line, one horizontal point at at time
    for (; x_delta >= 0; x_delta--) {
 800428c:	e0bff217 	ldw	r2,-56(fp)
 8004290:	10bfffc4 	addi	r2,r2,-1
 8004294:	e0bff215 	stw	r2,-56(fp)
 8004298:	e0bff217 	ldw	r2,-56(fp)
 800429c:	103fe00e 	bge	r2,zero,8004220 <__alt_data_end+0xf8004220>
 80042a0:	00002e06 	br	800435c <vid_bres_scan_edges+0x22c>
      }
    }
  }
  else // If it's the vertical axis
  {
    int dPr   = x_delta<<1;
 80042a4:	e0bff217 	ldw	r2,-56(fp)
 80042a8:	1085883a 	add	r2,r2,r2
 80042ac:	e0bffa15 	stw	r2,-24(fp)
    int dPru  = dPr - (y_delta<<1);
 80042b0:	e0bff117 	ldw	r2,-60(fp)
 80042b4:	1085883a 	add	r2,r2,r2
 80042b8:	1007883a 	mov	r3,r2
 80042bc:	e0bffa17 	ldw	r2,-24(fp)
 80042c0:	10c5c83a 	sub	r2,r2,r3
 80042c4:	e0bffb15 	stw	r2,-20(fp)
    int P     = dPr - y_delta;
 80042c8:	e0fffa17 	ldw	r3,-24(fp)
 80042cc:	e0bff117 	ldw	r2,-60(fp)
 80042d0:	1885c83a 	sub	r2,r3,r2
 80042d4:	e0bff415 	stw	r2,-48(fp)

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 80042d8:	00001e06 	br	8004354 <vid_bres_scan_edges+0x224>
      // plot the pixel
      vid_put_pixel_in_span_map(x1, y1, span_array);
 80042dc:	e13ffc17 	ldw	r4,-16(fp)
 80042e0:	e17ffd17 	ldw	r5,-12(fp)
 80042e4:	e1800217 	ldw	r6,8(fp)
 80042e8:	80040300 	call	8004030 <vid_put_pixel_in_span_map>
      // If we're moving along both axis
      if (P > 0) {
 80042ec:	e0bff417 	ldw	r2,-48(fp)
 80042f0:	00800d0e 	bge	zero,r2,8004328 <vid_bres_scan_edges+0x1f8>
        x1+=x_incr;
 80042f4:	e0fffc17 	ldw	r3,-16(fp)
 80042f8:	e0bff717 	ldw	r2,-36(fp)
 80042fc:	1885883a 	add	r2,r3,r2
 8004300:	e0bffc15 	stw	r2,-16(fp)
        y1+=y_incr;
 8004304:	e0fffd17 	ldw	r3,-12(fp)
 8004308:	e0bff017 	ldw	r2,-64(fp)
 800430c:	1885883a 	add	r2,r3,r2
 8004310:	e0bffd15 	stw	r2,-12(fp)
        P+=dPru;
 8004314:	e0fff417 	ldw	r3,-48(fp)
 8004318:	e0bffb17 	ldw	r2,-20(fp)
 800431c:	1885883a 	add	r2,r3,r2
 8004320:	e0bff415 	stw	r2,-48(fp)
 8004324:	00000806 	br	8004348 <vid_bres_scan_edges+0x218>
      } else {
        y1+=y_incr;
 8004328:	e0fffd17 	ldw	r3,-12(fp)
 800432c:	e0bff017 	ldw	r2,-64(fp)
 8004330:	1885883a 	add	r2,r3,r2
 8004334:	e0bffd15 	stw	r2,-12(fp)
        P+=dPr;
 8004338:	e0fff417 	ldw	r3,-48(fp)
 800433c:	e0bffa17 	ldw	r2,-24(fp)
 8004340:	1885883a 	add	r2,r3,r2
 8004344:	e0bff415 	stw	r2,-48(fp)
    int dPr   = x_delta<<1;
    int dPru  = dPr - (y_delta<<1);
    int P     = dPr - y_delta;

    // Process the line, one vertical point at at time
    for (; y_delta>=0; y_delta--) {
 8004348:	e0bff117 	ldw	r2,-60(fp)
 800434c:	10bfffc4 	addi	r2,r2,-1
 8004350:	e0bff115 	stw	r2,-60(fp)
 8004354:	e0bff117 	ldw	r2,-60(fp)
 8004358:	103fe00e 	bge	r2,zero,80042dc <__alt_data_end+0xf80042dc>
        y1+=y_incr;
        P+=dPr;
      }
    }
  }
}
 800435c:	e037883a 	mov	sp,fp
 8004360:	dfc00117 	ldw	ra,4(sp)
 8004364:	df000017 	ldw	fp,0(sp)
 8004368:	dec00204 	addi	sp,sp,8
 800436c:	f800283a 	ret

08004370 <vid_draw_triangle>:
*  Purpose:  This function draws a triangle on the screen between
*            three points defined by the structure tri.
*
******************************************************************/
void vid_draw_triangle(triangle_struct* tri, alt_video_display* display)
{
 8004370:	defff804 	addi	sp,sp,-32
 8004374:	dfc00715 	stw	ra,28(sp)
 8004378:	df000615 	stw	fp,24(sp)
 800437c:	df000604 	addi	fp,sp,24
 8004380:	e13ffe15 	stw	r4,-8(fp)
 8004384:	e17fff15 	stw	r5,-4(fp)
  int i;
  
  // Outline it first
    vid_draw_line( tri->vertex_x[0], tri->vertex_y[0], 
 8004388:	e0bffe17 	ldw	r2,-8(fp)
 800438c:	11000017 	ldw	r4,0(r2)
 8004390:	e0bffe17 	ldw	r2,-8(fp)
 8004394:	11400317 	ldw	r5,12(r2)
 8004398:	e0bffe17 	ldw	r2,-8(fp)
 800439c:	11800117 	ldw	r6,4(r2)
 80043a0:	e0bffe17 	ldw	r2,-8(fp)
 80043a4:	11c00417 	ldw	r7,16(r2)
 80043a8:	e0bffe17 	ldw	r2,-8(fp)
 80043ac:	10800a17 	ldw	r2,40(r2)
 80043b0:	00c00044 	movi	r3,1
 80043b4:	d8c00015 	stw	r3,0(sp)
 80043b8:	d8800115 	stw	r2,4(sp)
 80043bc:	e0bfff17 	ldw	r2,-4(fp)
 80043c0:	d8800215 	stw	r2,8(sp)
 80043c4:	80019c80 	call	80019c8 <vid_draw_line>
                   tri->vertex_x[1], tri->vertex_y[1], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[1], tri->vertex_y[1], 
 80043c8:	e0bffe17 	ldw	r2,-8(fp)
 80043cc:	11000117 	ldw	r4,4(r2)
 80043d0:	e0bffe17 	ldw	r2,-8(fp)
 80043d4:	11400417 	ldw	r5,16(r2)
 80043d8:	e0bffe17 	ldw	r2,-8(fp)
 80043dc:	11800217 	ldw	r6,8(r2)
 80043e0:	e0bffe17 	ldw	r2,-8(fp)
 80043e4:	11c00517 	ldw	r7,20(r2)
 80043e8:	e0bffe17 	ldw	r2,-8(fp)
 80043ec:	10800a17 	ldw	r2,40(r2)
 80043f0:	00c00044 	movi	r3,1
 80043f4:	d8c00015 	stw	r3,0(sp)
 80043f8:	d8800115 	stw	r2,4(sp)
 80043fc:	e0bfff17 	ldw	r2,-4(fp)
 8004400:	d8800215 	stw	r2,8(sp)
 8004404:	80019c80 	call	80019c8 <vid_draw_line>
                   tri->vertex_x[2], tri->vertex_y[2], 1, 
                   tri->col, display);
    vid_draw_line( tri->vertex_x[2], tri->vertex_y[2], 
 8004408:	e0bffe17 	ldw	r2,-8(fp)
 800440c:	11000217 	ldw	r4,8(r2)
 8004410:	e0bffe17 	ldw	r2,-8(fp)
 8004414:	11400517 	ldw	r5,20(r2)
 8004418:	e0bffe17 	ldw	r2,-8(fp)
 800441c:	11800017 	ldw	r6,0(r2)
 8004420:	e0bffe17 	ldw	r2,-8(fp)
 8004424:	11c00317 	ldw	r7,12(r2)
 8004428:	e0bffe17 	ldw	r2,-8(fp)
 800442c:	10800a17 	ldw	r2,40(r2)
 8004430:	00c00044 	movi	r3,1
 8004434:	d8c00015 	stw	r3,0(sp)
 8004438:	d8800115 	stw	r2,4(sp)
 800443c:	e0bfff17 	ldw	r2,-4(fp)
 8004440:	d8800215 	stw	r2,8(sp)
 8004444:	80019c80 	call	80019c8 <vid_draw_line>
                   tri->vertex_x[0], tri->vertex_y[0], 1, 
                   tri->col, display);
//  vid_draw_line(tri->bx, tri->by, tri->cx, tri->cy, 1, tri->col, display);
//  vid_draw_line(tri->cx, tri->cy, tri->ax, tri->ay, 1, tri->col, display);
  
  if(tri->fill == DO_FILL)
 8004448:	e0bffe17 	ldw	r2,-8(fp)
 800444c:	10800b17 	ldw	r2,44(r2)
 8004450:	10800058 	cmpnei	r2,r2,1
 8004454:	10009f1e 	bne	r2,zero,80046d4 <vid_draw_triangle+0x364>
  {
    tri->top_y = min3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 8004458:	e0bffe17 	ldw	r2,-8(fp)
 800445c:	11000317 	ldw	r4,12(r2)
 8004460:	e0bffe17 	ldw	r2,-8(fp)
 8004464:	10c00417 	ldw	r3,16(r2)
 8004468:	e0bffe17 	ldw	r2,-8(fp)
 800446c:	10800517 	ldw	r2,20(r2)
 8004470:	180b883a 	mov	r5,r3
 8004474:	100d883a 	mov	r6,r2
 8004478:	8003f780 	call	8003f78 <min3>
 800447c:	1007883a 	mov	r3,r2
 8004480:	e0bffe17 	ldw	r2,-8(fp)
 8004484:	10c00815 	stw	r3,32(r2)
    tri->bottom_y = max3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 8004488:	e0bffe17 	ldw	r2,-8(fp)
 800448c:	11000317 	ldw	r4,12(r2)
 8004490:	e0bffe17 	ldw	r2,-8(fp)
 8004494:	10c00417 	ldw	r3,16(r2)
 8004498:	e0bffe17 	ldw	r2,-8(fp)
 800449c:	10800517 	ldw	r2,20(r2)
 80044a0:	180b883a 	mov	r5,r3
 80044a4:	100d883a 	mov	r6,r2
 80044a8:	8003f240 	call	8003f24 <max3>
 80044ac:	1007883a 	mov	r3,r2
 80044b0:	e0bffe17 	ldw	r2,-8(fp)
 80044b4:	10c00915 	stw	r3,36(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
 80044b8:	e0bffe17 	ldw	r2,-8(fp)
 80044bc:	11000317 	ldw	r4,12(r2)
 80044c0:	e0bffe17 	ldw	r2,-8(fp)
 80044c4:	10c00417 	ldw	r3,16(r2)
 80044c8:	e0bffe17 	ldw	r2,-8(fp)
 80044cc:	10800517 	ldw	r2,20(r2)
 80044d0:	180b883a 	mov	r5,r3
 80044d4:	100d883a 	mov	r6,r2
 80044d8:	8003fcc0 	call	8003fcc <max_diff3>
 80044dc:	1007883a 	mov	r3,r2
 80044e0:	e0bffe17 	ldw	r2,-8(fp)
 80044e4:	10c00615 	stw	r3,24(r2)
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
 80044e8:	e0bffe17 	ldw	r2,-8(fp)
 80044ec:	11000017 	ldw	r4,0(r2)
 80044f0:	e0bffe17 	ldw	r2,-8(fp)
 80044f4:	10c00117 	ldw	r3,4(r2)
 80044f8:	e0bffe17 	ldw	r2,-8(fp)
 80044fc:	10800217 	ldw	r2,8(r2)
 8004500:	180b883a 	mov	r5,r3
 8004504:	100d883a 	mov	r6,r2
 8004508:	8003fcc0 	call	8003fcc <max_diff3>
 800450c:	1007883a 	mov	r3,r2
 8004510:	e0bffe17 	ldw	r2,-8(fp)
 8004514:	10c00715 	stw	r3,28(r2)
    tri->span_array = malloc(display->height * 4 * 2);
 8004518:	e0bfff17 	ldw	r2,-4(fp)
 800451c:	10800817 	ldw	r2,32(r2)
 8004520:	100490fa 	slli	r2,r2,3
 8004524:	1009883a 	mov	r4,r2
 8004528:	800f4880 	call	800f488 <malloc>
 800452c:	1007883a 	mov	r3,r2
 8004530:	e0bffe17 	ldw	r2,-8(fp)
 8004534:	10c00d15 	stw	r3,52(r2)

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 8004538:	e0bffe17 	ldw	r2,-8(fp)
 800453c:	10800817 	ldw	r2,32(r2)
 8004540:	e0bffd15 	stw	r2,-12(fp)
 8004544:	00001206 	br	8004590 <vid_draw_triangle+0x220>
    {
      tri->span_array[i*2] = -1;
 8004548:	e0bffe17 	ldw	r2,-8(fp)
 800454c:	10800d17 	ldw	r2,52(r2)
 8004550:	e0fffd17 	ldw	r3,-12(fp)
 8004554:	180690fa 	slli	r3,r3,3
 8004558:	10c5883a 	add	r2,r2,r3
 800455c:	00ffffc4 	movi	r3,-1
 8004560:	10c00015 	stw	r3,0(r2)
      tri->span_array[(i*2) + 1] = -1;
 8004564:	e0bffe17 	ldw	r2,-8(fp)
 8004568:	10c00d17 	ldw	r3,52(r2)
 800456c:	e0bffd17 	ldw	r2,-12(fp)
 8004570:	100490fa 	slli	r2,r2,3
 8004574:	10800104 	addi	r2,r2,4
 8004578:	1885883a 	add	r2,r3,r2
 800457c:	00ffffc4 	movi	r3,-1
 8004580:	10c00015 	stw	r3,0(r2)
    tri->spans_needed = max_diff3(tri->vertex_y[0], tri->vertex_y[1], tri->vertex_y[2]);
    tri->max_span = max_diff3(tri->vertex_x[0], tri->vertex_x[1], tri->vertex_x[2]);
    tri->span_array = malloc(display->height * 4 * 2);

    //init the span array
    for( i = tri->top_y; i <= tri->bottom_y; i++)
 8004584:	e0bffd17 	ldw	r2,-12(fp)
 8004588:	10800044 	addi	r2,r2,1
 800458c:	e0bffd15 	stw	r2,-12(fp)
 8004590:	e0bffe17 	ldw	r2,-8(fp)
 8004594:	10c00917 	ldw	r3,36(r2)
 8004598:	e0bffd17 	ldw	r2,-12(fp)
 800459c:	18bfea0e 	bge	r3,r2,8004548 <__alt_data_end+0xf8004548>
      tri->span_array[i*2] = -1;
      tri->span_array[(i*2) + 1] = -1;
    }
    
    // Scan-convert the triangle  
    vid_bres_scan_edges( tri->vertex_x[0], tri->vertex_y[0], 
 80045a0:	e0bffe17 	ldw	r2,-8(fp)
 80045a4:	11000017 	ldw	r4,0(r2)
 80045a8:	e0bffe17 	ldw	r2,-8(fp)
 80045ac:	11400317 	ldw	r5,12(r2)
 80045b0:	e0bffe17 	ldw	r2,-8(fp)
 80045b4:	11800117 	ldw	r6,4(r2)
 80045b8:	e0bffe17 	ldw	r2,-8(fp)
 80045bc:	10c00417 	ldw	r3,16(r2)
 80045c0:	e0bffe17 	ldw	r2,-8(fp)
 80045c4:	10800d17 	ldw	r2,52(r2)
 80045c8:	d8800015 	stw	r2,0(sp)
 80045cc:	180f883a 	mov	r7,r3
 80045d0:	80041300 	call	8004130 <vid_bres_scan_edges>
                         tri->vertex_x[1], tri->vertex_y[1], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[1], tri->vertex_y[1], 
 80045d4:	e0bffe17 	ldw	r2,-8(fp)
 80045d8:	11000117 	ldw	r4,4(r2)
 80045dc:	e0bffe17 	ldw	r2,-8(fp)
 80045e0:	11400417 	ldw	r5,16(r2)
 80045e4:	e0bffe17 	ldw	r2,-8(fp)
 80045e8:	11800217 	ldw	r6,8(r2)
 80045ec:	e0bffe17 	ldw	r2,-8(fp)
 80045f0:	10c00517 	ldw	r3,20(r2)
 80045f4:	e0bffe17 	ldw	r2,-8(fp)
 80045f8:	10800d17 	ldw	r2,52(r2)
 80045fc:	d8800015 	stw	r2,0(sp)
 8004600:	180f883a 	mov	r7,r3
 8004604:	80041300 	call	8004130 <vid_bres_scan_edges>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
 8004608:	e0bffe17 	ldw	r2,-8(fp)
 800460c:	11000217 	ldw	r4,8(r2)
 8004610:	e0bffe17 	ldw	r2,-8(fp)
 8004614:	11400517 	ldw	r5,20(r2)
 8004618:	e0bffe17 	ldw	r2,-8(fp)
 800461c:	11800017 	ldw	r6,0(r2)
 8004620:	e0bffe17 	ldw	r2,-8(fp)
 8004624:	10c00317 	ldw	r3,12(r2)
 8004628:	e0bffe17 	ldw	r2,-8(fp)
 800462c:	10800d17 	ldw	r2,52(r2)
 8004630:	d8800015 	stw	r2,0(sp)
 8004634:	180f883a 	mov	r7,r3
 8004638:	80041300 	call	8004130 <vid_bres_scan_edges>
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 800463c:	e0bffe17 	ldw	r2,-8(fp)
 8004640:	10800817 	ldw	r2,32(r2)
 8004644:	e0bffd15 	stw	r2,-12(fp)
 8004648:	00001a06 	br	80046b4 <vid_draw_triangle+0x344>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);
 800464c:	e0bffe17 	ldw	r2,-8(fp)
 8004650:	10800d17 	ldw	r2,52(r2)
 8004654:	e0fffd17 	ldw	r3,-12(fp)
 8004658:	180690fa 	slli	r3,r3,3
 800465c:	10c5883a 	add	r2,r2,r3
 8004660:	11000017 	ldw	r4,0(r2)
 8004664:	e0bffe17 	ldw	r2,-8(fp)
 8004668:	10c00d17 	ldw	r3,52(r2)
 800466c:	e0bffd17 	ldw	r2,-12(fp)
 8004670:	100490fa 	slli	r2,r2,3
 8004674:	10800104 	addi	r2,r2,4
 8004678:	1885883a 	add	r2,r3,r2
 800467c:	11800017 	ldw	r6,0(r2)
 8004680:	e0bffe17 	ldw	r2,-8(fp)
 8004684:	10800a17 	ldw	r2,40(r2)
 8004688:	00c00044 	movi	r3,1
 800468c:	d8c00015 	stw	r3,0(sp)
 8004690:	d8800115 	stw	r2,4(sp)
 8004694:	e0bfff17 	ldw	r2,-4(fp)
 8004698:	d8800215 	stw	r2,8(sp)
 800469c:	e17ffd17 	ldw	r5,-12(fp)
 80046a0:	e1fffd17 	ldw	r7,-12(fp)
 80046a4:	80019c80 	call	80019c8 <vid_draw_line>
                         tri->vertex_x[2], tri->vertex_y[2], tri->span_array);
    vid_bres_scan_edges( tri->vertex_x[2], tri->vertex_y[2], 
                         tri->vertex_x[0], tri->vertex_y[0], tri->span_array);
  
    // Render the polygon
    for( i = tri->top_y; i <= tri->bottom_y; i++ )
 80046a8:	e0bffd17 	ldw	r2,-12(fp)
 80046ac:	10800044 	addi	r2,r2,1
 80046b0:	e0bffd15 	stw	r2,-12(fp)
 80046b4:	e0bffe17 	ldw	r2,-8(fp)
 80046b8:	10c00917 	ldw	r3,36(r2)
 80046bc:	e0bffd17 	ldw	r2,-12(fp)
 80046c0:	18bfe20e 	bge	r3,r2,800464c <__alt_data_end+0xf800464c>
    {
//      vid_draw_horiz_line (tri->span_array[i*2], tri->span_array[(i*2)+1], i, tri->col, display);
      vid_draw_line (tri->span_array[i*2], i, tri->span_array[(i*2)+1], i, 1, tri->col, display);

    }
    free(tri->span_array);
 80046c4:	e0bffe17 	ldw	r2,-8(fp)
 80046c8:	10800d17 	ldw	r2,52(r2)
 80046cc:	1009883a 	mov	r4,r2
 80046d0:	800f49c0 	call	800f49c <free>
  }
}
 80046d4:	e037883a 	mov	sp,fp
 80046d8:	dfc00117 	ldw	ra,4(sp)
 80046dc:	df000017 	ldw	fp,0(sp)
 80046e0:	dec00204 	addi	sp,sp,8
 80046e4:	f800283a 	ret

080046e8 <CopyImage16>:

void CopyImage16( short * __restrict__ source_buffer, 
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short dest_width, short dest_height )
{
 80046e8:	defff404 	addi	sp,sp,-48
 80046ec:	dfc00b15 	stw	ra,44(sp)
 80046f0:	df000a15 	stw	fp,40(sp)
 80046f4:	df000a04 	addi	fp,sp,40
 80046f8:	e13ffa15 	stw	r4,-24(fp)
 80046fc:	e17ffb15 	stw	r5,-20(fp)
 8004700:	300b883a 	mov	r5,r6
 8004704:	3809883a 	mov	r4,r7
 8004708:	e0c00217 	ldw	r3,8(fp)
 800470c:	e0800317 	ldw	r2,12(fp)
 8004710:	e17ffc0d 	sth	r5,-16(fp)
 8004714:	e13ffd0d 	sth	r4,-12(fp)
 8004718:	e0fffe0d 	sth	r3,-8(fp)
 800471c:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
 8004720:	e03ff815 	stw	zero,-32(fp)
  int y_dst_offset = 0;
 8004724:	e03ff915 	stw	zero,-28(fp)
  
  for( y_src = 0, y_dst = 0; 
 8004728:	e03ff615 	stw	zero,-40(fp)
 800472c:	e03ff715 	stw	zero,-36(fp)
 8004730:	00001d06 	br	80047a8 <CopyImage16+0xc0>
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 8004734:	e0bff917 	ldw	r2,-28(fp)
 8004738:	1085883a 	add	r2,r2,r2
 800473c:	1007883a 	mov	r3,r2
 8004740:	e0bffb17 	ldw	r2,-20(fp)
 8004744:	10c9883a 	add	r4,r2,r3
 8004748:	e0bff817 	ldw	r2,-32(fp)
           ( source_buffer + y_src_offset ), 
 800474c:	1085883a 	add	r2,r2,r2
 8004750:	1007883a 	mov	r3,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 8004754:	e0bffa17 	ldw	r2,-24(fp)
 8004758:	10c7883a 	add	r3,r2,r3
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
 800475c:	e0bffc0f 	ldh	r2,-16(fp)
 8004760:	1085883a 	add	r2,r2,r2
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 8004764:	180b883a 	mov	r5,r3
 8004768:	100d883a 	mov	r6,r2
 800476c:	800fc580 	call	800fc58 <memcpy>
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 8004770:	e0bff617 	ldw	r2,-40(fp)
 8004774:	10800044 	addi	r2,r2,1
 8004778:	e0bff615 	stw	r2,-40(fp)
 800477c:	e0bff717 	ldw	r2,-36(fp)
 8004780:	10800044 	addi	r2,r2,1
 8004784:	e0bff715 	stw	r2,-36(fp)
 8004788:	e0bffc0f 	ldh	r2,-16(fp)
 800478c:	e0fff817 	ldw	r3,-32(fp)
 8004790:	1885883a 	add	r2,r3,r2
 8004794:	e0bff815 	stw	r2,-32(fp)
 8004798:	e0bffe0f 	ldh	r2,-8(fp)
 800479c:	e0fff917 	ldw	r3,-28(fp)
 80047a0:	1885883a 	add	r2,r3,r2
 80047a4:	e0bff915 	stw	r2,-28(fp)
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
       y_src <= ( source_height  - 1 ); 
 80047a8:	e0bffd0f 	ldh	r2,-12(fp)
 80047ac:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = 0;
  int y_dst_offset = 0;
  
  for( y_src = 0, y_dst = 0; 
 80047b0:	e0bff617 	ldw	r2,-40(fp)
 80047b4:	18bfdf0e 	bge	r3,r2,8004734 <__alt_data_end+0xf8004734>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset ), 
           ( source_width << 1 ));
  }
}
 80047b8:	e037883a 	mov	sp,fp
 80047bc:	dfc00117 	ldw	ra,4(sp)
 80047c0:	df000017 	ldw	fp,0(sp)
 80047c4:	dec00204 	addi	sp,sp,8
 80047c8:	f800283a 	ret

080047cc <CropImage16>:
                  short * __restrict__ dest_buffer, 
                  short source_width, short source_height,
                  short crop_left, short crop_right,
                  short crop_top, short crop_bottom,
                  short dest_width, short dest_height )
{
 80047cc:	defff004 	addi	sp,sp,-64
 80047d0:	dfc00f15 	stw	ra,60(sp)
 80047d4:	df000e15 	stw	fp,56(sp)
 80047d8:	df000e04 	addi	fp,sp,56
 80047dc:	e13ff615 	stw	r4,-40(fp)
 80047e0:	e17ff715 	stw	r5,-36(fp)
 80047e4:	3013883a 	mov	r9,r6
 80047e8:	3811883a 	mov	r8,r7
 80047ec:	e1c00217 	ldw	r7,8(fp)
 80047f0:	e1800317 	ldw	r6,12(fp)
 80047f4:	e1400417 	ldw	r5,16(fp)
 80047f8:	e1000517 	ldw	r4,20(fp)
 80047fc:	e0c00617 	ldw	r3,24(fp)
 8004800:	e0800717 	ldw	r2,28(fp)
 8004804:	e27ff80d 	sth	r9,-32(fp)
 8004808:	e23ff90d 	sth	r8,-28(fp)
 800480c:	e1fffa0d 	sth	r7,-24(fp)
 8004810:	e1bffb0d 	sth	r6,-20(fp)
 8004814:	e17ffc0d 	sth	r5,-16(fp)
 8004818:	e13ffd0d 	sth	r4,-12(fp)
 800481c:	e0fffe0d 	sth	r3,-8(fp)
 8004820:	e0bfff0d 	sth	r2,-4(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
 8004824:	e0fff80f 	ldh	r3,-32(fp)
 8004828:	e0bffc0f 	ldh	r2,-16(fp)
 800482c:	1885383a 	mul	r2,r3,r2
 8004830:	e0bff415 	stw	r2,-48(fp)
  int y_dst_offset = 0;
 8004834:	e03ff515 	stw	zero,-44(fp)
  
  for( y_src = crop_top, y_dst = 0; 
 8004838:	e0bffc0f 	ldh	r2,-16(fp)
 800483c:	e0bff215 	stw	r2,-56(fp)
 8004840:	e03ff315 	stw	zero,-52(fp)
 8004844:	00002206 	br	80048d0 <CropImage16+0x104>
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 8004848:	e0bff517 	ldw	r2,-44(fp)
 800484c:	1085883a 	add	r2,r2,r2
 8004850:	1007883a 	mov	r3,r2
 8004854:	e0bff717 	ldw	r2,-36(fp)
 8004858:	10c9883a 	add	r4,r2,r3
           ( source_buffer + y_src_offset + crop_left ), 
 800485c:	e0fffa0f 	ldh	r3,-24(fp)
 8004860:	e0bff417 	ldw	r2,-48(fp)
 8004864:	1885883a 	add	r2,r3,r2
 8004868:	1085883a 	add	r2,r2,r2
 800486c:	1007883a 	mov	r3,r2
 8004870:	e0bff617 	ldw	r2,-40(fp)
 8004874:	10cb883a 	add	r5,r2,r3
           ((source_width - crop_left - crop_right) << 1));
 8004878:	e0fff80f 	ldh	r3,-32(fp)
 800487c:	e0bffa0f 	ldh	r2,-24(fp)
 8004880:	1887c83a 	sub	r3,r3,r2
 8004884:	e0bffb0f 	ldh	r2,-20(fp)
 8004888:	1885c83a 	sub	r2,r3,r2
 800488c:	1085883a 	add	r2,r2,r2
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
  {
    memcpy(( dest_buffer + y_dst_offset ), 
 8004890:	100d883a 	mov	r6,r2
 8004894:	800fc580 	call	800fc58 <memcpy>
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
       y_src++, y_dst++, y_src_offset += source_width, y_dst_offset += dest_width )
 8004898:	e0bff217 	ldw	r2,-56(fp)
 800489c:	10800044 	addi	r2,r2,1
 80048a0:	e0bff215 	stw	r2,-56(fp)
 80048a4:	e0bff317 	ldw	r2,-52(fp)
 80048a8:	10800044 	addi	r2,r2,1
 80048ac:	e0bff315 	stw	r2,-52(fp)
 80048b0:	e0bff80f 	ldh	r2,-32(fp)
 80048b4:	e0fff417 	ldw	r3,-48(fp)
 80048b8:	1885883a 	add	r2,r3,r2
 80048bc:	e0bff415 	stw	r2,-48(fp)
 80048c0:	e0bffe0f 	ldh	r2,-8(fp)
 80048c4:	e0fff517 	ldw	r3,-44(fp)
 80048c8:	1885883a 	add	r2,r3,r2
 80048cc:	e0bff515 	stw	r2,-44(fp)
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
       y_src <= ( source_height - crop_bottom - 1 ); 
 80048d0:	e0fff90f 	ldh	r3,-28(fp)
 80048d4:	e0bffd0f 	ldh	r2,-12(fp)
 80048d8:	1885c83a 	sub	r2,r3,r2
 80048dc:	10ffffc4 	addi	r3,r2,-1
{
  int y_src, y_dst;
  int y_src_offset = (source_width * crop_top);
  int y_dst_offset = 0;
  
  for( y_src = crop_top, y_dst = 0; 
 80048e0:	e0bff217 	ldw	r2,-56(fp)
 80048e4:	18bfd80e 	bge	r3,r2,8004848 <__alt_data_end+0xf8004848>
  {
    memcpy(( dest_buffer + y_dst_offset ), 
           ( source_buffer + y_src_offset + crop_left ), 
           ((source_width - crop_left - crop_right) << 1));
  }
}
 80048e8:	e037883a 	mov	sp,fp
 80048ec:	dfc00117 	ldw	ra,4(sp)
 80048f0:	df000017 	ldw	fp,0(sp)
 80048f4:	dec00204 	addi	sp,sp,8
 80048f8:	f800283a 	ret

080048fc <vid_set_pixel_cur>:
*           efficient when painting large areas of the screen.
*
******************************************************************/

void vid_set_pixel_cur(int horiz, int vert, unsigned int color, alt_video_display* display)
{
 80048fc:	defffa04 	addi	sp,sp,-24
 8004900:	df000515 	stw	fp,20(sp)
 8004904:	df000504 	addi	fp,sp,20
 8004908:	e13ffc15 	stw	r4,-16(fp)
 800490c:	e17ffd15 	stw	r5,-12(fp)
 8004910:	e1bffe15 	stw	r6,-8(fp)
 8004914:	e1ffff15 	stw	r7,-4(fp)
  int addr;
  
  if( display->color_depth == 32 )
 8004918:	e0bfff17 	ldw	r2,-4(fp)
 800491c:	10800917 	ldw	r2,36(r2)
 8004920:	10800818 	cmpnei	r2,r2,32
 8004924:	10001b1e 	bne	r2,zero,8004994 <vid_set_pixel_cur+0x98>
  {
//      addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_written]) )+ (vert * (display->width * 4)) + horiz * 4);
    addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) )+ (vert * (display->width * 4)) + horiz * 4);
 8004928:	e0bfff17 	ldw	r2,-4(fp)
 800492c:	10800517 	ldw	r2,20(r2)
 8004930:	e0ffff17 	ldw	r3,-4(fp)
 8004934:	10800044 	addi	r2,r2,1
 8004938:	1085883a 	add	r2,r2,r2
 800493c:	1085883a 	add	r2,r2,r2
 8004940:	1885883a 	add	r2,r3,r2
 8004944:	10800017 	ldw	r2,0(r2)
 8004948:	10800117 	ldw	r2,4(r2)
 800494c:	1007883a 	mov	r3,r2
 8004950:	e0bfff17 	ldw	r2,-4(fp)
 8004954:	10800717 	ldw	r2,28(r2)
 8004958:	1085883a 	add	r2,r2,r2
 800495c:	1085883a 	add	r2,r2,r2
 8004960:	1009883a 	mov	r4,r2
 8004964:	e0bffd17 	ldw	r2,-12(fp)
 8004968:	2085383a 	mul	r2,r4,r2
 800496c:	1887883a 	add	r3,r3,r2
 8004970:	e0bffc17 	ldw	r2,-16(fp)
 8004974:	1085883a 	add	r2,r2,r2
 8004978:	1085883a 	add	r2,r2,r2
 800497c:	1885883a 	add	r2,r3,r2
 8004980:	e0bffb15 	stw	r2,-20(fp)
        IOWR_32DIRECT( addr, 0, (unsigned int)(color));
 8004984:	e0bffb17 	ldw	r2,-20(fp)
 8004988:	e0fffe17 	ldw	r3,-8(fp)
 800498c:	10c00035 	stwio	r3,0(r2)
 8004990:	00004b06 	br	8004ac0 <vid_set_pixel_cur+0x1c4>
  }
  
  else if( display->color_depth == 24 )
 8004994:	e0bfff17 	ldw	r2,-4(fp)
 8004998:	10800917 	ldw	r2,36(r2)
 800499c:	10800618 	cmpnei	r2,r2,24
 80049a0:	10002b1e 	bne	r2,zero,8004a50 <vid_set_pixel_cur+0x154>
  {
    addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) )+ (vert * (display->width * 3)) + horiz * 3);
 80049a4:	e0bfff17 	ldw	r2,-4(fp)
 80049a8:	10800517 	ldw	r2,20(r2)
 80049ac:	e0ffff17 	ldw	r3,-4(fp)
 80049b0:	10800044 	addi	r2,r2,1
 80049b4:	1085883a 	add	r2,r2,r2
 80049b8:	1085883a 	add	r2,r2,r2
 80049bc:	1885883a 	add	r2,r3,r2
 80049c0:	10800017 	ldw	r2,0(r2)
 80049c4:	10800117 	ldw	r2,4(r2)
 80049c8:	1009883a 	mov	r4,r2
 80049cc:	e0bfff17 	ldw	r2,-4(fp)
 80049d0:	10c00717 	ldw	r3,28(r2)
 80049d4:	1805883a 	mov	r2,r3
 80049d8:	1085883a 	add	r2,r2,r2
 80049dc:	10c7883a 	add	r3,r2,r3
 80049e0:	e0bffd17 	ldw	r2,-12(fp)
 80049e4:	1885383a 	mul	r2,r3,r2
 80049e8:	2089883a 	add	r4,r4,r2
 80049ec:	e0fffc17 	ldw	r3,-16(fp)
 80049f0:	1805883a 	mov	r2,r3
 80049f4:	1085883a 	add	r2,r2,r2
 80049f8:	10c5883a 	add	r2,r2,r3
 80049fc:	2085883a 	add	r2,r4,r2
 8004a00:	e0bffb15 	stw	r2,-20(fp)
        IOWR_8DIRECT( addr, 0, (unsigned char)(color));
 8004a04:	e0bffb17 	ldw	r2,-20(fp)
 8004a08:	e0fffe17 	ldw	r3,-8(fp)
 8004a0c:	18c03fcc 	andi	r3,r3,255
 8004a10:	10c00025 	stbio	r3,0(r2)
        IOWR_8DIRECT( addr+1, 0, (unsigned char)(color >> 8));
 8004a14:	e0bffb17 	ldw	r2,-20(fp)
 8004a18:	10800044 	addi	r2,r2,1
 8004a1c:	1007883a 	mov	r3,r2
 8004a20:	e0bffe17 	ldw	r2,-8(fp)
 8004a24:	1004d23a 	srli	r2,r2,8
 8004a28:	10803fcc 	andi	r2,r2,255
 8004a2c:	18800025 	stbio	r2,0(r3)
    IOWR_8DIRECT( addr+2, 0, (unsigned char)(color >> 16));
 8004a30:	e0bffb17 	ldw	r2,-20(fp)
 8004a34:	10800084 	addi	r2,r2,2
 8004a38:	1007883a 	mov	r3,r2
 8004a3c:	e0bffe17 	ldw	r2,-8(fp)
 8004a40:	1004d43a 	srli	r2,r2,16
 8004a44:	10803fcc 	andi	r2,r2,255
 8004a48:	18800025 	stbio	r2,0(r3)
 8004a4c:	00001c06 	br	8004ac0 <vid_set_pixel_cur+0x1c4>
  }
  
  else if( display->color_depth == 16 )
 8004a50:	e0bfff17 	ldw	r2,-4(fp)
 8004a54:	10800917 	ldw	r2,36(r2)
 8004a58:	10800418 	cmpnei	r2,r2,16
 8004a5c:	1000181e 	bne	r2,zero,8004ac0 <vid_set_pixel_cur+0x1c4>
  {
    addr = ( ( (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) )+ (vert * (display->width * 2)) + horiz * 2);
 8004a60:	e0bfff17 	ldw	r2,-4(fp)
 8004a64:	10800517 	ldw	r2,20(r2)
 8004a68:	e0ffff17 	ldw	r3,-4(fp)
 8004a6c:	10800044 	addi	r2,r2,1
 8004a70:	1085883a 	add	r2,r2,r2
 8004a74:	1085883a 	add	r2,r2,r2
 8004a78:	1885883a 	add	r2,r3,r2
 8004a7c:	10800017 	ldw	r2,0(r2)
 8004a80:	10800117 	ldw	r2,4(r2)
 8004a84:	1007883a 	mov	r3,r2
 8004a88:	e0bfff17 	ldw	r2,-4(fp)
 8004a8c:	10800717 	ldw	r2,28(r2)
 8004a90:	1085883a 	add	r2,r2,r2
 8004a94:	1009883a 	mov	r4,r2
 8004a98:	e0bffd17 	ldw	r2,-12(fp)
 8004a9c:	2085383a 	mul	r2,r4,r2
 8004aa0:	1887883a 	add	r3,r3,r2
 8004aa4:	e0bffc17 	ldw	r2,-16(fp)
 8004aa8:	1085883a 	add	r2,r2,r2
 8004aac:	1885883a 	add	r2,r3,r2
 8004ab0:	e0bffb15 	stw	r2,-20(fp)
    IOWR_16DIRECT( addr, 0, (int)(color));
 8004ab4:	e0bffb17 	ldw	r2,-20(fp)
 8004ab8:	e0fffe17 	ldw	r3,-8(fp)
 8004abc:	10c0002d 	sthio	r3,0(r2)
    }


}
 8004ac0:	e037883a 	mov	sp,fp
 8004ac4:	df000017 	ldw	fp,0(sp)
 8004ac8:	dec00104 	addi	sp,sp,4
 8004acc:	f800283a 	ret

08004ad0 <vid_draw_line_cur>:
*           vid_draw_horiz_line(), which is much faster than 
*           vid_draw_sloped_line.
*
******************************************************************/
__inline__ void vid_draw_line_cur(int horiz_start, int vert_start, int horiz_end, int vert_end, int width, int color, alt_video_display* display)
{
 8004ad0:	defff704 	addi	sp,sp,-36
 8004ad4:	dfc00815 	stw	ra,32(sp)
 8004ad8:	df000715 	stw	fp,28(sp)
 8004adc:	df000704 	addi	fp,sp,28
 8004ae0:	e13ffc15 	stw	r4,-16(fp)
 8004ae4:	e17ffd15 	stw	r5,-12(fp)
 8004ae8:	e1bffe15 	stw	r6,-8(fp)
 8004aec:	e1ffff15 	stw	r7,-4(fp)
 
  if( vert_start == vert_end )
 8004af0:	e0fffd17 	ldw	r3,-12(fp)
 8004af4:	e0bfff17 	ldw	r2,-4(fp)
 8004af8:	1880101e 	bne	r3,r2,8004b3c <vid_draw_line_cur+0x6c>
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line_cur( (unsigned short)horiz_start, 
 8004afc:	e0bffc17 	ldw	r2,-16(fp)
 8004b00:	113fffcc 	andi	r4,r2,65535
 8004b04:	2120001c 	xori	r4,r4,32768
 8004b08:	21200004 	addi	r4,r4,-32768
 8004b0c:	e0bffe17 	ldw	r2,-8(fp)
 8004b10:	117fffcc 	andi	r5,r2,65535
 8004b14:	2960001c 	xori	r5,r5,32768
 8004b18:	29600004 	addi	r5,r5,-32768
                         (unsigned short)horiz_end, 
                         (unsigned short)vert_start,
 8004b1c:	e0bffd17 	ldw	r2,-12(fp)
//                         (unsigned short)horiz_end,  
//                         (unsigned short)vert_start,
//                         color,
//                         display->buffer_ptrs[display->buffer_being_written]->buffer);

    vid_draw_horiz_line_cur( (unsigned short)horiz_start, 
 8004b20:	10ffffcc 	andi	r3,r2,65535
 8004b24:	e0800417 	ldw	r2,16(fp)
 8004b28:	d8800015 	stw	r2,0(sp)
 8004b2c:	180d883a 	mov	r6,r3
 8004b30:	e1c00317 	ldw	r7,12(fp)
 8004b34:	8004b940 	call	8004b94 <vid_draw_horiz_line_cur>
 8004b38:	00001106 	br	8004b80 <vid_draw_line_cur+0xb0>
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line_cur( (unsigned short)horiz_start, 
 8004b3c:	e0bffc17 	ldw	r2,-16(fp)
 8004b40:	113fffcc 	andi	r4,r2,65535
                          (unsigned short)vert_start, 
 8004b44:	e0bffd17 	ldw	r2,-12(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line_cur( (unsigned short)horiz_start, 
 8004b48:	117fffcc 	andi	r5,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
 8004b4c:	e0bffe17 	ldw	r2,-8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line_cur( (unsigned short)horiz_start, 
 8004b50:	11bfffcc 	andi	r6,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
 8004b54:	e0bfff17 	ldw	r2,-4(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line_cur( (unsigned short)horiz_start, 
 8004b58:	10ffffcc 	andi	r3,r2,65535
                          (unsigned short)vert_start, 
                          (unsigned short)horiz_end, 
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
 8004b5c:	e0800217 	ldw	r2,8(fp)
                         color,
                         display );
  }
  else
  {
    vid_draw_sloped_line_cur( (unsigned short)horiz_start, 
 8004b60:	10bfffcc 	andi	r2,r2,65535
 8004b64:	d8800015 	stw	r2,0(sp)
 8004b68:	e0800317 	ldw	r2,12(fp)
 8004b6c:	d8800115 	stw	r2,4(sp)
 8004b70:	e0800417 	ldw	r2,16(fp)
 8004b74:	d8800215 	stw	r2,8(sp)
 8004b78:	180f883a 	mov	r7,r3
 8004b7c:	8004ecc0 	call	8004ecc <vid_draw_sloped_line_cur>
                          (unsigned short)vert_end, 
                          (unsigned short)width, 
                          color,
                          display );
  }
}
 8004b80:	e037883a 	mov	sp,fp
 8004b84:	dfc00117 	ldw	ra,4(sp)
 8004b88:	df000017 	ldw	fp,0(sp)
 8004b8c:	dec00204 	addi	sp,sp,8
 8004b90:	f800283a 	ret

08004b94 <vid_draw_horiz_line_cur>:
*  Purpose: Draws a horizontal line on the screen quickly.
*           Good for filling stuff.
*
******************************************************************/
void vid_draw_horiz_line_cur (short Hstart, short Hend, int V, int color, alt_video_display* display)
{
 8004b94:	defff504 	addi	sp,sp,-44
 8004b98:	dfc00a15 	stw	ra,40(sp)
 8004b9c:	df000915 	stw	fp,36(sp)
 8004ba0:	df000904 	addi	fp,sp,36
 8004ba4:	2007883a 	mov	r3,r4
 8004ba8:	2805883a 	mov	r2,r5
 8004bac:	e1bffe15 	stw	r6,-8(fp)
 8004bb0:	e1ffff15 	stw	r7,-4(fp)
 8004bb4:	e0fffc0d 	sth	r3,-16(fp)
 8004bb8:	e0bffd0d 	sth	r2,-12(fp)

  int i;
  int addr;
  int bytes_per_line;

  char *fast_buffer = malloc(1024 * 3);
 8004bbc:	01030004 	movi	r4,3072
 8004bc0:	800f4880 	call	800f488 <malloc>
 8004bc4:	e0bff815 	stw	r2,-32(fp)

  if( Hstart > Hend )
 8004bc8:	e0bffc0f 	ldh	r2,-16(fp)
 8004bcc:	e0fffd0f 	ldh	r3,-12(fp)
 8004bd0:	1880060e 	bge	r3,r2,8004bec <vid_draw_horiz_line_cur+0x58>
  {
    short temp = Hstart;
 8004bd4:	e0bffc0b 	ldhu	r2,-16(fp)
 8004bd8:	e0bff90d 	sth	r2,-28(fp)
    Hstart = Hend;
 8004bdc:	e0bffd0b 	ldhu	r2,-12(fp)
 8004be0:	e0bffc0d 	sth	r2,-16(fp)
    Hend = temp;
 8004be4:	e0bff90b 	ldhu	r2,-28(fp)
 8004be8:	e0bffd0d 	sth	r2,-12(fp)
  }
  
  if(display->color_depth == 32)
 8004bec:	e0800217 	ldw	r2,8(fp)
 8004bf0:	10800917 	ldw	r2,36(r2)
 8004bf4:	10800818 	cmpnei	r2,r2,32
 8004bf8:	1000301e 	bne	r2,zero,8004cbc <vid_draw_horiz_line_cur+0x128>
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) + ((V * (display->width * 4)) + (Hstart * 4));
 8004bfc:	e0800217 	ldw	r2,8(fp)
 8004c00:	10800517 	ldw	r2,20(r2)
 8004c04:	e0c00217 	ldw	r3,8(fp)
 8004c08:	10800044 	addi	r2,r2,1
 8004c0c:	1085883a 	add	r2,r2,r2
 8004c10:	1085883a 	add	r2,r2,r2
 8004c14:	1885883a 	add	r2,r3,r2
 8004c18:	10800017 	ldw	r2,0(r2)
 8004c1c:	10800117 	ldw	r2,4(r2)
 8004c20:	1009883a 	mov	r4,r2
 8004c24:	e0800217 	ldw	r2,8(fp)
 8004c28:	10800717 	ldw	r2,28(r2)
 8004c2c:	1085883a 	add	r2,r2,r2
 8004c30:	1085883a 	add	r2,r2,r2
 8004c34:	1007883a 	mov	r3,r2
 8004c38:	e0bffe17 	ldw	r2,-8(fp)
 8004c3c:	1887383a 	mul	r3,r3,r2
 8004c40:	e0bffc0f 	ldh	r2,-16(fp)
 8004c44:	1085883a 	add	r2,r2,r2
 8004c48:	1085883a 	add	r2,r2,r2
 8004c4c:	1885883a 	add	r2,r3,r2
 8004c50:	2085883a 	add	r2,r4,r2
 8004c54:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 4);
 8004c58:	e0fffd0f 	ldh	r3,-12(fp)
 8004c5c:	e0bffc0f 	ldh	r2,-16(fp)
 8004c60:	1885c83a 	sub	r2,r3,r2
 8004c64:	1085883a 	add	r2,r2,r2
 8004c68:	1085883a 	add	r2,r2,r2
 8004c6c:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=4) 
 8004c70:	e03ff715 	stw	zero,-36(fp)
 8004c74:	00000806 	br	8004c98 <vid_draw_horiz_line_cur+0x104>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
 8004c78:	e0bff717 	ldw	r2,-36(fp)
 8004c7c:	e0fff817 	ldw	r3,-32(fp)
 8004c80:	1885883a 	add	r2,r3,r2
 8004c84:	e0ffff17 	ldw	r3,-4(fp)
 8004c88:	10c00015 	stw	r3,0(r2)
  
  if(display->color_depth == 32)
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) + ((V * (display->width * 4)) + (Hstart * 4));
    bytes_per_line = ((Hend - Hstart) * 4);
    for (i = 0; i < bytes_per_line; i+=4) 
 8004c8c:	e0bff717 	ldw	r2,-36(fp)
 8004c90:	10800104 	addi	r2,r2,4
 8004c94:	e0bff715 	stw	r2,-36(fp)
 8004c98:	e0fff717 	ldw	r3,-36(fp)
 8004c9c:	e0bffb17 	ldw	r2,-20(fp)
 8004ca0:	18bff516 	blt	r3,r2,8004c78 <__alt_data_end+0xf8004c78>
    {
      // Does the right hand side of this assignment determine the size?
      *(int*)(fast_buffer + i) = (unsigned int)color;
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 8004ca4:	e0fffa17 	ldw	r3,-24(fp)
 8004ca8:	e0bffb17 	ldw	r2,-20(fp)
 8004cac:	1809883a 	mov	r4,r3
 8004cb0:	e17ff817 	ldw	r5,-32(fp)
 8004cb4:	100d883a 	mov	r6,r2
 8004cb8:	800fc580 	call	800fc58 <memcpy>
  }
  if(display->color_depth == 24)
 8004cbc:	e0800217 	ldw	r2,8(fp)
 8004cc0:	10800917 	ldw	r2,36(r2)
 8004cc4:	10800618 	cmpnei	r2,r2,24
 8004cc8:	1000411e 	bne	r2,zero,8004dd0 <vid_draw_horiz_line_cur+0x23c>
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) + ((V * (display->width * 3)) + (Hstart * 3));
 8004ccc:	e0800217 	ldw	r2,8(fp)
 8004cd0:	10800517 	ldw	r2,20(r2)
 8004cd4:	e0c00217 	ldw	r3,8(fp)
 8004cd8:	10800044 	addi	r2,r2,1
 8004cdc:	1085883a 	add	r2,r2,r2
 8004ce0:	1085883a 	add	r2,r2,r2
 8004ce4:	1885883a 	add	r2,r3,r2
 8004ce8:	10800017 	ldw	r2,0(r2)
 8004cec:	10800117 	ldw	r2,4(r2)
 8004cf0:	100b883a 	mov	r5,r2
 8004cf4:	e0800217 	ldw	r2,8(fp)
 8004cf8:	10c00717 	ldw	r3,28(r2)
 8004cfc:	1805883a 	mov	r2,r3
 8004d00:	1085883a 	add	r2,r2,r2
 8004d04:	10c7883a 	add	r3,r2,r3
 8004d08:	e0bffe17 	ldw	r2,-8(fp)
 8004d0c:	1889383a 	mul	r4,r3,r2
 8004d10:	e0fffc0f 	ldh	r3,-16(fp)
 8004d14:	1805883a 	mov	r2,r3
 8004d18:	1085883a 	add	r2,r2,r2
 8004d1c:	10c5883a 	add	r2,r2,r3
 8004d20:	2085883a 	add	r2,r4,r2
 8004d24:	2885883a 	add	r2,r5,r2
 8004d28:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 3);
 8004d2c:	e0fffd0f 	ldh	r3,-12(fp)
 8004d30:	e0bffc0f 	ldh	r2,-16(fp)
 8004d34:	1887c83a 	sub	r3,r3,r2
 8004d38:	1805883a 	mov	r2,r3
 8004d3c:	1085883a 	add	r2,r2,r2
 8004d40:	10c5883a 	add	r2,r2,r3
 8004d44:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=3) 
 8004d48:	e03ff715 	stw	zero,-36(fp)
 8004d4c:	00001606 	br	8004da8 <vid_draw_horiz_line_cur+0x214>
    {
      *(fast_buffer + i) = (unsigned char)color;
 8004d50:	e0bff717 	ldw	r2,-36(fp)
 8004d54:	e0fff817 	ldw	r3,-32(fp)
 8004d58:	1885883a 	add	r2,r3,r2
 8004d5c:	e0ffff17 	ldw	r3,-4(fp)
 8004d60:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 8004d64:	e0bff717 	ldw	r2,-36(fp)
 8004d68:	10800044 	addi	r2,r2,1
 8004d6c:	e0fff817 	ldw	r3,-32(fp)
 8004d70:	1885883a 	add	r2,r3,r2
 8004d74:	e0ffff17 	ldw	r3,-4(fp)
 8004d78:	1807d23a 	srai	r3,r3,8
 8004d7c:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
 8004d80:	e0bff717 	ldw	r2,-36(fp)
 8004d84:	10800084 	addi	r2,r2,2
 8004d88:	e0fff817 	ldw	r3,-32(fp)
 8004d8c:	1885883a 	add	r2,r3,r2
 8004d90:	e0ffff17 	ldw	r3,-4(fp)
 8004d94:	1807d43a 	srai	r3,r3,16
 8004d98:	10c00005 	stb	r3,0(r2)
  }
  if(display->color_depth == 24)
  { 
    addr = (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) + ((V * (display->width * 3)) + (Hstart * 3));
    bytes_per_line = ((Hend - Hstart) * 3);
    for (i = 0; i < bytes_per_line; i+=3) 
 8004d9c:	e0bff717 	ldw	r2,-36(fp)
 8004da0:	108000c4 	addi	r2,r2,3
 8004da4:	e0bff715 	stw	r2,-36(fp)
 8004da8:	e0fff717 	ldw	r3,-36(fp)
 8004dac:	e0bffb17 	ldw	r2,-20(fp)
 8004db0:	18bfe716 	blt	r3,r2,8004d50 <__alt_data_end+0xf8004d50>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
      *(fast_buffer + i + 2) = (unsigned char)(color >> 16);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 8004db4:	e0fffa17 	ldw	r3,-24(fp)
 8004db8:	e0bffb17 	ldw	r2,-20(fp)
 8004dbc:	1809883a 	mov	r4,r3
 8004dc0:	e17ff817 	ldw	r5,-32(fp)
 8004dc4:	100d883a 	mov	r6,r2
 8004dc8:	800fc580 	call	800fc58 <memcpy>
 8004dcc:	00003806 	br	8004eb0 <vid_draw_horiz_line_cur+0x31c>
  }
  else if(display->color_depth == 16)
 8004dd0:	e0800217 	ldw	r2,8(fp)
 8004dd4:	10800917 	ldw	r2,36(r2)
 8004dd8:	10800418 	cmpnei	r2,r2,16
 8004ddc:	1000341e 	bne	r2,zero,8004eb0 <vid_draw_horiz_line_cur+0x31c>
  {
    addr = (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) + ((V * (display->width * 2)) + (Hstart * 2));
 8004de0:	e0800217 	ldw	r2,8(fp)
 8004de4:	10800517 	ldw	r2,20(r2)
 8004de8:	e0c00217 	ldw	r3,8(fp)
 8004dec:	10800044 	addi	r2,r2,1
 8004df0:	1085883a 	add	r2,r2,r2
 8004df4:	1085883a 	add	r2,r2,r2
 8004df8:	1885883a 	add	r2,r3,r2
 8004dfc:	10800017 	ldw	r2,0(r2)
 8004e00:	10800117 	ldw	r2,4(r2)
 8004e04:	1009883a 	mov	r4,r2
 8004e08:	e0800217 	ldw	r2,8(fp)
 8004e0c:	10800717 	ldw	r2,28(r2)
 8004e10:	1085883a 	add	r2,r2,r2
 8004e14:	1007883a 	mov	r3,r2
 8004e18:	e0bffe17 	ldw	r2,-8(fp)
 8004e1c:	1887383a 	mul	r3,r3,r2
 8004e20:	e0bffc0f 	ldh	r2,-16(fp)
 8004e24:	1085883a 	add	r2,r2,r2
 8004e28:	1885883a 	add	r2,r3,r2
 8004e2c:	2085883a 	add	r2,r4,r2
 8004e30:	e0bffa15 	stw	r2,-24(fp)
    bytes_per_line = ((Hend - Hstart) * 2);
 8004e34:	e0fffd0f 	ldh	r3,-12(fp)
 8004e38:	e0bffc0f 	ldh	r2,-16(fp)
 8004e3c:	1885c83a 	sub	r2,r3,r2
 8004e40:	1085883a 	add	r2,r2,r2
 8004e44:	e0bffb15 	stw	r2,-20(fp)
    for (i = 0; i < bytes_per_line; i+=2) 
 8004e48:	e03ff715 	stw	zero,-36(fp)
 8004e4c:	00000f06 	br	8004e8c <vid_draw_horiz_line_cur+0x2f8>
    {
      *(fast_buffer + i) = (unsigned char)color;
 8004e50:	e0bff717 	ldw	r2,-36(fp)
 8004e54:	e0fff817 	ldw	r3,-32(fp)
 8004e58:	1885883a 	add	r2,r3,r2
 8004e5c:	e0ffff17 	ldw	r3,-4(fp)
 8004e60:	10c00005 	stb	r3,0(r2)
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
 8004e64:	e0bff717 	ldw	r2,-36(fp)
 8004e68:	10800044 	addi	r2,r2,1
 8004e6c:	e0fff817 	ldw	r3,-32(fp)
 8004e70:	1885883a 	add	r2,r3,r2
 8004e74:	e0ffff17 	ldw	r3,-4(fp)
 8004e78:	1807d23a 	srai	r3,r3,8
 8004e7c:	10c00005 	stb	r3,0(r2)
  }
  else if(display->color_depth == 16)
  {
    addr = (int)(display->buffer_ptrs[display->buffer_being_displayed]->buffer) + ((V * (display->width * 2)) + (Hstart * 2));
    bytes_per_line = ((Hend - Hstart) * 2);
    for (i = 0; i < bytes_per_line; i+=2) 
 8004e80:	e0bff717 	ldw	r2,-36(fp)
 8004e84:	10800084 	addi	r2,r2,2
 8004e88:	e0bff715 	stw	r2,-36(fp)
 8004e8c:	e0fff717 	ldw	r3,-36(fp)
 8004e90:	e0bffb17 	ldw	r2,-20(fp)
 8004e94:	18bfee16 	blt	r3,r2,8004e50 <__alt_data_end+0xf8004e50>
    {
      *(fast_buffer + i) = (unsigned char)color;
      *(fast_buffer + i + 1) = (unsigned char)(color >> 8);
    }
    memcpy( (void*)addr, fast_buffer, bytes_per_line );
 8004e98:	e0fffa17 	ldw	r3,-24(fp)
 8004e9c:	e0bffb17 	ldw	r2,-20(fp)
 8004ea0:	1809883a 	mov	r4,r3
 8004ea4:	e17ff817 	ldw	r5,-32(fp)
 8004ea8:	100d883a 	mov	r6,r2
 8004eac:	800fc580 	call	800fc58 <memcpy>
  }
  free(fast_buffer);
 8004eb0:	e13ff817 	ldw	r4,-32(fp)
 8004eb4:	800f49c0 	call	800f49c <free>
}
 8004eb8:	e037883a 	mov	sp,fp
 8004ebc:	dfc00117 	ldw	ra,4(sp)
 8004ec0:	df000017 	ldw	fp,0(sp)
 8004ec4:	dec00204 	addi	sp,sp,8
 8004ec8:	f800283a 	ret

08004ecc <vid_draw_sloped_line_cur>:
                           unsigned short horiz_end, 
                           unsigned short vert_end, 
                           unsigned short width, 
                           int color, 
                           alt_video_display* display)
{
 8004ecc:	deffef04 	addi	sp,sp,-68
 8004ed0:	dfc01015 	stw	ra,64(sp)
 8004ed4:	df000f15 	stw	fp,60(sp)
 8004ed8:	df000f04 	addi	fp,sp,60
 8004edc:	2011883a 	mov	r8,r4
 8004ee0:	3009883a 	mov	r4,r6
 8004ee4:	3807883a 	mov	r3,r7
 8004ee8:	e0800217 	ldw	r2,8(fp)
 8004eec:	e23ffb0d 	sth	r8,-20(fp)
 8004ef0:	e17ffc0d 	sth	r5,-16(fp)
 8004ef4:	e13ffd0d 	sth	r4,-12(fp)
 8004ef8:	e0fffe0d 	sth	r3,-8(fp)
 8004efc:	e0bfff0d 	sth	r2,-4(fp)
  // Find the vertical and horizontal distance between the two points
  int horiz_delta = abs(horiz_end-horiz_start);
 8004f00:	e0fffd0b 	ldhu	r3,-12(fp)
 8004f04:	e0bffb0b 	ldhu	r2,-20(fp)
 8004f08:	1885c83a 	sub	r2,r3,r2
 8004f0c:	1000010e 	bge	r2,zero,8004f14 <vid_draw_sloped_line_cur+0x48>
 8004f10:	0085c83a 	sub	r2,zero,r2
 8004f14:	e0bff115 	stw	r2,-60(fp)
  int vert_delta = abs(vert_end-vert_start);
 8004f18:	e0fffe0b 	ldhu	r3,-8(fp)
 8004f1c:	e0bffc0b 	ldhu	r2,-16(fp)
 8004f20:	1885c83a 	sub	r2,r3,r2
 8004f24:	1000010e 	bge	r2,zero,8004f2c <vid_draw_sloped_line_cur+0x60>
 8004f28:	0085c83a 	sub	r2,zero,r2
 8004f2c:	e0bff215 	stw	r2,-56(fp)

  // Find out what direction we are going
  int horiz_incr, vert_incr;
  if (horiz_start > horiz_end) { horiz_incr=-1; } else { horiz_incr=1; }
 8004f30:	e0bffb0b 	ldhu	r2,-20(fp)
 8004f34:	e0fffd0b 	ldhu	r3,-12(fp)
 8004f38:	1880032e 	bgeu	r3,r2,8004f48 <vid_draw_sloped_line_cur+0x7c>
 8004f3c:	00bfffc4 	movi	r2,-1
 8004f40:	e0bff315 	stw	r2,-52(fp)
 8004f44:	00000206 	br	8004f50 <vid_draw_sloped_line_cur+0x84>
 8004f48:	00800044 	movi	r2,1
 8004f4c:	e0bff315 	stw	r2,-52(fp)
  if (vert_start > vert_end) { vert_incr=-1; } else { vert_incr=1; }
 8004f50:	e0bffc0b 	ldhu	r2,-16(fp)
 8004f54:	e0fffe0b 	ldhu	r3,-8(fp)
 8004f58:	1880032e 	bgeu	r3,r2,8004f68 <vid_draw_sloped_line_cur+0x9c>
 8004f5c:	00bfffc4 	movi	r2,-1
 8004f60:	e0bff415 	stw	r2,-48(fp)
 8004f64:	00000206 	br	8004f70 <vid_draw_sloped_line_cur+0xa4>
 8004f68:	00800044 	movi	r2,1
 8004f6c:	e0bff415 	stw	r2,-48(fp)

  // Find out which axis is always incremented when drawing the line
  // If it's the horizontal axis
  if (horiz_delta >= vert_delta) {
 8004f70:	e0fff117 	ldw	r3,-60(fp)
 8004f74:	e0bff217 	ldw	r2,-56(fp)
 8004f78:	18803516 	blt	r3,r2,8005050 <vid_draw_sloped_line_cur+0x184>
    int dPr   = vert_delta<<1;
 8004f7c:	e0bff217 	ldw	r2,-56(fp)
 8004f80:	1085883a 	add	r2,r2,r2
 8004f84:	e0bff715 	stw	r2,-36(fp)
    int dPru  = dPr - (horiz_delta<<1);
 8004f88:	e0bff117 	ldw	r2,-60(fp)
 8004f8c:	1085883a 	add	r2,r2,r2
 8004f90:	1007883a 	mov	r3,r2
 8004f94:	e0bff717 	ldw	r2,-36(fp)
 8004f98:	10c5c83a 	sub	r2,r2,r3
 8004f9c:	e0bff815 	stw	r2,-32(fp)
    int P     = dPr - horiz_delta;
 8004fa0:	e0fff717 	ldw	r3,-36(fp)
 8004fa4:	e0bff117 	ldw	r2,-60(fp)
 8004fa8:	1885c83a 	sub	r2,r3,r2
 8004fac:	e0bff515 	stw	r2,-44(fp)

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 8004fb0:	00002406 	br	8005044 <vid_draw_sloped_line_cur+0x178>
      // plot the pixel
      vid_set_pixel_cur(horiz_start, vert_start, color, display);
 8004fb4:	e13ffb0b 	ldhu	r4,-20(fp)
 8004fb8:	e0fffc0b 	ldhu	r3,-16(fp)
 8004fbc:	e0800317 	ldw	r2,12(fp)
 8004fc0:	180b883a 	mov	r5,r3
 8004fc4:	100d883a 	mov	r6,r2
 8004fc8:	e1c00417 	ldw	r7,16(fp)
 8004fcc:	80048fc0 	call	80048fc <vid_set_pixel_cur>
      // If we're moving both up and right
      if (P > 0) {
 8004fd0:	e0bff517 	ldw	r2,-44(fp)
 8004fd4:	00800f0e 	bge	zero,r2,8005014 <vid_draw_sloped_line_cur+0x148>
        horiz_start+=horiz_incr;
 8004fd8:	e0bff317 	ldw	r2,-52(fp)
 8004fdc:	1007883a 	mov	r3,r2
 8004fe0:	e0bffb0b 	ldhu	r2,-20(fp)
 8004fe4:	1885883a 	add	r2,r3,r2
 8004fe8:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 8004fec:	e0bff417 	ldw	r2,-48(fp)
 8004ff0:	1007883a 	mov	r3,r2
 8004ff4:	e0bffc0b 	ldhu	r2,-16(fp)
 8004ff8:	1885883a 	add	r2,r3,r2
 8004ffc:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 8005000:	e0fff517 	ldw	r3,-44(fp)
 8005004:	e0bff817 	ldw	r2,-32(fp)
 8005008:	1885883a 	add	r2,r3,r2
 800500c:	e0bff515 	stw	r2,-44(fp)
 8005010:	00000906 	br	8005038 <vid_draw_sloped_line_cur+0x16c>
      } else {
        horiz_start+=horiz_incr;
 8005014:	e0bff317 	ldw	r2,-52(fp)
 8005018:	1007883a 	mov	r3,r2
 800501c:	e0bffb0b 	ldhu	r2,-20(fp)
 8005020:	1885883a 	add	r2,r3,r2
 8005024:	e0bffb0d 	sth	r2,-20(fp)
        P+=dPr;
 8005028:	e0fff517 	ldw	r3,-44(fp)
 800502c:	e0bff717 	ldw	r2,-36(fp)
 8005030:	1885883a 	add	r2,r3,r2
 8005034:	e0bff515 	stw	r2,-44(fp)
    int dPr   = vert_delta<<1;
    int dPru  = dPr - (horiz_delta<<1);
    int P     = dPr - horiz_delta;

    // Process the line, one horizontal point at at time
    for (; horiz_delta >= 0; horiz_delta--) {
 8005038:	e0bff117 	ldw	r2,-60(fp)
 800503c:	10bfffc4 	addi	r2,r2,-1
 8005040:	e0bff115 	stw	r2,-60(fp)
 8005044:	e0bff117 	ldw	r2,-60(fp)
 8005048:	103fda0e 	bge	r2,zero,8004fb4 <__alt_data_end+0xf8004fb4>
 800504c:	00003406 	br	8005120 <vid_draw_sloped_line_cur+0x254>
        P+=dPr;
      }
    }
  // If it's the vertical axis
  } else {
    int dPr   = horiz_delta<<1;
 8005050:	e0bff117 	ldw	r2,-60(fp)
 8005054:	1085883a 	add	r2,r2,r2
 8005058:	e0bff915 	stw	r2,-28(fp)
    int dPru  = dPr - (vert_delta<<1);
 800505c:	e0bff217 	ldw	r2,-56(fp)
 8005060:	1085883a 	add	r2,r2,r2
 8005064:	1007883a 	mov	r3,r2
 8005068:	e0bff917 	ldw	r2,-28(fp)
 800506c:	10c5c83a 	sub	r2,r2,r3
 8005070:	e0bffa15 	stw	r2,-24(fp)
    int P     = dPr - vert_delta;
 8005074:	e0fff917 	ldw	r3,-28(fp)
 8005078:	e0bff217 	ldw	r2,-56(fp)
 800507c:	1885c83a 	sub	r2,r3,r2
 8005080:	e0bff615 	stw	r2,-40(fp)

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 8005084:	00002406 	br	8005118 <vid_draw_sloped_line_cur+0x24c>
      // plot the pixel
      vid_set_pixel_cur(horiz_start, vert_start, color, display);
 8005088:	e13ffb0b 	ldhu	r4,-20(fp)
 800508c:	e0fffc0b 	ldhu	r3,-16(fp)
 8005090:	e0800317 	ldw	r2,12(fp)
 8005094:	180b883a 	mov	r5,r3
 8005098:	100d883a 	mov	r6,r2
 800509c:	e1c00417 	ldw	r7,16(fp)
 80050a0:	80048fc0 	call	80048fc <vid_set_pixel_cur>
      // If we're moving both up and right
      if (P > 0) {
 80050a4:	e0bff617 	ldw	r2,-40(fp)
 80050a8:	00800f0e 	bge	zero,r2,80050e8 <vid_draw_sloped_line_cur+0x21c>
        horiz_start+=horiz_incr;
 80050ac:	e0bff317 	ldw	r2,-52(fp)
 80050b0:	1007883a 	mov	r3,r2
 80050b4:	e0bffb0b 	ldhu	r2,-20(fp)
 80050b8:	1885883a 	add	r2,r3,r2
 80050bc:	e0bffb0d 	sth	r2,-20(fp)
        vert_start+=vert_incr;
 80050c0:	e0bff417 	ldw	r2,-48(fp)
 80050c4:	1007883a 	mov	r3,r2
 80050c8:	e0bffc0b 	ldhu	r2,-16(fp)
 80050cc:	1885883a 	add	r2,r3,r2
 80050d0:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPru;
 80050d4:	e0fff617 	ldw	r3,-40(fp)
 80050d8:	e0bffa17 	ldw	r2,-24(fp)
 80050dc:	1885883a 	add	r2,r3,r2
 80050e0:	e0bff615 	stw	r2,-40(fp)
 80050e4:	00000906 	br	800510c <vid_draw_sloped_line_cur+0x240>
      } else {
        vert_start+=vert_incr;
 80050e8:	e0bff417 	ldw	r2,-48(fp)
 80050ec:	1007883a 	mov	r3,r2
 80050f0:	e0bffc0b 	ldhu	r2,-16(fp)
 80050f4:	1885883a 	add	r2,r3,r2
 80050f8:	e0bffc0d 	sth	r2,-16(fp)
        P+=dPr;
 80050fc:	e0fff617 	ldw	r3,-40(fp)
 8005100:	e0bff917 	ldw	r2,-28(fp)
 8005104:	1885883a 	add	r2,r3,r2
 8005108:	e0bff615 	stw	r2,-40(fp)
    int dPr   = horiz_delta<<1;
    int dPru  = dPr - (vert_delta<<1);
    int P     = dPr - vert_delta;

    // Process the line, one vertical point at at time
    for (; vert_delta>=0; vert_delta--) {
 800510c:	e0bff217 	ldw	r2,-56(fp)
 8005110:	10bfffc4 	addi	r2,r2,-1
 8005114:	e0bff215 	stw	r2,-56(fp)
 8005118:	e0bff217 	ldw	r2,-56(fp)
 800511c:	103fda0e 	bge	r2,zero,8005088 <__alt_data_end+0xf8005088>
        vert_start+=vert_incr;
        P+=dPr;
      }
    }
  }
}
 8005120:	e037883a 	mov	sp,fp
 8005124:	dfc00117 	ldw	ra,4(sp)
 8005128:	df000017 	ldw	fp,0(sp)
 800512c:	dec00204 	addi	sp,sp,8
 8005130:	f800283a 	ret

08005134 <vid_draw_circle_cur>:
*  tells the function whether or not to fill in the box.  1 = fill,
*  0 = do not fill.
*
******************************************************************/
int vid_draw_circle_cur(int Hcenter, int Vcenter, int radius, int color, char fill, alt_video_display* display)
{
 8005134:	defff104 	addi	sp,sp,-60
 8005138:	dfc00e15 	stw	ra,56(sp)
 800513c:	df000d15 	stw	fp,52(sp)
 8005140:	df000d04 	addi	fp,sp,52
 8005144:	e13ffb15 	stw	r4,-20(fp)
 8005148:	e17ffc15 	stw	r5,-16(fp)
 800514c:	e1bffd15 	stw	r6,-12(fp)
 8005150:	e1fffe15 	stw	r7,-8(fp)
 8005154:	e0800217 	ldw	r2,8(fp)
 8005158:	e0bfff05 	stb	r2,-4(fp)
  int x = 0;
 800515c:	e03ff815 	stw	zero,-32(fp)
  int y = radius;
 8005160:	e0bffd17 	ldw	r2,-12(fp)
 8005164:	e0bff915 	stw	r2,-28(fp)
  int p = (5 - radius*4)/4;
 8005168:	e0bffd17 	ldw	r2,-12(fp)
 800516c:	10bfff24 	muli	r2,r2,-4
 8005170:	10800144 	addi	r2,r2,5
 8005174:	1000010e 	bge	r2,zero,800517c <vid_draw_circle_cur+0x48>
 8005178:	108000c4 	addi	r2,r2,3
 800517c:	1005d0ba 	srai	r2,r2,2
 8005180:	e0bffa15 	stw	r2,-24(fp)

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points_cur(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 8005184:	e0bfff07 	ldb	r2,-4(fp)
 8005188:	d8000015 	stw	zero,0(sp)
 800518c:	d8000115 	stw	zero,4(sp)
 8005190:	e0fffe17 	ldw	r3,-8(fp)
 8005194:	d8c00215 	stw	r3,8(sp)
 8005198:	d8800315 	stw	r2,12(sp)
 800519c:	e0800317 	ldw	r2,12(fp)
 80051a0:	d8800415 	stw	r2,16(sp)
 80051a4:	e13ffb17 	ldw	r4,-20(fp)
 80051a8:	e17ffc17 	ldw	r5,-16(fp)
 80051ac:	e1bff817 	ldw	r6,-32(fp)
 80051b0:	e1fff917 	ldw	r7,-28(fp)
 80051b4:	80052700 	call	8005270 <vid_round_corner_points_cur>

  // Now start moving out from those points until the lines meet
  while (x < y) {
 80051b8:	00002406 	br	800524c <vid_draw_circle_cur+0x118>
    x++;
 80051bc:	e0bff817 	ldw	r2,-32(fp)
 80051c0:	10800044 	addi	r2,r2,1
 80051c4:	e0bff815 	stw	r2,-32(fp)
    if (p < 0) {
 80051c8:	e0bffa17 	ldw	r2,-24(fp)
 80051cc:	1000070e 	bge	r2,zero,80051ec <vid_draw_circle_cur+0xb8>
      p += 2*x+1;
 80051d0:	e0bff817 	ldw	r2,-32(fp)
 80051d4:	1085883a 	add	r2,r2,r2
 80051d8:	10800044 	addi	r2,r2,1
 80051dc:	e0fffa17 	ldw	r3,-24(fp)
 80051e0:	1885883a 	add	r2,r3,r2
 80051e4:	e0bffa15 	stw	r2,-24(fp)
 80051e8:	00000b06 	br	8005218 <vid_draw_circle_cur+0xe4>
    } else {
      y--;
 80051ec:	e0bff917 	ldw	r2,-28(fp)
 80051f0:	10bfffc4 	addi	r2,r2,-1
 80051f4:	e0bff915 	stw	r2,-28(fp)
      p += 2*(x-y)+1;
 80051f8:	e0fff817 	ldw	r3,-32(fp)
 80051fc:	e0bff917 	ldw	r2,-28(fp)
 8005200:	1885c83a 	sub	r2,r3,r2
 8005204:	1085883a 	add	r2,r2,r2
 8005208:	10800044 	addi	r2,r2,1
 800520c:	e0fffa17 	ldw	r3,-24(fp)
 8005210:	1885883a 	add	r2,r3,r2
 8005214:	e0bffa15 	stw	r2,-24(fp)
    }
    vid_round_corner_points_cur(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
 8005218:	e0bfff07 	ldb	r2,-4(fp)
 800521c:	d8000015 	stw	zero,0(sp)
 8005220:	d8000115 	stw	zero,4(sp)
 8005224:	e0fffe17 	ldw	r3,-8(fp)
 8005228:	d8c00215 	stw	r3,8(sp)
 800522c:	d8800315 	stw	r2,12(sp)
 8005230:	e0800317 	ldw	r2,12(fp)
 8005234:	d8800415 	stw	r2,16(sp)
 8005238:	e13ffb17 	ldw	r4,-20(fp)
 800523c:	e17ffc17 	ldw	r5,-16(fp)
 8005240:	e1bff817 	ldw	r6,-32(fp)
 8005244:	e1fff917 	ldw	r7,-28(fp)
 8005248:	80052700 	call	8005270 <vid_round_corner_points_cur>

  // Start the circle with the top, bottom, left, and right pixels.
  vid_round_corner_points_cur(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);

  // Now start moving out from those points until the lines meet
  while (x < y) {
 800524c:	e0fff817 	ldw	r3,-32(fp)
 8005250:	e0bff917 	ldw	r2,-28(fp)
 8005254:	18bfd916 	blt	r3,r2,80051bc <__alt_data_end+0xf80051bc>
      y--;
      p += 2*(x-y)+1;
    }
    vid_round_corner_points_cur(Hcenter, Vcenter, x, y, 0, 0, color, fill, display);
  }
  return (0);
 8005258:	0005883a 	mov	r2,zero
}
 800525c:	e037883a 	mov	sp,fp
 8005260:	dfc00117 	ldw	ra,4(sp)
 8005264:	df000017 	ldw	fp,0(sp)
 8005268:	dec00204 	addi	sp,sp,8
 800526c:	f800283a 	ret

08005270 <vid_round_corner_points_cur>:
******************************************************************/

void vid_round_corner_points_cur( int cx, int cy, int x, int y, 
                              int straight_width, int straight_height, int color, 
                              char fill, alt_video_display* display)
{
 8005270:	defff604 	addi	sp,sp,-40
 8005274:	dfc00915 	stw	ra,36(sp)
 8005278:	df000815 	stw	fp,32(sp)
 800527c:	df000804 	addi	fp,sp,32
 8005280:	e13ffb15 	stw	r4,-20(fp)
 8005284:	e17ffc15 	stw	r5,-16(fp)
 8005288:	e1bffd15 	stw	r6,-12(fp)
 800528c:	e1fffe15 	stw	r7,-8(fp)
 8005290:	e0800517 	ldw	r2,20(fp)
 8005294:	e0bfff05 	stb	r2,-4(fp)

    // If we're directly above, below, left and right of center (0 degrees), plot those 4 pixels
    if (x == 0) {
 8005298:	e0bffd17 	ldw	r2,-12(fp)
 800529c:	1000841e 	bne	r2,zero,80054b0 <vid_round_corner_points_cur+0x240>
        // bottom
        vid_set_pixel_cur(cx, cy + y + straight_height, color, display);
 80052a0:	e0fffc17 	ldw	r3,-16(fp)
 80052a4:	e0bffe17 	ldw	r2,-8(fp)
 80052a8:	1887883a 	add	r3,r3,r2
 80052ac:	e0800317 	ldw	r2,12(fp)
 80052b0:	1887883a 	add	r3,r3,r2
 80052b4:	e0800417 	ldw	r2,16(fp)
 80052b8:	e13ffb17 	ldw	r4,-20(fp)
 80052bc:	180b883a 	mov	r5,r3
 80052c0:	100d883a 	mov	r6,r2
 80052c4:	e1c00617 	ldw	r7,24(fp)
 80052c8:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        vid_set_pixel_cur(cx + straight_width, cy + y + straight_height, color, display);
 80052cc:	e0fffb17 	ldw	r3,-20(fp)
 80052d0:	e0800217 	ldw	r2,8(fp)
 80052d4:	1889883a 	add	r4,r3,r2
 80052d8:	e0fffc17 	ldw	r3,-16(fp)
 80052dc:	e0bffe17 	ldw	r2,-8(fp)
 80052e0:	1887883a 	add	r3,r3,r2
 80052e4:	e0800317 	ldw	r2,12(fp)
 80052e8:	1887883a 	add	r3,r3,r2
 80052ec:	e0800417 	ldw	r2,16(fp)
 80052f0:	180b883a 	mov	r5,r3
 80052f4:	100d883a 	mov	r6,r2
 80052f8:	e1c00617 	ldw	r7,24(fp)
 80052fc:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        // top
        vid_set_pixel_cur(cx, cy - y, color, display);
 8005300:	e0fffc17 	ldw	r3,-16(fp)
 8005304:	e0bffe17 	ldw	r2,-8(fp)
 8005308:	1887c83a 	sub	r3,r3,r2
 800530c:	e0800417 	ldw	r2,16(fp)
 8005310:	e13ffb17 	ldw	r4,-20(fp)
 8005314:	180b883a 	mov	r5,r3
 8005318:	100d883a 	mov	r6,r2
 800531c:	e1c00617 	ldw	r7,24(fp)
 8005320:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        vid_set_pixel_cur(cx + straight_width, cy - y, color, display);
 8005324:	e0fffb17 	ldw	r3,-20(fp)
 8005328:	e0800217 	ldw	r2,8(fp)
 800532c:	1889883a 	add	r4,r3,r2
 8005330:	e0fffc17 	ldw	r3,-16(fp)
 8005334:	e0bffe17 	ldw	r2,-8(fp)
 8005338:	1887c83a 	sub	r3,r3,r2
 800533c:	e0800417 	ldw	r2,16(fp)
 8005340:	180b883a 	mov	r5,r3
 8005344:	100d883a 	mov	r6,r2
 8005348:	e1c00617 	ldw	r7,24(fp)
 800534c:	80048fc0 	call	80048fc <vid_set_pixel_cur>

        if(fill) {
 8005350:	e0bfff07 	ldb	r2,-4(fp)
 8005354:	10002926 	beq	r2,zero,80053fc <vid_round_corner_points_cur+0x18c>
          vid_draw_line_cur(cx - y, cy, cx + y + straight_width, cy, 1, color, display);
 8005358:	e0fffb17 	ldw	r3,-20(fp)
 800535c:	e0bffe17 	ldw	r2,-8(fp)
 8005360:	1889c83a 	sub	r4,r3,r2
 8005364:	e0fffb17 	ldw	r3,-20(fp)
 8005368:	e0bffe17 	ldw	r2,-8(fp)
 800536c:	1887883a 	add	r3,r3,r2
 8005370:	e0800217 	ldw	r2,8(fp)
 8005374:	1887883a 	add	r3,r3,r2
 8005378:	00800044 	movi	r2,1
 800537c:	d8800015 	stw	r2,0(sp)
 8005380:	e0800417 	ldw	r2,16(fp)
 8005384:	d8800115 	stw	r2,4(sp)
 8005388:	e0800617 	ldw	r2,24(fp)
 800538c:	d8800215 	stw	r2,8(sp)
 8005390:	e17ffc17 	ldw	r5,-16(fp)
 8005394:	180d883a 	mov	r6,r3
 8005398:	e1fffc17 	ldw	r7,-16(fp)
 800539c:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
          vid_draw_line_cur(cx - y, cy + straight_height, cx + y + straight_width, cy + straight_height, 1, color, display);
 80053a0:	e0fffb17 	ldw	r3,-20(fp)
 80053a4:	e0bffe17 	ldw	r2,-8(fp)
 80053a8:	1889c83a 	sub	r4,r3,r2
 80053ac:	e0fffc17 	ldw	r3,-16(fp)
 80053b0:	e0800317 	ldw	r2,12(fp)
 80053b4:	188b883a 	add	r5,r3,r2
 80053b8:	e0fffb17 	ldw	r3,-20(fp)
 80053bc:	e0bffe17 	ldw	r2,-8(fp)
 80053c0:	1887883a 	add	r3,r3,r2
 80053c4:	e0800217 	ldw	r2,8(fp)
 80053c8:	188d883a 	add	r6,r3,r2
 80053cc:	e0fffc17 	ldw	r3,-16(fp)
 80053d0:	e0800317 	ldw	r2,12(fp)
 80053d4:	1887883a 	add	r3,r3,r2
 80053d8:	00800044 	movi	r2,1
 80053dc:	d8800015 	stw	r2,0(sp)
 80053e0:	e0800417 	ldw	r2,16(fp)
 80053e4:	d8800115 	stw	r2,4(sp)
 80053e8:	e0800617 	ldw	r2,24(fp)
 80053ec:	d8800215 	stw	r2,8(sp)
 80053f0:	180f883a 	mov	r7,r3
 80053f4:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
 80053f8:	00016606 	br	8005994 <vid_round_corner_points_cur+0x724>
        } else {
          //right
          vid_set_pixel_cur(cx + y + straight_width, cy, color, display);
 80053fc:	e0fffb17 	ldw	r3,-20(fp)
 8005400:	e0bffe17 	ldw	r2,-8(fp)
 8005404:	1887883a 	add	r3,r3,r2
 8005408:	e0800217 	ldw	r2,8(fp)
 800540c:	1887883a 	add	r3,r3,r2
 8005410:	e0800417 	ldw	r2,16(fp)
 8005414:	1809883a 	mov	r4,r3
 8005418:	e17ffc17 	ldw	r5,-16(fp)
 800541c:	100d883a 	mov	r6,r2
 8005420:	e1c00617 	ldw	r7,24(fp)
 8005424:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx + y + straight_width, cy + straight_height, color, display);
 8005428:	e0fffb17 	ldw	r3,-20(fp)
 800542c:	e0bffe17 	ldw	r2,-8(fp)
 8005430:	1887883a 	add	r3,r3,r2
 8005434:	e0800217 	ldw	r2,8(fp)
 8005438:	1889883a 	add	r4,r3,r2
 800543c:	e0fffc17 	ldw	r3,-16(fp)
 8005440:	e0800317 	ldw	r2,12(fp)
 8005444:	1887883a 	add	r3,r3,r2
 8005448:	e0800417 	ldw	r2,16(fp)
 800544c:	180b883a 	mov	r5,r3
 8005450:	100d883a 	mov	r6,r2
 8005454:	e1c00617 	ldw	r7,24(fp)
 8005458:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          //left
          vid_set_pixel_cur(cx - y, cy, color, display);
 800545c:	e0fffb17 	ldw	r3,-20(fp)
 8005460:	e0bffe17 	ldw	r2,-8(fp)
 8005464:	1887c83a 	sub	r3,r3,r2
 8005468:	e0800417 	ldw	r2,16(fp)
 800546c:	1809883a 	mov	r4,r3
 8005470:	e17ffc17 	ldw	r5,-16(fp)
 8005474:	100d883a 	mov	r6,r2
 8005478:	e1c00617 	ldw	r7,24(fp)
 800547c:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx - y, cy + straight_height, color, display);
 8005480:	e0fffb17 	ldw	r3,-20(fp)
 8005484:	e0bffe17 	ldw	r2,-8(fp)
 8005488:	1889c83a 	sub	r4,r3,r2
 800548c:	e0fffc17 	ldw	r3,-16(fp)
 8005490:	e0800317 	ldw	r2,12(fp)
 8005494:	1887883a 	add	r3,r3,r2
 8005498:	e0800417 	ldw	r2,16(fp)
 800549c:	180b883a 	mov	r5,r3
 80054a0:	100d883a 	mov	r6,r2
 80054a4:	e1c00617 	ldw	r7,24(fp)
 80054a8:	80048fc0 	call	80048fc <vid_set_pixel_cur>
 80054ac:	00013906 	br	8005994 <vid_round_corner_points_cur+0x724>
        }

    } else
    // If we've reached the 45 degree points (x=y), plot those 4 pixels
    if (x == y) {
 80054b0:	e0fffd17 	ldw	r3,-12(fp)
 80054b4:	e0bffe17 	ldw	r2,-8(fp)
 80054b8:	1880681e 	bne	r3,r2,800565c <vid_round_corner_points_cur+0x3ec>
      if(fill) {
 80054bc:	e0bfff07 	ldb	r2,-4(fp)
 80054c0:	10003126 	beq	r2,zero,8005588 <vid_round_corner_points_cur+0x318>
        vid_draw_line_cur(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display); // lower
 80054c4:	e0fffb17 	ldw	r3,-20(fp)
 80054c8:	e0bffd17 	ldw	r2,-12(fp)
 80054cc:	1889c83a 	sub	r4,r3,r2
 80054d0:	e0fffc17 	ldw	r3,-16(fp)
 80054d4:	e0bffe17 	ldw	r2,-8(fp)
 80054d8:	1887883a 	add	r3,r3,r2
 80054dc:	e0800317 	ldw	r2,12(fp)
 80054e0:	188b883a 	add	r5,r3,r2
 80054e4:	e0fffb17 	ldw	r3,-20(fp)
 80054e8:	e0bffd17 	ldw	r2,-12(fp)
 80054ec:	1887883a 	add	r3,r3,r2
 80054f0:	e0800217 	ldw	r2,8(fp)
 80054f4:	188d883a 	add	r6,r3,r2
 80054f8:	e0fffc17 	ldw	r3,-16(fp)
 80054fc:	e0bffe17 	ldw	r2,-8(fp)
 8005500:	1887883a 	add	r3,r3,r2
 8005504:	e0800317 	ldw	r2,12(fp)
 8005508:	1887883a 	add	r3,r3,r2
 800550c:	00800044 	movi	r2,1
 8005510:	d8800015 	stw	r2,0(sp)
 8005514:	e0800417 	ldw	r2,16(fp)
 8005518:	d8800115 	stw	r2,4(sp)
 800551c:	e0800617 	ldw	r2,24(fp)
 8005520:	d8800215 	stw	r2,8(sp)
 8005524:	180f883a 	mov	r7,r3
 8005528:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
        vid_draw_line_cur(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display); // upper
 800552c:	e0fffb17 	ldw	r3,-20(fp)
 8005530:	e0bffd17 	ldw	r2,-12(fp)
 8005534:	1889c83a 	sub	r4,r3,r2
 8005538:	e0fffc17 	ldw	r3,-16(fp)
 800553c:	e0bffe17 	ldw	r2,-8(fp)
 8005540:	188bc83a 	sub	r5,r3,r2
 8005544:	e0fffb17 	ldw	r3,-20(fp)
 8005548:	e0bffd17 	ldw	r2,-12(fp)
 800554c:	1887883a 	add	r3,r3,r2
 8005550:	e0800217 	ldw	r2,8(fp)
 8005554:	188d883a 	add	r6,r3,r2
 8005558:	e0fffc17 	ldw	r3,-16(fp)
 800555c:	e0bffe17 	ldw	r2,-8(fp)
 8005560:	1887c83a 	sub	r3,r3,r2
 8005564:	00800044 	movi	r2,1
 8005568:	d8800015 	stw	r2,0(sp)
 800556c:	e0800417 	ldw	r2,16(fp)
 8005570:	d8800115 	stw	r2,4(sp)
 8005574:	e0800617 	ldw	r2,24(fp)
 8005578:	d8800215 	stw	r2,8(sp)
 800557c:	180f883a 	mov	r7,r3
 8005580:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
 8005584:	00010306 	br	8005994 <vid_round_corner_points_cur+0x724>
        
      } else {
        vid_set_pixel_cur(cx + x + straight_width, cy + y + straight_height, color, display); // bottom right
 8005588:	e0fffb17 	ldw	r3,-20(fp)
 800558c:	e0bffd17 	ldw	r2,-12(fp)
 8005590:	1887883a 	add	r3,r3,r2
 8005594:	e0800217 	ldw	r2,8(fp)
 8005598:	1889883a 	add	r4,r3,r2
 800559c:	e0fffc17 	ldw	r3,-16(fp)
 80055a0:	e0bffe17 	ldw	r2,-8(fp)
 80055a4:	1887883a 	add	r3,r3,r2
 80055a8:	e0800317 	ldw	r2,12(fp)
 80055ac:	1887883a 	add	r3,r3,r2
 80055b0:	e0800417 	ldw	r2,16(fp)
 80055b4:	180b883a 	mov	r5,r3
 80055b8:	100d883a 	mov	r6,r2
 80055bc:	e1c00617 	ldw	r7,24(fp)
 80055c0:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        vid_set_pixel_cur(cx - x, cy + y + straight_height, color, display); // bottom left
 80055c4:	e0fffb17 	ldw	r3,-20(fp)
 80055c8:	e0bffd17 	ldw	r2,-12(fp)
 80055cc:	1889c83a 	sub	r4,r3,r2
 80055d0:	e0fffc17 	ldw	r3,-16(fp)
 80055d4:	e0bffe17 	ldw	r2,-8(fp)
 80055d8:	1887883a 	add	r3,r3,r2
 80055dc:	e0800317 	ldw	r2,12(fp)
 80055e0:	1887883a 	add	r3,r3,r2
 80055e4:	e0800417 	ldw	r2,16(fp)
 80055e8:	180b883a 	mov	r5,r3
 80055ec:	100d883a 	mov	r6,r2
 80055f0:	e1c00617 	ldw	r7,24(fp)
 80055f4:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        vid_set_pixel_cur(cx + x + straight_width, cy - y, color, display); // top right
 80055f8:	e0fffb17 	ldw	r3,-20(fp)
 80055fc:	e0bffd17 	ldw	r2,-12(fp)
 8005600:	1887883a 	add	r3,r3,r2
 8005604:	e0800217 	ldw	r2,8(fp)
 8005608:	1889883a 	add	r4,r3,r2
 800560c:	e0fffc17 	ldw	r3,-16(fp)
 8005610:	e0bffe17 	ldw	r2,-8(fp)
 8005614:	1887c83a 	sub	r3,r3,r2
 8005618:	e0800417 	ldw	r2,16(fp)
 800561c:	180b883a 	mov	r5,r3
 8005620:	100d883a 	mov	r6,r2
 8005624:	e1c00617 	ldw	r7,24(fp)
 8005628:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        vid_set_pixel_cur(cx - x, cy - y, color, display); // top left
 800562c:	e0fffb17 	ldw	r3,-20(fp)
 8005630:	e0bffd17 	ldw	r2,-12(fp)
 8005634:	1889c83a 	sub	r4,r3,r2
 8005638:	e0fffc17 	ldw	r3,-16(fp)
 800563c:	e0bffe17 	ldw	r2,-8(fp)
 8005640:	1887c83a 	sub	r3,r3,r2
 8005644:	e0800417 	ldw	r2,16(fp)
 8005648:	180b883a 	mov	r5,r3
 800564c:	100d883a 	mov	r6,r2
 8005650:	e1c00617 	ldw	r7,24(fp)
 8005654:	80048fc0 	call	80048fc <vid_set_pixel_cur>
 8005658:	0000ce06 	br	8005994 <vid_round_corner_points_cur+0x724>
      }
    } else
    // If we're between 0 and 45 degrees plot 8 pixels.
    if (x < y) {
 800565c:	e0fffd17 	ldw	r3,-12(fp)
 8005660:	e0bffe17 	ldw	r2,-8(fp)
 8005664:	1880cb0e 	bge	r3,r2,8005994 <vid_round_corner_points_cur+0x724>
        if(fill) {
 8005668:	e0bfff07 	ldb	r2,-4(fp)
 800566c:	10006126 	beq	r2,zero,80057f4 <vid_round_corner_points_cur+0x584>
          vid_draw_line_cur(cx - x, cy + y + straight_height, cx + x + straight_width, cy + y + straight_height, 1, color, display);
 8005670:	e0fffb17 	ldw	r3,-20(fp)
 8005674:	e0bffd17 	ldw	r2,-12(fp)
 8005678:	1889c83a 	sub	r4,r3,r2
 800567c:	e0fffc17 	ldw	r3,-16(fp)
 8005680:	e0bffe17 	ldw	r2,-8(fp)
 8005684:	1887883a 	add	r3,r3,r2
 8005688:	e0800317 	ldw	r2,12(fp)
 800568c:	188b883a 	add	r5,r3,r2
 8005690:	e0fffb17 	ldw	r3,-20(fp)
 8005694:	e0bffd17 	ldw	r2,-12(fp)
 8005698:	1887883a 	add	r3,r3,r2
 800569c:	e0800217 	ldw	r2,8(fp)
 80056a0:	188d883a 	add	r6,r3,r2
 80056a4:	e0fffc17 	ldw	r3,-16(fp)
 80056a8:	e0bffe17 	ldw	r2,-8(fp)
 80056ac:	1887883a 	add	r3,r3,r2
 80056b0:	e0800317 	ldw	r2,12(fp)
 80056b4:	1887883a 	add	r3,r3,r2
 80056b8:	00800044 	movi	r2,1
 80056bc:	d8800015 	stw	r2,0(sp)
 80056c0:	e0800417 	ldw	r2,16(fp)
 80056c4:	d8800115 	stw	r2,4(sp)
 80056c8:	e0800617 	ldw	r2,24(fp)
 80056cc:	d8800215 	stw	r2,8(sp)
 80056d0:	180f883a 	mov	r7,r3
 80056d4:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
          vid_draw_line_cur(cx - y, cy + x + straight_height, cx + y + straight_width, cy + x + straight_height, 1, color, display);
 80056d8:	e0fffb17 	ldw	r3,-20(fp)
 80056dc:	e0bffe17 	ldw	r2,-8(fp)
 80056e0:	1889c83a 	sub	r4,r3,r2
 80056e4:	e0fffc17 	ldw	r3,-16(fp)
 80056e8:	e0bffd17 	ldw	r2,-12(fp)
 80056ec:	1887883a 	add	r3,r3,r2
 80056f0:	e0800317 	ldw	r2,12(fp)
 80056f4:	188b883a 	add	r5,r3,r2
 80056f8:	e0fffb17 	ldw	r3,-20(fp)
 80056fc:	e0bffe17 	ldw	r2,-8(fp)
 8005700:	1887883a 	add	r3,r3,r2
 8005704:	e0800217 	ldw	r2,8(fp)
 8005708:	188d883a 	add	r6,r3,r2
 800570c:	e0fffc17 	ldw	r3,-16(fp)
 8005710:	e0bffd17 	ldw	r2,-12(fp)
 8005714:	1887883a 	add	r3,r3,r2
 8005718:	e0800317 	ldw	r2,12(fp)
 800571c:	1887883a 	add	r3,r3,r2
 8005720:	00800044 	movi	r2,1
 8005724:	d8800015 	stw	r2,0(sp)
 8005728:	e0800417 	ldw	r2,16(fp)
 800572c:	d8800115 	stw	r2,4(sp)
 8005730:	e0800617 	ldw	r2,24(fp)
 8005734:	d8800215 	stw	r2,8(sp)
 8005738:	180f883a 	mov	r7,r3
 800573c:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
          vid_draw_line_cur(cx - y, cy - x, cx + y + straight_width, cy - x, 1, color, display);
 8005740:	e0fffb17 	ldw	r3,-20(fp)
 8005744:	e0bffe17 	ldw	r2,-8(fp)
 8005748:	1889c83a 	sub	r4,r3,r2
 800574c:	e0fffc17 	ldw	r3,-16(fp)
 8005750:	e0bffd17 	ldw	r2,-12(fp)
 8005754:	188bc83a 	sub	r5,r3,r2
 8005758:	e0fffb17 	ldw	r3,-20(fp)
 800575c:	e0bffe17 	ldw	r2,-8(fp)
 8005760:	1887883a 	add	r3,r3,r2
 8005764:	e0800217 	ldw	r2,8(fp)
 8005768:	188d883a 	add	r6,r3,r2
 800576c:	e0fffc17 	ldw	r3,-16(fp)
 8005770:	e0bffd17 	ldw	r2,-12(fp)
 8005774:	1887c83a 	sub	r3,r3,r2
 8005778:	00800044 	movi	r2,1
 800577c:	d8800015 	stw	r2,0(sp)
 8005780:	e0800417 	ldw	r2,16(fp)
 8005784:	d8800115 	stw	r2,4(sp)
 8005788:	e0800617 	ldw	r2,24(fp)
 800578c:	d8800215 	stw	r2,8(sp)
 8005790:	180f883a 	mov	r7,r3
 8005794:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
          vid_draw_line_cur(cx - x, cy - y, cx + x + straight_width, cy - y, 1, color, display);
 8005798:	e0fffb17 	ldw	r3,-20(fp)
 800579c:	e0bffd17 	ldw	r2,-12(fp)
 80057a0:	1889c83a 	sub	r4,r3,r2
 80057a4:	e0fffc17 	ldw	r3,-16(fp)
 80057a8:	e0bffe17 	ldw	r2,-8(fp)
 80057ac:	188bc83a 	sub	r5,r3,r2
 80057b0:	e0fffb17 	ldw	r3,-20(fp)
 80057b4:	e0bffd17 	ldw	r2,-12(fp)
 80057b8:	1887883a 	add	r3,r3,r2
 80057bc:	e0800217 	ldw	r2,8(fp)
 80057c0:	188d883a 	add	r6,r3,r2
 80057c4:	e0fffc17 	ldw	r3,-16(fp)
 80057c8:	e0bffe17 	ldw	r2,-8(fp)
 80057cc:	1887c83a 	sub	r3,r3,r2
 80057d0:	00800044 	movi	r2,1
 80057d4:	d8800015 	stw	r2,0(sp)
 80057d8:	e0800417 	ldw	r2,16(fp)
 80057dc:	d8800115 	stw	r2,4(sp)
 80057e0:	e0800617 	ldw	r2,24(fp)
 80057e4:	d8800215 	stw	r2,8(sp)
 80057e8:	180f883a 	mov	r7,r3
 80057ec:	8004ad00 	call	8004ad0 <vid_draw_line_cur>
 80057f0:	00006806 	br	8005994 <vid_round_corner_points_cur+0x724>
        } else {
          vid_set_pixel_cur(cx + x + straight_width, cy + y + straight_height, color, display);
 80057f4:	e0fffb17 	ldw	r3,-20(fp)
 80057f8:	e0bffd17 	ldw	r2,-12(fp)
 80057fc:	1887883a 	add	r3,r3,r2
 8005800:	e0800217 	ldw	r2,8(fp)
 8005804:	1889883a 	add	r4,r3,r2
 8005808:	e0fffc17 	ldw	r3,-16(fp)
 800580c:	e0bffe17 	ldw	r2,-8(fp)
 8005810:	1887883a 	add	r3,r3,r2
 8005814:	e0800317 	ldw	r2,12(fp)
 8005818:	1887883a 	add	r3,r3,r2
 800581c:	e0800417 	ldw	r2,16(fp)
 8005820:	180b883a 	mov	r5,r3
 8005824:	100d883a 	mov	r6,r2
 8005828:	e1c00617 	ldw	r7,24(fp)
 800582c:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx - x, cy + y + straight_height, color, display);
 8005830:	e0fffb17 	ldw	r3,-20(fp)
 8005834:	e0bffd17 	ldw	r2,-12(fp)
 8005838:	1889c83a 	sub	r4,r3,r2
 800583c:	e0fffc17 	ldw	r3,-16(fp)
 8005840:	e0bffe17 	ldw	r2,-8(fp)
 8005844:	1887883a 	add	r3,r3,r2
 8005848:	e0800317 	ldw	r2,12(fp)
 800584c:	1887883a 	add	r3,r3,r2
 8005850:	e0800417 	ldw	r2,16(fp)
 8005854:	180b883a 	mov	r5,r3
 8005858:	100d883a 	mov	r6,r2
 800585c:	e1c00617 	ldw	r7,24(fp)
 8005860:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx + x + straight_width, cy - y, color, display);
 8005864:	e0fffb17 	ldw	r3,-20(fp)
 8005868:	e0bffd17 	ldw	r2,-12(fp)
 800586c:	1887883a 	add	r3,r3,r2
 8005870:	e0800217 	ldw	r2,8(fp)
 8005874:	1889883a 	add	r4,r3,r2
 8005878:	e0fffc17 	ldw	r3,-16(fp)
 800587c:	e0bffe17 	ldw	r2,-8(fp)
 8005880:	1887c83a 	sub	r3,r3,r2
 8005884:	e0800417 	ldw	r2,16(fp)
 8005888:	180b883a 	mov	r5,r3
 800588c:	100d883a 	mov	r6,r2
 8005890:	e1c00617 	ldw	r7,24(fp)
 8005894:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx - x, cy - y, color, display);
 8005898:	e0fffb17 	ldw	r3,-20(fp)
 800589c:	e0bffd17 	ldw	r2,-12(fp)
 80058a0:	1889c83a 	sub	r4,r3,r2
 80058a4:	e0fffc17 	ldw	r3,-16(fp)
 80058a8:	e0bffe17 	ldw	r2,-8(fp)
 80058ac:	1887c83a 	sub	r3,r3,r2
 80058b0:	e0800417 	ldw	r2,16(fp)
 80058b4:	180b883a 	mov	r5,r3
 80058b8:	100d883a 	mov	r6,r2
 80058bc:	e1c00617 	ldw	r7,24(fp)
 80058c0:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx + y + straight_width, cy + x + straight_height, color, display);
 80058c4:	e0fffb17 	ldw	r3,-20(fp)
 80058c8:	e0bffe17 	ldw	r2,-8(fp)
 80058cc:	1887883a 	add	r3,r3,r2
 80058d0:	e0800217 	ldw	r2,8(fp)
 80058d4:	1889883a 	add	r4,r3,r2
 80058d8:	e0fffc17 	ldw	r3,-16(fp)
 80058dc:	e0bffd17 	ldw	r2,-12(fp)
 80058e0:	1887883a 	add	r3,r3,r2
 80058e4:	e0800317 	ldw	r2,12(fp)
 80058e8:	1887883a 	add	r3,r3,r2
 80058ec:	e0800417 	ldw	r2,16(fp)
 80058f0:	180b883a 	mov	r5,r3
 80058f4:	100d883a 	mov	r6,r2
 80058f8:	e1c00617 	ldw	r7,24(fp)
 80058fc:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx - y, cy + x + straight_height, color, display);
 8005900:	e0fffb17 	ldw	r3,-20(fp)
 8005904:	e0bffe17 	ldw	r2,-8(fp)
 8005908:	1889c83a 	sub	r4,r3,r2
 800590c:	e0fffc17 	ldw	r3,-16(fp)
 8005910:	e0bffd17 	ldw	r2,-12(fp)
 8005914:	1887883a 	add	r3,r3,r2
 8005918:	e0800317 	ldw	r2,12(fp)
 800591c:	1887883a 	add	r3,r3,r2
 8005920:	e0800417 	ldw	r2,16(fp)
 8005924:	180b883a 	mov	r5,r3
 8005928:	100d883a 	mov	r6,r2
 800592c:	e1c00617 	ldw	r7,24(fp)
 8005930:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx + y + straight_width, cy - x, color, display);
 8005934:	e0fffb17 	ldw	r3,-20(fp)
 8005938:	e0bffe17 	ldw	r2,-8(fp)
 800593c:	1887883a 	add	r3,r3,r2
 8005940:	e0800217 	ldw	r2,8(fp)
 8005944:	1889883a 	add	r4,r3,r2
 8005948:	e0fffc17 	ldw	r3,-16(fp)
 800594c:	e0bffd17 	ldw	r2,-12(fp)
 8005950:	1887c83a 	sub	r3,r3,r2
 8005954:	e0800417 	ldw	r2,16(fp)
 8005958:	180b883a 	mov	r5,r3
 800595c:	100d883a 	mov	r6,r2
 8005960:	e1c00617 	ldw	r7,24(fp)
 8005964:	80048fc0 	call	80048fc <vid_set_pixel_cur>
          vid_set_pixel_cur(cx - y, cy - x, color, display);
 8005968:	e0fffb17 	ldw	r3,-20(fp)
 800596c:	e0bffe17 	ldw	r2,-8(fp)
 8005970:	1889c83a 	sub	r4,r3,r2
 8005974:	e0fffc17 	ldw	r3,-16(fp)
 8005978:	e0bffd17 	ldw	r2,-12(fp)
 800597c:	1887c83a 	sub	r3,r3,r2
 8005980:	e0800417 	ldw	r2,16(fp)
 8005984:	180b883a 	mov	r5,r3
 8005988:	100d883a 	mov	r6,r2
 800598c:	e1c00617 	ldw	r7,24(fp)
 8005990:	80048fc0 	call	80048fc <vid_set_pixel_cur>
        }
    }
}
 8005994:	e037883a 	mov	sp,fp
 8005998:	dfc00117 	ldw	ra,4(sp)
 800599c:	df000017 	ldw	fp,0(sp)
 80059a0:	dec00204 	addi	sp,sp,8
 80059a4:	f800283a 	ret

080059a8 <vid_print_string_alpha>:
*           24 bit - R(8):G(8):B(8)  (packed)
*           32 bit - 0 : R(8):G(8):B(8) (unpacked)
******************************************************************/

int vid_print_string_alpha(int horiz_offset, int vert_offset, int color, int background_color, struct abc_font_struct font[], alt_video_display * display, char string[])
{
 80059a8:	defff404 	addi	sp,sp,-48
 80059ac:	dfc00b15 	stw	ra,44(sp)
 80059b0:	df000a15 	stw	fp,40(sp)
 80059b4:	df000a04 	addi	fp,sp,40
 80059b8:	e13ffc15 	stw	r4,-16(fp)
 80059bc:	e17ffd15 	stw	r5,-12(fp)
 80059c0:	e1bffe15 	stw	r6,-8(fp)
 80059c4:	e1ffff15 	stw	r7,-4(fp)
  int i = 0;
 80059c8:	e03ff915 	stw	zero,-28(fp)
  int tab;
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;
 80059cc:	e0bffc17 	ldw	r2,-16(fp)
 80059d0:	e0bffb15 	stw	r2,-20(fp)

  // Print until we hit the '\0' char.
  while (string[i]) {
 80059d4:	00007d06 	br	8005bcc <vid_print_string_alpha+0x224>
    //Handle newline char here.
    if (string[i] == '\n') {
 80059d8:	e0bff917 	ldw	r2,-28(fp)
 80059dc:	e0c00417 	ldw	r3,16(fp)
 80059e0:	1885883a 	add	r2,r3,r2
 80059e4:	10800003 	ldbu	r2,0(r2)
 80059e8:	10803fcc 	andi	r2,r2,255
 80059ec:	1080201c 	xori	r2,r2,128
 80059f0:	10bfe004 	addi	r2,r2,-128
 80059f4:	10800298 	cmpnei	r2,r2,10
 80059f8:	10000c1e 	bne	r2,zero,8005a2c <vid_print_string_alpha+0x84>
      horiz_offset = original_horiz_offset;
 80059fc:	e0bffb17 	ldw	r2,-20(fp)
 8005a00:	e0bffc15 	stw	r2,-16(fp)
      vert_offset += font['|' - 33].bounds_height;  // we'll use "|" to add the line to line spacing
 8005a04:	e0800217 	ldw	r2,8(fp)
 8005a08:	1082d804 	addi	r2,r2,2912
 8005a0c:	10c00517 	ldw	r3,20(r2)
 8005a10:	e0bffd17 	ldw	r2,-12(fp)
 8005a14:	1885883a 	add	r2,r3,r2
 8005a18:	e0bffd15 	stw	r2,-12(fp)
      i++;
 8005a1c:	e0bff917 	ldw	r2,-28(fp)
 8005a20:	10800044 	addi	r2,r2,1
 8005a24:	e0bff915 	stw	r2,-28(fp)
      continue;
 8005a28:	00006806 	br	8005bcc <vid_print_string_alpha+0x224>
    }
    // Lay down that character and increment our offsets.
    if(string[i] == 32)  // this is a space in ASCII
 8005a2c:	e0bff917 	ldw	r2,-28(fp)
 8005a30:	e0c00417 	ldw	r3,16(fp)
 8005a34:	1885883a 	add	r2,r3,r2
 8005a38:	10800003 	ldbu	r2,0(r2)
 8005a3c:	10803fcc 	andi	r2,r2,255
 8005a40:	1080201c 	xori	r2,r2,128
 8005a44:	10bfe004 	addi	r2,r2,-128
 8005a48:	10800818 	cmpnei	r2,r2,32
 8005a4c:	1000151e 	bne	r2,zero,8005aa4 <vid_print_string_alpha+0xfc>
    {
      if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 8005a50:	e0bfff17 	ldw	r2,-4(fp)
 8005a54:	10bfffe0 	cmpeqi	r2,r2,-1
 8005a58:	10000b1e 	bne	r2,zero,8005a88 <vid_print_string_alpha+0xe0>
      {
        vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 8005a5c:	e0bfff17 	ldw	r2,-4(fp)
 8005a60:	d8800015 	stw	r2,0(sp)
 8005a64:	e0800217 	ldw	r2,8(fp)
 8005a68:	d8800115 	stw	r2,4(sp)
 8005a6c:	e0800317 	ldw	r2,12(fp)
 8005a70:	d8800215 	stw	r2,8(sp)
 8005a74:	e13ffc17 	ldw	r4,-16(fp)
 8005a78:	e17ffd17 	ldw	r5,-12(fp)
 8005a7c:	e1bfff17 	ldw	r6,-4(fp)
 8005a80:	01c00b44 	movi	r7,45
 8005a84:	80063400 	call	8006340 <vid_print_char_alpha>
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 8005a88:	e0800217 	ldw	r2,8(fp)
 8005a8c:	10806004 	addi	r2,r2,384
 8005a90:	10c00417 	ldw	r3,16(r2)
 8005a94:	e0bffc17 	ldw	r2,-16(fp)
 8005a98:	1885883a 	add	r2,r3,r2
 8005a9c:	e0bffc15 	stw	r2,-16(fp)
 8005aa0:	00004706 	br	8005bc0 <vid_print_string_alpha+0x218>
    }
    else if(string[i] == '\t')  // this is a tab
 8005aa4:	e0bff917 	ldw	r2,-28(fp)
 8005aa8:	e0c00417 	ldw	r3,16(fp)
 8005aac:	1885883a 	add	r2,r3,r2
 8005ab0:	10800003 	ldbu	r2,0(r2)
 8005ab4:	10803fcc 	andi	r2,r2,255
 8005ab8:	1080201c 	xori	r2,r2,128
 8005abc:	10bfe004 	addi	r2,r2,-128
 8005ac0:	10800258 	cmpnei	r2,r2,9
 8005ac4:	10001d1e 	bne	r2,zero,8005b3c <vid_print_string_alpha+0x194>
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 8005ac8:	e03ffa15 	stw	zero,-24(fp)
 8005acc:	00001706 	br	8005b2c <vid_print_string_alpha+0x184>
      {
        if(background_color != CLEAR_BACKGROUND)  // need to fill in this spot (setting foreground to background color so that it looks like a drawn in box)
 8005ad0:	e0bfff17 	ldw	r2,-4(fp)
 8005ad4:	10bfffe0 	cmpeqi	r2,r2,-1
 8005ad8:	10000b1e 	bne	r2,zero,8005b08 <vid_print_string_alpha+0x160>
        {
          vid_print_char_alpha (horiz_offset, vert_offset, background_color, '-', background_color, font, display);
 8005adc:	e0bfff17 	ldw	r2,-4(fp)
 8005ae0:	d8800015 	stw	r2,0(sp)
 8005ae4:	e0800217 	ldw	r2,8(fp)
 8005ae8:	d8800115 	stw	r2,4(sp)
 8005aec:	e0800317 	ldw	r2,12(fp)
 8005af0:	d8800215 	stw	r2,8(sp)
 8005af4:	e13ffc17 	ldw	r4,-16(fp)
 8005af8:	e17ffd17 	ldw	r5,-12(fp)
 8005afc:	e1bfff17 	ldw	r6,-4(fp)
 8005b00:	01c00b44 	movi	r7,45
 8005b04:	80063400 	call	8006340 <vid_print_char_alpha>
        }
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
 8005b08:	e0800217 	ldw	r2,8(fp)
 8005b0c:	10806004 	addi	r2,r2,384
 8005b10:	10c00417 	ldw	r3,16(r2)
 8005b14:	e0bffc17 	ldw	r2,-16(fp)
 8005b18:	1885883a 	add	r2,r3,r2
 8005b1c:	e0bffc15 	stw	r2,-16(fp)
      }
      horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
    }
    else if(string[i] == '\t')  // this is a tab
    {
      for( tab = 0; tab < TAB_SPACING; tab++ )
 8005b20:	e0bffa17 	ldw	r2,-24(fp)
 8005b24:	10800044 	addi	r2,r2,1
 8005b28:	e0bffa15 	stw	r2,-24(fp)
 8005b2c:	e0bffa17 	ldw	r2,-24(fp)
 8005b30:	10800090 	cmplti	r2,r2,2
 8005b34:	103fe61e 	bne	r2,zero,8005ad0 <__alt_data_end+0xf8005ad0>
 8005b38:	00002106 	br	8005bc0 <vid_print_string_alpha+0x218>
        horiz_offset += font[45 - 33].bounds_width;  // using the width of the '-' character for the space width since it's not present in the font
      }
    }
    else
    {
      vid_print_char_alpha (horiz_offset, vert_offset, color, string[i], background_color, font, display);
 8005b3c:	e0bff917 	ldw	r2,-28(fp)
 8005b40:	e0c00417 	ldw	r3,16(fp)
 8005b44:	1885883a 	add	r2,r3,r2
 8005b48:	10800003 	ldbu	r2,0(r2)
 8005b4c:	10c03fcc 	andi	r3,r2,255
 8005b50:	18c0201c 	xori	r3,r3,128
 8005b54:	18ffe004 	addi	r3,r3,-128
 8005b58:	e0bfff17 	ldw	r2,-4(fp)
 8005b5c:	d8800015 	stw	r2,0(sp)
 8005b60:	e0800217 	ldw	r2,8(fp)
 8005b64:	d8800115 	stw	r2,4(sp)
 8005b68:	e0800317 	ldw	r2,12(fp)
 8005b6c:	d8800215 	stw	r2,8(sp)
 8005b70:	e13ffc17 	ldw	r4,-16(fp)
 8005b74:	e17ffd17 	ldw	r5,-12(fp)
 8005b78:	e1bffe17 	ldw	r6,-8(fp)
 8005b7c:	180f883a 	mov	r7,r3
 8005b80:	80063400 	call	8006340 <vid_print_char_alpha>
      horiz_offset += font[string[i] - 33].bounds_width;
 8005b84:	e0bff917 	ldw	r2,-28(fp)
 8005b88:	e0c00417 	ldw	r3,16(fp)
 8005b8c:	1885883a 	add	r2,r3,r2
 8005b90:	10800003 	ldbu	r2,0(r2)
 8005b94:	10803fcc 	andi	r2,r2,255
 8005b98:	1080201c 	xori	r2,r2,128
 8005b9c:	10bfe004 	addi	r2,r2,-128
 8005ba0:	1004917a 	slli	r2,r2,5
 8005ba4:	10bef804 	addi	r2,r2,-1056
 8005ba8:	e0c00217 	ldw	r3,8(fp)
 8005bac:	1885883a 	add	r2,r3,r2
 8005bb0:	10c00417 	ldw	r3,16(r2)
 8005bb4:	e0bffc17 	ldw	r2,-16(fp)
 8005bb8:	1885883a 	add	r2,r3,r2
 8005bbc:	e0bffc15 	stw	r2,-16(fp)

    }
    i++;
 8005bc0:	e0bff917 	ldw	r2,-28(fp)
 8005bc4:	10800044 	addi	r2,r2,1
 8005bc8:	e0bff915 	stw	r2,-28(fp)
  int original_horiz_offset;

  original_horiz_offset = horiz_offset;

  // Print until we hit the '\0' char.
  while (string[i]) {
 8005bcc:	e0bff917 	ldw	r2,-28(fp)
 8005bd0:	e0c00417 	ldw	r3,16(fp)
 8005bd4:	1885883a 	add	r2,r3,r2
 8005bd8:	10800003 	ldbu	r2,0(r2)
 8005bdc:	10803fcc 	andi	r2,r2,255
 8005be0:	1080201c 	xori	r2,r2,128
 8005be4:	10bfe004 	addi	r2,r2,-128
 8005be8:	103f7b1e 	bne	r2,zero,80059d8 <__alt_data_end+0xf80059d8>
      horiz_offset += font[string[i] - 33].bounds_width;

    }
    i++;
  }
  return (0);
 8005bec:	0005883a 	mov	r2,zero
}
 8005bf0:	e037883a 	mov	sp,fp
 8005bf4:	dfc00117 	ldw	ra,4(sp)
 8005bf8:	df000017 	ldw	fp,0(sp)
 8005bfc:	dec00204 	addi	sp,sp,8
 8005c00:	f800283a 	ret

08005c04 <seperate_color_channels>:
*           the function working on pointers.
*
******************************************************************/

extern __inline__ int seperate_color_channels(int color_depth, unsigned char * color, unsigned char * red, unsigned char * green, unsigned char * blue)
{
 8005c04:	defff904 	addi	sp,sp,-28
 8005c08:	df000615 	stw	fp,24(sp)
 8005c0c:	df000604 	addi	fp,sp,24
 8005c10:	e13ffc15 	stw	r4,-16(fp)
 8005c14:	e17ffd15 	stw	r5,-12(fp)
 8005c18:	e1bffe15 	stw	r6,-8(fp)
 8005c1c:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color = 0;
 8005c20:	e03ffb0d 	sth	zero,-20(fp)
  
  if (color_depth == 16)  // R(5):G(6):B(5)
 8005c24:	e0bffc17 	ldw	r2,-16(fp)
 8005c28:	10800418 	cmpnei	r2,r2,16
 8005c2c:	1000221e 	bne	r2,zero,8005cb8 <seperate_color_channels+0xb4>
  {
    temp_color = *color++;        // get the first half of the 16 bit color
 8005c30:	e0bffd17 	ldw	r2,-12(fp)
 8005c34:	10c00044 	addi	r3,r2,1
 8005c38:	e0fffd15 	stw	r3,-12(fp)
 8005c3c:	10800003 	ldbu	r2,0(r2)
 8005c40:	10803fcc 	andi	r2,r2,255
 8005c44:	e0bffb0d 	sth	r2,-20(fp)
    temp_color += (*color << 8);  // get the second half of the 16 bit color
 8005c48:	e0bffd17 	ldw	r2,-12(fp)
 8005c4c:	10800003 	ldbu	r2,0(r2)
 8005c50:	10803fcc 	andi	r2,r2,255
 8005c54:	1004923a 	slli	r2,r2,8
 8005c58:	1007883a 	mov	r3,r2
 8005c5c:	e0bffb0b 	ldhu	r2,-20(fp)
 8005c60:	1885883a 	add	r2,r3,r2
 8005c64:	e0bffb0d 	sth	r2,-20(fp)
    *blue = temp_color & 0x1F; 
 8005c68:	e0bffb0b 	ldhu	r2,-20(fp)
 8005c6c:	108007cc 	andi	r2,r2,31
 8005c70:	1007883a 	mov	r3,r2
 8005c74:	e0800117 	ldw	r2,4(fp)
 8005c78:	10c00005 	stb	r3,0(r2)
    *green = (temp_color >> 5) & 0x3F;
 8005c7c:	e0bffb0b 	ldhu	r2,-20(fp)
 8005c80:	1004d17a 	srli	r2,r2,5
 8005c84:	10800fcc 	andi	r2,r2,63
 8005c88:	1007883a 	mov	r3,r2
 8005c8c:	e0bfff17 	ldw	r2,-4(fp)
 8005c90:	10c00005 	stb	r3,0(r2)
    *red = (temp_color >> 11) & 0x1F;
 8005c94:	e0bffb0b 	ldhu	r2,-20(fp)
 8005c98:	1004d2fa 	srli	r2,r2,11
 8005c9c:	108007cc 	andi	r2,r2,31
 8005ca0:	1007883a 	mov	r3,r2
 8005ca4:	e0bffe17 	ldw	r2,-8(fp)
 8005ca8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 8005cac:	00800044 	movi	r2,1
 8005cb0:	e0bffa15 	stw	r2,-24(fp)
 8005cb4:	00002006 	br	8005d38 <seperate_color_channels+0x134>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 8005cb8:	e0bffc17 	ldw	r2,-16(fp)
 8005cbc:	10800620 	cmpeqi	r2,r2,24
 8005cc0:	1000031e 	bne	r2,zero,8005cd0 <seperate_color_channels+0xcc>
 8005cc4:	e0bffc17 	ldw	r2,-16(fp)
 8005cc8:	10800818 	cmpnei	r2,r2,32
 8005ccc:	1000131e 	bne	r2,zero,8005d1c <seperate_color_channels+0x118>
  {
    *blue = *color++;
 8005cd0:	e0bffd17 	ldw	r2,-12(fp)
 8005cd4:	10c00044 	addi	r3,r2,1
 8005cd8:	e0fffd15 	stw	r3,-12(fp)
 8005cdc:	10c00003 	ldbu	r3,0(r2)
 8005ce0:	e0800117 	ldw	r2,4(fp)
 8005ce4:	10c00005 	stb	r3,0(r2)
    *green = *color++;
 8005ce8:	e0bffd17 	ldw	r2,-12(fp)
 8005cec:	10c00044 	addi	r3,r2,1
 8005cf0:	e0fffd15 	stw	r3,-12(fp)
 8005cf4:	10c00003 	ldbu	r3,0(r2)
 8005cf8:	e0bfff17 	ldw	r2,-4(fp)
 8005cfc:	10c00005 	stb	r3,0(r2)
    *red = *color;   
 8005d00:	e0bffd17 	ldw	r2,-12(fp)
 8005d04:	10c00003 	ldbu	r3,0(r2)
 8005d08:	e0bffe17 	ldw	r2,-8(fp)
 8005d0c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 8005d10:	00800044 	movi	r2,1
 8005d14:	e0bffa15 	stw	r2,-24(fp)
 8005d18:	00000706 	br	8005d38 <seperate_color_channels+0x134>
  }
  else  // not a valid color depth for this function
  {
    *red = 0;
 8005d1c:	e0bffe17 	ldw	r2,-8(fp)
 8005d20:	10000005 	stb	zero,0(r2)
    *green = 0;
 8005d24:	e0bfff17 	ldw	r2,-4(fp)
 8005d28:	10000005 	stb	zero,0(r2)
    *blue = 0;    
 8005d2c:	e0800117 	ldw	r2,4(fp)
 8005d30:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 8005d34:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;
 8005d38:	e0bffa17 	ldw	r2,-24(fp)
}
 8005d3c:	e037883a 	mov	sp,fp
 8005d40:	df000017 	ldw	fp,0(sp)
 8005d44:	dec00104 	addi	sp,sp,4
 8005d48:	f800283a 	ret

08005d4c <merge_color_channels>:
*           different color formats and packing.
*
******************************************************************/

extern __inline__ int merge_color_channels(int color_depth, unsigned char red, unsigned char green, unsigned char blue, unsigned char * color)
{
 8005d4c:	defff904 	addi	sp,sp,-28
 8005d50:	df000615 	stw	fp,24(sp)
 8005d54:	df000604 	addi	fp,sp,24
 8005d58:	e13ffc15 	stw	r4,-16(fp)
 8005d5c:	2809883a 	mov	r4,r5
 8005d60:	3007883a 	mov	r3,r6
 8005d64:	3805883a 	mov	r2,r7
 8005d68:	e13ffd05 	stb	r4,-12(fp)
 8005d6c:	e0fffe05 	stb	r3,-8(fp)
 8005d70:	e0bfff05 	stb	r2,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned short temp_color;
    
  if (color_depth == 16)  // R(5):G(6):B(5)
 8005d74:	e0bffc17 	ldw	r2,-16(fp)
 8005d78:	10800418 	cmpnei	r2,r2,16
 8005d7c:	1000191e 	bne	r2,zero,8005de4 <merge_color_channels+0x98>
  {
    temp_color = (blue & 0x1F) | ((green & 0x3F) << 5) | ((red & 0x1F) << 11);  // 16 bit color format
 8005d80:	e0bfff03 	ldbu	r2,-4(fp)
 8005d84:	108007cc 	andi	r2,r2,31
 8005d88:	1007883a 	mov	r3,r2
 8005d8c:	e0bffe03 	ldbu	r2,-8(fp)
 8005d90:	10800fcc 	andi	r2,r2,63
 8005d94:	1004917a 	slli	r2,r2,5
 8005d98:	1884b03a 	or	r2,r3,r2
 8005d9c:	1007883a 	mov	r3,r2
 8005da0:	e0bffd03 	ldbu	r2,-12(fp)
 8005da4:	100492fa 	slli	r2,r2,11
 8005da8:	1884b03a 	or	r2,r3,r2
 8005dac:	e0bffb0d 	sth	r2,-20(fp)
    *color++ = temp_color & 0xFF;
 8005db0:	e0800117 	ldw	r2,4(fp)
 8005db4:	10c00044 	addi	r3,r2,1
 8005db8:	e0c00115 	stw	r3,4(fp)
 8005dbc:	e0fffb0b 	ldhu	r3,-20(fp)
 8005dc0:	10c00005 	stb	r3,0(r2)
    *color = (temp_color >> 8) & 0xFF;
 8005dc4:	e0bffb0b 	ldhu	r2,-20(fp)
 8005dc8:	1004d23a 	srli	r2,r2,8
 8005dcc:	1007883a 	mov	r3,r2
 8005dd0:	e0800117 	ldw	r2,4(fp)
 8005dd4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 8005dd8:	00800044 	movi	r2,1
 8005ddc:	e0bffa15 	stw	r2,-24(fp)
 8005de0:	00002106 	br	8005e68 <merge_color_channels+0x11c>
  }
  else if ((color_depth == 24) || (color_depth == 32))  // R(8):G(8):B(8) packed/unpacked
 8005de4:	e0bffc17 	ldw	r2,-16(fp)
 8005de8:	10800620 	cmpeqi	r2,r2,24
 8005dec:	1000031e 	bne	r2,zero,8005dfc <merge_color_channels+0xb0>
 8005df0:	e0bffc17 	ldw	r2,-16(fp)
 8005df4:	10800818 	cmpnei	r2,r2,32
 8005df8:	1000101e 	bne	r2,zero,8005e3c <merge_color_channels+0xf0>
  {
    *color++ = blue;
 8005dfc:	e0800117 	ldw	r2,4(fp)
 8005e00:	10c00044 	addi	r3,r2,1
 8005e04:	e0c00115 	stw	r3,4(fp)
 8005e08:	e0ffff03 	ldbu	r3,-4(fp)
 8005e0c:	10c00005 	stb	r3,0(r2)
    *color++ = green;
 8005e10:	e0800117 	ldw	r2,4(fp)
 8005e14:	10c00044 	addi	r3,r2,1
 8005e18:	e0c00115 	stw	r3,4(fp)
 8005e1c:	e0fffe03 	ldbu	r3,-8(fp)
 8005e20:	10c00005 	stb	r3,0(r2)
    *color = red;
 8005e24:	e0800117 	ldw	r2,4(fp)
 8005e28:	e0fffd03 	ldbu	r3,-12(fp)
 8005e2c:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 8005e30:	00800044 	movi	r2,1
 8005e34:	e0bffa15 	stw	r2,-24(fp)
 8005e38:	00000b06 	br	8005e68 <merge_color_channels+0x11c>
  }
  else  // not a valid color depth for this function
  {
    *color++ = 0;
 8005e3c:	e0800117 	ldw	r2,4(fp)
 8005e40:	10c00044 	addi	r3,r2,1
 8005e44:	e0c00115 	stw	r3,4(fp)
 8005e48:	10000005 	stb	zero,0(r2)
    *color++ = 0;
 8005e4c:	e0800117 	ldw	r2,4(fp)
 8005e50:	10c00044 	addi	r3,r2,1
 8005e54:	e0c00115 	stw	r3,4(fp)
 8005e58:	10000005 	stb	zero,0(r2)
    *color = 0;
 8005e5c:	e0800117 	ldw	r2,4(fp)
 8005e60:	10000005 	stb	zero,0(r2)
    return_value = 0;    
 8005e64:	e03ffa15 	stw	zero,-24(fp)
  }
  return return_value;  
 8005e68:	e0bffa17 	ldw	r2,-24(fp)
}
 8005e6c:	e037883a 	mov	sp,fp
 8005e70:	df000017 	ldw	fp,0(sp)
 8005e74:	dec00104 	addi	sp,sp,4
 8005e78:	f800283a 	ret

08005e7c <read_from_frame>:
*           needed to calculate the new one.
*
******************************************************************/

extern __inline__ int read_from_frame (int horiz, int vert, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 8005e7c:	defff804 	addi	sp,sp,-32
 8005e80:	df000715 	stw	fp,28(sp)
 8005e84:	df000704 	addi	fp,sp,28
 8005e88:	e13ffc15 	stw	r4,-16(fp)
 8005e8c:	e17ffd15 	stw	r5,-12(fp)
 8005e90:	e1bffe15 	stw	r6,-8(fp)
 8005e94:	e1ffff15 	stw	r7,-4(fp)
  int return_value;  // error checking in case anyone is listening
  unsigned int temp_color;
  unsigned int addr;
  
  if( display->color_depth == 32 )
 8005e98:	e0800217 	ldw	r2,8(fp)
 8005e9c:	10800917 	ldw	r2,36(r2)
 8005ea0:	10800818 	cmpnei	r2,r2,32
 8005ea4:	1000281e 	bne	r2,zero,8005f48 <read_from_frame+0xcc>
  {
    addr = ((unsigned int)display->buffer_ptrs[display->buffer_being_written]->buffer) + ((unsigned int)((vert * display->width * 4) + (horiz * 4)));
 8005ea8:	e0800217 	ldw	r2,8(fp)
 8005eac:	10800617 	ldw	r2,24(r2)
 8005eb0:	e0c00217 	ldw	r3,8(fp)
 8005eb4:	10800044 	addi	r2,r2,1
 8005eb8:	1085883a 	add	r2,r2,r2
 8005ebc:	1085883a 	add	r2,r2,r2
 8005ec0:	1885883a 	add	r2,r3,r2
 8005ec4:	10800017 	ldw	r2,0(r2)
 8005ec8:	10800117 	ldw	r2,4(r2)
 8005ecc:	1009883a 	mov	r4,r2
 8005ed0:	e0800217 	ldw	r2,8(fp)
 8005ed4:	10c00717 	ldw	r3,28(r2)
 8005ed8:	e0bffd17 	ldw	r2,-12(fp)
 8005edc:	1887383a 	mul	r3,r3,r2
 8005ee0:	e0bffc17 	ldw	r2,-16(fp)
 8005ee4:	1885883a 	add	r2,r3,r2
 8005ee8:	1085883a 	add	r2,r2,r2
 8005eec:	1085883a 	add	r2,r2,r2
 8005ef0:	2085883a 	add	r2,r4,r2
 8005ef4:	e0bffa15 	stw	r2,-24(fp)
    temp_color = IORD_32DIRECT(addr, 0);
 8005ef8:	e0bffa17 	ldw	r2,-24(fp)
 8005efc:	10800037 	ldwio	r2,0(r2)
 8005f00:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0xFF);
 8005f04:	e0bffb17 	ldw	r2,-20(fp)
 8005f08:	1007883a 	mov	r3,r2
 8005f0c:	e0800117 	ldw	r2,4(fp)
 8005f10:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 8) & 0xFF);
 8005f14:	e0bffb17 	ldw	r2,-20(fp)
 8005f18:	1004d23a 	srli	r2,r2,8
 8005f1c:	1007883a 	mov	r3,r2
 8005f20:	e0bfff17 	ldw	r2,-4(fp)
 8005f24:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 16) & 0xFF);
 8005f28:	e0bffb17 	ldw	r2,-20(fp)
 8005f2c:	1004d43a 	srli	r2,r2,16
 8005f30:	1007883a 	mov	r3,r2
 8005f34:	e0bffe17 	ldw	r2,-8(fp)
 8005f38:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 8005f3c:	00800044 	movi	r2,1
 8005f40:	e0bff915 	stw	r2,-28(fp)
 8005f44:	00006606 	br	80060e0 <read_from_frame+0x264>
  }
  else if( display->color_depth == 24 )
 8005f48:	e0800217 	ldw	r2,8(fp)
 8005f4c:	10800917 	ldw	r2,36(r2)
 8005f50:	10800618 	cmpnei	r2,r2,24
 8005f54:	10002c1e 	bne	r2,zero,8006008 <read_from_frame+0x18c>
  {
    addr = ((unsigned int)display->buffer_ptrs[display->buffer_being_written]->buffer) + ((unsigned int)((vert * display->width * 3) + (horiz * 3)));
 8005f58:	e0800217 	ldw	r2,8(fp)
 8005f5c:	10800617 	ldw	r2,24(r2)
 8005f60:	e0c00217 	ldw	r3,8(fp)
 8005f64:	10800044 	addi	r2,r2,1
 8005f68:	1085883a 	add	r2,r2,r2
 8005f6c:	1085883a 	add	r2,r2,r2
 8005f70:	1885883a 	add	r2,r3,r2
 8005f74:	10800017 	ldw	r2,0(r2)
 8005f78:	10800117 	ldw	r2,4(r2)
 8005f7c:	1009883a 	mov	r4,r2
 8005f80:	e0800217 	ldw	r2,8(fp)
 8005f84:	10c00717 	ldw	r3,28(r2)
 8005f88:	e0bffd17 	ldw	r2,-12(fp)
 8005f8c:	1887383a 	mul	r3,r3,r2
 8005f90:	e0bffc17 	ldw	r2,-16(fp)
 8005f94:	1887883a 	add	r3,r3,r2
 8005f98:	1805883a 	mov	r2,r3
 8005f9c:	1085883a 	add	r2,r2,r2
 8005fa0:	10c5883a 	add	r2,r2,r3
 8005fa4:	2085883a 	add	r2,r4,r2
 8005fa8:	e0bffa15 	stw	r2,-24(fp)
    *blue = IORD_8DIRECT(addr, 0);
 8005fac:	e0bffa17 	ldw	r2,-24(fp)
 8005fb0:	10800023 	ldbuio	r2,0(r2)
 8005fb4:	10803fcc 	andi	r2,r2,255
 8005fb8:	1007883a 	mov	r3,r2
 8005fbc:	e0800117 	ldw	r2,4(fp)
 8005fc0:	10c00005 	stb	r3,0(r2)
    *green = IORD_8DIRECT(addr, 1);
 8005fc4:	e0bffa17 	ldw	r2,-24(fp)
 8005fc8:	10800044 	addi	r2,r2,1
 8005fcc:	10800023 	ldbuio	r2,0(r2)
 8005fd0:	10803fcc 	andi	r2,r2,255
 8005fd4:	1007883a 	mov	r3,r2
 8005fd8:	e0bfff17 	ldw	r2,-4(fp)
 8005fdc:	10c00005 	stb	r3,0(r2)
    *red = IORD_8DIRECT(addr, 2);
 8005fe0:	e0bffa17 	ldw	r2,-24(fp)
 8005fe4:	10800084 	addi	r2,r2,2
 8005fe8:	10800023 	ldbuio	r2,0(r2)
 8005fec:	10803fcc 	andi	r2,r2,255
 8005ff0:	1007883a 	mov	r3,r2
 8005ff4:	e0bffe17 	ldw	r2,-8(fp)
 8005ff8:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 8005ffc:	00800044 	movi	r2,1
 8006000:	e0bff915 	stw	r2,-28(fp)
 8006004:	00003606 	br	80060e0 <read_from_frame+0x264>
  }
  else if( display->color_depth == 16 )
 8006008:	e0800217 	ldw	r2,8(fp)
 800600c:	10800917 	ldw	r2,36(r2)
 8006010:	10800418 	cmpnei	r2,r2,16
 8006014:	10002b1e 	bne	r2,zero,80060c4 <read_from_frame+0x248>
  {
    addr = ((unsigned int)display->buffer_ptrs[display->buffer_being_written]->buffer) + ((unsigned int)((vert * display->width * 2) + (horiz * 2)));
 8006018:	e0800217 	ldw	r2,8(fp)
 800601c:	10800617 	ldw	r2,24(r2)
 8006020:	e0c00217 	ldw	r3,8(fp)
 8006024:	10800044 	addi	r2,r2,1
 8006028:	1085883a 	add	r2,r2,r2
 800602c:	1085883a 	add	r2,r2,r2
 8006030:	1885883a 	add	r2,r3,r2
 8006034:	10800017 	ldw	r2,0(r2)
 8006038:	10800117 	ldw	r2,4(r2)
 800603c:	1009883a 	mov	r4,r2
 8006040:	e0800217 	ldw	r2,8(fp)
 8006044:	10c00717 	ldw	r3,28(r2)
 8006048:	e0bffd17 	ldw	r2,-12(fp)
 800604c:	1887383a 	mul	r3,r3,r2
 8006050:	e0bffc17 	ldw	r2,-16(fp)
 8006054:	1885883a 	add	r2,r3,r2
 8006058:	1085883a 	add	r2,r2,r2
 800605c:	2085883a 	add	r2,r4,r2
 8006060:	e0bffa15 	stw	r2,-24(fp)
    temp_color = (unsigned int)IORD_16DIRECT(addr, 0);
 8006064:	e0bffa17 	ldw	r2,-24(fp)
 8006068:	1080002b 	ldhuio	r2,0(r2)
 800606c:	10bfffcc 	andi	r2,r2,65535
 8006070:	e0bffb15 	stw	r2,-20(fp)
    *blue = (unsigned char)(temp_color & 0x1F); 
 8006074:	e0bffb17 	ldw	r2,-20(fp)
 8006078:	108007cc 	andi	r2,r2,31
 800607c:	1007883a 	mov	r3,r2
 8006080:	e0800117 	ldw	r2,4(fp)
 8006084:	10c00005 	stb	r3,0(r2)
    *green = (unsigned char)((temp_color >> 5) & 0x3F);
 8006088:	e0bffb17 	ldw	r2,-20(fp)
 800608c:	1004d17a 	srli	r2,r2,5
 8006090:	10800fcc 	andi	r2,r2,63
 8006094:	1007883a 	mov	r3,r2
 8006098:	e0bfff17 	ldw	r2,-4(fp)
 800609c:	10c00005 	stb	r3,0(r2)
    *red = (unsigned char)((temp_color >> 11) & 0x1F);
 80060a0:	e0bffb17 	ldw	r2,-20(fp)
 80060a4:	1004d2fa 	srli	r2,r2,11
 80060a8:	108007cc 	andi	r2,r2,31
 80060ac:	1007883a 	mov	r3,r2
 80060b0:	e0bffe17 	ldw	r2,-8(fp)
 80060b4:	10c00005 	stb	r3,0(r2)
    return_value = 1;
 80060b8:	00800044 	movi	r2,1
 80060bc:	e0bff915 	stw	r2,-28(fp)
 80060c0:	00000706 	br	80060e0 <read_from_frame+0x264>
  }
  else
  {
    *blue = 0;
 80060c4:	e0800117 	ldw	r2,4(fp)
 80060c8:	10000005 	stb	zero,0(r2)
    *red = 0;
 80060cc:	e0bffe17 	ldw	r2,-8(fp)
 80060d0:	10000005 	stb	zero,0(r2)
    *green = 0;
 80060d4:	e0bfff17 	ldw	r2,-4(fp)
 80060d8:	10000005 	stb	zero,0(r2)
    return_value = 0; 
 80060dc:	e03ff915 	stw	zero,-28(fp)
  }

  return return_value;
 80060e0:	e0bff917 	ldw	r2,-28(fp)
}
 80060e4:	e037883a 	mov	sp,fp
 80060e8:	df000017 	ldw	fp,0(sp)
 80060ec:	dec00104 	addi	sp,sp,4
 80060f0:	f800283a 	ret

080060f4 <alpha_blending>:
*           the font color with the background color.
*
******************************************************************/

extern __inline__ int alpha_blending (int horiz_offset, int vert_offset, int background_color, unsigned char alpha, unsigned char *red, unsigned char *green, unsigned char *blue, alt_video_display * display)
{
 80060f4:	defff304 	addi	sp,sp,-52
 80060f8:	dfc00c15 	stw	ra,48(sp)
 80060fc:	df000b15 	stw	fp,44(sp)
 8006100:	df000b04 	addi	fp,sp,44
 8006104:	e13ffc15 	stw	r4,-16(fp)
 8006108:	e17ffd15 	stw	r5,-12(fp)
 800610c:	e1bffe15 	stw	r6,-8(fp)
 8006110:	3805883a 	mov	r2,r7
 8006114:	e0bfff05 	stb	r2,-4(fp)
  int return_value;
  unsigned char background_red, background_green, background_blue;
  unsigned int blended_red, blended_green, blended_blue;  // short since there may be overflow to be clipped
  
  // set red, green, and blue of the background color
  if(background_color == CLEAR_BACKGROUND)
 8006118:	e0bffe17 	ldw	r2,-8(fp)
 800611c:	10bfffd8 	cmpnei	r2,r2,-1
 8006120:	10000b1e 	bne	r2,zero,8006150 <alpha_blending+0x5c>
  {
    read_from_frame (horiz_offset, vert_offset, &background_red, &background_green, &background_blue, display);
 8006124:	e1bffb04 	addi	r6,fp,-20
 8006128:	e0fffb44 	addi	r3,fp,-19
 800612c:	e0bffb84 	addi	r2,fp,-18
 8006130:	d8800015 	stw	r2,0(sp)
 8006134:	e0800517 	ldw	r2,20(fp)
 8006138:	d8800115 	stw	r2,4(sp)
 800613c:	e13ffc17 	ldw	r4,-16(fp)
 8006140:	e17ffd17 	ldw	r5,-12(fp)
 8006144:	180f883a 	mov	r7,r3
 8006148:	8005e7c0 	call	8005e7c <read_from_frame>
 800614c:	00000906 	br	8006174 <alpha_blending+0x80>
  }
  else
  {
    seperate_color_channels(display->color_depth, (unsigned char *)&background_color, &background_red, &background_green, &background_blue);
 8006150:	e0800517 	ldw	r2,20(fp)
 8006154:	11000917 	ldw	r4,36(r2)
 8006158:	e17ffe04 	addi	r5,fp,-8
 800615c:	e1bffb04 	addi	r6,fp,-20
 8006160:	e0fffb44 	addi	r3,fp,-19
 8006164:	e0bffb84 	addi	r2,fp,-18
 8006168:	d8800015 	stw	r2,0(sp)
 800616c:	180f883a 	mov	r7,r3
 8006170:	8005c040 	call	8005c04 <seperate_color_channels>
  }

  // these blended colors may need to be clipped to the maximum amounts the color depth supports
  blended_red = (((*red) * alpha) + (background_red * (255 - alpha)))/255;
 8006174:	e0800217 	ldw	r2,8(fp)
 8006178:	10800003 	ldbu	r2,0(r2)
 800617c:	10c03fcc 	andi	r3,r2,255
 8006180:	e0bfff03 	ldbu	r2,-4(fp)
 8006184:	1887383a 	mul	r3,r3,r2
 8006188:	e0bffb03 	ldbu	r2,-20(fp)
 800618c:	11003fcc 	andi	r4,r2,255
 8006190:	e0bfff03 	ldbu	r2,-4(fp)
 8006194:	01403fc4 	movi	r5,255
 8006198:	2885c83a 	sub	r2,r5,r2
 800619c:	2085383a 	mul	r2,r4,r2
 80061a0:	1885883a 	add	r2,r3,r2
 80061a4:	1009883a 	mov	r4,r2
 80061a8:	01403fc4 	movi	r5,255
 80061ac:	800c9500 	call	800c950 <__divsi3>
 80061b0:	e0bff815 	stw	r2,-32(fp)
  blended_green = (((*green) * alpha) + (background_green * (255 - alpha)))/255;
 80061b4:	e0800317 	ldw	r2,12(fp)
 80061b8:	10800003 	ldbu	r2,0(r2)
 80061bc:	10c03fcc 	andi	r3,r2,255
 80061c0:	e0bfff03 	ldbu	r2,-4(fp)
 80061c4:	1887383a 	mul	r3,r3,r2
 80061c8:	e0bffb43 	ldbu	r2,-19(fp)
 80061cc:	11003fcc 	andi	r4,r2,255
 80061d0:	e0bfff03 	ldbu	r2,-4(fp)
 80061d4:	01403fc4 	movi	r5,255
 80061d8:	2885c83a 	sub	r2,r5,r2
 80061dc:	2085383a 	mul	r2,r4,r2
 80061e0:	1885883a 	add	r2,r3,r2
 80061e4:	1009883a 	mov	r4,r2
 80061e8:	01403fc4 	movi	r5,255
 80061ec:	800c9500 	call	800c950 <__divsi3>
 80061f0:	e0bff915 	stw	r2,-28(fp)
  blended_blue = (((*blue) * alpha) + (background_blue * (255 - alpha)))/255;
 80061f4:	e0800417 	ldw	r2,16(fp)
 80061f8:	10800003 	ldbu	r2,0(r2)
 80061fc:	10c03fcc 	andi	r3,r2,255
 8006200:	e0bfff03 	ldbu	r2,-4(fp)
 8006204:	1887383a 	mul	r3,r3,r2
 8006208:	e0bffb83 	ldbu	r2,-18(fp)
 800620c:	11003fcc 	andi	r4,r2,255
 8006210:	e0bfff03 	ldbu	r2,-4(fp)
 8006214:	01403fc4 	movi	r5,255
 8006218:	2885c83a 	sub	r2,r5,r2
 800621c:	2085383a 	mul	r2,r4,r2
 8006220:	1885883a 	add	r2,r3,r2
 8006224:	1009883a 	mov	r4,r2
 8006228:	01403fc4 	movi	r5,255
 800622c:	800c9500 	call	800c950 <__divsi3>
 8006230:	e0bffa15 	stw	r2,-24(fp)
  

  if(display->color_depth == 16)
 8006234:	e0800517 	ldw	r2,20(fp)
 8006238:	10800917 	ldw	r2,36(r2)
 800623c:	10800418 	cmpnei	r2,r2,16
 8006240:	1000181e 	bne	r2,zero,80062a4 <alpha_blending+0x1b0>
  {
    *red = (blended_red > 0x1F)? 0x1F: blended_red;
 8006244:	e0bff817 	ldw	r2,-32(fp)
 8006248:	10c00830 	cmpltui	r3,r2,32
 800624c:	1800011e 	bne	r3,zero,8006254 <alpha_blending+0x160>
 8006250:	008007c4 	movi	r2,31
 8006254:	1007883a 	mov	r3,r2
 8006258:	e0800217 	ldw	r2,8(fp)
 800625c:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0x3F)? 0x3F: blended_green;
 8006260:	e0bff917 	ldw	r2,-28(fp)
 8006264:	10c01030 	cmpltui	r3,r2,64
 8006268:	1800011e 	bne	r3,zero,8006270 <alpha_blending+0x17c>
 800626c:	00800fc4 	movi	r2,63
 8006270:	1007883a 	mov	r3,r2
 8006274:	e0800317 	ldw	r2,12(fp)
 8006278:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0x1F)? 0x1F: blended_blue; 
 800627c:	e0bffa17 	ldw	r2,-24(fp)
 8006280:	10c00830 	cmpltui	r3,r2,32
 8006284:	1800011e 	bne	r3,zero,800628c <alpha_blending+0x198>
 8006288:	008007c4 	movi	r2,31
 800628c:	1007883a 	mov	r3,r2
 8006290:	e0800417 	ldw	r2,16(fp)
 8006294:	10c00005 	stb	r3,0(r2)
    return_value = 1;        
 8006298:	00800044 	movi	r2,1
 800629c:	e0bff715 	stw	r2,-36(fp)
 80062a0:	00002106 	br	8006328 <alpha_blending+0x234>
  }
  else if((display->color_depth == 24) || (display->color_depth == 32))
 80062a4:	e0800517 	ldw	r2,20(fp)
 80062a8:	10800917 	ldw	r2,36(r2)
 80062ac:	10800620 	cmpeqi	r2,r2,24
 80062b0:	1000041e 	bne	r2,zero,80062c4 <alpha_blending+0x1d0>
 80062b4:	e0800517 	ldw	r2,20(fp)
 80062b8:	10800917 	ldw	r2,36(r2)
 80062bc:	10800818 	cmpnei	r2,r2,32
 80062c0:	1000181e 	bne	r2,zero,8006324 <alpha_blending+0x230>
  {
    *red = (blended_red > 0xFF)? 0xFF: blended_red;
 80062c4:	e0bff817 	ldw	r2,-32(fp)
 80062c8:	10c04030 	cmpltui	r3,r2,256
 80062cc:	1800011e 	bne	r3,zero,80062d4 <alpha_blending+0x1e0>
 80062d0:	00803fc4 	movi	r2,255
 80062d4:	1007883a 	mov	r3,r2
 80062d8:	e0800217 	ldw	r2,8(fp)
 80062dc:	10c00005 	stb	r3,0(r2)
    *green = (blended_green > 0xFF)? 0xFF: blended_green;
 80062e0:	e0bff917 	ldw	r2,-28(fp)
 80062e4:	10c04030 	cmpltui	r3,r2,256
 80062e8:	1800011e 	bne	r3,zero,80062f0 <alpha_blending+0x1fc>
 80062ec:	00803fc4 	movi	r2,255
 80062f0:	1007883a 	mov	r3,r2
 80062f4:	e0800317 	ldw	r2,12(fp)
 80062f8:	10c00005 	stb	r3,0(r2)
    *blue = (blended_blue > 0xFF)? 0xFF: blended_blue; 
 80062fc:	e0bffa17 	ldw	r2,-24(fp)
 8006300:	10c04030 	cmpltui	r3,r2,256
 8006304:	1800011e 	bne	r3,zero,800630c <alpha_blending+0x218>
 8006308:	00803fc4 	movi	r2,255
 800630c:	1007883a 	mov	r3,r2
 8006310:	e0800417 	ldw	r2,16(fp)
 8006314:	10c00005 	stb	r3,0(r2)
    return_value = 1;            
 8006318:	00800044 	movi	r2,1
 800631c:	e0bff715 	stw	r2,-36(fp)
 8006320:	00000106 	br	8006328 <alpha_blending+0x234>
  }
  else
  {
    return_value = 0;     
 8006324:	e03ff715 	stw	zero,-36(fp)
  }  
 
  return return_value;
 8006328:	e0bff717 	ldw	r2,-36(fp)
} 
 800632c:	e037883a 	mov	sp,fp
 8006330:	dfc00117 	ldw	ra,4(sp)
 8006334:	df000017 	ldw	fp,0(sp)
 8006338:	dec00204 	addi	sp,sp,8
 800633c:	f800283a 	ret

08006340 <vid_print_char_alpha>:
*           screen using the specified font and color.
*
******************************************************************/

int vid_print_char_alpha (int horiz_offset, int vert_offset, int color, char character, int background_color, struct abc_font_struct font[], alt_video_display * display)
{
 8006340:	defff004 	addi	sp,sp,-64
 8006344:	dfc00f15 	stw	ra,60(sp)
 8006348:	df000e15 	stw	fp,56(sp)
 800634c:	df000e04 	addi	fp,sp,56
 8006350:	e13ffc15 	stw	r4,-16(fp)
 8006354:	e17ffd15 	stw	r5,-12(fp)
 8006358:	e1bffe15 	stw	r6,-8(fp)
 800635c:	3805883a 	mov	r2,r7
 8006360:	e0bfff05 	stb	r2,-4(fp)
  unsigned char original_red, original_blue, original_green;
  unsigned char red, green, blue;
  int new_color;

  // Assign the pointer of the font bitmap
  alpha = font[character-33].char_alpha_map;
 8006364:	e0bfff07 	ldb	r2,-4(fp)
 8006368:	1004917a 	slli	r2,r2,5
 800636c:	10bef804 	addi	r2,r2,-1056
 8006370:	e0c00317 	ldw	r3,12(fp)
 8006374:	1885883a 	add	r2,r3,r2
 8006378:	10800617 	ldw	r2,24(r2)
 800637c:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);
 8006380:	e0800417 	ldw	r2,16(fp)
 8006384:	11000917 	ldw	r4,36(r2)
 8006388:	e17ffe04 	addi	r5,fp,-8
 800638c:	e1bff904 	addi	r6,fp,-28
 8006390:	e0fff984 	addi	r3,fp,-26
 8006394:	e0bff944 	addi	r2,fp,-27
 8006398:	d8800015 	stw	r2,0(sp)
 800639c:	180f883a 	mov	r7,r3
 80063a0:	8005c040 	call	8005c04 <seperate_color_channels>

  for(i = 0; i < font[character-33].bounds_height; i++) {
 80063a4:	e03ff615 	stw	zero,-40(fp)
 80063a8:	00004406 	br	80064bc <vid_print_char_alpha+0x17c>
    for (j = 0; j < font[character-33].bounds_width; j++) {
 80063ac:	e03ff715 	stw	zero,-36(fp)
 80063b0:	00003706 	br	8006490 <vid_print_char_alpha+0x150>
      red = original_red;
 80063b4:	e0bff903 	ldbu	r2,-28(fp)
 80063b8:	e0bff9c5 	stb	r2,-25(fp)
      green = original_green;
 80063bc:	e0bff983 	ldbu	r2,-26(fp)
 80063c0:	e0bffa05 	stb	r2,-24(fp)
      blue = original_blue;
 80063c4:	e0bff943 	ldbu	r2,-27(fp)
 80063c8:	e0bffa45 	stb	r2,-23(fp)

      // send in the font alpha channel and the colour channels for the blending to occur
      alpha_blending ((horiz_offset + j), (vert_offset + i), background_color, *alpha, &red, &green, &blue, display);
 80063cc:	e0fffc17 	ldw	r3,-16(fp)
 80063d0:	e0bff717 	ldw	r2,-36(fp)
 80063d4:	1889883a 	add	r4,r3,r2
 80063d8:	e0fffd17 	ldw	r3,-12(fp)
 80063dc:	e0bff617 	ldw	r2,-40(fp)
 80063e0:	188b883a 	add	r5,r3,r2
 80063e4:	e0bff817 	ldw	r2,-32(fp)
 80063e8:	10800003 	ldbu	r2,0(r2)
 80063ec:	10c03fcc 	andi	r3,r2,255
 80063f0:	e0bff9c4 	addi	r2,fp,-25
 80063f4:	d8800015 	stw	r2,0(sp)
 80063f8:	e0bffa04 	addi	r2,fp,-24
 80063fc:	d8800115 	stw	r2,4(sp)
 8006400:	e0bffa44 	addi	r2,fp,-23
 8006404:	d8800215 	stw	r2,8(sp)
 8006408:	e0800417 	ldw	r2,16(fp)
 800640c:	d8800315 	stw	r2,12(sp)
 8006410:	e1800217 	ldw	r6,8(fp)
 8006414:	180f883a 	mov	r7,r3
 8006418:	80060f40 	call	80060f4 <alpha_blending>

      // take the blended pixel and merge the color channels back into a single pixel value 
      merge_color_channels(display->color_depth, red, green, blue, (char *)&new_color);
 800641c:	e0800417 	ldw	r2,16(fp)
 8006420:	11000917 	ldw	r4,36(r2)
 8006424:	e0bff9c3 	ldbu	r2,-25(fp)
 8006428:	11403fcc 	andi	r5,r2,255
 800642c:	e0bffa03 	ldbu	r2,-24(fp)
 8006430:	11803fcc 	andi	r6,r2,255
 8006434:	e0bffa43 	ldbu	r2,-23(fp)
 8006438:	10c03fcc 	andi	r3,r2,255
 800643c:	e0bffb04 	addi	r2,fp,-20
 8006440:	d8800015 	stw	r2,0(sp)
 8006444:	180f883a 	mov	r7,r3
 8006448:	8005d4c0 	call	8005d4c <merge_color_channels>
      
      // write the new pixel value out to memory overwriting the current background     
      vid_set_pixel((horiz_offset + j), (vert_offset + i), new_color, display);
 800644c:	e0fffc17 	ldw	r3,-16(fp)
 8006450:	e0bff717 	ldw	r2,-36(fp)
 8006454:	1889883a 	add	r4,r3,r2
 8006458:	e0fffd17 	ldw	r3,-12(fp)
 800645c:	e0bff617 	ldw	r2,-40(fp)
 8006460:	1885883a 	add	r2,r3,r2
 8006464:	e0fffb17 	ldw	r3,-20(fp)
 8006468:	100b883a 	mov	r5,r2
 800646c:	180d883a 	mov	r6,r3
 8006470:	e1c00417 	ldw	r7,16(fp)
 8006474:	80023ec0 	call	80023ec <vid_set_pixel>

      alpha++;
 8006478:	e0bff817 	ldw	r2,-32(fp)
 800647c:	10800044 	addi	r2,r2,1
 8006480:	e0bff815 	stw	r2,-32(fp)

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
    for (j = 0; j < font[character-33].bounds_width; j++) {
 8006484:	e0bff717 	ldw	r2,-36(fp)
 8006488:	10800044 	addi	r2,r2,1
 800648c:	e0bff715 	stw	r2,-36(fp)
 8006490:	e0fff717 	ldw	r3,-36(fp)
 8006494:	e0bfff07 	ldb	r2,-4(fp)
 8006498:	1004917a 	slli	r2,r2,5
 800649c:	10bef804 	addi	r2,r2,-1056
 80064a0:	e1000317 	ldw	r4,12(fp)
 80064a4:	2085883a 	add	r2,r4,r2
 80064a8:	10800417 	ldw	r2,16(r2)
 80064ac:	18bfc136 	bltu	r3,r2,80063b4 <__alt_data_end+0xf80063b4>
  alpha = font[character-33].char_alpha_map;

  // set red, green, and blue of the font color  
  seperate_color_channels(display->color_depth, (char *)&color, &original_red, &original_green, &original_blue);

  for(i = 0; i < font[character-33].bounds_height; i++) {
 80064b0:	e0bff617 	ldw	r2,-40(fp)
 80064b4:	10800044 	addi	r2,r2,1
 80064b8:	e0bff615 	stw	r2,-40(fp)
 80064bc:	e0fff617 	ldw	r3,-40(fp)
 80064c0:	e0bfff07 	ldb	r2,-4(fp)
 80064c4:	1004917a 	slli	r2,r2,5
 80064c8:	10bef804 	addi	r2,r2,-1056
 80064cc:	e1000317 	ldw	r4,12(fp)
 80064d0:	2085883a 	add	r2,r4,r2
 80064d4:	10800517 	ldw	r2,20(r2)
 80064d8:	18bfb436 	bltu	r3,r2,80063ac <__alt_data_end+0xf80063ac>

      alpha++;
    }
  }

  return(0);
 80064dc:	0005883a 	mov	r2,zero
}
 80064e0:	e037883a 	mov	sp,fp
 80064e4:	dfc00117 	ldw	ra,4(sp)
 80064e8:	df000017 	ldw	fp,0(sp)
 80064ec:	dec00204 	addi	sp,sp,8
 80064f0:	f800283a 	ret

080064f4 <vid_string_pixel_length_alpha>:
*           font.  Useful for centering text, and determining the
*           appropriate size of a text box or button.
*
******************************************************************/
int vid_string_pixel_length_alpha( struct abc_font_struct font[], char string[] )
{
 80064f4:	defffb04 	addi	sp,sp,-20
 80064f8:	df000415 	stw	fp,16(sp)
 80064fc:	df000404 	addi	fp,sp,16
 8006500:	e13ffe15 	stw	r4,-8(fp)
 8006504:	e17fff15 	stw	r5,-4(fp)
  int i = 0;
 8006508:	e03ffc15 	stw	zero,-16(fp)
  int length = 0;
 800650c:	e03ffd15 	stw	zero,-12(fp)

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 8006510:	e03ffc15 	stw	zero,-16(fp)
 8006514:	00002206 	br	80065a0 <vid_string_pixel_length_alpha+0xac>
  {
    if( string[i] == ' ' )
 8006518:	e0bffc17 	ldw	r2,-16(fp)
 800651c:	e0ffff17 	ldw	r3,-4(fp)
 8006520:	1885883a 	add	r2,r3,r2
 8006524:	10800003 	ldbu	r2,0(r2)
 8006528:	10803fcc 	andi	r2,r2,255
 800652c:	1080201c 	xori	r2,r2,128
 8006530:	10bfe004 	addi	r2,r2,-128
 8006534:	10800818 	cmpnei	r2,r2,32
 8006538:	1000071e 	bne	r2,zero,8006558 <vid_string_pixel_length_alpha+0x64>
    {
      // Here we just add the length of the '-' character
      length += font[45 - 33].bounds_width;
 800653c:	e0bffe17 	ldw	r2,-8(fp)
 8006540:	10806004 	addi	r2,r2,384
 8006544:	10c00417 	ldw	r3,16(r2)
 8006548:	e0bffd17 	ldw	r2,-12(fp)
 800654c:	1885883a 	add	r2,r3,r2
 8006550:	e0bffd15 	stw	r2,-12(fp)
 8006554:	00000f06 	br	8006594 <vid_string_pixel_length_alpha+0xa0>
    }
    else
    {
      length += font[string[i] - 33].bounds_width;
 8006558:	e0bffc17 	ldw	r2,-16(fp)
 800655c:	e0ffff17 	ldw	r3,-4(fp)
 8006560:	1885883a 	add	r2,r3,r2
 8006564:	10800003 	ldbu	r2,0(r2)
 8006568:	10803fcc 	andi	r2,r2,255
 800656c:	1080201c 	xori	r2,r2,128
 8006570:	10bfe004 	addi	r2,r2,-128
 8006574:	1004917a 	slli	r2,r2,5
 8006578:	10bef804 	addi	r2,r2,-1056
 800657c:	e0fffe17 	ldw	r3,-8(fp)
 8006580:	1885883a 	add	r2,r3,r2
 8006584:	10c00417 	ldw	r3,16(r2)
 8006588:	e0bffd17 	ldw	r2,-12(fp)
 800658c:	1885883a 	add	r2,r3,r2
 8006590:	e0bffd15 	stw	r2,-12(fp)
{
  int i = 0;
  int length = 0;

  // Count the length of the string
  for( i = 0; string[i] != '\0'; i++ )
 8006594:	e0bffc17 	ldw	r2,-16(fp)
 8006598:	10800044 	addi	r2,r2,1
 800659c:	e0bffc15 	stw	r2,-16(fp)
 80065a0:	e0bffc17 	ldw	r2,-16(fp)
 80065a4:	e0ffff17 	ldw	r3,-4(fp)
 80065a8:	1885883a 	add	r2,r3,r2
 80065ac:	10800003 	ldbu	r2,0(r2)
 80065b0:	10803fcc 	andi	r2,r2,255
 80065b4:	1080201c 	xori	r2,r2,128
 80065b8:	10bfe004 	addi	r2,r2,-128
 80065bc:	103fd61e 	bne	r2,zero,8006518 <__alt_data_end+0xf8006518>
    else
    {
      length += font[string[i] - 33].bounds_width;
    }
  }
  return( length );
 80065c0:	e0bffd17 	ldw	r2,-12(fp)
}
 80065c4:	e037883a 	mov	sp,fp
 80065c8:	df000017 	ldw	fp,0(sp)
 80065cc:	dec00104 	addi	sp,sp,4
 80065d0:	f800283a 	ret

080065d4 <main>:
#include "Temp_RH.h"
#include "math.h"


int main()
{
 80065d4:	defff904 	addi	sp,sp,-28
 80065d8:	dfc00615 	stw	ra,24(sp)
 80065dc:	df000515 	stw	fp,20(sp)
 80065e0:	df000504 	addi	fp,sp,20
  
  // This is our LCD display
  alt_video_display* display;

  // Initialize and start the LCD display
  display = alt_video_display_init( ALT_VIDEO_DISPLAY_SGDMA_NAME,         // char* sgdma_name
 80065e4:	00bfffc4 	movi	r2,-1
 80065e8:	d8800015 	stw	r2,0(sp)
 80065ec:	00bfffc4 	movi	r2,-1
 80065f0:	d8800115 	stw	r2,4(sp)
 80065f4:	00800084 	movi	r2,2
 80065f8:	d8800215 	stw	r2,8(sp)
 80065fc:	010205b4 	movhi	r4,2070
 8006600:	2115cb04 	addi	r4,r4,22316
 8006604:	0140c804 	movi	r5,800
 8006608:	01807804 	movi	r6,480
 800660c:	01c00804 	movi	r7,32
 8006610:	800028c0 	call	800028c <alt_video_display_init>
 8006614:	e0bffe15 	stw	r2,-8(fp)
                                    ALT_VIDEO_DISPLAY_USE_HEAP,           // int buffer_location
                                    ALT_VIDEO_DISPLAY_USE_HEAP,           // int descriptor_location
                                    2 );                                  // int num_buffers                                  // int num_buffers                                   
  // Set the Gamma Curve and Resolution of the LCD
  
  RH_Temp_Sensor_init();
 8006618:	80098e00 	call	80098e0 <RH_Temp_Sensor_init>
  MainMenu(display);  
 800661c:	e13ffe17 	ldw	r4,-8(fp)
 8006620:	800663c0 	call	800663c <MainMenu>

  return ( ret_code );
 8006624:	e0bfff17 	ldw	r2,-4(fp)
}
 8006628:	e037883a 	mov	sp,fp
 800662c:	dfc00117 	ldw	ra,4(sp)
 8006630:	df000017 	ldw	fp,0(sp)
 8006634:	dec00204 	addi	sp,sp,8
 8006638:	f800283a 	ret

0800663c <MainMenu>:
buttons_struct command_buttons;

int isCelsius, isFahrenheit, isKelvin;
RECT celsiusButton, fahrenheitButton, kelvinButton;

int MainMenu( alt_video_display* display){
 800663c:	deffba04 	addi	sp,sp,-280
 8006640:	dfc04515 	stw	ra,276(sp)
 8006644:	df004415 	stw	fp,272(sp)
 8006648:	df004404 	addi	fp,sp,272
 800664c:	e13fff15 	stw	r4,-4(fp)
    int    RhLinex_end,RhLiney_end;
    float  angle;

    //temp display
    void *temp_Buffer;
    temp_Buffer =(void*)malloc(display->bytes_per_frame);
 8006650:	e0bfff17 	ldw	r2,-4(fp)
 8006654:	10800b17 	ldw	r2,44(r2)
 8006658:	1009883a 	mov	r4,r2
 800665c:	800f4880 	call	800f488 <malloc>
 8006660:	e0bfca15 	stw	r2,-216(fp)
    printf("===== welcome to Temp_RH demo program =====\n");
 8006664:	010205b4 	movhi	r4,2070
 8006668:	2115cf04 	addi	r4,r4,22332
 800666c:	800ffc40 	call	800ffc4 <puts>
    usleep(200*1000);
 8006670:	010000f4 	movhi	r4,3
 8006674:	21035004 	addi	r4,r4,3392
 8006678:	801d36c0 	call	801d36c <usleep>
    InitBackGround(display, temp_Buffer);
 800667c:	e13fff17 	ldw	r4,-4(fp)
 8006680:	e17fca17 	ldw	r5,-216(fp)
 8006684:	80079880 	call	8007988 <InitBackGround>
    extern struct gimp_image_struct dot;

    const bool bVPG = ((IORD(KEY_BASE, 0x00) & 0x01) == 0x00)?TRUE:FALSE;
 8006688:	00840034 	movhi	r2,4096
 800668c:	10801804 	addi	r2,r2,96
 8006690:	10800037 	ldwio	r2,0(r2)
 8006694:	1080004c 	andi	r2,r2,1
 8006698:	1005003a 	cmpeq	r2,r2,zero
 800669c:	10803fcc 	andi	r2,r2,255
 80066a0:	e0bfcb15 	stw	r2,-212(fp)
    //IOWR(LED_BASE, 0x00, 0xFF);

    oc_i2c_init(I2C_OPENCORES_0_BASE);
 80066a4:	01040034 	movhi	r4,4096
 80066a8:	80084640 	call	8008464 <oc_i2c_init>

    usleep(1000);
 80066ac:	0100fa04 	movi	r4,1000
 80066b0:	801d36c0 	call	801d36c <usleep>

    MTC2_INFO *pTouch = MTC2_Init(I2C_OPENCORES_0_BASE,LCD_TOUCH_INT_BASE,LCD_TOUCH_INT_IRQ);
 80066b4:	01040034 	movhi	r4,4096
 80066b8:	01440034 	movhi	r5,4096
 80066bc:	29401004 	addi	r5,r5,64
 80066c0:	01800104 	movi	r6,4
 80066c4:	800a1740 	call	800a174 <MTC2_Init>
 80066c8:	e0bfcc15 	stw	r2,-208(fp)
	if (!pTouch){
 80066cc:	e0bfcc17 	ldw	r2,-208(fp)
 80066d0:	1000041e 	bne	r2,zero,80066e4 <MainMenu+0xa8>
		printf("Failed to init multi-touch\r\n");
 80066d4:	010205b4 	movhi	r4,2070
 80066d8:	2115da04 	addi	r4,r4,22376
 80066dc:	800ffc40 	call	800ffc4 <puts>
 80066e0:	00000306 	br	80066f0 <MainMenu+0xb4>
	}else{
		printf("Init touch successfully\r\n");
 80066e4:	010205b4 	movhi	r4,2070
 80066e8:	2115e104 	addi	r4,r4,22404
 80066ec:	800ffc40 	call	800ffc4 <puts>
	}

	isCelsius = TRUE;
 80066f0:	00800044 	movi	r2,1
 80066f4:	d0ab2115 	stw	r2,-21372(gp)
	isFahrenheit = FALSE;
 80066f8:	d02b2215 	stw	zero,-21368(gp)
	isKelvin = FALSE;
 80066fc:	d02b2315 	stw	zero,-21364(gp)

	RectSet(&celsiusButton, 400, 700, 100, 160);
 8006700:	00802804 	movi	r2,160
 8006704:	d8800015 	stw	r2,0(sp)
 8006708:	010205f4 	movhi	r4,2071
 800670c:	212f8c04 	addi	r4,r4,-16848
 8006710:	01406404 	movi	r5,400
 8006714:	0180af04 	movi	r6,700
 8006718:	01c01904 	movi	r7,100
 800671c:	800196c0 	call	800196c <RectSet>
	RectSet(&fahrenheitButton, 400, 700, 200, 260);
 8006720:	00804104 	movi	r2,260
 8006724:	d8800015 	stw	r2,0(sp)
 8006728:	010205f4 	movhi	r4,2071
 800672c:	212f8804 	addi	r4,r4,-16864
 8006730:	01406404 	movi	r5,400
 8006734:	0180af04 	movi	r6,700
 8006738:	01c03204 	movi	r7,200
 800673c:	800196c0 	call	800196c <RectSet>
	RectSet(&kelvinButton, 400, 700, 300, 360);
 8006740:	00805a04 	movi	r2,360
 8006744:	d8800015 	stw	r2,0(sp)
 8006748:	010205f4 	movhi	r4,2071
 800674c:	212e7e04 	addi	r4,r4,-17928
 8006750:	01406404 	movi	r5,400
 8006754:	0180af04 	movi	r6,700
 8006758:	01c04b04 	movi	r7,300
 800675c:	800196c0 	call	800196c <RectSet>
	POINT Pt1;

	double resultTemperature;
	char postfix[3];

	int ind = 0;
 8006760:	e03fc715 	stw	zero,-228(fp)

	while(1)
	{     
		if(!sensor_getdata()){
 8006764:	80099fc0 	call	80099fc <sensor_getdata>
 8006768:	1000051e 	bne	r2,zero,8006780 <MainMenu+0x144>
			printf("sensor_getdata failed!\n");
 800676c:	010205b4 	movhi	r4,2070
 8006770:	2115e804 	addi	r4,r4,22432
 8006774:	800ffc40 	call	800ffc4 <puts>
			return 0;
 8006778:	0005883a 	mov	r2,zero
 800677c:	00037806 	br	8007560 <MainMenu+0xf24>
		}
		if(rh==0){
 8006780:	d0ab1f17 	ldw	r2,-21380(gp)
 8006784:	d12b2004 	addi	r4,gp,-21376
 8006788:	20c00017 	ldw	r3,0(r4)
 800678c:	1009883a 	mov	r4,r2
 8006790:	180b883a 	mov	r5,r3
 8006794:	000d883a 	mov	r6,zero
 8006798:	000f883a 	mov	r7,zero
 800679c:	800db780 	call	800db78 <__eqdf2>
 80067a0:	1000051e 	bne	r2,zero,80067b8 <MainMenu+0x17c>
				RhLinex_end=RhLinex_zero-Line_R;
 80067a4:	00807dc4 	movi	r2,503
 80067a8:	e0bfcd15 	stw	r2,-204(fp)
				RhLiney_end=RhLiney_zero;
 80067ac:	00804584 	movi	r2,278
 80067b0:	e0bfce15 	stw	r2,-200(fp)
 80067b4:	00010206 	br	8006bc0 <MainMenu+0x584>
			}
		else if((rh>0)&&(rh<50)){
 80067b8:	d0ab1f17 	ldw	r2,-21380(gp)
 80067bc:	d12b2004 	addi	r4,gp,-21376
 80067c0:	20c00017 	ldw	r3,0(r4)
 80067c4:	1009883a 	mov	r4,r2
 80067c8:	180b883a 	mov	r5,r3
 80067cc:	000d883a 	mov	r6,zero
 80067d0:	000f883a 	mov	r7,zero
 80067d4:	800dbfc0 	call	800dbfc <__gedf2>
 80067d8:	0080660e 	bge	zero,r2,8006974 <MainMenu+0x338>
 80067dc:	d0ab1f17 	ldw	r2,-21380(gp)
 80067e0:	d12b2004 	addi	r4,gp,-21376
 80067e4:	20c00017 	ldw	r3,0(r4)
 80067e8:	1009883a 	mov	r4,r2
 80067ec:	180b883a 	mov	r5,r3
 80067f0:	000d883a 	mov	r6,zero
 80067f4:	01d01274 	movhi	r7,16457
 80067f8:	800dcdc0 	call	800dcdc <__ledf2>
 80067fc:	10005d0e 	bge	r2,zero,8006974 <MainMenu+0x338>
				angle=rh/100.0*M_PI;
 8006800:	d0ab1f17 	ldw	r2,-21380(gp)
 8006804:	d12b2004 	addi	r4,gp,-21376
 8006808:	20c00017 	ldw	r3,0(r4)
 800680c:	1009883a 	mov	r4,r2
 8006810:	180b883a 	mov	r5,r3
 8006814:	000d883a 	mov	r6,zero
 8006818:	01d01674 	movhi	r7,16473
 800681c:	800d2ac0 	call	800d2ac <__divdf3>
 8006820:	1009883a 	mov	r4,r2
 8006824:	180b883a 	mov	r5,r3
 8006828:	2005883a 	mov	r2,r4
 800682c:	2807883a 	mov	r3,r5
 8006830:	1009883a 	mov	r4,r2
 8006834:	180b883a 	mov	r5,r3
 8006838:	01951134 	movhi	r6,21572
 800683c:	318b4604 	addi	r6,r6,11544
 8006840:	01d00274 	movhi	r7,16393
 8006844:	39c87ec4 	addi	r7,r7,8699
 8006848:	800ddbc0 	call	800ddbc <__muldf3>
 800684c:	1009883a 	mov	r4,r2
 8006850:	180b883a 	mov	r5,r3
 8006854:	2005883a 	mov	r2,r4
 8006858:	2807883a 	mov	r3,r5
 800685c:	1009883a 	mov	r4,r2
 8006860:	180b883a 	mov	r5,r3
 8006864:	800f0bc0 	call	800f0bc <__truncdfsf2>
 8006868:	1007883a 	mov	r3,r2
 800686c:	e0ffcf15 	stw	r3,-196(fp)
				RhLinex_end=RhLinex_zero-Line_R*cos(angle);
 8006870:	e13fcf17 	ldw	r4,-196(fp)
 8006874:	800efac0 	call	800efac <__extendsfdf2>
 8006878:	100b883a 	mov	r5,r2
 800687c:	180d883a 	mov	r6,r3
 8006880:	2809883a 	mov	r4,r5
 8006884:	300b883a 	mov	r5,r6
 8006888:	800a6e80 	call	800a6e8 <cos>
 800688c:	100b883a 	mov	r5,r2
 8006890:	180d883a 	mov	r6,r3
 8006894:	2809883a 	mov	r4,r5
 8006898:	300b883a 	mov	r5,r6
 800689c:	000d883a 	mov	r6,zero
 80068a0:	01d013b4 	movhi	r7,16462
 80068a4:	800ddbc0 	call	800ddbc <__muldf3>
 80068a8:	1009883a 	mov	r4,r2
 80068ac:	180b883a 	mov	r5,r3
 80068b0:	2005883a 	mov	r2,r4
 80068b4:	2807883a 	mov	r3,r5
 80068b8:	0009883a 	mov	r4,zero
 80068bc:	015020b4 	movhi	r5,16514
 80068c0:	29660004 	addi	r5,r5,-26624
 80068c4:	100d883a 	mov	r6,r2
 80068c8:	180f883a 	mov	r7,r3
 80068cc:	800e4e00 	call	800e4e0 <__subdf3>
 80068d0:	1009883a 	mov	r4,r2
 80068d4:	180b883a 	mov	r5,r3
 80068d8:	2005883a 	mov	r2,r4
 80068dc:	2807883a 	mov	r3,r5
 80068e0:	1009883a 	mov	r4,r2
 80068e4:	180b883a 	mov	r5,r3
 80068e8:	800edb00 	call	800edb0 <__fixdfsi>
 80068ec:	e0bfcd15 	stw	r2,-204(fp)
				RhLiney_end=RhLiney_zero-Line_R*sin(angle);
 80068f0:	e13fcf17 	ldw	r4,-196(fp)
 80068f4:	800efac0 	call	800efac <__extendsfdf2>
 80068f8:	100b883a 	mov	r5,r2
 80068fc:	180d883a 	mov	r6,r3
 8006900:	2809883a 	mov	r4,r5
 8006904:	300b883a 	mov	r5,r6
 8006908:	800a7d40 	call	800a7d4 <sin>
 800690c:	100b883a 	mov	r5,r2
 8006910:	180d883a 	mov	r6,r3
 8006914:	2809883a 	mov	r4,r5
 8006918:	300b883a 	mov	r5,r6
 800691c:	000d883a 	mov	r6,zero
 8006920:	01d013b4 	movhi	r7,16462
 8006924:	800ddbc0 	call	800ddbc <__muldf3>
 8006928:	1009883a 	mov	r4,r2
 800692c:	180b883a 	mov	r5,r3
 8006930:	2005883a 	mov	r2,r4
 8006934:	2807883a 	mov	r3,r5
 8006938:	0009883a 	mov	r4,zero
 800693c:	01501c74 	movhi	r5,16497
 8006940:	29580004 	addi	r5,r5,24576
 8006944:	100d883a 	mov	r6,r2
 8006948:	180f883a 	mov	r7,r3
 800694c:	800e4e00 	call	800e4e0 <__subdf3>
 8006950:	1009883a 	mov	r4,r2
 8006954:	180b883a 	mov	r5,r3
 8006958:	2005883a 	mov	r2,r4
 800695c:	2807883a 	mov	r3,r5
 8006960:	1009883a 	mov	r4,r2
 8006964:	180b883a 	mov	r5,r3
 8006968:	800edb00 	call	800edb0 <__fixdfsi>
 800696c:	e0bfce15 	stw	r2,-200(fp)
 8006970:	00009306 	br	8006bc0 <MainMenu+0x584>
			}
		else if(rh==50){
 8006974:	d0ab1f17 	ldw	r2,-21380(gp)
 8006978:	d12b2004 	addi	r4,gp,-21376
 800697c:	20c00017 	ldw	r3,0(r4)
 8006980:	1009883a 	mov	r4,r2
 8006984:	180b883a 	mov	r5,r3
 8006988:	000d883a 	mov	r6,zero
 800698c:	01d01274 	movhi	r7,16457
 8006990:	800db780 	call	800db78 <__eqdf2>
 8006994:	1000051e 	bne	r2,zero,80069ac <MainMenu+0x370>
				RhLinex_end=RhLinex_zero;
 8006998:	00808cc4 	movi	r2,563
 800699c:	e0bfcd15 	stw	r2,-204(fp)
				RhLiney_end=RhLiney_zero-Line_R;
 80069a0:	00803684 	movi	r2,218
 80069a4:	e0bfce15 	stw	r2,-200(fp)
 80069a8:	00008506 	br	8006bc0 <MainMenu+0x584>
			}
		else if((rh>50)&&(rh<100)){
 80069ac:	d0ab1f17 	ldw	r2,-21380(gp)
 80069b0:	d12b2004 	addi	r4,gp,-21376
 80069b4:	20c00017 	ldw	r3,0(r4)
 80069b8:	1009883a 	mov	r4,r2
 80069bc:	180b883a 	mov	r5,r3
 80069c0:	000d883a 	mov	r6,zero
 80069c4:	01d01274 	movhi	r7,16457
 80069c8:	800dbfc0 	call	800dbfc <__gedf2>
 80069cc:	00806f0e 	bge	zero,r2,8006b8c <MainMenu+0x550>
 80069d0:	d0ab1f17 	ldw	r2,-21380(gp)
 80069d4:	d12b2004 	addi	r4,gp,-21376
 80069d8:	20c00017 	ldw	r3,0(r4)
 80069dc:	1009883a 	mov	r4,r2
 80069e0:	180b883a 	mov	r5,r3
 80069e4:	000d883a 	mov	r6,zero
 80069e8:	01d01674 	movhi	r7,16473
 80069ec:	800dcdc0 	call	800dcdc <__ledf2>
 80069f0:	1000660e 	bge	r2,zero,8006b8c <MainMenu+0x550>
				angle=(1-rh/100.0)*M_PI;
 80069f4:	d0ab1f17 	ldw	r2,-21380(gp)
 80069f8:	d12b2004 	addi	r4,gp,-21376
 80069fc:	20c00017 	ldw	r3,0(r4)
 8006a00:	1009883a 	mov	r4,r2
 8006a04:	180b883a 	mov	r5,r3
 8006a08:	000d883a 	mov	r6,zero
 8006a0c:	01d01674 	movhi	r7,16473
 8006a10:	800d2ac0 	call	800d2ac <__divdf3>
 8006a14:	1009883a 	mov	r4,r2
 8006a18:	180b883a 	mov	r5,r3
 8006a1c:	2005883a 	mov	r2,r4
 8006a20:	2807883a 	mov	r3,r5
 8006a24:	0009883a 	mov	r4,zero
 8006a28:	014ffc34 	movhi	r5,16368
 8006a2c:	100d883a 	mov	r6,r2
 8006a30:	180f883a 	mov	r7,r3
 8006a34:	800e4e00 	call	800e4e0 <__subdf3>
 8006a38:	1009883a 	mov	r4,r2
 8006a3c:	180b883a 	mov	r5,r3
 8006a40:	2005883a 	mov	r2,r4
 8006a44:	2807883a 	mov	r3,r5
 8006a48:	1009883a 	mov	r4,r2
 8006a4c:	180b883a 	mov	r5,r3
 8006a50:	01951134 	movhi	r6,21572
 8006a54:	318b4604 	addi	r6,r6,11544
 8006a58:	01d00274 	movhi	r7,16393
 8006a5c:	39c87ec4 	addi	r7,r7,8699
 8006a60:	800ddbc0 	call	800ddbc <__muldf3>
 8006a64:	1009883a 	mov	r4,r2
 8006a68:	180b883a 	mov	r5,r3
 8006a6c:	2005883a 	mov	r2,r4
 8006a70:	2807883a 	mov	r3,r5
 8006a74:	1009883a 	mov	r4,r2
 8006a78:	180b883a 	mov	r5,r3
 8006a7c:	800f0bc0 	call	800f0bc <__truncdfsf2>
 8006a80:	1007883a 	mov	r3,r2
 8006a84:	e0ffcf15 	stw	r3,-196(fp)
				RhLinex_end=RhLinex_zero+Line_R*cos(angle);
 8006a88:	e13fcf17 	ldw	r4,-196(fp)
 8006a8c:	800efac0 	call	800efac <__extendsfdf2>
 8006a90:	100b883a 	mov	r5,r2
 8006a94:	180d883a 	mov	r6,r3
 8006a98:	2809883a 	mov	r4,r5
 8006a9c:	300b883a 	mov	r5,r6
 8006aa0:	800a6e80 	call	800a6e8 <cos>
 8006aa4:	100b883a 	mov	r5,r2
 8006aa8:	180d883a 	mov	r6,r3
 8006aac:	2809883a 	mov	r4,r5
 8006ab0:	300b883a 	mov	r5,r6
 8006ab4:	000d883a 	mov	r6,zero
 8006ab8:	01d013b4 	movhi	r7,16462
 8006abc:	800ddbc0 	call	800ddbc <__muldf3>
 8006ac0:	1009883a 	mov	r4,r2
 8006ac4:	180b883a 	mov	r5,r3
 8006ac8:	2005883a 	mov	r2,r4
 8006acc:	2807883a 	mov	r3,r5
 8006ad0:	1009883a 	mov	r4,r2
 8006ad4:	180b883a 	mov	r5,r3
 8006ad8:	000d883a 	mov	r6,zero
 8006adc:	01d020b4 	movhi	r7,16514
 8006ae0:	39e60004 	addi	r7,r7,-26624
 8006ae4:	800ca100 	call	800ca10 <__adddf3>
 8006ae8:	1009883a 	mov	r4,r2
 8006aec:	180b883a 	mov	r5,r3
 8006af0:	2005883a 	mov	r2,r4
 8006af4:	2807883a 	mov	r3,r5
 8006af8:	1009883a 	mov	r4,r2
 8006afc:	180b883a 	mov	r5,r3
 8006b00:	800edb00 	call	800edb0 <__fixdfsi>
 8006b04:	e0bfcd15 	stw	r2,-204(fp)
				RhLiney_end=RhLiney_zero-Line_R*sin(angle);
 8006b08:	e13fcf17 	ldw	r4,-196(fp)
 8006b0c:	800efac0 	call	800efac <__extendsfdf2>
 8006b10:	100b883a 	mov	r5,r2
 8006b14:	180d883a 	mov	r6,r3
 8006b18:	2809883a 	mov	r4,r5
 8006b1c:	300b883a 	mov	r5,r6
 8006b20:	800a7d40 	call	800a7d4 <sin>
 8006b24:	100b883a 	mov	r5,r2
 8006b28:	180d883a 	mov	r6,r3
 8006b2c:	2809883a 	mov	r4,r5
 8006b30:	300b883a 	mov	r5,r6
 8006b34:	000d883a 	mov	r6,zero
 8006b38:	01d013b4 	movhi	r7,16462
 8006b3c:	800ddbc0 	call	800ddbc <__muldf3>
 8006b40:	1009883a 	mov	r4,r2
 8006b44:	180b883a 	mov	r5,r3
 8006b48:	2005883a 	mov	r2,r4
 8006b4c:	2807883a 	mov	r3,r5
 8006b50:	0009883a 	mov	r4,zero
 8006b54:	01501c74 	movhi	r5,16497
 8006b58:	29580004 	addi	r5,r5,24576
 8006b5c:	100d883a 	mov	r6,r2
 8006b60:	180f883a 	mov	r7,r3
 8006b64:	800e4e00 	call	800e4e0 <__subdf3>
 8006b68:	1009883a 	mov	r4,r2
 8006b6c:	180b883a 	mov	r5,r3
 8006b70:	2005883a 	mov	r2,r4
 8006b74:	2807883a 	mov	r3,r5
 8006b78:	1009883a 	mov	r4,r2
 8006b7c:	180b883a 	mov	r5,r3
 8006b80:	800edb00 	call	800edb0 <__fixdfsi>
 8006b84:	e0bfce15 	stw	r2,-200(fp)
 8006b88:	00000d06 	br	8006bc0 <MainMenu+0x584>
			}
		else if(rh==100){
 8006b8c:	d0ab1f17 	ldw	r2,-21380(gp)
 8006b90:	d12b2004 	addi	r4,gp,-21376
 8006b94:	20c00017 	ldw	r3,0(r4)
 8006b98:	1009883a 	mov	r4,r2
 8006b9c:	180b883a 	mov	r5,r3
 8006ba0:	000d883a 	mov	r6,zero
 8006ba4:	01d01674 	movhi	r7,16473
 8006ba8:	800db780 	call	800db78 <__eqdf2>
 8006bac:	1000041e 	bne	r2,zero,8006bc0 <MainMenu+0x584>
				RhLinex_end=RhLinex_zero+Line_R;
 8006bb0:	00809bc4 	movi	r2,623
 8006bb4:	e0bfcd15 	stw	r2,-204(fp)
				RhLiney_end=RhLiney_zero;
 8006bb8:	00804584 	movi	r2,278
 8006bbc:	e0bfce15 	stw	r2,-200(fp)
			}

		if(MTC2_GetStatus(pTouch, &Event, &TouchNum, &X1, &Y1, &X2, &Y2, &X3, &Y3, &X4, &Y4, &X5, &Y5)) {
 8006bc0:	e17ff104 	addi	r5,fp,-60
 8006bc4:	e1bff144 	addi	r6,fp,-59
 8006bc8:	e0fff204 	addi	r3,fp,-56
 8006bcc:	e0bff304 	addi	r2,fp,-52
 8006bd0:	d8800015 	stw	r2,0(sp)
 8006bd4:	e0bff404 	addi	r2,fp,-48
 8006bd8:	d8800115 	stw	r2,4(sp)
 8006bdc:	e0bff504 	addi	r2,fp,-44
 8006be0:	d8800215 	stw	r2,8(sp)
 8006be4:	e0bff604 	addi	r2,fp,-40
 8006be8:	d8800315 	stw	r2,12(sp)
 8006bec:	e0bff704 	addi	r2,fp,-36
 8006bf0:	d8800415 	stw	r2,16(sp)
 8006bf4:	e0bff804 	addi	r2,fp,-32
 8006bf8:	d8800515 	stw	r2,20(sp)
 8006bfc:	e0bff904 	addi	r2,fp,-28
 8006c00:	d8800615 	stw	r2,24(sp)
 8006c04:	e0bffa04 	addi	r2,fp,-24
 8006c08:	d8800715 	stw	r2,28(sp)
 8006c0c:	e0bffb04 	addi	r2,fp,-20
 8006c10:	d8800815 	stw	r2,32(sp)
 8006c14:	e13fcc17 	ldw	r4,-208(fp)
 8006c18:	180f883a 	mov	r7,r3
 8006c1c:	800a2b80 	call	800a2b8 <MTC2_GetStatus>
 8006c20:	10002926 	beq	r2,zero,8006cc8 <MainMenu+0x68c>
			PtSet(&Pt1, X1, Y1);
 8006c24:	e0fff217 	ldw	r3,-56(fp)
 8006c28:	e0bff317 	ldw	r2,-52(fp)
 8006c2c:	e13ffc04 	addi	r4,fp,-16
 8006c30:	180b883a 	mov	r5,r3
 8006c34:	100d883a 	mov	r6,r2
 8006c38:	800192c0 	call	800192c <PtSet>

			printf("TOUCH\n");
 8006c3c:	010205b4 	movhi	r4,2070
 8006c40:	2115ee04 	addi	r4,r4,22456
 8006c44:	800ffc40 	call	800ffc4 <puts>

			if(IsPtInRect(&Pt1, &celsiusButton)) {
 8006c48:	e0bffc04 	addi	r2,fp,-16
 8006c4c:	1009883a 	mov	r4,r2
 8006c50:	014205f4 	movhi	r5,2071
 8006c54:	296f8c04 	addi	r5,r5,-16848
 8006c58:	80018a80 	call	80018a8 <IsPtInRect>
 8006c5c:	10000526 	beq	r2,zero,8006c74 <MainMenu+0x638>
				isCelsius = TRUE;
 8006c60:	00800044 	movi	r2,1
 8006c64:	d0ab2115 	stw	r2,-21372(gp)
				isFahrenheit = FALSE;
 8006c68:	d02b2215 	stw	zero,-21368(gp)
				isKelvin = FALSE;
 8006c6c:	d02b2315 	stw	zero,-21364(gp)
 8006c70:	00001506 	br	8006cc8 <MainMenu+0x68c>
			}
			else if(IsPtInRect(&Pt1, &fahrenheitButton)) {
 8006c74:	e0bffc04 	addi	r2,fp,-16
 8006c78:	1009883a 	mov	r4,r2
 8006c7c:	014205f4 	movhi	r5,2071
 8006c80:	296f8804 	addi	r5,r5,-16864
 8006c84:	80018a80 	call	80018a8 <IsPtInRect>
 8006c88:	10000526 	beq	r2,zero,8006ca0 <MainMenu+0x664>
				isCelsius = FALSE;
 8006c8c:	d02b2115 	stw	zero,-21372(gp)
				isFahrenheit = TRUE;
 8006c90:	00800044 	movi	r2,1
 8006c94:	d0ab2215 	stw	r2,-21368(gp)
				isKelvin = FALSE;
 8006c98:	d02b2315 	stw	zero,-21364(gp)
 8006c9c:	00000a06 	br	8006cc8 <MainMenu+0x68c>
			}
			else if(IsPtInRect(&Pt1, &kelvinButton)) {
 8006ca0:	e0bffc04 	addi	r2,fp,-16
 8006ca4:	1009883a 	mov	r4,r2
 8006ca8:	014205f4 	movhi	r5,2071
 8006cac:	296e7e04 	addi	r5,r5,-17928
 8006cb0:	80018a80 	call	80018a8 <IsPtInRect>
 8006cb4:	10000426 	beq	r2,zero,8006cc8 <MainMenu+0x68c>
				isCelsius = FALSE;
 8006cb8:	d02b2115 	stw	zero,-21372(gp)
				isFahrenheit = FALSE;
 8006cbc:	d02b2215 	stw	zero,-21368(gp)
				isKelvin = TRUE;
 8006cc0:	00800044 	movi	r2,1
 8006cc4:	d0ab2315 	stw	r2,-21364(gp)
			}
		}

		++ind;
 8006cc8:	e0bfc717 	ldw	r2,-228(fp)
 8006ccc:	10800044 	addi	r2,r2,1
 8006cd0:	e0bfc715 	stw	r2,-228(fp)

		isCelsius = !(ind % 3);
 8006cd4:	e0bfc717 	ldw	r2,-228(fp)
 8006cd8:	1009883a 	mov	r4,r2
 8006cdc:	014000c4 	movi	r5,3
 8006ce0:	800c9a40 	call	800c9a4 <__modsi3>
 8006ce4:	1005003a 	cmpeq	r2,r2,zero
 8006ce8:	10803fcc 	andi	r2,r2,255
 8006cec:	d0ab2115 	stw	r2,-21372(gp)
		isFahrenheit = !((ind + 1) % 3);
 8006cf0:	e0bfc717 	ldw	r2,-228(fp)
 8006cf4:	10800044 	addi	r2,r2,1
 8006cf8:	1009883a 	mov	r4,r2
 8006cfc:	014000c4 	movi	r5,3
 8006d00:	800c9a40 	call	800c9a4 <__modsi3>
 8006d04:	1005003a 	cmpeq	r2,r2,zero
 8006d08:	10803fcc 	andi	r2,r2,255
 8006d0c:	d0ab2215 	stw	r2,-21368(gp)
		isKelvin = !((ind + 2) % 3);
 8006d10:	e0bfc717 	ldw	r2,-228(fp)
 8006d14:	10800084 	addi	r2,r2,2
 8006d18:	1009883a 	mov	r4,r2
 8006d1c:	014000c4 	movi	r5,3
 8006d20:	800c9a40 	call	800c9a4 <__modsi3>
 8006d24:	1005003a 	cmpeq	r2,r2,zero
 8006d28:	10803fcc 	andi	r2,r2,255
 8006d2c:	d0ab2315 	stw	r2,-21364(gp)


		memcpy((void*)(display->buffer_ptrs[display->buffer_being_written]->buffer),temp_Buffer ,display->bytes_per_frame);
 8006d30:	e0bfff17 	ldw	r2,-4(fp)
 8006d34:	10800617 	ldw	r2,24(r2)
 8006d38:	e0ffff17 	ldw	r3,-4(fp)
 8006d3c:	10800044 	addi	r2,r2,1
 8006d40:	1085883a 	add	r2,r2,r2
 8006d44:	1085883a 	add	r2,r2,r2
 8006d48:	1885883a 	add	r2,r3,r2
 8006d4c:	10800017 	ldw	r2,0(r2)
 8006d50:	10c00117 	ldw	r3,4(r2)
 8006d54:	e0bfff17 	ldw	r2,-4(fp)
 8006d58:	10800b17 	ldw	r2,44(r2)
 8006d5c:	1809883a 	mov	r4,r3
 8006d60:	e17fca17 	ldw	r5,-216(fp)
 8006d64:	100d883a 	mov	r6,r2
 8006d68:	800fc580 	call	800fc58 <memcpy>

		vid_draw_box(400, 100, 700, 160, BLACK_24, DO_NOT_FILL, display);
 8006d6c:	d8000015 	stw	zero,0(sp)
 8006d70:	d8000115 	stw	zero,4(sp)
 8006d74:	e0bfff17 	ldw	r2,-4(fp)
 8006d78:	d8800215 	stw	r2,8(sp)
 8006d7c:	01006404 	movi	r4,400
 8006d80:	01401904 	movi	r5,100
 8006d84:	0180af04 	movi	r6,700
 8006d88:	01c02804 	movi	r7,160
 8006d8c:	80021b40 	call	80021b4 <vid_draw_box>
		vid_draw_box(400, 200, 700, 260, BLACK_24, DO_NOT_FILL, display);
 8006d90:	d8000015 	stw	zero,0(sp)
 8006d94:	d8000115 	stw	zero,4(sp)
 8006d98:	e0bfff17 	ldw	r2,-4(fp)
 8006d9c:	d8800215 	stw	r2,8(sp)
 8006da0:	01006404 	movi	r4,400
 8006da4:	01403204 	movi	r5,200
 8006da8:	0180af04 	movi	r6,700
 8006dac:	01c04104 	movi	r7,260
 8006db0:	80021b40 	call	80021b4 <vid_draw_box>
		vid_draw_box(400, 300, 700, 360, BLACK_24, DO_NOT_FILL, display);
 8006db4:	d8000015 	stw	zero,0(sp)
 8006db8:	d8000115 	stw	zero,4(sp)
 8006dbc:	e0bfff17 	ldw	r2,-4(fp)
 8006dc0:	d8800215 	stw	r2,8(sp)
 8006dc4:	01006404 	movi	r4,400
 8006dc8:	01404b04 	movi	r5,300
 8006dcc:	0180af04 	movi	r6,700
 8006dd0:	01c05a04 	movi	r7,360
 8006dd4:	80021b40 	call	80021b4 <vid_draw_box>

		strcpy(szText, "Celsius");
 8006dd8:	e0ffd104 	addi	r3,fp,-188
 8006ddc:	009cdb34 	movhi	r2,29548
 8006de0:	109950c4 	addi	r2,r2,25923
 8006de4:	18800015 	stw	r2,0(r3)
 8006de8:	00801cf4 	movhi	r2,115
 8006dec:	109d5a44 	addi	r2,r2,30057
 8006df0:	18800115 	stw	r2,4(r3)
		vid_print_string_alpha(410, 110, BLACK_24, WHITE_24, tahomabold_32, display, szText);
 8006df4:	008205b4 	movhi	r2,2070
 8006df8:	10984b04 	addi	r2,r2,24876
 8006dfc:	d8800015 	stw	r2,0(sp)
 8006e00:	e0bfff17 	ldw	r2,-4(fp)
 8006e04:	d8800115 	stw	r2,4(sp)
 8006e08:	e0bfd104 	addi	r2,fp,-188
 8006e0c:	d8800215 	stw	r2,8(sp)
 8006e10:	01006684 	movi	r4,410
 8006e14:	01401b84 	movi	r5,110
 8006e18:	000d883a 	mov	r6,zero
 8006e1c:	01c04034 	movhi	r7,256
 8006e20:	39ffffc4 	addi	r7,r7,-1
 8006e24:	80059a80 	call	80059a8 <vid_print_string_alpha>
		strcpy(szText, "Fahrenheit");
 8006e28:	e0bfd104 	addi	r2,fp,-188
 8006e2c:	00dc9a34 	movhi	r3,29288
 8006e30:	18d85184 	addi	r3,r3,24902
 8006e34:	10c00015 	stw	r3,0(r2)
 8006e38:	00d95a34 	movhi	r3,25960
 8006e3c:	18db9944 	addi	r3,r3,28261
 8006e40:	10c00115 	stw	r3,4(r2)
 8006e44:	00dd1a44 	movi	r3,29801
 8006e48:	10c0020d 	sth	r3,8(r2)
 8006e4c:	10000285 	stb	zero,10(r2)
		vid_print_string_alpha(410, 210, BLACK_24, WHITE_24, tahomabold_32, display, szText);
 8006e50:	008205b4 	movhi	r2,2070
 8006e54:	10984b04 	addi	r2,r2,24876
 8006e58:	d8800015 	stw	r2,0(sp)
 8006e5c:	e0bfff17 	ldw	r2,-4(fp)
 8006e60:	d8800115 	stw	r2,4(sp)
 8006e64:	e0bfd104 	addi	r2,fp,-188
 8006e68:	d8800215 	stw	r2,8(sp)
 8006e6c:	01006684 	movi	r4,410
 8006e70:	01403484 	movi	r5,210
 8006e74:	000d883a 	mov	r6,zero
 8006e78:	01c04034 	movhi	r7,256
 8006e7c:	39ffffc4 	addi	r7,r7,-1
 8006e80:	80059a80 	call	80059a8 <vid_print_string_alpha>
		strcpy(szText, "Kelvin");
 8006e84:	e0bfd104 	addi	r2,fp,-188
 8006e88:	00dd9b34 	movhi	r3,30316
 8006e8c:	18d952c4 	addi	r3,r3,25931
 8006e90:	10c00015 	stw	r3,0(r2)
 8006e94:	00db9a44 	movi	r3,28265
 8006e98:	10c0010d 	sth	r3,4(r2)
 8006e9c:	10000185 	stb	zero,6(r2)
		vid_print_string_alpha(410, 310, BLACK_24, WHITE_24, tahomabold_32, display, szText);
 8006ea0:	008205b4 	movhi	r2,2070
 8006ea4:	10984b04 	addi	r2,r2,24876
 8006ea8:	d8800015 	stw	r2,0(sp)
 8006eac:	e0bfff17 	ldw	r2,-4(fp)
 8006eb0:	d8800115 	stw	r2,4(sp)
 8006eb4:	e0bfd104 	addi	r2,fp,-188
 8006eb8:	d8800215 	stw	r2,8(sp)
 8006ebc:	01006684 	movi	r4,410
 8006ec0:	01404d84 	movi	r5,310
 8006ec4:	000d883a 	mov	r6,zero
 8006ec8:	01c04034 	movhi	r7,256
 8006ecc:	39ffffc4 	addi	r7,r7,-1
 8006ed0:	80059a80 	call	80059a8 <vid_print_string_alpha>

		if(isCelsius) {
 8006ed4:	d0ab2117 	ldw	r2,-21372(gp)
 8006ed8:	10000926 	beq	r2,zero,8006f00 <MainMenu+0x8c4>
			resultTemperature = temp;
 8006edc:	d0ab1d17 	ldw	r2,-21388(gp)
 8006ee0:	e0bfc515 	stw	r2,-236(fp)
 8006ee4:	d0ab1e04 	addi	r2,gp,-21384
 8006ee8:	10800017 	ldw	r2,0(r2)
 8006eec:	e0bfc615 	stw	r2,-232(fp)
			strcpy(postfix, " C");
 8006ef0:	0090c804 	movi	r2,17184
 8006ef4:	e0bffe0d 	sth	r2,-8(fp)
 8006ef8:	e03ffe85 	stb	zero,-6(fp)
 8006efc:	00003006 	br	8006fc0 <MainMenu+0x984>
		}
		else if(isFahrenheit) {
 8006f00:	d0ab2217 	ldw	r2,-21368(gp)
 8006f04:	10001b26 	beq	r2,zero,8006f74 <MainMenu+0x938>
			resultTemperature = temp * 1.8 + 32;
 8006f08:	d0ab1d17 	ldw	r2,-21388(gp)
 8006f0c:	d12b1e04 	addi	r4,gp,-21384
 8006f10:	20c00017 	ldw	r3,0(r4)
 8006f14:	1009883a 	mov	r4,r2
 8006f18:	180b883a 	mov	r5,r3
 8006f1c:	01b33374 	movhi	r6,52429
 8006f20:	31b33344 	addi	r6,r6,-13107
 8006f24:	01cfff74 	movhi	r7,16381
 8006f28:	39f33304 	addi	r7,r7,-13108
 8006f2c:	800ddbc0 	call	800ddbc <__muldf3>
 8006f30:	1009883a 	mov	r4,r2
 8006f34:	180b883a 	mov	r5,r3
 8006f38:	2005883a 	mov	r2,r4
 8006f3c:	2807883a 	mov	r3,r5
 8006f40:	1009883a 	mov	r4,r2
 8006f44:	180b883a 	mov	r5,r3
 8006f48:	000d883a 	mov	r6,zero
 8006f4c:	01d01034 	movhi	r7,16448
 8006f50:	800ca100 	call	800ca10 <__adddf3>
 8006f54:	1009883a 	mov	r4,r2
 8006f58:	180b883a 	mov	r5,r3
 8006f5c:	e13fc515 	stw	r4,-236(fp)
 8006f60:	e17fc615 	stw	r5,-232(fp)
			strcpy(postfix, " F");
 8006f64:	00918804 	movi	r2,17952
 8006f68:	e0bffe0d 	sth	r2,-8(fp)
 8006f6c:	e03ffe85 	stb	zero,-6(fp)
 8006f70:	00001306 	br	8006fc0 <MainMenu+0x984>
		}
		else if(isKelvin) {
 8006f74:	d0ab2317 	ldw	r2,-21364(gp)
 8006f78:	10001126 	beq	r2,zero,8006fc0 <MainMenu+0x984>
			resultTemperature = temp + 273.15;
 8006f7c:	d0ab1d17 	ldw	r2,-21388(gp)
 8006f80:	d12b1e04 	addi	r4,gp,-21384
 8006f84:	20c00017 	ldw	r3,0(r4)
 8006f88:	1009883a 	mov	r4,r2
 8006f8c:	180b883a 	mov	r5,r3
 8006f90:	019999b4 	movhi	r6,26214
 8006f94:	31999984 	addi	r6,r6,26214
 8006f98:	01d01c74 	movhi	r7,16497
 8006f9c:	39c49984 	addi	r7,r7,4710
 8006fa0:	800ca100 	call	800ca10 <__adddf3>
 8006fa4:	1009883a 	mov	r4,r2
 8006fa8:	180b883a 	mov	r5,r3
 8006fac:	e13fc515 	stw	r4,-236(fp)
 8006fb0:	e17fc615 	stw	r5,-232(fp)
			strcpy(postfix, " K");
 8006fb4:	0092c804 	movi	r2,19232
 8006fb8:	e0bffe0d 	sth	r2,-8(fp)
 8006fbc:	e03ffe85 	stb	zero,-6(fp)
		}

		//display temperature value
		snprintf(szText, 128, "%4.3f", resultTemperature);
 8006fc0:	e0ffd104 	addi	r3,fp,-188
 8006fc4:	e0bfc617 	ldw	r2,-232(fp)
 8006fc8:	d8800015 	stw	r2,0(sp)
 8006fcc:	e1ffc517 	ldw	r7,-236(fp)
 8006fd0:	1809883a 	mov	r4,r3
 8006fd4:	01402004 	movi	r5,128
 8006fd8:	018205b4 	movhi	r6,2070
 8006fdc:	3195f004 	addi	r6,r6,22464
 8006fe0:	80101040 	call	8010104 <snprintf>
		vid_print_string_alpha(30, 30, COLOR_Temp_Up, COLOR_Temp_Down, tahomabold_32, display, szText);
 8006fe4:	008205b4 	movhi	r2,2070
 8006fe8:	10984b04 	addi	r2,r2,24876
 8006fec:	d8800015 	stw	r2,0(sp)
 8006ff0:	e0bfff17 	ldw	r2,-4(fp)
 8006ff4:	d8800115 	stw	r2,4(sp)
 8006ff8:	e0bfd104 	addi	r2,fp,-188
 8006ffc:	d8800215 	stw	r2,8(sp)
 8007000:	01000784 	movi	r4,30
 8007004:	01400784 	movi	r5,30
 8007008:	000d883a 	mov	r6,zero
 800700c:	01c04034 	movhi	r7,256
 8007010:	39ffffc4 	addi	r7,r7,-1
 8007014:	80059a80 	call	80059a8 <vid_print_string_alpha>
		int length = vid_string_pixel_length_alpha(tahomabold_32, szText);
 8007018:	e0bfd104 	addi	r2,fp,-188
 800701c:	010205b4 	movhi	r4,2070
 8007020:	21184b04 	addi	r4,r4,24876
 8007024:	100b883a 	mov	r5,r2
 8007028:	80064f40 	call	80064f4 <vid_string_pixel_length_alpha>
 800702c:	e0bfd015 	stw	r2,-192(fp)
		vid_print_string_alpha(30 + length, 30, COLOR_Temp_Up,COLOR_Temp_Down, tahomabold_32, display, postfix);
 8007030:	e0bfd017 	ldw	r2,-192(fp)
 8007034:	10c00784 	addi	r3,r2,30
 8007038:	008205b4 	movhi	r2,2070
 800703c:	10984b04 	addi	r2,r2,24876
 8007040:	d8800015 	stw	r2,0(sp)
 8007044:	e0bfff17 	ldw	r2,-4(fp)
 8007048:	d8800115 	stw	r2,4(sp)
 800704c:	e0bffe04 	addi	r2,fp,-8
 8007050:	d8800215 	stw	r2,8(sp)
 8007054:	1809883a 	mov	r4,r3
 8007058:	01400784 	movi	r5,30
 800705c:	000d883a 	mov	r6,zero
 8007060:	01c04034 	movhi	r7,256
 8007064:	39ffffc4 	addi	r7,r7,-1
 8007068:	80059a80 	call	80059a8 <vid_print_string_alpha>

		int coordinate;
		if(temp < -30)
 800706c:	d0ab1d17 	ldw	r2,-21388(gp)
 8007070:	d12b1e04 	addi	r4,gp,-21384
 8007074:	20c00017 	ldw	r3,0(r4)
 8007078:	1009883a 	mov	r4,r2
 800707c:	180b883a 	mov	r5,r3
 8007080:	000d883a 	mov	r6,zero
 8007084:	01f00fb4 	movhi	r7,49214
 8007088:	800dcdc0 	call	800dcdc <__ledf2>
 800708c:	1000030e 	bge	r2,zero,800709c <MainMenu+0xa60>
			coordinate = 32;
 8007090:	00800804 	movi	r2,32
 8007094:	e0bfc815 	stw	r2,-224(fp)
 8007098:	00003706 	br	8007178 <MainMenu+0xb3c>
		else if(temp > 50)
 800709c:	d0ab1d17 	ldw	r2,-21388(gp)
 80070a0:	d12b1e04 	addi	r4,gp,-21384
 80070a4:	20c00017 	ldw	r3,0(r4)
 80070a8:	1009883a 	mov	r4,r2
 80070ac:	180b883a 	mov	r5,r3
 80070b0:	000d883a 	mov	r6,zero
 80070b4:	01d01274 	movhi	r7,16457
 80070b8:	800dbfc0 	call	800dbfc <__gedf2>
 80070bc:	0080030e 	bge	zero,r2,80070cc <MainMenu+0xa90>
			coordinate = 152;
 80070c0:	00802604 	movi	r2,152
 80070c4:	e0bfc815 	stw	r2,-224(fp)
 80070c8:	00002b06 	br	8007178 <MainMenu+0xb3c>
		else
			coordinate = (int) ((temp + 30.) / 80. * 120. + 32.);
 80070cc:	d0ab1d17 	ldw	r2,-21388(gp)
 80070d0:	d12b1e04 	addi	r4,gp,-21384
 80070d4:	20c00017 	ldw	r3,0(r4)
 80070d8:	1009883a 	mov	r4,r2
 80070dc:	180b883a 	mov	r5,r3
 80070e0:	000d883a 	mov	r6,zero
 80070e4:	01d00fb4 	movhi	r7,16446
 80070e8:	800ca100 	call	800ca10 <__adddf3>
 80070ec:	1009883a 	mov	r4,r2
 80070f0:	180b883a 	mov	r5,r3
 80070f4:	2005883a 	mov	r2,r4
 80070f8:	2807883a 	mov	r3,r5
 80070fc:	1009883a 	mov	r4,r2
 8007100:	180b883a 	mov	r5,r3
 8007104:	000d883a 	mov	r6,zero
 8007108:	01d01534 	movhi	r7,16468
 800710c:	800d2ac0 	call	800d2ac <__divdf3>
 8007110:	1009883a 	mov	r4,r2
 8007114:	180b883a 	mov	r5,r3
 8007118:	2005883a 	mov	r2,r4
 800711c:	2807883a 	mov	r3,r5
 8007120:	1009883a 	mov	r4,r2
 8007124:	180b883a 	mov	r5,r3
 8007128:	000d883a 	mov	r6,zero
 800712c:	01d017b4 	movhi	r7,16478
 8007130:	800ddbc0 	call	800ddbc <__muldf3>
 8007134:	1009883a 	mov	r4,r2
 8007138:	180b883a 	mov	r5,r3
 800713c:	2005883a 	mov	r2,r4
 8007140:	2807883a 	mov	r3,r5
 8007144:	1009883a 	mov	r4,r2
 8007148:	180b883a 	mov	r5,r3
 800714c:	000d883a 	mov	r6,zero
 8007150:	01d01034 	movhi	r7,16448
 8007154:	800ca100 	call	800ca10 <__adddf3>
 8007158:	1009883a 	mov	r4,r2
 800715c:	180b883a 	mov	r5,r3
 8007160:	2005883a 	mov	r2,r4
 8007164:	2807883a 	mov	r3,r5
 8007168:	1009883a 	mov	r4,r2
 800716c:	180b883a 	mov	r5,r3
 8007170:	800edb00 	call	800edb0 <__fixdfsi>
 8007174:	e0bfc815 	stw	r2,-224(fp)

		int color;
		if(temp < -10)
 8007178:	d0ab1d17 	ldw	r2,-21388(gp)
 800717c:	d12b1e04 	addi	r4,gp,-21384
 8007180:	20c00017 	ldw	r3,0(r4)
 8007184:	1009883a 	mov	r4,r2
 8007188:	180b883a 	mov	r5,r3
 800718c:	000d883a 	mov	r6,zero
 8007190:	01f00934 	movhi	r7,49188
 8007194:	800dcdc0 	call	800dcdc <__ledf2>
 8007198:	1000030e 	bge	r2,zero,80071a8 <MainMenu+0xb6c>
			color = BLUE_24;
 800719c:	00803fc4 	movi	r2,255
 80071a0:	e0bfc915 	stw	r2,-220(fp)
 80071a4:	00003306 	br	8007274 <MainMenu+0xc38>
		else if (temp < 10)
 80071a8:	d0ab1d17 	ldw	r2,-21388(gp)
 80071ac:	d12b1e04 	addi	r4,gp,-21384
 80071b0:	20c00017 	ldw	r3,0(r4)
 80071b4:	1009883a 	mov	r4,r2
 80071b8:	180b883a 	mov	r5,r3
 80071bc:	000d883a 	mov	r6,zero
 80071c0:	01d00934 	movhi	r7,16420
 80071c4:	800dcdc0 	call	800dcdc <__ledf2>
 80071c8:	1000030e 	bge	r2,zero,80071d8 <MainMenu+0xb9c>
			color = AQUA_24;
 80071cc:	00bfffd4 	movui	r2,65535
 80071d0:	e0bfc915 	stw	r2,-220(fp)
 80071d4:	00002706 	br	8007274 <MainMenu+0xc38>
		else if (temp < 27)
 80071d8:	d0ab1d17 	ldw	r2,-21388(gp)
 80071dc:	d12b1e04 	addi	r4,gp,-21384
 80071e0:	20c00017 	ldw	r3,0(r4)
 80071e4:	1009883a 	mov	r4,r2
 80071e8:	180b883a 	mov	r5,r3
 80071ec:	000d883a 	mov	r6,zero
 80071f0:	01d00ef4 	movhi	r7,16443
 80071f4:	800dcdc0 	call	800dcdc <__ledf2>
 80071f8:	1000040e 	bge	r2,zero,800720c <MainMenu+0xbd0>
			color = YELLOW_24;
 80071fc:	00804034 	movhi	r2,256
 8007200:	10bfc004 	addi	r2,r2,-256
 8007204:	e0bfc915 	stw	r2,-220(fp)
 8007208:	00001a06 	br	8007274 <MainMenu+0xc38>
		else if (temp < 37)
 800720c:	d0ab1d17 	ldw	r2,-21388(gp)
 8007210:	d12b1e04 	addi	r4,gp,-21384
 8007214:	20c00017 	ldw	r3,0(r4)
 8007218:	1009883a 	mov	r4,r2
 800721c:	180b883a 	mov	r5,r3
 8007220:	000d883a 	mov	r6,zero
 8007224:	01d010f4 	movhi	r7,16451
 8007228:	39e00004 	addi	r7,r7,-32768
 800722c:	800dcdc0 	call	800dcdc <__ledf2>
 8007230:	1000040e 	bge	r2,zero,8007244 <MainMenu+0xc08>
			color = ORANGE_24;
 8007234:	00804034 	movhi	r2,256
 8007238:	10a94004 	addi	r2,r2,-23296
 800723c:	e0bfc915 	stw	r2,-220(fp)
 8007240:	00000c06 	br	8007274 <MainMenu+0xc38>
		else if (temp >= 37)
 8007244:	d0ab1d17 	ldw	r2,-21388(gp)
 8007248:	d12b1e04 	addi	r4,gp,-21384
 800724c:	20c00017 	ldw	r3,0(r4)
 8007250:	1009883a 	mov	r4,r2
 8007254:	180b883a 	mov	r5,r3
 8007258:	000d883a 	mov	r6,zero
 800725c:	01d010f4 	movhi	r7,16451
 8007260:	39e00004 	addi	r7,r7,-32768
 8007264:	800dbfc0 	call	800dbfc <__gedf2>
 8007268:	10000216 	blt	r2,zero,8007274 <MainMenu+0xc38>
			color = RED_24;
 800726c:	00803ff4 	movhi	r2,255
 8007270:	e0bfc915 	stw	r2,-220(fp)

		vid_draw_box(30, 89, 153, 122, BLACK_24, DO_NOT_FILL, display);
 8007274:	d8000015 	stw	zero,0(sp)
 8007278:	d8000115 	stw	zero,4(sp)
 800727c:	e0bfff17 	ldw	r2,-4(fp)
 8007280:	d8800215 	stw	r2,8(sp)
 8007284:	01000784 	movi	r4,30
 8007288:	01401644 	movi	r5,89
 800728c:	01802644 	movi	r6,153
 8007290:	01c01e84 	movi	r7,122
 8007294:	80021b40 	call	80021b4 <vid_draw_box>
		vid_draw_box(31, 90, coordinate, 121, color, DO_FILL, display);
 8007298:	e0bfc917 	ldw	r2,-220(fp)
 800729c:	d8800015 	stw	r2,0(sp)
 80072a0:	00800044 	movi	r2,1
 80072a4:	d8800115 	stw	r2,4(sp)
 80072a8:	e0bfff17 	ldw	r2,-4(fp)
 80072ac:	d8800215 	stw	r2,8(sp)
 80072b0:	010007c4 	movi	r4,31
 80072b4:	01401684 	movi	r5,90
 80072b8:	e1bfc817 	ldw	r6,-224(fp)
 80072bc:	01c01e44 	movi	r7,121
 80072c0:	80021b40 	call	80021b4 <vid_draw_box>

		//display RH value
		snprintf(szText, 128, "%4.3f", rh);
 80072c4:	d0ab1f17 	ldw	r2,-21380(gp)
 80072c8:	d12b2004 	addi	r4,gp,-21376
 80072cc:	20c00017 	ldw	r3,0(r4)
 80072d0:	e13fd104 	addi	r4,fp,-188
 80072d4:	d8c00015 	stw	r3,0(sp)
 80072d8:	100f883a 	mov	r7,r2
 80072dc:	01402004 	movi	r5,128
 80072e0:	018205b4 	movhi	r6,2070
 80072e4:	3195f004 	addi	r6,r6,22464
 80072e8:	80101040 	call	8010104 <snprintf>
		vid_print_string_alpha(30, 130, COLOR_Rh_Up, COLOR_Rh_Down, tahomabold_32, display, szText);
 80072ec:	008205b4 	movhi	r2,2070
 80072f0:	10984b04 	addi	r2,r2,24876
 80072f4:	d8800015 	stw	r2,0(sp)
 80072f8:	e0bfff17 	ldw	r2,-4(fp)
 80072fc:	d8800115 	stw	r2,4(sp)
 8007300:	e0bfd104 	addi	r2,fp,-188
 8007304:	d8800215 	stw	r2,8(sp)
 8007308:	01000784 	movi	r4,30
 800730c:	01402084 	movi	r5,130
 8007310:	000d883a 	mov	r6,zero
 8007314:	01c04034 	movhi	r7,256
 8007318:	39ffffc4 	addi	r7,r7,-1
 800731c:	80059a80 	call	80059a8 <vid_print_string_alpha>
		length = vid_string_pixel_length_alpha(tahomabold_32, szText);
 8007320:	e0bfd104 	addi	r2,fp,-188
 8007324:	010205b4 	movhi	r4,2070
 8007328:	21184b04 	addi	r4,r4,24876
 800732c:	100b883a 	mov	r5,r2
 8007330:	80064f40 	call	80064f4 <vid_string_pixel_length_alpha>
 8007334:	e0bfd015 	stw	r2,-192(fp)
		vid_print_string_alpha(30 + length, 130, COLOR_Rh_Up, COLOR_Rh_Down, tahomabold_32, display, " %RH");
 8007338:	e0bfd017 	ldw	r2,-192(fp)
 800733c:	10c00784 	addi	r3,r2,30
 8007340:	008205b4 	movhi	r2,2070
 8007344:	10984b04 	addi	r2,r2,24876
 8007348:	d8800015 	stw	r2,0(sp)
 800734c:	e0bfff17 	ldw	r2,-4(fp)
 8007350:	d8800115 	stw	r2,4(sp)
 8007354:	008205b4 	movhi	r2,2070
 8007358:	1095f204 	addi	r2,r2,22472
 800735c:	d8800215 	stw	r2,8(sp)
 8007360:	1809883a 	mov	r4,r3
 8007364:	01402084 	movi	r5,130
 8007368:	000d883a 	mov	r6,zero
 800736c:	01c04034 	movhi	r7,256
 8007370:	39ffffc4 	addi	r7,r7,-1
 8007374:	80059a80 	call	80059a8 <vid_print_string_alpha>

		if(rh < 0)
 8007378:	d0ab1f17 	ldw	r2,-21380(gp)
 800737c:	d12b2004 	addi	r4,gp,-21376
 8007380:	20c00017 	ldw	r3,0(r4)
 8007384:	1009883a 	mov	r4,r2
 8007388:	180b883a 	mov	r5,r3
 800738c:	000d883a 	mov	r6,zero
 8007390:	000f883a 	mov	r7,zero
 8007394:	800dcdc0 	call	800dcdc <__ledf2>
 8007398:	1000030e 	bge	r2,zero,80073a8 <MainMenu+0xd6c>
			coordinate = 32;
 800739c:	00800804 	movi	r2,32
 80073a0:	e0bfc815 	stw	r2,-224(fp)
 80073a4:	00002e06 	br	8007460 <MainMenu+0xe24>
		else if(rh > 100)
 80073a8:	d0ab1f17 	ldw	r2,-21380(gp)
 80073ac:	d12b2004 	addi	r4,gp,-21376
 80073b0:	20c00017 	ldw	r3,0(r4)
 80073b4:	1009883a 	mov	r4,r2
 80073b8:	180b883a 	mov	r5,r3
 80073bc:	000d883a 	mov	r6,zero
 80073c0:	01d01674 	movhi	r7,16473
 80073c4:	800dbfc0 	call	800dbfc <__gedf2>
 80073c8:	0080030e 	bge	zero,r2,80073d8 <MainMenu+0xd9c>
			coordinate = 152;
 80073cc:	00802604 	movi	r2,152
 80073d0:	e0bfc815 	stw	r2,-224(fp)
 80073d4:	00002206 	br	8007460 <MainMenu+0xe24>
		else
			coordinate = (int) (rh / 100. * 120. + 32.);
 80073d8:	d0ab1f17 	ldw	r2,-21380(gp)
 80073dc:	d12b2004 	addi	r4,gp,-21376
 80073e0:	20c00017 	ldw	r3,0(r4)
 80073e4:	1009883a 	mov	r4,r2
 80073e8:	180b883a 	mov	r5,r3
 80073ec:	000d883a 	mov	r6,zero
 80073f0:	01d01674 	movhi	r7,16473
 80073f4:	800d2ac0 	call	800d2ac <__divdf3>
 80073f8:	1009883a 	mov	r4,r2
 80073fc:	180b883a 	mov	r5,r3
 8007400:	2005883a 	mov	r2,r4
 8007404:	2807883a 	mov	r3,r5
 8007408:	1009883a 	mov	r4,r2
 800740c:	180b883a 	mov	r5,r3
 8007410:	000d883a 	mov	r6,zero
 8007414:	01d017b4 	movhi	r7,16478
 8007418:	800ddbc0 	call	800ddbc <__muldf3>
 800741c:	1009883a 	mov	r4,r2
 8007420:	180b883a 	mov	r5,r3
 8007424:	2005883a 	mov	r2,r4
 8007428:	2807883a 	mov	r3,r5
 800742c:	1009883a 	mov	r4,r2
 8007430:	180b883a 	mov	r5,r3
 8007434:	000d883a 	mov	r6,zero
 8007438:	01d01034 	movhi	r7,16448
 800743c:	800ca100 	call	800ca10 <__adddf3>
 8007440:	1009883a 	mov	r4,r2
 8007444:	180b883a 	mov	r5,r3
 8007448:	2005883a 	mov	r2,r4
 800744c:	2807883a 	mov	r3,r5
 8007450:	1009883a 	mov	r4,r2
 8007454:	180b883a 	mov	r5,r3
 8007458:	800edb00 	call	800edb0 <__fixdfsi>
 800745c:	e0bfc815 	stw	r2,-224(fp)

		if(rh < 30)
 8007460:	d0ab1f17 	ldw	r2,-21380(gp)
 8007464:	d12b2004 	addi	r4,gp,-21376
 8007468:	20c00017 	ldw	r3,0(r4)
 800746c:	1009883a 	mov	r4,r2
 8007470:	180b883a 	mov	r5,r3
 8007474:	000d883a 	mov	r6,zero
 8007478:	01d00fb4 	movhi	r7,16446
 800747c:	800dcdc0 	call	800dcdc <__ledf2>
 8007480:	1000040e 	bge	r2,zero,8007494 <MainMenu+0xe58>
			color = YELLOW_24;
 8007484:	00804034 	movhi	r2,256
 8007488:	10bfc004 	addi	r2,r2,-256
 800748c:	e0bfc915 	stw	r2,-220(fp)
 8007490:	00001906 	br	80074f8 <MainMenu+0xebc>
		else if (rh < 70)
 8007494:	d0ab1f17 	ldw	r2,-21380(gp)
 8007498:	d12b2004 	addi	r4,gp,-21376
 800749c:	20c00017 	ldw	r3,0(r4)
 80074a0:	1009883a 	mov	r4,r2
 80074a4:	180b883a 	mov	r5,r3
 80074a8:	000d883a 	mov	r6,zero
 80074ac:	01d014b4 	movhi	r7,16466
 80074b0:	39e00004 	addi	r7,r7,-32768
 80074b4:	800dcdc0 	call	800dcdc <__ledf2>
 80074b8:	1000030e 	bge	r2,zero,80074c8 <MainMenu+0xe8c>
			color = AQUA_24;
 80074bc:	00bfffd4 	movui	r2,65535
 80074c0:	e0bfc915 	stw	r2,-220(fp)
 80074c4:	00000c06 	br	80074f8 <MainMenu+0xebc>
		else if (rh >= 70)
 80074c8:	d0ab1f17 	ldw	r2,-21380(gp)
 80074cc:	d12b2004 	addi	r4,gp,-21376
 80074d0:	20c00017 	ldw	r3,0(r4)
 80074d4:	1009883a 	mov	r4,r2
 80074d8:	180b883a 	mov	r5,r3
 80074dc:	000d883a 	mov	r6,zero
 80074e0:	01d014b4 	movhi	r7,16466
 80074e4:	39e00004 	addi	r7,r7,-32768
 80074e8:	800dbfc0 	call	800dbfc <__gedf2>
 80074ec:	10000216 	blt	r2,zero,80074f8 <MainMenu+0xebc>
			color = BLUE_24;
 80074f0:	00803fc4 	movi	r2,255
 80074f4:	e0bfc915 	stw	r2,-220(fp)

		vid_draw_box(30, 189, 153, 222, BLACK_24, DO_NOT_FILL, display);
 80074f8:	d8000015 	stw	zero,0(sp)
 80074fc:	d8000115 	stw	zero,4(sp)
 8007500:	e0bfff17 	ldw	r2,-4(fp)
 8007504:	d8800215 	stw	r2,8(sp)
 8007508:	01000784 	movi	r4,30
 800750c:	01402f44 	movi	r5,189
 8007510:	01802644 	movi	r6,153
 8007514:	01c03784 	movi	r7,222
 8007518:	80021b40 	call	80021b4 <vid_draw_box>
		vid_draw_box(31, 190, coordinate, 221, color, DO_FILL, display);
 800751c:	e0bfc917 	ldw	r2,-220(fp)
 8007520:	d8800015 	stw	r2,0(sp)
 8007524:	00800044 	movi	r2,1
 8007528:	d8800115 	stw	r2,4(sp)
 800752c:	e0bfff17 	ldw	r2,-4(fp)
 8007530:	d8800215 	stw	r2,8(sp)
 8007534:	010007c4 	movi	r4,31
 8007538:	01402f84 	movi	r5,190
 800753c:	e1bfc817 	ldw	r6,-224(fp)
 8007540:	01c03744 	movi	r7,221
 8007544:	80021b40 	call	80021b4 <vid_draw_box>

		alt_video_display_register_written_buffer( display );
 8007548:	e13fff17 	ldw	r4,-4(fp)
 800754c:	800066c0 	call	800066c <alt_video_display_register_written_buffer>

		usleep(1000000);
 8007550:	010003f4 	movhi	r4,15
 8007554:	21109004 	addi	r4,r4,16960
 8007558:	801d36c0 	call	801d36c <usleep>
     }  // for i
 800755c:	003c8106 	br	8006764 <__alt_data_end+0xf8006764>
}
 8007560:	e037883a 	mov	sp,fp
 8007564:	dfc00117 	ldw	ra,4(sp)
 8007568:	df000017 	ldw	fp,0(sp)
 800756c:	dec00204 	addi	sp,sp,8
 8007570:	f800283a 	ret

08007574 <draw_border>:

void draw_border(int color, alt_video_display* display){
 8007574:	defffa04 	addi	sp,sp,-24
 8007578:	df000515 	stw	fp,20(sp)
 800757c:	df000504 	addi	fp,sp,20
 8007580:	e13ffe15 	stw	r4,-8(fp)
 8007584:	e17fff15 	stw	r5,-4(fp)
    int x,y;
    alt_u8 *pDes = display->buffer_ptrs[display->buffer_being_written]->buffer;
 8007588:	e0bfff17 	ldw	r2,-4(fp)
 800758c:	10800617 	ldw	r2,24(r2)
 8007590:	e0ffff17 	ldw	r3,-4(fp)
 8007594:	10800044 	addi	r2,r2,1
 8007598:	1085883a 	add	r2,r2,r2
 800759c:	1085883a 	add	r2,r2,r2
 80075a0:	1885883a 	add	r2,r3,r2
 80075a4:	10800017 	ldw	r2,0(r2)
 80075a8:	10800117 	ldw	r2,4(r2)
 80075ac:	e0bffd15 	stw	r2,-12(fp)
    for(y=0;y<display->height;y++){
 80075b0:	e03ffc15 	stw	zero,-16(fp)
 80075b4:	00003406 	br	8007688 <draw_border+0x114>
        for(x=0;x<display->width;x++){
 80075b8:	e03ffb15 	stw	zero,-20(fp)
 80075bc:	00002b06 	br	800766c <draw_border+0xf8>
            if (x<=1 || x >= display->width-2 || y <= 1 || y >= display->height-2){
 80075c0:	e0bffb17 	ldw	r2,-20(fp)
 80075c4:	10800090 	cmplti	r2,r2,2
 80075c8:	10000d1e 	bne	r2,zero,8007600 <draw_border+0x8c>
 80075cc:	e0bfff17 	ldw	r2,-4(fp)
 80075d0:	10800717 	ldw	r2,28(r2)
 80075d4:	10bfff84 	addi	r2,r2,-2
 80075d8:	e0fffb17 	ldw	r3,-20(fp)
 80075dc:	1880080e 	bge	r3,r2,8007600 <draw_border+0x8c>
 80075e0:	e0bffc17 	ldw	r2,-16(fp)
 80075e4:	10800090 	cmplti	r2,r2,2
 80075e8:	1000051e 	bne	r2,zero,8007600 <draw_border+0x8c>
 80075ec:	e0bfff17 	ldw	r2,-4(fp)
 80075f0:	10800817 	ldw	r2,32(r2)
 80075f4:	10bfff84 	addi	r2,r2,-2
 80075f8:	e0fffc17 	ldw	r3,-16(fp)
 80075fc:	18801516 	blt	r3,r2,8007654 <draw_border+0xe0>
                *pDes++ = color & 0xFF; // blue
 8007600:	e0bffd17 	ldw	r2,-12(fp)
 8007604:	10c00044 	addi	r3,r2,1
 8007608:	e0fffd15 	stw	r3,-12(fp)
 800760c:	e0fffe17 	ldw	r3,-8(fp)
 8007610:	10c00005 	stb	r3,0(r2)
                *pDes++ = (color >> 8) & 0xFF; // green
 8007614:	e0bffd17 	ldw	r2,-12(fp)
 8007618:	10c00044 	addi	r3,r2,1
 800761c:	e0fffd15 	stw	r3,-12(fp)
 8007620:	e0fffe17 	ldw	r3,-8(fp)
 8007624:	1807d23a 	srai	r3,r3,8
 8007628:	10c00005 	stb	r3,0(r2)
                *pDes++ = (color >> 16) & 0xFF; // red
 800762c:	e0bffd17 	ldw	r2,-12(fp)
 8007630:	10c00044 	addi	r3,r2,1
 8007634:	e0fffd15 	stw	r3,-12(fp)
 8007638:	e0fffe17 	ldw	r3,-8(fp)
 800763c:	1807d43a 	srai	r3,r3,16
 8007640:	10c00005 	stb	r3,0(r2)
                pDes++;                 // reserved
 8007644:	e0bffd17 	ldw	r2,-12(fp)
 8007648:	10800044 	addi	r2,r2,1
 800764c:	e0bffd15 	stw	r2,-12(fp)
 8007650:	00000306 	br	8007660 <draw_border+0xec>
            }else{
                pDes += 4;
 8007654:	e0bffd17 	ldw	r2,-12(fp)
 8007658:	10800104 	addi	r2,r2,4
 800765c:	e0bffd15 	stw	r2,-12(fp)

void draw_border(int color, alt_video_display* display){
    int x,y;
    alt_u8 *pDes = display->buffer_ptrs[display->buffer_being_written]->buffer;
    for(y=0;y<display->height;y++){
        for(x=0;x<display->width;x++){
 8007660:	e0bffb17 	ldw	r2,-20(fp)
 8007664:	10800044 	addi	r2,r2,1
 8007668:	e0bffb15 	stw	r2,-20(fp)
 800766c:	e0bfff17 	ldw	r2,-4(fp)
 8007670:	10800717 	ldw	r2,28(r2)
 8007674:	e0fffb17 	ldw	r3,-20(fp)
 8007678:	18bfd116 	blt	r3,r2,80075c0 <__alt_data_end+0xf80075c0>
}

void draw_border(int color, alt_video_display* display){
    int x,y;
    alt_u8 *pDes = display->buffer_ptrs[display->buffer_being_written]->buffer;
    for(y=0;y<display->height;y++){
 800767c:	e0bffc17 	ldw	r2,-16(fp)
 8007680:	10800044 	addi	r2,r2,1
 8007684:	e0bffc15 	stw	r2,-16(fp)
 8007688:	e0bfff17 	ldw	r2,-4(fp)
 800768c:	10800817 	ldw	r2,32(r2)
 8007690:	e0fffc17 	ldw	r3,-16(fp)
 8007694:	18bfc816 	blt	r3,r2,80075b8 <__alt_data_end+0xf80075b8>
                pDes += 4;
            }
        }
    }

}
 8007698:	e037883a 	mov	sp,fp
 800769c:	df000017 	ldw	fp,0(sp)
 80076a0:	dec00104 	addi	sp,sp,4
 80076a4:	f800283a 	ret

080076a8 <DrawImage>:

void DrawImage( alt_video_display* display, struct gimp_image_struct* Terasic_image, int horiz, int vert )
{
 80076a8:	defff704 	addi	sp,sp,-36
 80076ac:	dfc00815 	stw	ra,32(sp)
 80076b0:	df000715 	stw	fp,28(sp)
 80076b4:	df000704 	addi	fp,sp,28
 80076b8:	e13ffc15 	stw	r4,-16(fp)
 80076bc:	e17ffd15 	stw	r5,-12(fp)
 80076c0:	e1bffe15 	stw	r6,-8(fp)
 80076c4:	e1ffff15 	stw	r7,-4(fp)

  bitmap_struct* image;
  char* image_dest;

  image = malloc(sizeof(bitmap_struct));
 80076c8:	01000404 	movi	r4,16
 80076cc:	800f4880 	call	800f488 <malloc>
 80076d0:	e0bffa15 	stw	r2,-24(fp)
  
  if( image != NULL )
 80076d4:	e0bffa17 	ldw	r2,-24(fp)
 80076d8:	10003126 	beq	r2,zero,80077a0 <DrawImage+0xf8>
  {
    // Load the CIII logo
    load_gimp_bmp( Terasic_image, image, 32);
 80076dc:	e13ffd17 	ldw	r4,-12(fp)
 80076e0:	e17ffa17 	ldw	r5,-24(fp)
 80076e4:	01800804 	movi	r6,32
 80076e8:	8000ce00 	call	8000ce0 <load_gimp_bmp>

      image_dest = (char*)(( display->buffer_ptrs[display->buffer_being_written]->buffer ) + (vert * (display->width * 4)) + horiz * 4); 
 80076ec:	e0bffc17 	ldw	r2,-16(fp)
 80076f0:	10800617 	ldw	r2,24(r2)
 80076f4:	e0fffc17 	ldw	r3,-16(fp)
 80076f8:	10800044 	addi	r2,r2,1
 80076fc:	1085883a 	add	r2,r2,r2
 8007700:	1085883a 	add	r2,r2,r2
 8007704:	1885883a 	add	r2,r3,r2
 8007708:	10800017 	ldw	r2,0(r2)
 800770c:	10c00117 	ldw	r3,4(r2)
 8007710:	e0bffc17 	ldw	r2,-16(fp)
 8007714:	10800717 	ldw	r2,28(r2)
 8007718:	1085883a 	add	r2,r2,r2
 800771c:	1085883a 	add	r2,r2,r2
 8007720:	1009883a 	mov	r4,r2
 8007724:	e0bfff17 	ldw	r2,-4(fp)
 8007728:	2085383a 	mul	r2,r4,r2
 800772c:	1009883a 	mov	r4,r2
 8007730:	e0bffe17 	ldw	r2,-8(fp)
 8007734:	1085883a 	add	r2,r2,r2
 8007738:	1085883a 	add	r2,r2,r2
 800773c:	2085883a 	add	r2,r4,r2
 8007740:	1885883a 	add	r2,r3,r2
 8007744:	e0bffb15 	stw	r2,-20(fp)
                              
      // Copy the image to the current display buffer
      AsVidCopyImageToBuffer( image_dest,
 8007748:	e0bffa17 	ldw	r2,-24(fp)
 800774c:	11400317 	ldw	r5,12(r2)
 8007750:	e0bffc17 	ldw	r2,-16(fp)
 8007754:	11800717 	ldw	r6,28(r2)
                              image->data, 
                              display->width, 
                              image->biWidth, 
 8007758:	e0bffa17 	ldw	r2,-24(fp)
 800775c:	1080000b 	ldhu	r2,0(r2)
    load_gimp_bmp( Terasic_image, image, 32);

      image_dest = (char*)(( display->buffer_ptrs[display->buffer_being_written]->buffer ) + (vert * (display->width * 4)) + horiz * 4); 
                              
      // Copy the image to the current display buffer
      AsVidCopyImageToBuffer( image_dest,
 8007760:	10ffffcc 	andi	r3,r2,65535
 8007764:	18e0001c 	xori	r3,r3,32768
 8007768:	18e00004 	addi	r3,r3,-32768
                              image->data, 
                              display->width, 
                              image->biWidth, 
                              image->biHeight );     
 800776c:	e0bffa17 	ldw	r2,-24(fp)
 8007770:	1080008b 	ldhu	r2,2(r2)
    load_gimp_bmp( Terasic_image, image, 32);

      image_dest = (char*)(( display->buffer_ptrs[display->buffer_being_written]->buffer ) + (vert * (display->width * 4)) + horiz * 4); 
                              
      // Copy the image to the current display buffer
      AsVidCopyImageToBuffer( image_dest,
 8007774:	10bfffcc 	andi	r2,r2,65535
 8007778:	10a0001c 	xori	r2,r2,32768
 800777c:	10a00004 	addi	r2,r2,-32768
 8007780:	d8800015 	stw	r2,0(sp)
 8007784:	e13ffb17 	ldw	r4,-20(fp)
 8007788:	180f883a 	mov	r7,r3
 800778c:	80077b40 	call	80077b4 <AsVidCopyImageToBuffer>
                              image->data, 
                              display->width, 
                              image->biWidth, 
                              image->biHeight );     

    free_gimp_bmp_data( image );
 8007790:	e13ffa17 	ldw	r4,-24(fp)
 8007794:	80010c00 	call	80010c0 <free_gimp_bmp_data>
    free( image );
 8007798:	e13ffa17 	ldw	r4,-24(fp)
 800779c:	800f49c0 	call	800f49c <free>
  }
}
 80077a0:	e037883a 	mov	sp,fp
 80077a4:	dfc00117 	ldw	ra,4(sp)
 80077a8:	df000017 	ldw	fp,0(sp)
 80077ac:	dec00204 	addi	sp,sp,8
 80077b0:	f800283a 	ret

080077b4 <AsVidCopyImageToBuffer>:

int AsVidCopyImageToBuffer( char* dest, char* src, 
                            int dest_width, 
                            int src_width, int src_height )
{
 80077b4:	defff904 	addi	sp,sp,-28
 80077b8:	dfc00615 	stw	ra,24(sp)
 80077bc:	df000515 	stw	fp,20(sp)
 80077c0:	df000504 	addi	fp,sp,20
 80077c4:	e13ffc15 	stw	r4,-16(fp)
 80077c8:	e17ffd15 	stw	r5,-12(fp)
 80077cc:	e1bffe15 	stw	r6,-8(fp)
 80077d0:	e1ffff15 	stw	r7,-4(fp)
  int y;
  
  //Copy one line at a time from top to bottom
  for ( y = 0; y < src_height; y++ )
 80077d4:	e03ffb15 	stw	zero,-20(fp)
 80077d8:	00001806 	br	800783c <AsVidCopyImageToBuffer+0x88>
  {
    memcpy( dest, src, ( src_width * 4 ));
 80077dc:	e0bfff17 	ldw	r2,-4(fp)
 80077e0:	1085883a 	add	r2,r2,r2
 80077e4:	1085883a 	add	r2,r2,r2
 80077e8:	e13ffc17 	ldw	r4,-16(fp)
 80077ec:	e17ffd17 	ldw	r5,-12(fp)
 80077f0:	100d883a 	mov	r6,r2
 80077f4:	800fc580 	call	800fc58 <memcpy>
    src += ( src_width * 4 );
 80077f8:	e0bfff17 	ldw	r2,-4(fp)
 80077fc:	1085883a 	add	r2,r2,r2
 8007800:	1085883a 	add	r2,r2,r2
 8007804:	1007883a 	mov	r3,r2
 8007808:	e0bffd17 	ldw	r2,-12(fp)
 800780c:	10c5883a 	add	r2,r2,r3
 8007810:	e0bffd15 	stw	r2,-12(fp)
    dest += ( dest_width * 4 );
 8007814:	e0bffe17 	ldw	r2,-8(fp)
 8007818:	1085883a 	add	r2,r2,r2
 800781c:	1085883a 	add	r2,r2,r2
 8007820:	1007883a 	mov	r3,r2
 8007824:	e0bffc17 	ldw	r2,-16(fp)
 8007828:	10c5883a 	add	r2,r2,r3
 800782c:	e0bffc15 	stw	r2,-16(fp)
                            int src_width, int src_height )
{
  int y;
  
  //Copy one line at a time from top to bottom
  for ( y = 0; y < src_height; y++ )
 8007830:	e0bffb17 	ldw	r2,-20(fp)
 8007834:	10800044 	addi	r2,r2,1
 8007838:	e0bffb15 	stw	r2,-20(fp)
 800783c:	e0fffb17 	ldw	r3,-20(fp)
 8007840:	e0800217 	ldw	r2,8(fp)
 8007844:	18bfe516 	blt	r3,r2,80077dc <__alt_data_end+0xf80077dc>
    memcpy( dest, src, ( src_width * 4 ));
    src += ( src_width * 4 );
    dest += ( dest_width * 4 );
  }
  
  return( 0 );
 8007848:	0005883a 	mov	r2,zero
} 
 800784c:	e037883a 	mov	sp,fp
 8007850:	dfc00117 	ldw	ra,4(sp)
 8007854:	df000017 	ldw	fp,0(sp)
 8007858:	dec00204 	addi	sp,sp,8
 800785c:	f800283a 	ret

08007860 <draw_array>:

////draw array 
void draw_array(unsigned int *buffer, int x_size, int y_size,
  alt_video_display* display, int x_offset, int y_offset,
  unsigned int transparent_color)
{
 8007860:	defff604 	addi	sp,sp,-40
 8007864:	df000915 	stw	fp,36(sp)
 8007868:	df000904 	addi	fp,sp,36
 800786c:	e13ffc15 	stw	r4,-16(fp)
 8007870:	e17ffd15 	stw	r5,-12(fp)
 8007874:	e1bffe15 	stw	r6,-8(fp)
 8007878:	e1ffff15 	stw	r7,-4(fp)
  unsigned int *current_buffer;
  int addr = ( (int)(display->buffer_ptrs[display->buffer_being_written]->buffer) );
 800787c:	e0bfff17 	ldw	r2,-4(fp)
 8007880:	10800617 	ldw	r2,24(r2)
 8007884:	e0ffff17 	ldw	r3,-4(fp)
 8007888:	10800044 	addi	r2,r2,1
 800788c:	1085883a 	add	r2,r2,r2
 8007890:	1085883a 	add	r2,r2,r2
 8007894:	1885883a 	add	r2,r3,r2
 8007898:	10800017 	ldw	r2,0(r2)
 800789c:	10800117 	ldw	r2,4(r2)
 80078a0:	e0bff915 	stw	r2,-28(fp)
  current_buffer = (unsigned int *)addr;
 80078a4:	e0bff917 	ldw	r2,-28(fp)
 80078a8:	e0bffa15 	stw	r2,-24(fp)
  int x_b,y_b;
  unsigned int color;

  transparent_color = 0xFF000000 | transparent_color;
 80078ac:	e0800317 	ldw	r2,12(fp)
 80078b0:	10bfc034 	orhi	r2,r2,65280
 80078b4:	e0800315 	stw	r2,12(fp)

  for (x_b = 0; x_b<x_size; x_b++) {
 80078b8:	e03ff715 	stw	zero,-36(fp)
 80078bc:	00002b06 	br	800796c <draw_array+0x10c>
    for (y_b = 0; y_b<y_size; y_b++) {
 80078c0:	e03ff815 	stw	zero,-32(fp)
 80078c4:	00002306 	br	8007954 <draw_array+0xf4>
      color = buffer[y_b*x_size+x_b];
 80078c8:	e0fff817 	ldw	r3,-32(fp)
 80078cc:	e0bffd17 	ldw	r2,-12(fp)
 80078d0:	1887383a 	mul	r3,r3,r2
 80078d4:	e0bff717 	ldw	r2,-36(fp)
 80078d8:	1885883a 	add	r2,r3,r2
 80078dc:	1085883a 	add	r2,r2,r2
 80078e0:	1085883a 	add	r2,r2,r2
 80078e4:	1007883a 	mov	r3,r2
 80078e8:	e0bffc17 	ldw	r2,-16(fp)
 80078ec:	10c5883a 	add	r2,r2,r3
 80078f0:	10800017 	ldw	r2,0(r2)
 80078f4:	e0bffb15 	stw	r2,-20(fp)
      if (color != transparent_color) {
 80078f8:	e0fffb17 	ldw	r3,-20(fp)
 80078fc:	e0800317 	ldw	r2,12(fp)
 8007900:	18801126 	beq	r3,r2,8007948 <draw_array+0xe8>
        current_buffer[(y_b+y_offset)*display->width+(x_b+x_offset)] = color;
 8007904:	e0fff817 	ldw	r3,-32(fp)
 8007908:	e0800217 	ldw	r2,8(fp)
 800790c:	1887883a 	add	r3,r3,r2
 8007910:	e0bfff17 	ldw	r2,-4(fp)
 8007914:	10800717 	ldw	r2,28(r2)
 8007918:	1887383a 	mul	r3,r3,r2
 800791c:	e13ff717 	ldw	r4,-36(fp)
 8007920:	e0800117 	ldw	r2,4(fp)
 8007924:	2085883a 	add	r2,r4,r2
 8007928:	1885883a 	add	r2,r3,r2
 800792c:	1085883a 	add	r2,r2,r2
 8007930:	1085883a 	add	r2,r2,r2
 8007934:	1007883a 	mov	r3,r2
 8007938:	e0bffa17 	ldw	r2,-24(fp)
 800793c:	10c5883a 	add	r2,r2,r3
 8007940:	e0fffb17 	ldw	r3,-20(fp)
 8007944:	10c00015 	stw	r3,0(r2)
  unsigned int color;

  transparent_color = 0xFF000000 | transparent_color;

  for (x_b = 0; x_b<x_size; x_b++) {
    for (y_b = 0; y_b<y_size; y_b++) {
 8007948:	e0bff817 	ldw	r2,-32(fp)
 800794c:	10800044 	addi	r2,r2,1
 8007950:	e0bff815 	stw	r2,-32(fp)
 8007954:	e0fff817 	ldw	r3,-32(fp)
 8007958:	e0bffe17 	ldw	r2,-8(fp)
 800795c:	18bfda16 	blt	r3,r2,80078c8 <__alt_data_end+0xf80078c8>
  int x_b,y_b;
  unsigned int color;

  transparent_color = 0xFF000000 | transparent_color;

  for (x_b = 0; x_b<x_size; x_b++) {
 8007960:	e0bff717 	ldw	r2,-36(fp)
 8007964:	10800044 	addi	r2,r2,1
 8007968:	e0bff715 	stw	r2,-36(fp)
 800796c:	e0fff717 	ldw	r3,-36(fp)
 8007970:	e0bffd17 	ldw	r2,-12(fp)
 8007974:	18bfd216 	blt	r3,r2,80078c0 <__alt_data_end+0xf80078c0>
      if (color != transparent_color) {
        current_buffer[(y_b+y_offset)*display->width+(x_b+x_offset)] = color;
      }
    }
  }
}
 8007978:	e037883a 	mov	sp,fp
 800797c:	df000017 	ldw	fp,0(sp)
 8007980:	dec00104 	addi	sp,sp,4
 8007984:	f800283a 	ret

08007988 <InitBackGround>:

void InitBackGround(alt_video_display* display, void *temp_Buffer)
{
 8007988:	defffc04 	addi	sp,sp,-16
 800798c:	dfc00315 	stw	ra,12(sp)
 8007990:	df000215 	stw	fp,8(sp)
 8007994:	df000204 	addi	fp,sp,8
 8007998:	e13ffe15 	stw	r4,-8(fp)
 800799c:	e17fff15 	stw	r5,-4(fp)
    extern struct gimp_image_struct background;
    
    alt_video_display_clear_screen( display, COLOR_WHITE );
 80079a0:	e13ffe17 	ldw	r4,-8(fp)
 80079a4:	017fffc4 	movi	r5,-1
 80079a8:	80008c40 	call	80008c4 <alt_video_display_clear_screen>
        
    //draw background
    //DrawImage(display, &background, 0,0);
              
    memcpy(temp_Buffer, (void*)(display->buffer_ptrs[display->buffer_being_written]->buffer),display->bytes_per_frame);
 80079ac:	e0bffe17 	ldw	r2,-8(fp)
 80079b0:	10800617 	ldw	r2,24(r2)
 80079b4:	e0fffe17 	ldw	r3,-8(fp)
 80079b8:	10800044 	addi	r2,r2,1
 80079bc:	1085883a 	add	r2,r2,r2
 80079c0:	1085883a 	add	r2,r2,r2
 80079c4:	1885883a 	add	r2,r3,r2
 80079c8:	10800017 	ldw	r2,0(r2)
 80079cc:	10c00117 	ldw	r3,4(r2)
 80079d0:	e0bffe17 	ldw	r2,-8(fp)
 80079d4:	10800b17 	ldw	r2,44(r2)
 80079d8:	e13fff17 	ldw	r4,-4(fp)
 80079dc:	180b883a 	mov	r5,r3
 80079e0:	100d883a 	mov	r6,r2
 80079e4:	800fc580 	call	800fc58 <memcpy>
}
 80079e8:	e037883a 	mov	sp,fp
 80079ec:	dfc00117 	ldw	ra,4(sp)
 80079f0:	df000017 	ldw	fp,0(sp)
 80079f4:	dec00204 	addi	sp,sp,8
 80079f8:	f800283a 	ret

080079fc <DrawTransparentImage>:

void DrawTransparentImage( alt_video_display* display, struct gimp_image_struct* Terasic_image, int horiz, int vert,unsigned int transparent_color )
{
 80079fc:	defff504 	addi	sp,sp,-44
 8007a00:	dfc00a15 	stw	ra,40(sp)
 8007a04:	df000915 	stw	fp,36(sp)
 8007a08:	df000904 	addi	fp,sp,36
 8007a0c:	e13ffc15 	stw	r4,-16(fp)
 8007a10:	e17ffd15 	stw	r5,-12(fp)
 8007a14:	e1bffe15 	stw	r6,-8(fp)
 8007a18:	e1ffff15 	stw	r7,-4(fp)

  bitmap_struct* image;
  char* image_dest;

  image = malloc(sizeof(bitmap_struct));
 8007a1c:	01000404 	movi	r4,16
 8007a20:	800f4880 	call	800f488 <malloc>
 8007a24:	e0bffa15 	stw	r2,-24(fp)
  
  if( image != NULL )
 8007a28:	e0bffa17 	ldw	r2,-24(fp)
 8007a2c:	10003426 	beq	r2,zero,8007b00 <DrawTransparentImage+0x104>
  {
    // Load the CIII logo
    load_gimp_bmp( Terasic_image, image, 32);
 8007a30:	e13ffd17 	ldw	r4,-12(fp)
 8007a34:	e17ffa17 	ldw	r5,-24(fp)
 8007a38:	01800804 	movi	r6,32
 8007a3c:	8000ce00 	call	8000ce0 <load_gimp_bmp>

      image_dest = (char*)(( display->buffer_ptrs[display->buffer_being_written]->buffer ) + (vert * (display->width * 4)) + horiz * 4); 
 8007a40:	e0bffc17 	ldw	r2,-16(fp)
 8007a44:	10800617 	ldw	r2,24(r2)
 8007a48:	e0fffc17 	ldw	r3,-16(fp)
 8007a4c:	10800044 	addi	r2,r2,1
 8007a50:	1085883a 	add	r2,r2,r2
 8007a54:	1085883a 	add	r2,r2,r2
 8007a58:	1885883a 	add	r2,r3,r2
 8007a5c:	10800017 	ldw	r2,0(r2)
 8007a60:	10c00117 	ldw	r3,4(r2)
 8007a64:	e0bffc17 	ldw	r2,-16(fp)
 8007a68:	10800717 	ldw	r2,28(r2)
 8007a6c:	1085883a 	add	r2,r2,r2
 8007a70:	1085883a 	add	r2,r2,r2
 8007a74:	1009883a 	mov	r4,r2
 8007a78:	e0bfff17 	ldw	r2,-4(fp)
 8007a7c:	2085383a 	mul	r2,r4,r2
 8007a80:	1009883a 	mov	r4,r2
 8007a84:	e0bffe17 	ldw	r2,-8(fp)
 8007a88:	1085883a 	add	r2,r2,r2
 8007a8c:	1085883a 	add	r2,r2,r2
 8007a90:	2085883a 	add	r2,r4,r2
 8007a94:	1885883a 	add	r2,r3,r2
 8007a98:	e0bffb15 	stw	r2,-20(fp)
//    memcpy( dest, src, ( image->biWidth * 4 ));
//    src += ( image->biWidth * 4 );
//    dest += ( display->width * 4 );
//  }  

    draw_array((unsigned int*)image->data,image->biWidth,image->biHeight,display,horiz,vert,transparent_color);
 8007a9c:	e0bffa17 	ldw	r2,-24(fp)
 8007aa0:	11000317 	ldw	r4,12(r2)
 8007aa4:	e0bffa17 	ldw	r2,-24(fp)
 8007aa8:	1080000b 	ldhu	r2,0(r2)
 8007aac:	117fffcc 	andi	r5,r2,65535
 8007ab0:	2960001c 	xori	r5,r5,32768
 8007ab4:	29600004 	addi	r5,r5,-32768
 8007ab8:	e0bffa17 	ldw	r2,-24(fp)
 8007abc:	1080008b 	ldhu	r2,2(r2)
 8007ac0:	10ffffcc 	andi	r3,r2,65535
 8007ac4:	18e0001c 	xori	r3,r3,32768
 8007ac8:	18e00004 	addi	r3,r3,-32768
 8007acc:	e0bffe17 	ldw	r2,-8(fp)
 8007ad0:	d8800015 	stw	r2,0(sp)
 8007ad4:	e0bfff17 	ldw	r2,-4(fp)
 8007ad8:	d8800115 	stw	r2,4(sp)
 8007adc:	e0800217 	ldw	r2,8(fp)
 8007ae0:	d8800215 	stw	r2,8(sp)
 8007ae4:	180d883a 	mov	r6,r3
 8007ae8:	e1fffc17 	ldw	r7,-16(fp)
 8007aec:	80078600 	call	8007860 <draw_array>

    free_gimp_bmp_data( image );
 8007af0:	e13ffa17 	ldw	r4,-24(fp)
 8007af4:	80010c00 	call	80010c0 <free_gimp_bmp_data>
    free( image );
 8007af8:	e13ffa17 	ldw	r4,-24(fp)
 8007afc:	800f49c0 	call	800f49c <free>
  }
}
 8007b00:	e037883a 	mov	sp,fp
 8007b04:	dfc00117 	ldw	ra,4(sp)
 8007b08:	df000017 	ldw	fp,0(sp)
 8007b0c:	dec00204 	addi	sp,sp,8
 8007b10:	f800283a 	ret

08007b14 <DRAW_CopyRGBImageToBuffer>:

int DRAW_CopyRGBImageToBuffer( char* dest, char* src, 
                            int dest_width, 
                            int src_width, int src_height )
{
 8007b14:	defff504 	addi	sp,sp,-44
 8007b18:	df000a15 	stw	fp,40(sp)
 8007b1c:	df000a04 	addi	fp,sp,40
 8007b20:	e13ffc15 	stw	r4,-16(fp)
 8007b24:	e17ffd15 	stw	r5,-12(fp)
 8007b28:	e1bffe15 	stw	r6,-8(fp)
 8007b2c:	e1ffff15 	stw	r7,-4(fp)
  int x, y;
  
  
  //Copy one line at a time from top to bottom
  char *pSrcBase, *pDesBase;
  pSrcBase = src;
 8007b30:	e0bffd17 	ldw	r2,-12(fp)
 8007b34:	e0bff815 	stw	r2,-32(fp)
  pDesBase = dest;
 8007b38:	e0bffc17 	ldw	r2,-16(fp)
 8007b3c:	e0bff915 	stw	r2,-28(fp)
  for ( y = 0; y < src_height; y++ )
 8007b40:	e03ff715 	stw	zero,-36(fp)
 8007b44:	00003a06 	br	8007c30 <DRAW_CopyRGBImageToBuffer+0x11c>
  {
        char *pDes = pDesBase;
 8007b48:	e0bff917 	ldw	r2,-28(fp)
 8007b4c:	e0bffa15 	stw	r2,-24(fp)
        char *pSrc = pSrcBase;
 8007b50:	e0bff817 	ldw	r2,-32(fp)
 8007b54:	e0bffb15 	stw	r2,-20(fp)
        for(x = 0; x< src_width; x++){
 8007b58:	e03ff615 	stw	zero,-40(fp)
 8007b5c:	00001f06 	br	8007bdc <DRAW_CopyRGBImageToBuffer+0xc8>
            *pDes++ = *pSrc++;
 8007b60:	e0bffa17 	ldw	r2,-24(fp)
 8007b64:	10c00044 	addi	r3,r2,1
 8007b68:	e0fffa15 	stw	r3,-24(fp)
 8007b6c:	e0fffb17 	ldw	r3,-20(fp)
 8007b70:	19000044 	addi	r4,r3,1
 8007b74:	e13ffb15 	stw	r4,-20(fp)
 8007b78:	18c00003 	ldbu	r3,0(r3)
 8007b7c:	10c00005 	stb	r3,0(r2)
            *pDes++ = *pSrc++;
 8007b80:	e0bffa17 	ldw	r2,-24(fp)
 8007b84:	10c00044 	addi	r3,r2,1
 8007b88:	e0fffa15 	stw	r3,-24(fp)
 8007b8c:	e0fffb17 	ldw	r3,-20(fp)
 8007b90:	19000044 	addi	r4,r3,1
 8007b94:	e13ffb15 	stw	r4,-20(fp)
 8007b98:	18c00003 	ldbu	r3,0(r3)
 8007b9c:	10c00005 	stb	r3,0(r2)
            *pDes++ = *pSrc++;
 8007ba0:	e0bffa17 	ldw	r2,-24(fp)
 8007ba4:	10c00044 	addi	r3,r2,1
 8007ba8:	e0fffa15 	stw	r3,-24(fp)
 8007bac:	e0fffb17 	ldw	r3,-20(fp)
 8007bb0:	19000044 	addi	r4,r3,1
 8007bb4:	e13ffb15 	stw	r4,-20(fp)
 8007bb8:	18c00003 	ldbu	r3,0(r3)
 8007bbc:	10c00005 	stb	r3,0(r2)
            *pDes++ = 0;  // alpha
 8007bc0:	e0bffa17 	ldw	r2,-24(fp)
 8007bc4:	10c00044 	addi	r3,r2,1
 8007bc8:	e0fffa15 	stw	r3,-24(fp)
 8007bcc:	10000005 	stb	zero,0(r2)
  pDesBase = dest;
  for ( y = 0; y < src_height; y++ )
  {
        char *pDes = pDesBase;
        char *pSrc = pSrcBase;
        for(x = 0; x< src_width; x++){
 8007bd0:	e0bff617 	ldw	r2,-40(fp)
 8007bd4:	10800044 	addi	r2,r2,1
 8007bd8:	e0bff615 	stw	r2,-40(fp)
 8007bdc:	e0fff617 	ldw	r3,-40(fp)
 8007be0:	e0bfff17 	ldw	r2,-4(fp)
 8007be4:	18bfde16 	blt	r3,r2,8007b60 <__alt_data_end+0xf8007b60>
            *pDes++ = *pSrc++;
            *pDes++ = *pSrc++;
            *pDes++ = 0;  // alpha
        }
        
        pDesBase += dest_width * 4;
 8007be8:	e0bffe17 	ldw	r2,-8(fp)
 8007bec:	1085883a 	add	r2,r2,r2
 8007bf0:	1085883a 	add	r2,r2,r2
 8007bf4:	1007883a 	mov	r3,r2
 8007bf8:	e0bff917 	ldw	r2,-28(fp)
 8007bfc:	10c5883a 	add	r2,r2,r3
 8007c00:	e0bff915 	stw	r2,-28(fp)
        pSrcBase += src_width * 3;
 8007c04:	e0ffff17 	ldw	r3,-4(fp)
 8007c08:	1805883a 	mov	r2,r3
 8007c0c:	1085883a 	add	r2,r2,r2
 8007c10:	10c5883a 	add	r2,r2,r3
 8007c14:	1007883a 	mov	r3,r2
 8007c18:	e0bff817 	ldw	r2,-32(fp)
 8007c1c:	10c5883a 	add	r2,r2,r3
 8007c20:	e0bff815 	stw	r2,-32(fp)
  
  //Copy one line at a time from top to bottom
  char *pSrcBase, *pDesBase;
  pSrcBase = src;
  pDesBase = dest;
  for ( y = 0; y < src_height; y++ )
 8007c24:	e0bff717 	ldw	r2,-36(fp)
 8007c28:	10800044 	addi	r2,r2,1
 8007c2c:	e0bff715 	stw	r2,-36(fp)
 8007c30:	e0fff717 	ldw	r3,-36(fp)
 8007c34:	e0800117 	ldw	r2,4(fp)
 8007c38:	18bfc316 	blt	r3,r2,8007b48 <__alt_data_end+0xf8007b48>
        
        pDesBase += dest_width * 4;
        pSrcBase += src_width * 3;
  }
  
  return( 0 );
 8007c3c:	0005883a 	mov	r2,zero
}
 8007c40:	e037883a 	mov	sp,fp
 8007c44:	df000017 	ldw	fp,0(sp)
 8007c48:	dec00104 	addi	sp,sp,4
 8007c4c:	f800283a 	ret

08007c50 <srec_decode>:
 8007c50:	defff604 	addi	sp,sp,-40
 8007c54:	df000915 	stw	fp,36(sp)
 8007c58:	df000904 	addi	fp,sp,36
 8007c5c:	e13ffe15 	stw	r4,-8(fp)
 8007c60:	e17fff15 	stw	r5,-4(fp)
 8007c64:	e03ff815 	stw	zero,-32(fp)
 8007c68:	e03ff915 	stw	zero,-28(fp)
 8007c6c:	e0bfff17 	ldw	r2,-4(fp)
 8007c70:	e0bffa15 	stw	r2,-24(fp)
 8007c74:	e0bffe17 	ldw	r2,-8(fp)
 8007c78:	10000226 	beq	r2,zero,8007c84 <srec_decode+0x34>
 8007c7c:	e0bffa17 	ldw	r2,-24(fp)
 8007c80:	1000021e 	bne	r2,zero,8007c8c <srec_decode+0x3c>
 8007c84:	00bfffc4 	movi	r2,-1
 8007c88:	00012c06 	br	800813c <srec_decode+0x4ec>
 8007c8c:	e03ff715 	stw	zero,-36(fp)
 8007c90:	00001106 	br	8007cd8 <srec_decode+0x88>
 8007c94:	e0bff717 	ldw	r2,-36(fp)
 8007c98:	e0fffa17 	ldw	r3,-24(fp)
 8007c9c:	1885883a 	add	r2,r3,r2
 8007ca0:	10800003 	ldbu	r2,0(r2)
 8007ca4:	10803fcc 	andi	r2,r2,255
 8007ca8:	108002a0 	cmpeqi	r2,r2,10
 8007cac:	1000101e 	bne	r2,zero,8007cf0 <srec_decode+0xa0>
 8007cb0:	e0bff717 	ldw	r2,-36(fp)
 8007cb4:	e0fffa17 	ldw	r3,-24(fp)
 8007cb8:	1885883a 	add	r2,r3,r2
 8007cbc:	10800003 	ldbu	r2,0(r2)
 8007cc0:	10803fcc 	andi	r2,r2,255
 8007cc4:	10800360 	cmpeqi	r2,r2,13
 8007cc8:	1000091e 	bne	r2,zero,8007cf0 <srec_decode+0xa0>
 8007ccc:	e0bff717 	ldw	r2,-36(fp)
 8007cd0:	10800044 	addi	r2,r2,1
 8007cd4:	e0bff715 	stw	r2,-36(fp)
 8007cd8:	e0bff717 	ldw	r2,-36(fp)
 8007cdc:	e0fffa17 	ldw	r3,-24(fp)
 8007ce0:	1885883a 	add	r2,r3,r2
 8007ce4:	10800003 	ldbu	r2,0(r2)
 8007ce8:	10803fcc 	andi	r2,r2,255
 8007cec:	103fe91e 	bne	r2,zero,8007c94 <__alt_data_end+0xf8007c94>
 8007cf0:	e0bff717 	ldw	r2,-36(fp)
 8007cf4:	10800108 	cmpgei	r2,r2,4
 8007cf8:	1000021e 	bne	r2,zero,8007d04 <srec_decode+0xb4>
 8007cfc:	00bfff84 	movi	r2,-2
 8007d00:	00010e06 	br	800813c <srec_decode+0x4ec>
 8007d04:	e0bffa17 	ldw	r2,-24(fp)
 8007d08:	10800003 	ldbu	r2,0(r2)
 8007d0c:	10803fcc 	andi	r2,r2,255
 8007d10:	108014e0 	cmpeqi	r2,r2,83
 8007d14:	1000021e 	bne	r2,zero,8007d20 <srec_decode+0xd0>
 8007d18:	00bfff84 	movi	r2,-2
 8007d1c:	00010706 	br	800813c <srec_decode+0x4ec>
 8007d20:	00800044 	movi	r2,1
 8007d24:	e0bff815 	stw	r2,-32(fp)
 8007d28:	00001206 	br	8007d74 <srec_decode+0x124>
 8007d2c:	e0bff817 	ldw	r2,-32(fp)
 8007d30:	e0fffa17 	ldw	r3,-24(fp)
 8007d34:	1885883a 	add	r2,r3,r2
 8007d38:	10800003 	ldbu	r2,0(r2)
 8007d3c:	10c03fcc 	andi	r3,r2,255
 8007d40:	008205b4 	movhi	r2,2070
 8007d44:	109c4104 	addi	r2,r2,28932
 8007d48:	10c5883a 	add	r2,r2,r3
 8007d4c:	10800003 	ldbu	r2,0(r2)
 8007d50:	10803fcc 	andi	r2,r2,255
 8007d54:	1080201c 	xori	r2,r2,128
 8007d58:	10bfe004 	addi	r2,r2,-128
 8007d5c:	1000020e 	bge	r2,zero,8007d68 <srec_decode+0x118>
 8007d60:	00bfff44 	movi	r2,-3
 8007d64:	0000f506 	br	800813c <srec_decode+0x4ec>
 8007d68:	e0bff817 	ldw	r2,-32(fp)
 8007d6c:	10800044 	addi	r2,r2,1
 8007d70:	e0bff815 	stw	r2,-32(fp)
 8007d74:	e0fff817 	ldw	r3,-32(fp)
 8007d78:	e0bff717 	ldw	r2,-36(fp)
 8007d7c:	18bfeb16 	blt	r3,r2,8007d2c <__alt_data_end+0xf8007d2c>
 8007d80:	e0bffa17 	ldw	r2,-24(fp)
 8007d84:	10800044 	addi	r2,r2,1
 8007d88:	10800003 	ldbu	r2,0(r2)
 8007d8c:	10c03fcc 	andi	r3,r2,255
 8007d90:	008205b4 	movhi	r2,2070
 8007d94:	109c4104 	addi	r2,r2,28932
 8007d98:	10c5883a 	add	r2,r2,r3
 8007d9c:	10800003 	ldbu	r2,0(r2)
 8007da0:	1007883a 	mov	r3,r2
 8007da4:	e0bffe17 	ldw	r2,-8(fp)
 8007da8:	10c00005 	stb	r3,0(r2)
 8007dac:	e0bffa17 	ldw	r2,-24(fp)
 8007db0:	10800084 	addi	r2,r2,2
 8007db4:	10800003 	ldbu	r2,0(r2)
 8007db8:	10c03fcc 	andi	r3,r2,255
 8007dbc:	008205b4 	movhi	r2,2070
 8007dc0:	109c4104 	addi	r2,r2,28932
 8007dc4:	10c5883a 	add	r2,r2,r3
 8007dc8:	10800003 	ldbu	r2,0(r2)
 8007dcc:	10803fcc 	andi	r2,r2,255
 8007dd0:	1080201c 	xori	r2,r2,128
 8007dd4:	10bfe004 	addi	r2,r2,-128
 8007dd8:	1006913a 	slli	r3,r2,4
 8007ddc:	e0bffa17 	ldw	r2,-24(fp)
 8007de0:	108000c4 	addi	r2,r2,3
 8007de4:	10800003 	ldbu	r2,0(r2)
 8007de8:	11003fcc 	andi	r4,r2,255
 8007dec:	008205b4 	movhi	r2,2070
 8007df0:	109c4104 	addi	r2,r2,28932
 8007df4:	1105883a 	add	r2,r2,r4
 8007df8:	10800003 	ldbu	r2,0(r2)
 8007dfc:	10803fcc 	andi	r2,r2,255
 8007e00:	1080201c 	xori	r2,r2,128
 8007e04:	10bfe004 	addi	r2,r2,-128
 8007e08:	1884b03a 	or	r2,r3,r2
 8007e0c:	e0bffb15 	stw	r2,-20(fp)
 8007e10:	e0bffe17 	ldw	r2,-8(fp)
 8007e14:	10800003 	ldbu	r2,0(r2)
 8007e18:	10803fcc 	andi	r2,r2,255
 8007e1c:	108002b0 	cmpltui	r2,r2,10
 8007e20:	1000021e 	bne	r2,zero,8007e2c <srec_decode+0x1dc>
 8007e24:	00bfff04 	movi	r2,-4
 8007e28:	0000c406 	br	800813c <srec_decode+0x4ec>
 8007e2c:	e0bffe17 	ldw	r2,-8(fp)
 8007e30:	10800003 	ldbu	r2,0(r2)
 8007e34:	10c03fcc 	andi	r3,r2,255
 8007e38:	008205b4 	movhi	r2,2070
 8007e3c:	109c8104 	addi	r2,r2,29188
 8007e40:	18c7883a 	add	r3,r3,r3
 8007e44:	18c7883a 	add	r3,r3,r3
 8007e48:	10c5883a 	add	r2,r2,r3
 8007e4c:	10800017 	ldw	r2,0(r2)
 8007e50:	e0bffc15 	stw	r2,-16(fp)
 8007e54:	e0bffc17 	ldw	r2,-16(fp)
 8007e58:	1000021e 	bne	r2,zero,8007e64 <srec_decode+0x214>
 8007e5c:	00bfff04 	movi	r2,-4
 8007e60:	0000b606 	br	800813c <srec_decode+0x4ec>
 8007e64:	e0bffc17 	ldw	r2,-16(fp)
 8007e68:	10800184 	addi	r2,r2,6
 8007e6c:	e0fff717 	ldw	r3,-36(fp)
 8007e70:	1880020e 	bge	r3,r2,8007e7c <srec_decode+0x22c>
 8007e74:	00bffec4 	movi	r2,-5
 8007e78:	0000b006 	br	800813c <srec_decode+0x4ec>
 8007e7c:	e0bffc17 	ldw	r2,-16(fp)
 8007e80:	10c04084 	addi	r3,r2,258
 8007e84:	e0bffb17 	ldw	r2,-20(fp)
 8007e88:	1880020e 	bge	r3,r2,8007e94 <srec_decode+0x244>
 8007e8c:	00bffe84 	movi	r2,-6
 8007e90:	0000aa06 	br	800813c <srec_decode+0x4ec>
 8007e94:	e0bffb17 	ldw	r2,-20(fp)
 8007e98:	10800084 	addi	r2,r2,2
 8007e9c:	1085883a 	add	r2,r2,r2
 8007ea0:	1007883a 	mov	r3,r2
 8007ea4:	e0bff717 	ldw	r2,-36(fp)
 8007ea8:	18800226 	beq	r3,r2,8007eb4 <srec_decode+0x264>
 8007eac:	00bffe44 	movi	r2,-7
 8007eb0:	0000a206 	br	800813c <srec_decode+0x4ec>
 8007eb4:	e0fff917 	ldw	r3,-28(fp)
 8007eb8:	e0bffb17 	ldw	r2,-20(fp)
 8007ebc:	1885883a 	add	r2,r3,r2
 8007ec0:	e0bff915 	stw	r2,-28(fp)
 8007ec4:	e0bff717 	ldw	r2,-36(fp)
 8007ec8:	10bfff04 	addi	r2,r2,-4
 8007ecc:	e0bff715 	stw	r2,-36(fp)
 8007ed0:	e0bffa17 	ldw	r2,-24(fp)
 8007ed4:	10800104 	addi	r2,r2,4
 8007ed8:	e0bffa15 	stw	r2,-24(fp)
 8007edc:	e0bffe17 	ldw	r2,-8(fp)
 8007ee0:	10000115 	stw	zero,4(r2)
 8007ee4:	e03ff815 	stw	zero,-32(fp)
 8007ee8:	00002806 	br	8007f8c <srec_decode+0x33c>
 8007eec:	e0bff817 	ldw	r2,-32(fp)
 8007ef0:	e0fffa17 	ldw	r3,-24(fp)
 8007ef4:	1885883a 	add	r2,r3,r2
 8007ef8:	10800003 	ldbu	r2,0(r2)
 8007efc:	10c03fcc 	andi	r3,r2,255
 8007f00:	008205b4 	movhi	r2,2070
 8007f04:	109c4104 	addi	r2,r2,28932
 8007f08:	10c5883a 	add	r2,r2,r3
 8007f0c:	10800003 	ldbu	r2,0(r2)
 8007f10:	10803fcc 	andi	r2,r2,255
 8007f14:	1080201c 	xori	r2,r2,128
 8007f18:	10bfe004 	addi	r2,r2,-128
 8007f1c:	1004913a 	slli	r2,r2,4
 8007f20:	1009883a 	mov	r4,r2
 8007f24:	e0bff817 	ldw	r2,-32(fp)
 8007f28:	10800044 	addi	r2,r2,1
 8007f2c:	e0fffa17 	ldw	r3,-24(fp)
 8007f30:	1885883a 	add	r2,r3,r2
 8007f34:	10800003 	ldbu	r2,0(r2)
 8007f38:	10c03fcc 	andi	r3,r2,255
 8007f3c:	008205b4 	movhi	r2,2070
 8007f40:	109c4104 	addi	r2,r2,28932
 8007f44:	10c5883a 	add	r2,r2,r3
 8007f48:	10800003 	ldbu	r2,0(r2)
 8007f4c:	2084b03a 	or	r2,r4,r2
 8007f50:	e0bffd05 	stb	r2,-12(fp)
 8007f54:	e0bffe17 	ldw	r2,-8(fp)
 8007f58:	10800117 	ldw	r2,4(r2)
 8007f5c:	1006923a 	slli	r3,r2,8
 8007f60:	e0bffd03 	ldbu	r2,-12(fp)
 8007f64:	1886b03a 	or	r3,r3,r2
 8007f68:	e0bffe17 	ldw	r2,-8(fp)
 8007f6c:	10c00115 	stw	r3,4(r2)
 8007f70:	e0bffd03 	ldbu	r2,-12(fp)
 8007f74:	e0fff917 	ldw	r3,-28(fp)
 8007f78:	1885883a 	add	r2,r3,r2
 8007f7c:	e0bff915 	stw	r2,-28(fp)
 8007f80:	e0bff817 	ldw	r2,-32(fp)
 8007f84:	10800084 	addi	r2,r2,2
 8007f88:	e0bff815 	stw	r2,-32(fp)
 8007f8c:	e0fff817 	ldw	r3,-32(fp)
 8007f90:	e0bffc17 	ldw	r2,-16(fp)
 8007f94:	18bfd516 	blt	r3,r2,8007eec <__alt_data_end+0xf8007eec>
 8007f98:	e0fff717 	ldw	r3,-36(fp)
 8007f9c:	e0bffc17 	ldw	r2,-16(fp)
 8007fa0:	1885c83a 	sub	r2,r3,r2
 8007fa4:	e0bff715 	stw	r2,-36(fp)
 8007fa8:	e0bffc17 	ldw	r2,-16(fp)
 8007fac:	e0fffa17 	ldw	r3,-24(fp)
 8007fb0:	1885883a 	add	r2,r3,r2
 8007fb4:	e0bffa15 	stw	r2,-24(fp)
 8007fb8:	e03ff815 	stw	zero,-32(fp)
 8007fbc:	00002b06 	br	800806c <srec_decode+0x41c>
 8007fc0:	e0bff817 	ldw	r2,-32(fp)
 8007fc4:	e0fffa17 	ldw	r3,-24(fp)
 8007fc8:	1885883a 	add	r2,r3,r2
 8007fcc:	10800003 	ldbu	r2,0(r2)
 8007fd0:	10c03fcc 	andi	r3,r2,255
 8007fd4:	008205b4 	movhi	r2,2070
 8007fd8:	109c4104 	addi	r2,r2,28932
 8007fdc:	10c5883a 	add	r2,r2,r3
 8007fe0:	10800003 	ldbu	r2,0(r2)
 8007fe4:	10803fcc 	andi	r2,r2,255
 8007fe8:	1080201c 	xori	r2,r2,128
 8007fec:	10bfe004 	addi	r2,r2,-128
 8007ff0:	1004913a 	slli	r2,r2,4
 8007ff4:	1009883a 	mov	r4,r2
 8007ff8:	e0bff817 	ldw	r2,-32(fp)
 8007ffc:	10800044 	addi	r2,r2,1
 8008000:	e0fffa17 	ldw	r3,-24(fp)
 8008004:	1885883a 	add	r2,r3,r2
 8008008:	10800003 	ldbu	r2,0(r2)
 800800c:	10c03fcc 	andi	r3,r2,255
 8008010:	008205b4 	movhi	r2,2070
 8008014:	109c4104 	addi	r2,r2,28932
 8008018:	10c5883a 	add	r2,r2,r3
 800801c:	10800003 	ldbu	r2,0(r2)
 8008020:	2084b03a 	or	r2,r4,r2
 8008024:	e0bffd45 	stb	r2,-11(fp)
 8008028:	e0bff817 	ldw	r2,-32(fp)
 800802c:	1006d7fa 	srli	r3,r2,31
 8008030:	1885883a 	add	r2,r3,r2
 8008034:	1005d07a 	srai	r2,r2,1
 8008038:	1007883a 	mov	r3,r2
 800803c:	e0bffe17 	ldw	r2,-8(fp)
 8008040:	10c5883a 	add	r2,r2,r3
 8008044:	10800244 	addi	r2,r2,9
 8008048:	e0fffd43 	ldbu	r3,-11(fp)
 800804c:	10c00005 	stb	r3,0(r2)
 8008050:	e0bffd43 	ldbu	r2,-11(fp)
 8008054:	e0fff917 	ldw	r3,-28(fp)
 8008058:	1885883a 	add	r2,r3,r2
 800805c:	e0bff915 	stw	r2,-28(fp)
 8008060:	e0bff817 	ldw	r2,-32(fp)
 8008064:	10800084 	addi	r2,r2,2
 8008068:	e0bff815 	stw	r2,-32(fp)
 800806c:	e0bff717 	ldw	r2,-36(fp)
 8008070:	10bfff84 	addi	r2,r2,-2
 8008074:	e0fff817 	ldw	r3,-32(fp)
 8008078:	18bfd116 	blt	r3,r2,8007fc0 <__alt_data_end+0xf8007fc0>
 800807c:	e0bffb17 	ldw	r2,-20(fp)
 8008080:	1009883a 	mov	r4,r2
 8008084:	e0bffc17 	ldw	r2,-16(fp)
 8008088:	1006d7fa 	srli	r3,r2,31
 800808c:	1885883a 	add	r2,r3,r2
 8008090:	1005d07a 	srai	r2,r2,1
 8008094:	2085c83a 	sub	r2,r4,r2
 8008098:	10bfffc4 	addi	r2,r2,-1
 800809c:	1007883a 	mov	r3,r2
 80080a0:	e0bffe17 	ldw	r2,-8(fp)
 80080a4:	10c00205 	stb	r3,8(r2)
 80080a8:	e0bff817 	ldw	r2,-32(fp)
 80080ac:	e0fffa17 	ldw	r3,-24(fp)
 80080b0:	1885883a 	add	r2,r3,r2
 80080b4:	10800003 	ldbu	r2,0(r2)
 80080b8:	10c03fcc 	andi	r3,r2,255
 80080bc:	008205b4 	movhi	r2,2070
 80080c0:	109c4104 	addi	r2,r2,28932
 80080c4:	10c5883a 	add	r2,r2,r3
 80080c8:	10800003 	ldbu	r2,0(r2)
 80080cc:	10803fcc 	andi	r2,r2,255
 80080d0:	1080201c 	xori	r2,r2,128
 80080d4:	10bfe004 	addi	r2,r2,-128
 80080d8:	1006913a 	slli	r3,r2,4
 80080dc:	e0bff817 	ldw	r2,-32(fp)
 80080e0:	10800044 	addi	r2,r2,1
 80080e4:	e13ffa17 	ldw	r4,-24(fp)
 80080e8:	2085883a 	add	r2,r4,r2
 80080ec:	10800003 	ldbu	r2,0(r2)
 80080f0:	11003fcc 	andi	r4,r2,255
 80080f4:	008205b4 	movhi	r2,2070
 80080f8:	109c4104 	addi	r2,r2,28932
 80080fc:	1105883a 	add	r2,r2,r4
 8008100:	10800003 	ldbu	r2,0(r2)
 8008104:	10803fcc 	andi	r2,r2,255
 8008108:	1080201c 	xori	r2,r2,128
 800810c:	10bfe004 	addi	r2,r2,-128
 8008110:	1884b03a 	or	r2,r3,r2
 8008114:	e0fff917 	ldw	r3,-28(fp)
 8008118:	1885883a 	add	r2,r3,r2
 800811c:	e0bff915 	stw	r2,-28(fp)
 8008120:	e0bff917 	ldw	r2,-28(fp)
 8008124:	10803fcc 	andi	r2,r2,255
 8008128:	10803fe0 	cmpeqi	r2,r2,255
 800812c:	1000021e 	bne	r2,zero,8008138 <srec_decode+0x4e8>
 8008130:	00bffe04 	movi	r2,-8
 8008134:	00000106 	br	800813c <srec_decode+0x4ec>
 8008138:	0005883a 	mov	r2,zero
 800813c:	e037883a 	mov	sp,fp
 8008140:	df000017 	ldw	fp,0(sp)
 8008144:	dec00104 	addi	sp,sp,4
 8008148:	f800283a 	ret

0800814c <srec_encode>:
 800814c:	defff704 	addi	sp,sp,-36
 8008150:	dfc00815 	stw	ra,32(sp)
 8008154:	df000715 	stw	fp,28(sp)
 8008158:	df000704 	addi	fp,sp,28
 800815c:	e13ffe15 	stw	r4,-8(fp)
 8008160:	e17fff15 	stw	r5,-4(fp)
 8008164:	e03ffa15 	stw	zero,-24(fp)
 8008168:	e0bffe17 	ldw	r2,-8(fp)
 800816c:	10800003 	ldbu	r2,0(r2)
 8008170:	10803fcc 	andi	r2,r2,255
 8008174:	108002b0 	cmpltui	r2,r2,10
 8008178:	1000021e 	bne	r2,zero,8008184 <srec_encode+0x38>
 800817c:	00bfff04 	movi	r2,-4
 8008180:	00007e06 	br	800837c <srec_encode+0x230>
 8008184:	e0bffe17 	ldw	r2,-8(fp)
 8008188:	10800003 	ldbu	r2,0(r2)
 800818c:	10c03fcc 	andi	r3,r2,255
 8008190:	008205b4 	movhi	r2,2070
 8008194:	109c8104 	addi	r2,r2,29188
 8008198:	18c7883a 	add	r3,r3,r3
 800819c:	18c7883a 	add	r3,r3,r3
 80081a0:	10c5883a 	add	r2,r2,r3
 80081a4:	10800017 	ldw	r2,0(r2)
 80081a8:	e0bff915 	stw	r2,-28(fp)
 80081ac:	e0bff917 	ldw	r2,-28(fp)
 80081b0:	1000021e 	bne	r2,zero,80081bc <srec_encode+0x70>
 80081b4:	00bfff04 	movi	r2,-4
 80081b8:	00007006 	br	800837c <srec_encode+0x230>
 80081bc:	e0bffe17 	ldw	r2,-8(fp)
 80081c0:	10800003 	ldbu	r2,0(r2)
 80081c4:	10803fcc 	andi	r2,r2,255
 80081c8:	100d883a 	mov	r6,r2
 80081cc:	014205b4 	movhi	r5,2070
 80081d0:	2955f404 	addi	r5,r5,22480
 80081d4:	e13fff17 	ldw	r4,-4(fp)
 80081d8:	80102400 	call	8010240 <sprintf>
 80081dc:	1007883a 	mov	r3,r2
 80081e0:	e0bfff17 	ldw	r2,-4(fp)
 80081e4:	10c5883a 	add	r2,r2,r3
 80081e8:	e0bfff15 	stw	r2,-4(fp)
 80081ec:	e0bffe17 	ldw	r2,-8(fp)
 80081f0:	10800203 	ldbu	r2,8(r2)
 80081f4:	10803fcc 	andi	r2,r2,255
 80081f8:	10800870 	cmpltui	r2,r2,33
 80081fc:	1000021e 	bne	r2,zero,8008208 <srec_encode+0xbc>
 8008200:	00bffe84 	movi	r2,-6
 8008204:	00005d06 	br	800837c <srec_encode+0x230>
 8008208:	e0bffe17 	ldw	r2,-8(fp)
 800820c:	10800203 	ldbu	r2,8(r2)
 8008210:	10c03fcc 	andi	r3,r2,255
 8008214:	e0bff917 	ldw	r2,-28(fp)
 8008218:	1008d7fa 	srli	r4,r2,31
 800821c:	2085883a 	add	r2,r4,r2
 8008220:	1005d07a 	srai	r2,r2,1
 8008224:	1885883a 	add	r2,r3,r2
 8008228:	10800044 	addi	r2,r2,1
 800822c:	e0bffc15 	stw	r2,-16(fp)
 8008230:	e1bffc17 	ldw	r6,-16(fp)
 8008234:	014205b4 	movhi	r5,2070
 8008238:	2955f504 	addi	r5,r5,22484
 800823c:	e13fff17 	ldw	r4,-4(fp)
 8008240:	80102400 	call	8010240 <sprintf>
 8008244:	1007883a 	mov	r3,r2
 8008248:	e0bfff17 	ldw	r2,-4(fp)
 800824c:	10c5883a 	add	r2,r2,r3
 8008250:	e0bfff15 	stw	r2,-4(fp)
 8008254:	e0fffa17 	ldw	r3,-24(fp)
 8008258:	e0bffc17 	ldw	r2,-16(fp)
 800825c:	1885883a 	add	r2,r3,r2
 8008260:	e0bffa15 	stw	r2,-24(fp)
 8008264:	00001806 	br	80082c8 <srec_encode+0x17c>
 8008268:	e0bff917 	ldw	r2,-28(fp)
 800826c:	10bfff84 	addi	r2,r2,-2
 8008270:	e0bff915 	stw	r2,-28(fp)
 8008274:	e0bffe17 	ldw	r2,-8(fp)
 8008278:	10c00117 	ldw	r3,4(r2)
 800827c:	e0bff917 	ldw	r2,-28(fp)
 8008280:	1085883a 	add	r2,r2,r2
 8008284:	1085883a 	add	r2,r2,r2
 8008288:	1884d83a 	srl	r2,r3,r2
 800828c:	10803fcc 	andi	r2,r2,255
 8008290:	e0bffd15 	stw	r2,-12(fp)
 8008294:	e1bffd17 	ldw	r6,-12(fp)
 8008298:	014205b4 	movhi	r5,2070
 800829c:	2955f504 	addi	r5,r5,22484
 80082a0:	e13fff17 	ldw	r4,-4(fp)
 80082a4:	80102400 	call	8010240 <sprintf>
 80082a8:	1007883a 	mov	r3,r2
 80082ac:	e0bfff17 	ldw	r2,-4(fp)
 80082b0:	10c5883a 	add	r2,r2,r3
 80082b4:	e0bfff15 	stw	r2,-4(fp)
 80082b8:	e0fffa17 	ldw	r3,-24(fp)
 80082bc:	e0bffd17 	ldw	r2,-12(fp)
 80082c0:	1885883a 	add	r2,r3,r2
 80082c4:	e0bffa15 	stw	r2,-24(fp)
 80082c8:	e0bff917 	ldw	r2,-28(fp)
 80082cc:	103fe61e 	bne	r2,zero,8008268 <__alt_data_end+0xf8008268>
 80082d0:	e03ffb15 	stw	zero,-20(fp)
 80082d4:	00001b06 	br	8008344 <srec_encode+0x1f8>
 80082d8:	e0fffe17 	ldw	r3,-8(fp)
 80082dc:	e0bffb17 	ldw	r2,-20(fp)
 80082e0:	1885883a 	add	r2,r3,r2
 80082e4:	10800244 	addi	r2,r2,9
 80082e8:	10800003 	ldbu	r2,0(r2)
 80082ec:	10803fcc 	andi	r2,r2,255
 80082f0:	100d883a 	mov	r6,r2
 80082f4:	014205b4 	movhi	r5,2070
 80082f8:	2955f504 	addi	r5,r5,22484
 80082fc:	e13fff17 	ldw	r4,-4(fp)
 8008300:	80102400 	call	8010240 <sprintf>
 8008304:	1007883a 	mov	r3,r2
 8008308:	e0bfff17 	ldw	r2,-4(fp)
 800830c:	10c5883a 	add	r2,r2,r3
 8008310:	e0bfff15 	stw	r2,-4(fp)
 8008314:	e0fffe17 	ldw	r3,-8(fp)
 8008318:	e0bffb17 	ldw	r2,-20(fp)
 800831c:	1885883a 	add	r2,r3,r2
 8008320:	10800244 	addi	r2,r2,9
 8008324:	10800003 	ldbu	r2,0(r2)
 8008328:	10803fcc 	andi	r2,r2,255
 800832c:	e0fffa17 	ldw	r3,-24(fp)
 8008330:	1885883a 	add	r2,r3,r2
 8008334:	e0bffa15 	stw	r2,-24(fp)
 8008338:	e0bffb17 	ldw	r2,-20(fp)
 800833c:	10800044 	addi	r2,r2,1
 8008340:	e0bffb15 	stw	r2,-20(fp)
 8008344:	e0bffe17 	ldw	r2,-8(fp)
 8008348:	10800203 	ldbu	r2,8(r2)
 800834c:	10803fcc 	andi	r2,r2,255
 8008350:	e0fffb17 	ldw	r3,-20(fp)
 8008354:	18bfe016 	blt	r3,r2,80082d8 <__alt_data_end+0xf80082d8>
 8008358:	e0bffa17 	ldw	r2,-24(fp)
 800835c:	0084303a 	nor	r2,zero,r2
 8008360:	10803fcc 	andi	r2,r2,255
 8008364:	100d883a 	mov	r6,r2
 8008368:	014205b4 	movhi	r5,2070
 800836c:	2955f704 	addi	r5,r5,22492
 8008370:	e13fff17 	ldw	r4,-4(fp)
 8008374:	80102400 	call	8010240 <sprintf>
 8008378:	0005883a 	mov	r2,zero
 800837c:	e037883a 	mov	sp,fp
 8008380:	dfc00117 	ldw	ra,4(sp)
 8008384:	df000017 	ldw	fp,0(sp)
 8008388:	dec00204 	addi	sp,sp,8
 800838c:	f800283a 	ret

08008390 <srec_strerror>:
 8008390:	defffe04 	addi	sp,sp,-8
 8008394:	df000115 	stw	fp,4(sp)
 8008398:	df000104 	addi	fp,sp,4
 800839c:	e13fff15 	stw	r4,-4(fp)
 80083a0:	e0bfff17 	ldw	r2,-4(fp)
 80083a4:	10800204 	addi	r2,r2,8
 80083a8:	10c00268 	cmpgeui	r3,r2,9
 80083ac:	1800271e 	bne	r3,zero,800844c <srec_strerror+0xbc>
 80083b0:	100690ba 	slli	r3,r2,2
 80083b4:	00820074 	movhi	r2,2049
 80083b8:	10a0f204 	addi	r2,r2,-31800
 80083bc:	1885883a 	add	r2,r3,r2
 80083c0:	10800017 	ldw	r2,0(r2)
 80083c4:	1000683a 	jmp	r2
 80083c8:	08008440 	call	800844 <__reset-0x77ff7bc>
 80083cc:	08008434 	orhi	zero,at,528
 80083d0:	08008428 	cmpgeui	zero,at,528
 80083d4:	0800841c 	xori	zero,at,528
 80083d8:	0800844c 	andi	zero,at,529
 80083dc:	08008410 	cmplti	zero,at,528
 80083e0:	08008404 	addi	zero,at,528
 80083e4:	080083f8 	rdprs	zero,at,527
 80083e8:	080083ec 	andhi	zero,at,527
 80083ec:	008205b4 	movhi	r2,2070
 80083f0:	1095f904 	addi	r2,r2,22500
 80083f4:	00001706 	br	8008454 <srec_strerror+0xc4>
 80083f8:	008205b4 	movhi	r2,2070
 80083fc:	1095fc04 	addi	r2,r2,22512
 8008400:	00001406 	br	8008454 <srec_strerror+0xc4>
 8008404:	008205b4 	movhi	r2,2070
 8008408:	10960104 	addi	r2,r2,22532
 800840c:	00001106 	br	8008454 <srec_strerror+0xc4>
 8008410:	008205b4 	movhi	r2,2070
 8008414:	10960504 	addi	r2,r2,22548
 8008418:	00000e06 	br	8008454 <srec_strerror+0xc4>
 800841c:	008205b4 	movhi	r2,2070
 8008420:	10960a04 	addi	r2,r2,22568
 8008424:	00000b06 	br	8008454 <srec_strerror+0xc4>
 8008428:	008205b4 	movhi	r2,2070
 800842c:	10960e04 	addi	r2,r2,22584
 8008430:	00000806 	br	8008454 <srec_strerror+0xc4>
 8008434:	008205b4 	movhi	r2,2070
 8008438:	10961204 	addi	r2,r2,22600
 800843c:	00000506 	br	8008454 <srec_strerror+0xc4>
 8008440:	008205b4 	movhi	r2,2070
 8008444:	10961604 	addi	r2,r2,22616
 8008448:	00000206 	br	8008454 <srec_strerror+0xc4>
 800844c:	008205b4 	movhi	r2,2070
 8008450:	10961a04 	addi	r2,r2,22632
 8008454:	e037883a 	mov	sp,fp
 8008458:	df000017 	ldw	fp,0(sp)
 800845c:	dec00104 	addi	sp,sp,4
 8008460:	f800283a 	ret

08008464 <oc_i2c_init>:
void i2c_stop(alt_u32 clk_base, alt_u32 data_base);
bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data);
void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck);

bool oc_i2c_init(alt_32 i2c_base)
{
 8008464:	defffb04 	addi	sp,sp,-20
 8008468:	dfc00415 	stw	ra,16(sp)
 800846c:	df000315 	stw	fp,12(sp)
 8008470:	df000304 	addi	fp,sp,12
 8008474:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 8008478:	00800044 	movi	r2,1
 800847c:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;
    // I2c sysclock =50M hz
	// i2c scl max 400k
	//scl =sysclock/(prescale*5)
   IOWR(i2c_base, 0,0x18);//write high prescale
 8008480:	e0bfff17 	ldw	r2,-4(fp)
 8008484:	00c00604 	movi	r3,24
 8008488:	10c00035 	stwio	r3,0(r2)
   IOWR(i2c_base, 1,0x00);//write low prescale
 800848c:	e0bfff17 	ldw	r2,-4(fp)
 8008490:	10800104 	addi	r2,r2,4
 8008494:	0007883a 	mov	r3,zero
 8008498:	10c00035 	stwio	r3,0(r2)
   //enable the I2C core, but disable the IRQ
   IOWR( i2c_base, 2,0x80);
 800849c:	e0bfff17 	ldw	r2,-4(fp)
 80084a0:	10800204 	addi	r2,r2,8
 80084a4:	1007883a 	mov	r3,r2
 80084a8:	00802004 	movi	r2,128
 80084ac:	18800035 	stwio	r2,0(r3)

    read_data =IORD(i2c_base, 0);
 80084b0:	e0bfff17 	ldw	r2,-4(fp)
 80084b4:	10800037 	ldwio	r2,0(r2)
 80084b8:	e0bffe15 	stw	r2,-8(fp)
    if( (read_data & 0x00ff) != 0x18)
 80084bc:	e0bffe17 	ldw	r2,-8(fp)
 80084c0:	10803fcc 	andi	r2,r2,255
 80084c4:	10800620 	cmpeqi	r2,r2,24
 80084c8:	10000a1e 	bne	r2,zero,80084f4 <oc_i2c_init+0x90>
    {
    	bSuccess = FALSE;
 80084cc:	e03ffd15 	stw	zero,-12(fp)
       	read_data =IORD(i2c_base, 1);
 80084d0:	e0bfff17 	ldw	r2,-4(fp)
 80084d4:	10800104 	addi	r2,r2,4
 80084d8:	10800037 	ldwio	r2,0(r2)
 80084dc:	e0bffe15 	stw	r2,-8(fp)
		if((read_data & 0x00ff) != 0x00){
 80084e0:	e0bffe17 	ldw	r2,-8(fp)
 80084e4:	10803fcc 	andi	r2,r2,255
 80084e8:	10000d26 	beq	r2,zero,8008520 <oc_i2c_init+0xbc>
			bSuccess = FALSE;
 80084ec:	e03ffd15 	stw	zero,-12(fp)
 80084f0:	00000b06 	br	8008520 <oc_i2c_init+0xbc>
		}
    }
    else if (bSuccess){
 80084f4:	e0bffd17 	ldw	r2,-12(fp)
 80084f8:	10000926 	beq	r2,zero,8008520 <oc_i2c_init+0xbc>
    	read_data =IORD(i2c_base, 2);
 80084fc:	e0bfff17 	ldw	r2,-4(fp)
 8008500:	10800204 	addi	r2,r2,8
 8008504:	10800037 	ldwio	r2,0(r2)
 8008508:	e0bffe15 	stw	r2,-8(fp)
        if( (read_data & 0x00ff) != 0x80 ){
 800850c:	e0bffe17 	ldw	r2,-8(fp)
 8008510:	10803fcc 	andi	r2,r2,255
 8008514:	10802020 	cmpeqi	r2,r2,128
 8008518:	1000011e 	bne	r2,zero,8008520 <oc_i2c_init+0xbc>
            bSuccess = FALSE;
 800851c:	e03ffd15 	stw	zero,-12(fp)
        }
    }

   if (bSuccess)
 8008520:	e0bffd17 	ldw	r2,-12(fp)
 8008524:	10000426 	beq	r2,zero,8008538 <oc_i2c_init+0xd4>
       printf("\nI2C core is enabled! \r\n");
 8008528:	010205b4 	movhi	r4,2070
 800852c:	21161e04 	addi	r4,r4,22648
 8008530:	800ffc40 	call	800ffc4 <puts>
 8008534:	00000306 	br	8008544 <oc_i2c_init+0xe0>
   else
       printf("\nI2C core is not enabled! \r\n");
 8008538:	010205b4 	movhi	r4,2070
 800853c:	21162404 	addi	r4,r4,22672
 8008540:	800ffc40 	call	800ffc4 <puts>

   return bSuccess;
 8008544:	e0bffd17 	ldw	r2,-12(fp)

}
 8008548:	e037883a 	mov	sp,fp
 800854c:	dfc00117 	ldw	ra,4(sp)
 8008550:	df000017 	ldw	fp,0(sp)
 8008554:	dec00204 	addi	sp,sp,8
 8008558:	f800283a 	ret

0800855c <I2C_setchannel>:

bool I2C_setchannel(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 800855c:	defff804 	addi	sp,sp,-32
 8008560:	dfc00715 	stw	ra,28(sp)
 8008564:	df000615 	stw	fp,24(sp)
 8008568:	df000604 	addi	fp,sp,24
 800856c:	e13ffb15 	stw	r4,-20(fp)
 8008570:	e17ffc15 	stw	r5,-16(fp)
 8008574:	3009883a 	mov	r4,r6
 8008578:	3807883a 	mov	r3,r7
 800857c:	e0800217 	ldw	r2,8(fp)
 8008580:	e13ffd05 	stb	r4,-12(fp)
 8008584:	e0fffe05 	stb	r3,-8(fp)
 8008588:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 800858c:	00800044 	movi	r2,1
 8008590:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // PCA9543APW set Channel

    i2c_start(clk_base, data_base);
 8008594:	e13ffb17 	ldw	r4,-20(fp)
 8008598:	e17ffc17 	ldw	r5,-16(fp)
 800859c:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 80085a0:	e0bffd03 	ldbu	r2,-12(fp)
 80085a4:	10803fcc 	andi	r2,r2,255
 80085a8:	e13ffb17 	ldw	r4,-20(fp)
 80085ac:	e17ffc17 	ldw	r5,-16(fp)
 80085b0:	100d883a 	mov	r6,r2
 80085b4:	8008cac0 	call	8008cac <i2c_write>
 80085b8:	1000011e 	bne	r2,zero,80085c0 <I2C_setchannel+0x64>
        bSuccess = FALSE;
 80085bc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 80085c0:	e0bffa17 	ldw	r2,-24(fp)
 80085c4:	10000726 	beq	r2,zero,80085e4 <I2C_setchannel+0x88>
 80085c8:	e0bffe03 	ldbu	r2,-8(fp)
 80085cc:	e13ffb17 	ldw	r4,-20(fp)
 80085d0:	e17ffc17 	ldw	r5,-16(fp)
 80085d4:	100d883a 	mov	r6,r2
 80085d8:	8008cac0 	call	8008cac <i2c_write>
 80085dc:	1000011e 	bne	r2,zero,80085e4 <I2C_setchannel+0x88>
        bSuccess = FALSE;
 80085e0:	e03ffa15 	stw	zero,-24(fp)
    }            
//    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
//        bSuccess = FALSE;
//        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
//    }
    i2c_stop(clk_base, data_base);
 80085e4:	e13ffb17 	ldw	r4,-20(fp)
 80085e8:	e17ffc17 	ldw	r5,-16(fp)
 80085ec:	8008c380 	call	8008c38 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 80085f0:	0106d604 	movi	r4,7000
 80085f4:	801d36c0 	call	801d36c <usleep>
    
    return bSuccess;
 80085f8:	e0bffa17 	ldw	r2,-24(fp)

    
}
 80085fc:	e037883a 	mov	sp,fp
 8008600:	dfc00117 	ldw	ra,4(sp)
 8008604:	df000017 	ldw	fp,0(sp)
 8008608:	dec00204 	addi	sp,sp,8
 800860c:	f800283a 	ret

08008610 <I2C_Write>:

bool I2C_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 ControlData){
 8008610:	defff804 	addi	sp,sp,-32
 8008614:	dfc00715 	stw	ra,28(sp)
 8008618:	df000615 	stw	fp,24(sp)
 800861c:	df000604 	addi	fp,sp,24
 8008620:	e13ffb15 	stw	r4,-20(fp)
 8008624:	e17ffc15 	stw	r5,-16(fp)
 8008628:	3009883a 	mov	r4,r6
 800862c:	3807883a 	mov	r3,r7
 8008630:	e0800217 	ldw	r2,8(fp)
 8008634:	e13ffd05 	stb	r4,-12(fp)
 8008638:	e0fffe05 	stb	r3,-8(fp)
 800863c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 8008640:	00800044 	movi	r2,1
 8008644:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 8008648:	e13ffb17 	ldw	r4,-20(fp)
 800864c:	e17ffc17 	ldw	r5,-16(fp)
 8008650:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8008654:	e0bffd03 	ldbu	r2,-12(fp)
 8008658:	10803fcc 	andi	r2,r2,255
 800865c:	e13ffb17 	ldw	r4,-20(fp)
 8008660:	e17ffc17 	ldw	r5,-16(fp)
 8008664:	100d883a 	mov	r6,r2
 8008668:	8008cac0 	call	8008cac <i2c_write>
 800866c:	1000011e 	bne	r2,zero,8008674 <I2C_Write+0x64>
        bSuccess = FALSE;
 8008670:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 8008674:	e0bffa17 	ldw	r2,-24(fp)
 8008678:	10000726 	beq	r2,zero,8008698 <I2C_Write+0x88>
 800867c:	e0bffe03 	ldbu	r2,-8(fp)
 8008680:	e13ffb17 	ldw	r4,-20(fp)
 8008684:	e17ffc17 	ldw	r5,-16(fp)
 8008688:	100d883a 	mov	r6,r2
 800868c:	8008cac0 	call	8008cac <i2c_write>
 8008690:	1000011e 	bne	r2,zero,8008698 <I2C_Write+0x88>
        bSuccess = FALSE;
 8008694:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 8008698:	e0bffa17 	ldw	r2,-24(fp)
 800869c:	10000726 	beq	r2,zero,80086bc <I2C_Write+0xac>
 80086a0:	e0bfff03 	ldbu	r2,-4(fp)
 80086a4:	e13ffb17 	ldw	r4,-20(fp)
 80086a8:	e17ffc17 	ldw	r5,-16(fp)
 80086ac:	100d883a 	mov	r6,r2
 80086b0:	8008cac0 	call	8008cac <i2c_write>
 80086b4:	1000011e 	bne	r2,zero,80086bc <I2C_Write+0xac>
        bSuccess = FALSE;
 80086b8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 80086bc:	e13ffb17 	ldw	r4,-20(fp)
 80086c0:	e17ffc17 	ldw	r5,-16(fp)
 80086c4:	8008c380 	call	8008c38 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 80086c8:	0106d604 	movi	r4,7000
 80086cc:	801d36c0 	call	801d36c <usleep>
    
    return bSuccess;
 80086d0:	e0bffa17 	ldw	r2,-24(fp)

    
}
 80086d4:	e037883a 	mov	sp,fp
 80086d8:	dfc00117 	ldw	ra,4(sp)
 80086dc:	df000017 	ldw	fp,0(sp)
 80086e0:	dec00204 	addi	sp,sp,8
 80086e4:	f800283a 	ret

080086e8 <I2C_Write16>:

bool I2C_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 ControlData){
 80086e8:	defff704 	addi	sp,sp,-36
 80086ec:	dfc00815 	stw	ra,32(sp)
 80086f0:	df000715 	stw	fp,28(sp)
 80086f4:	df000704 	addi	fp,sp,28
 80086f8:	e13ffb15 	stw	r4,-20(fp)
 80086fc:	e17ffc15 	stw	r5,-16(fp)
 8008700:	3009883a 	mov	r4,r6
 8008704:	3807883a 	mov	r3,r7
 8008708:	e0800217 	ldw	r2,8(fp)
 800870c:	e13ffd05 	stb	r4,-12(fp)
 8008710:	e0fffe05 	stb	r3,-8(fp)
 8008714:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 8008718:	00800044 	movi	r2,1
 800871c:	e0bff915 	stw	r2,-28(fp)
    alt_u8 HighByte, LowByte;
    //alt_u8 DeviceAddr;
    HighByte = (ControlData >> 8) & 0xFF;
 8008720:	e0bfff0b 	ldhu	r2,-4(fp)
 8008724:	1004d23a 	srli	r2,r2,8
 8008728:	e0bffa05 	stb	r2,-24(fp)
    LowByte = ControlData & 0xFF; 
 800872c:	e0bfff0b 	ldhu	r2,-4(fp)
 8008730:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 8008734:	e13ffb17 	ldw	r4,-20(fp)
 8008738:	e17ffc17 	ldw	r5,-16(fp)
 800873c:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8008740:	e0bffd03 	ldbu	r2,-12(fp)
 8008744:	10803fcc 	andi	r2,r2,255
 8008748:	e13ffb17 	ldw	r4,-20(fp)
 800874c:	e17ffc17 	ldw	r5,-16(fp)
 8008750:	100d883a 	mov	r6,r2
 8008754:	8008cac0 	call	8008cac <i2c_write>
 8008758:	1000011e 	bne	r2,zero,8008760 <I2C_Write16+0x78>
        bSuccess = FALSE;
 800875c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 8008760:	e0bff917 	ldw	r2,-28(fp)
 8008764:	10000726 	beq	r2,zero,8008784 <I2C_Write16+0x9c>
 8008768:	e0bffe03 	ldbu	r2,-8(fp)
 800876c:	e13ffb17 	ldw	r4,-20(fp)
 8008770:	e17ffc17 	ldw	r5,-16(fp)
 8008774:	100d883a 	mov	r6,r2
 8008778:	8008cac0 	call	8008cac <i2c_write>
 800877c:	1000011e 	bne	r2,zero,8008784 <I2C_Write16+0x9c>
        bSuccess = FALSE;
 8008780:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, HighByte)){  
 8008784:	e0bff917 	ldw	r2,-28(fp)
 8008788:	10000726 	beq	r2,zero,80087a8 <I2C_Write16+0xc0>
 800878c:	e0bffa03 	ldbu	r2,-24(fp)
 8008790:	e13ffb17 	ldw	r4,-20(fp)
 8008794:	e17ffc17 	ldw	r5,-16(fp)
 8008798:	100d883a 	mov	r6,r2
 800879c:	8008cac0 	call	8008cac <i2c_write>
 80087a0:	1000011e 	bne	r2,zero,80087a8 <I2C_Write16+0xc0>
        bSuccess = FALSE;
 80087a4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, LowByte)){  
 80087a8:	e0bff917 	ldw	r2,-28(fp)
 80087ac:	10000726 	beq	r2,zero,80087cc <I2C_Write16+0xe4>
 80087b0:	e0bffa43 	ldbu	r2,-23(fp)
 80087b4:	e13ffb17 	ldw	r4,-20(fp)
 80087b8:	e17ffc17 	ldw	r5,-16(fp)
 80087bc:	100d883a 	mov	r6,r2
 80087c0:	8008cac0 	call	8008cac <i2c_write>
 80087c4:	1000011e 	bne	r2,zero,80087cc <I2C_Write16+0xe4>
        bSuccess = FALSE;
 80087c8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }    
    i2c_stop(clk_base, data_base);
 80087cc:	e13ffb17 	ldw	r4,-20(fp)
 80087d0:	e17ffc17 	ldw	r5,-16(fp)
 80087d4:	8008c380 	call	8008c38 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 80087d8:	0106d604 	movi	r4,7000
 80087dc:	801d36c0 	call	801d36c <usleep>
    
    return bSuccess;
 80087e0:	e0bff917 	ldw	r2,-28(fp)

    
}
 80087e4:	e037883a 	mov	sp,fp
 80087e8:	dfc00117 	ldw	ra,4(sp)
 80087ec:	df000017 	ldw	fp,0(sp)
 80087f0:	dec00204 	addi	sp,sp,8
 80087f4:	f800283a 	ret

080087f8 <I2C_Read>:

bool I2C_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 *pControlData){
 80087f8:	defff904 	addi	sp,sp,-28
 80087fc:	dfc00615 	stw	ra,24(sp)
 8008800:	df000515 	stw	fp,20(sp)
 8008804:	df000504 	addi	fp,sp,20
 8008808:	e13ffc15 	stw	r4,-16(fp)
 800880c:	e17ffd15 	stw	r5,-12(fp)
 8008810:	3007883a 	mov	r3,r6
 8008814:	3805883a 	mov	r2,r7
 8008818:	e0fffe05 	stb	r3,-8(fp)
 800881c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 8008820:	00800044 	movi	r2,1
 8008824:	e0bffb15 	stw	r2,-20(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 8008828:	e13ffc17 	ldw	r4,-16(fp)
 800882c:	e17ffd17 	ldw	r5,-12(fp)
 8008830:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8008834:	e0bffe03 	ldbu	r2,-8(fp)
 8008838:	10803fcc 	andi	r2,r2,255
 800883c:	e13ffc17 	ldw	r4,-16(fp)
 8008840:	e17ffd17 	ldw	r5,-12(fp)
 8008844:	100d883a 	mov	r6,r2
 8008848:	8008cac0 	call	8008cac <i2c_write>
 800884c:	1000011e 	bne	r2,zero,8008854 <I2C_Read+0x5c>
        bSuccess = FALSE;
 8008850:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 8008854:	e0bffb17 	ldw	r2,-20(fp)
 8008858:	10000726 	beq	r2,zero,8008878 <I2C_Read+0x80>
 800885c:	e0bfff03 	ldbu	r2,-4(fp)
 8008860:	e13ffc17 	ldw	r4,-16(fp)
 8008864:	e17ffd17 	ldw	r5,-12(fp)
 8008868:	100d883a 	mov	r6,r2
 800886c:	8008cac0 	call	8008cac <i2c_write>
 8008870:	1000011e 	bne	r2,zero,8008878 <I2C_Read+0x80>
        bSuccess = FALSE;
 8008874:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 8008878:	e13ffc17 	ldw	r4,-16(fp)
 800887c:	e17ffd17 	ldw	r5,-12(fp)
 8008880:	8008bb00 	call	8008bb0 <i2c_start>
    DeviceAddr |= 1; // Read
 8008884:	e0bffe03 	ldbu	r2,-8(fp)
 8008888:	10800054 	ori	r2,r2,1
 800888c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 8008890:	e0bffb17 	ldw	r2,-20(fp)
 8008894:	10000826 	beq	r2,zero,80088b8 <I2C_Read+0xc0>
 8008898:	e0bffe03 	ldbu	r2,-8(fp)
 800889c:	10803fcc 	andi	r2,r2,255
 80088a0:	e13ffc17 	ldw	r4,-16(fp)
 80088a4:	e17ffd17 	ldw	r5,-12(fp)
 80088a8:	100d883a 	mov	r6,r2
 80088ac:	8008cac0 	call	8008cac <i2c_write>
 80088b0:	1000011e 	bne	r2,zero,80088b8 <I2C_Read+0xc0>
        bSuccess = FALSE;
 80088b4:	e03ffb15 	stw	zero,-20(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 80088b8:	e0bffb17 	ldw	r2,-20(fp)
 80088bc:	10000526 	beq	r2,zero,80088d4 <I2C_Read+0xdc>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 80088c0:	e13ffc17 	ldw	r4,-16(fp)
 80088c4:	e17ffd17 	ldw	r5,-12(fp)
 80088c8:	e1800217 	ldw	r6,8(fp)
 80088cc:	000f883a 	mov	r7,zero
 80088d0:	8008ddc0 	call	8008ddc <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 80088d4:	e13ffc17 	ldw	r4,-16(fp)
 80088d8:	e17ffd17 	ldw	r5,-12(fp)
 80088dc:	8008c380 	call	8008c38 <i2c_stop>
    
    return bSuccess;
 80088e0:	e0bffb17 	ldw	r2,-20(fp)
}
 80088e4:	e037883a 	mov	sp,fp
 80088e8:	dfc00117 	ldw	ra,4(sp)
 80088ec:	df000017 	ldw	fp,0(sp)
 80088f0:	dec00204 	addi	sp,sp,8
 80088f4:	f800283a 	ret

080088f8 <I2C_Read16>:

bool I2C_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u16 *pControlData){
 80088f8:	defff804 	addi	sp,sp,-32
 80088fc:	dfc00715 	stw	ra,28(sp)
 8008900:	df000615 	stw	fp,24(sp)
 8008904:	df000604 	addi	fp,sp,24
 8008908:	e13ffc15 	stw	r4,-16(fp)
 800890c:	e17ffd15 	stw	r5,-12(fp)
 8008910:	3007883a 	mov	r3,r6
 8008914:	3805883a 	mov	r2,r7
 8008918:	e0fffe05 	stb	r3,-8(fp)
 800891c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 8008920:	00800044 	movi	r2,1
 8008924:	e0bffa15 	stw	r2,-24(fp)
    //alt_u8 DeviceAddr;
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 8008928:	e13ffc17 	ldw	r4,-16(fp)
 800892c:	e17ffd17 	ldw	r5,-12(fp)
 8008930:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8008934:	e0bffe03 	ldbu	r2,-8(fp)
 8008938:	10803fcc 	andi	r2,r2,255
 800893c:	e13ffc17 	ldw	r4,-16(fp)
 8008940:	e17ffd17 	ldw	r5,-12(fp)
 8008944:	100d883a 	mov	r6,r2
 8008948:	8008cac0 	call	8008cac <i2c_write>
 800894c:	1000011e 	bne	r2,zero,8008954 <I2C_Read16+0x5c>
        bSuccess = FALSE;
 8008950:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 8008954:	e0bffa17 	ldw	r2,-24(fp)
 8008958:	10000726 	beq	r2,zero,8008978 <I2C_Read16+0x80>
 800895c:	e0bfff03 	ldbu	r2,-4(fp)
 8008960:	e13ffc17 	ldw	r4,-16(fp)
 8008964:	e17ffd17 	ldw	r5,-12(fp)
 8008968:	100d883a 	mov	r6,r2
 800896c:	8008cac0 	call	8008cac <i2c_write>
 8008970:	1000011e 	bne	r2,zero,8008978 <I2C_Read16+0x80>
        bSuccess = FALSE;
 8008974:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }            

    usleep(15*1000); // Conversation time delay for Humidity/Temperature Sensor
 8008978:	010ea604 	movi	r4,15000
 800897c:	801d36c0 	call	801d36c <usleep>

    i2c_start(clk_base, data_base);  // restart
 8008980:	e13ffc17 	ldw	r4,-16(fp)
 8008984:	e17ffd17 	ldw	r5,-12(fp)
 8008988:	8008bb00 	call	8008bb0 <i2c_start>
    DeviceAddr |= 1; // Read
 800898c:	e0bffe03 	ldbu	r2,-8(fp)
 8008990:	10800054 	ori	r2,r2,1
 8008994:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 8008998:	e0bffa17 	ldw	r2,-24(fp)
 800899c:	10000826 	beq	r2,zero,80089c0 <I2C_Read16+0xc8>
 80089a0:	e0bffe03 	ldbu	r2,-8(fp)
 80089a4:	10803fcc 	andi	r2,r2,255
 80089a8:	e13ffc17 	ldw	r4,-16(fp)
 80089ac:	e17ffd17 	ldw	r5,-12(fp)
 80089b0:	100d883a 	mov	r6,r2
 80089b4:	8008cac0 	call	8008cac <i2c_write>
 80089b8:	1000011e 	bne	r2,zero,80089c0 <I2C_Read16+0xc8>
        bSuccess = FALSE;
 80089bc:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 80089c0:	e0bffa17 	ldw	r2,-24(fp)
 80089c4:	10000626 	beq	r2,zero,80089e0 <I2C_Read16+0xe8>
        i2c_read(clk_base, data_base, &HighByte, TRUE);  // read
 80089c8:	e0bffb44 	addi	r2,fp,-19
 80089cc:	e13ffc17 	ldw	r4,-16(fp)
 80089d0:	e17ffd17 	ldw	r5,-12(fp)
 80089d4:	100d883a 	mov	r6,r2
 80089d8:	01c00044 	movi	r7,1
 80089dc:	8008ddc0 	call	8008ddc <i2c_read>
    }        
    if (bSuccess){
 80089e0:	e0bffa17 	ldw	r2,-24(fp)
 80089e4:	10000626 	beq	r2,zero,8008a00 <I2C_Read16+0x108>
        i2c_read(clk_base, data_base, &LowByte, FALSE);  // read
 80089e8:	e0bffb04 	addi	r2,fp,-20
 80089ec:	e13ffc17 	ldw	r4,-16(fp)
 80089f0:	e17ffd17 	ldw	r5,-12(fp)
 80089f4:	100d883a 	mov	r6,r2
 80089f8:	000f883a 	mov	r7,zero
 80089fc:	8008ddc0 	call	8008ddc <i2c_read>
    }        
    if (bSuccess)
 8008a00:	e0bffa17 	ldw	r2,-24(fp)
 8008a04:	10000a26 	beq	r2,zero,8008a30 <I2C_Read16+0x138>
        *pControlData = (HighByte << 8) | LowByte;
 8008a08:	e0bffb43 	ldbu	r2,-19(fp)
 8008a0c:	10803fcc 	andi	r2,r2,255
 8008a10:	1004923a 	slli	r2,r2,8
 8008a14:	1007883a 	mov	r3,r2
 8008a18:	e0bffb03 	ldbu	r2,-20(fp)
 8008a1c:	10803fcc 	andi	r2,r2,255
 8008a20:	1884b03a 	or	r2,r3,r2
 8008a24:	1007883a 	mov	r3,r2
 8008a28:	e0800217 	ldw	r2,8(fp)
 8008a2c:	10c0000d 	sth	r3,0(r2)
    i2c_stop(clk_base, data_base);
 8008a30:	e13ffc17 	ldw	r4,-16(fp)
 8008a34:	e17ffd17 	ldw	r5,-12(fp)
 8008a38:	8008c380 	call	8008c38 <i2c_stop>
    
    return bSuccess;
 8008a3c:	e0bffa17 	ldw	r2,-24(fp)
}
 8008a40:	e037883a 	mov	sp,fp
 8008a44:	dfc00117 	ldw	ra,4(sp)
 8008a48:	df000017 	ldw	fp,0(sp)
 8008a4c:	dec00204 	addi	sp,sp,8
 8008a50:	f800283a 	ret

08008a54 <I2C_MultipleRead>:

bool I2C_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u8 ControlAddr, alt_u8 szData[], alt_u16 len){
 8008a54:	defff704 	addi	sp,sp,-36
 8008a58:	dfc00815 	stw	ra,32(sp)
 8008a5c:	df000715 	stw	fp,28(sp)
 8008a60:	df000704 	addi	fp,sp,28
 8008a64:	e13ffb15 	stw	r4,-20(fp)
 8008a68:	e17ffc15 	stw	r5,-16(fp)
 8008a6c:	3009883a 	mov	r4,r6
 8008a70:	3807883a 	mov	r3,r7
 8008a74:	e0800317 	ldw	r2,12(fp)
 8008a78:	e13ffd05 	stb	r4,-12(fp)
 8008a7c:	e0fffe05 	stb	r3,-8(fp)
 8008a80:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 8008a84:	00800044 	movi	r2,1
 8008a88:	e0bffa15 	stw	r2,-24(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 8008a8c:	e13ffb17 	ldw	r4,-20(fp)
 8008a90:	e17ffc17 	ldw	r5,-16(fp)
 8008a94:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8008a98:	e0bffd03 	ldbu	r2,-12(fp)
 8008a9c:	10803fcc 	andi	r2,r2,255
 8008aa0:	e13ffb17 	ldw	r4,-20(fp)
 8008aa4:	e17ffc17 	ldw	r5,-16(fp)
 8008aa8:	100d883a 	mov	r6,r2
 8008aac:	8008cac0 	call	8008cac <i2c_write>
 8008ab0:	1000011e 	bne	r2,zero,8008ab8 <I2C_MultipleRead+0x64>
        bSuccess = FALSE;
 8008ab4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, ControlAddr)){ // send sub-address
 8008ab8:	e0bffa17 	ldw	r2,-24(fp)
 8008abc:	10000726 	beq	r2,zero,8008adc <I2C_MultipleRead+0x88>
 8008ac0:	e0bffe03 	ldbu	r2,-8(fp)
 8008ac4:	e13ffb17 	ldw	r4,-20(fp)
 8008ac8:	e17ffc17 	ldw	r5,-16(fp)
 8008acc:	100d883a 	mov	r6,r2
 8008ad0:	8008cac0 	call	8008cac <i2c_write>
 8008ad4:	1000011e 	bne	r2,zero,8008adc <I2C_MultipleRead+0x88>
        bSuccess = FALSE;
 8008ad8:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress NACK!\n"));
    }

    usleep(15*1000); // Conversation time delay for Humidity/Temperature Sensor
 8008adc:	010ea604 	movi	r4,15000
 8008ae0:	801d36c0 	call	801d36c <usleep>

    if (bSuccess)        
 8008ae4:	e0bffa17 	ldw	r2,-24(fp)
 8008ae8:	10000326 	beq	r2,zero,8008af8 <I2C_MultipleRead+0xa4>
    i2c_start(clk_base, data_base);  // restart
 8008aec:	e13ffb17 	ldw	r4,-20(fp)
 8008af0:	e17ffc17 	ldw	r5,-16(fp)
 8008af4:	8008bb00 	call	8008bb0 <i2c_start>
    DeviceAddr |= 1; // Read
 8008af8:	e0bffd03 	ldbu	r2,-12(fp)
 8008afc:	10800054 	ori	r2,r2,1
 8008b00:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 8008b04:	e0bffa17 	ldw	r2,-24(fp)
 8008b08:	10000826 	beq	r2,zero,8008b2c <I2C_MultipleRead+0xd8>
 8008b0c:	e0bffd03 	ldbu	r2,-12(fp)
 8008b10:	10803fcc 	andi	r2,r2,255
 8008b14:	e13ffb17 	ldw	r4,-20(fp)
 8008b18:	e17ffc17 	ldw	r5,-16(fp)
 8008b1c:	100d883a 	mov	r6,r2
 8008b20:	8008cac0 	call	8008cac <i2c_write>
 8008b24:	1000011e 	bne	r2,zero,8008b2c <I2C_MultipleRead+0xd8>
        bSuccess = FALSE;
 8008b28:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 8008b2c:	e0bffa17 	ldw	r2,-24(fp)
 8008b30:	10001626 	beq	r2,zero,8008b8c <I2C_MultipleRead+0x138>
        for(i=0;i<len && bSuccess;i++){
 8008b34:	e03ff915 	stw	zero,-28(fp)
 8008b38:	00000f06 	br	8008b78 <I2C_MultipleRead+0x124>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 8008b3c:	e0bff917 	ldw	r2,-28(fp)
 8008b40:	e0c00217 	ldw	r3,8(fp)
 8008b44:	188d883a 	add	r6,r3,r2
 8008b48:	e0bfff0b 	ldhu	r2,-4(fp)
 8008b4c:	10ffffc4 	addi	r3,r2,-1
 8008b50:	e0bff917 	ldw	r2,-28(fp)
 8008b54:	1884c03a 	cmpne	r2,r3,r2
 8008b58:	10803fcc 	andi	r2,r2,255
 8008b5c:	e13ffb17 	ldw	r4,-20(fp)
 8008b60:	e17ffc17 	ldw	r5,-16(fp)
 8008b64:	100f883a 	mov	r7,r2
 8008b68:	8008ddc0 	call	8008ddc <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 8008b6c:	e0bff917 	ldw	r2,-28(fp)
 8008b70:	10800044 	addi	r2,r2,1
 8008b74:	e0bff915 	stw	r2,-28(fp)
 8008b78:	e0bfff0b 	ldhu	r2,-4(fp)
 8008b7c:	e0fff917 	ldw	r3,-28(fp)
 8008b80:	1880020e 	bge	r3,r2,8008b8c <I2C_MultipleRead+0x138>
 8008b84:	e0bffa17 	ldw	r2,-24(fp)
 8008b88:	103fec1e 	bne	r2,zero,8008b3c <__alt_data_end+0xf8008b3c>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 8008b8c:	e13ffb17 	ldw	r4,-20(fp)
 8008b90:	e17ffc17 	ldw	r5,-16(fp)
 8008b94:	8008c380 	call	8008c38 <i2c_stop>
    
    return bSuccess;    
 8008b98:	e0bffa17 	ldw	r2,-24(fp)
    
}
 8008b9c:	e037883a 	mov	sp,fp
 8008ba0:	dfc00117 	ldw	ra,4(sp)
 8008ba4:	df000017 	ldw	fp,0(sp)
 8008ba8:	dec00204 	addi	sp,sp,8
 8008bac:	f800283a 	ret

08008bb0 <i2c_start>:
///////////// Interncal function (i2cXXX) body //////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////


//SDA 1->0 while SCL=1
void i2c_start(alt_u32 clk_base, alt_u32 data_base){
 8008bb0:	defffc04 	addi	sp,sp,-16
 8008bb4:	dfc00315 	stw	ra,12(sp)
 8008bb8:	df000215 	stw	fp,8(sp)
 8008bbc:	df000204 	addi	fp,sp,8
 8008bc0:	e13ffe15 	stw	r4,-8(fp)
 8008bc4:	e17fff15 	stw	r5,-4(fp)
    
    // make sure it is in normal state
    SDA_DIR_OUT(data_base);  // data output enabled
 8008bc8:	e0bfff17 	ldw	r2,-4(fp)
 8008bcc:	10800104 	addi	r2,r2,4
 8008bd0:	1007883a 	mov	r3,r2
 8008bd4:	00800044 	movi	r2,1
 8008bd8:	18800035 	stwio	r2,0(r3)
    
    
    
    // start condition
    SDA_HIGH(data_base); // data high
 8008bdc:	e0bfff17 	ldw	r2,-4(fp)
 8008be0:	00c00044 	movi	r3,1
 8008be4:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base);
 8008be8:	e0bffe17 	ldw	r2,-8(fp)
 8008bec:	00c00044 	movi	r3,1
 8008bf0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 8008bf4:	01000084 	movi	r4,2
 8008bf8:	801d36c0 	call	801d36c <usleep>
     
    SDA_LOW(data_base); // data low
 8008bfc:	e0bfff17 	ldw	r2,-4(fp)
 8008c00:	0007883a 	mov	r3,zero
 8008c04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; 
 8008c08:	01000084 	movi	r4,2
 8008c0c:	801d36c0 	call	801d36c <usleep>
    SCL_LOW(clk_base); // clock low
 8008c10:	e0bffe17 	ldw	r2,-8(fp)
 8008c14:	0007883a 	mov	r3,zero
 8008c18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;
 8008c1c:	01000084 	movi	r4,2
 8008c20:	801d36c0 	call	801d36c <usleep>
}
 8008c24:	e037883a 	mov	sp,fp
 8008c28:	dfc00117 	ldw	ra,4(sp)
 8008c2c:	df000017 	ldw	fp,0(sp)
 8008c30:	dec00204 	addi	sp,sp,8
 8008c34:	f800283a 	ret

08008c38 <i2c_stop>:

// SDA 0->1 while SCL=1
void i2c_stop(alt_u32 clk_base, alt_u32 data_base){
 8008c38:	defffc04 	addi	sp,sp,-16
 8008c3c:	dfc00315 	stw	ra,12(sp)
 8008c40:	df000215 	stw	fp,8(sp)
 8008c44:	df000204 	addi	fp,sp,8
 8008c48:	e13ffe15 	stw	r4,-8(fp)
 8008c4c:	e17fff15 	stw	r5,-4(fp)
    // assume SCL = 0
    
    SDA_DIR_OUT(data_base);  // data output enabled
 8008c50:	e0bfff17 	ldw	r2,-4(fp)
 8008c54:	10800104 	addi	r2,r2,4
 8008c58:	1007883a 	mov	r3,r2
 8008c5c:	00800044 	movi	r2,1
 8008c60:	18800035 	stwio	r2,0(r3)
    SDA_LOW(data_base); // Data Low
 8008c64:	e0bfff17 	ldw	r2,-4(fp)
 8008c68:	0007883a 	mov	r3,zero
 8008c6c:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY; 
    SCL_HIGH(clk_base);  // clock high
 8008c70:	e0bffe17 	ldw	r2,-8(fp)
 8008c74:	00c00044 	movi	r3,1
 8008c78:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high long delay
 8008c7c:	01000084 	movi	r4,2
 8008c80:	801d36c0 	call	801d36c <usleep>
    SDA_HIGH(data_base); // data high
 8008c84:	e0bfff17 	ldw	r2,-4(fp)
 8008c88:	00c00044 	movi	r3,1
 8008c8c:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data high delay
 8008c90:	01000084 	movi	r4,2
 8008c94:	801d36c0 	call	801d36c <usleep>
    

    
}
 8008c98:	e037883a 	mov	sp,fp
 8008c9c:	dfc00117 	ldw	ra,4(sp)
 8008ca0:	df000017 	ldw	fp,0(sp)
 8008ca4:	dec00204 	addi	sp,sp,8
 8008ca8:	f800283a 	ret

08008cac <i2c_write>:

bool i2c_write(alt_u32 clk_base, alt_u32 data_base, alt_u8 Data){ // return true if device response ack
 8008cac:	defff804 	addi	sp,sp,-32
 8008cb0:	dfc00715 	stw	ra,28(sp)
 8008cb4:	df000615 	stw	fp,24(sp)
 8008cb8:	df000604 	addi	fp,sp,24
 8008cbc:	e13ffd15 	stw	r4,-12(fp)
 8008cc0:	e17ffe15 	stw	r5,-8(fp)
 8008cc4:	3005883a 	mov	r2,r6
 8008cc8:	e0bfff05 	stb	r2,-4(fp)
    alt_u8 Mask = 0x80;
 8008ccc:	00bfe004 	movi	r2,-128
 8008cd0:	e0bffa05 	stb	r2,-24(fp)
    bool bAck;
    int i;
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
 8008cd4:	e0bffe17 	ldw	r2,-8(fp)
 8008cd8:	10800104 	addi	r2,r2,4
 8008cdc:	1007883a 	mov	r3,r2
 8008ce0:	00800044 	movi	r2,1
 8008ce4:	18800035 	stwio	r2,0(r3)
    
    for(i=0;i<8;i++){
 8008ce8:	e03ffb15 	stw	zero,-20(fp)
 8008cec:	00001f06 	br	8008d6c <i2c_write+0xc0>
        SCL_LOW(clk_base);  // new, make sure data change at clk low
 8008cf0:	e0bffd17 	ldw	r2,-12(fp)
 8008cf4:	0007883a 	mov	r3,zero
 8008cf8:	10c00035 	stwio	r3,0(r2)
        // output data on bus
        if (Data & Mask){ // there is a delay in this command
 8008cfc:	e0ffff03 	ldbu	r3,-4(fp)
 8008d00:	e0bffa03 	ldbu	r2,-24(fp)
 8008d04:	1884703a 	and	r2,r3,r2
 8008d08:	10803fcc 	andi	r2,r2,255
 8008d0c:	10000426 	beq	r2,zero,8008d20 <i2c_write+0x74>
            SDA_HIGH(data_base);
 8008d10:	e0bffe17 	ldw	r2,-8(fp)
 8008d14:	00c00044 	movi	r3,1
 8008d18:	10c00035 	stwio	r3,0(r2)
 8008d1c:	00000306 	br	8008d2c <i2c_write+0x80>
        }else{    
            SDA_LOW(data_base);
 8008d20:	e0bffe17 	ldw	r2,-8(fp)
 8008d24:	0007883a 	mov	r3,zero
 8008d28:	10c00035 	stwio	r3,0(r2)
        }
        Mask >>= 1; // there is a delay in this command
 8008d2c:	e0bffa03 	ldbu	r2,-24(fp)
 8008d30:	1004d07a 	srli	r2,r2,1
 8008d34:	e0bffa05 	stb	r2,-24(fp)
        // clock high
        SCL_HIGH(clk_base);
 8008d38:	e0bffd17 	ldw	r2,-12(fp)
 8008d3c:	00c00044 	movi	r3,1
 8008d40:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 8008d44:	01000084 	movi	r4,2
 8008d48:	801d36c0 	call	801d36c <usleep>
        SCL_LOW(clk_base);
 8008d4c:	e0bffd17 	ldw	r2,-12(fp)
 8008d50:	0007883a 	mov	r3,zero
 8008d54:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 8008d58:	01000084 	movi	r4,2
 8008d5c:	801d36c0 	call	801d36c <usleep>
    
    // assume, SCL = 0
    
    SDA_DIR_OUT(data_base);  // data write mode
    
    for(i=0;i<8;i++){
 8008d60:	e0bffb17 	ldw	r2,-20(fp)
 8008d64:	10800044 	addi	r2,r2,1
 8008d68:	e0bffb15 	stw	r2,-20(fp)
 8008d6c:	e0bffb17 	ldw	r2,-20(fp)
 8008d70:	10800210 	cmplti	r2,r2,8
 8008d74:	103fde1e 	bne	r2,zero,8008cf0 <__alt_data_end+0xf8008cf0>
        SCL_LOW(clk_base);
        SCL_DELAY;
    }
    
    //===== get ack
    SDA_DIR_IN(data_base);  // data read mode
 8008d78:	e0bffe17 	ldw	r2,-8(fp)
 8008d7c:	10800104 	addi	r2,r2,4
 8008d80:	0007883a 	mov	r3,zero
 8008d84:	10c00035 	stwio	r3,0(r2)
    //SCL_DELAY;
    // clock high
    SCL_HIGH(clk_base);  // clock high
 8008d88:	e0bffd17 	ldw	r2,-12(fp)
 8008d8c:	00c00044 	movi	r3,1
 8008d90:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY;  // clock high delay
 8008d94:	01000084 	movi	r4,2
 8008d98:	801d36c0 	call	801d36c <usleep>
    bAck = SDA_READ(data_base)?FALSE:TRUE;  // get ack
 8008d9c:	e0bffe17 	ldw	r2,-8(fp)
 8008da0:	10800037 	ldwio	r2,0(r2)
 8008da4:	1005003a 	cmpeq	r2,r2,zero
 8008da8:	10803fcc 	andi	r2,r2,255
 8008dac:	e0bffc15 	stw	r2,-16(fp)
    //SCL_DELAY;
    //SDA_DIR_OUT;
    SCL_LOW(clk_base); // clock low         
 8008db0:	e0bffd17 	ldw	r2,-12(fp)
 8008db4:	0007883a 	mov	r3,zero
 8008db8:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 8008dbc:	01000084 	movi	r4,2
 8008dc0:	801d36c0 	call	801d36c <usleep>
    return bAck;
 8008dc4:	e0bffc17 	ldw	r2,-16(fp)
}    
 8008dc8:	e037883a 	mov	sp,fp
 8008dcc:	dfc00117 	ldw	ra,4(sp)
 8008dd0:	df000017 	ldw	fp,0(sp)
 8008dd4:	dec00204 	addi	sp,sp,8
 8008dd8:	f800283a 	ret

08008ddc <i2c_read>:

void i2c_read(alt_u32 clk_base, alt_u32 data_base, alt_u8 *pData, bool bAck){ // return true if device response ack
 8008ddc:	defff804 	addi	sp,sp,-32
 8008de0:	dfc00715 	stw	ra,28(sp)
 8008de4:	df000615 	stw	fp,24(sp)
 8008de8:	df000604 	addi	fp,sp,24
 8008dec:	e13ffc15 	stw	r4,-16(fp)
 8008df0:	e17ffd15 	stw	r5,-12(fp)
 8008df4:	e1bffe15 	stw	r6,-8(fp)
 8008df8:	e1ffff15 	stw	r7,-4(fp)
    alt_u8 Data=0;
 8008dfc:	e03ffa05 	stb	zero,-24(fp)
    int i;
    
    // assume SCL = low
    
    SDA_DIR_IN(data_base);  // set data read mode
 8008e00:	e0bffd17 	ldw	r2,-12(fp)
 8008e04:	10800104 	addi	r2,r2,4
 8008e08:	0007883a 	mov	r3,zero
 8008e0c:	10c00035 	stwio	r3,0(r2)
    SCL_LOW(clk_base); // clock low
 8008e10:	e0bffc17 	ldw	r2,-16(fp)
 8008e14:	0007883a 	mov	r3,zero
 8008e18:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 8008e1c:	01000084 	movi	r4,2
 8008e20:	801d36c0 	call	801d36c <usleep>

    for(i=0;i<8;i++){
 8008e24:	e03ffb15 	stw	zero,-20(fp)
 8008e28:	00001606 	br	8008e84 <i2c_read+0xa8>
        Data <<= 1;
 8008e2c:	e0bffa03 	ldbu	r2,-24(fp)
 8008e30:	1085883a 	add	r2,r2,r2
 8008e34:	e0bffa05 	stb	r2,-24(fp)
        SCL_HIGH(clk_base);  // clock high
 8008e38:	e0bffc17 	ldw	r2,-16(fp)
 8008e3c:	00c00044 	movi	r3,1
 8008e40:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 8008e44:	01000084 	movi	r4,2
 8008e48:	801d36c0 	call	801d36c <usleep>
        if (SDA_READ(data_base))  // read data   
 8008e4c:	e0bffd17 	ldw	r2,-12(fp)
 8008e50:	10800037 	ldwio	r2,0(r2)
 8008e54:	10000326 	beq	r2,zero,8008e64 <i2c_read+0x88>
            Data |= 0x01;
 8008e58:	e0bffa03 	ldbu	r2,-24(fp)
 8008e5c:	10800054 	ori	r2,r2,1
 8008e60:	e0bffa05 	stb	r2,-24(fp)
        SCL_LOW(clk_base);  // clock log  
 8008e64:	e0bffc17 	ldw	r2,-16(fp)
 8008e68:	0007883a 	mov	r3,zero
 8008e6c:	10c00035 	stwio	r3,0(r2)
        SCL_DELAY;
 8008e70:	01000084 	movi	r4,2
 8008e74:	801d36c0 	call	801d36c <usleep>
    
    SDA_DIR_IN(data_base);  // set data read mode
    SCL_LOW(clk_base); // clock low
    SCL_DELAY; // clock low delay

    for(i=0;i<8;i++){
 8008e78:	e0bffb17 	ldw	r2,-20(fp)
 8008e7c:	10800044 	addi	r2,r2,1
 8008e80:	e0bffb15 	stw	r2,-20(fp)
 8008e84:	e0bffb17 	ldw	r2,-20(fp)
 8008e88:	10800210 	cmplti	r2,r2,8
 8008e8c:	103fe71e 	bne	r2,zero,8008e2c <__alt_data_end+0xf8008e2c>
        SCL_LOW(clk_base);  // clock log  
        SCL_DELAY;
    }
    
    // send ACK
    SCL_LOW(clk_base);  // new, make sure data change at clk low
 8008e90:	e0bffc17 	ldw	r2,-16(fp)
 8008e94:	0007883a 	mov	r3,zero
 8008e98:	10c00035 	stwio	r3,0(r2)
    SDA_DIR_OUT(data_base);  // set data write mode
 8008e9c:	e0bffd17 	ldw	r2,-12(fp)
 8008ea0:	10800104 	addi	r2,r2,4
 8008ea4:	1007883a 	mov	r3,r2
 8008ea8:	00800044 	movi	r2,1
 8008eac:	18800035 	stwio	r2,0(r3)
    if (bAck)
 8008eb0:	e0bfff17 	ldw	r2,-4(fp)
 8008eb4:	10000426 	beq	r2,zero,8008ec8 <i2c_read+0xec>
        SDA_LOW(data_base);
 8008eb8:	e0bffd17 	ldw	r2,-12(fp)
 8008ebc:	0007883a 	mov	r3,zero
 8008ec0:	10c00035 	stwio	r3,0(r2)
 8008ec4:	00000306 	br	8008ed4 <i2c_read+0xf8>
    else
        SDA_HIGH(data_base);
 8008ec8:	e0bffd17 	ldw	r2,-12(fp)
 8008ecc:	00c00044 	movi	r3,1
 8008ed0:	10c00035 	stwio	r3,0(r2)
    SCL_HIGH(clk_base); // clock high
 8008ed4:	e0bffc17 	ldw	r2,-16(fp)
 8008ed8:	00c00044 	movi	r3,1
 8008edc:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock high  delay
 8008ee0:	01000084 	movi	r4,2
 8008ee4:	801d36c0 	call	801d36c <usleep>
    SCL_LOW(clk_base); // clock low
 8008ee8:	e0bffc17 	ldw	r2,-16(fp)
 8008eec:	0007883a 	mov	r3,zero
 8008ef0:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // clock low delay
 8008ef4:	01000084 	movi	r4,2
 8008ef8:	801d36c0 	call	801d36c <usleep>
    SDA_LOW(data_base);  // data low
 8008efc:	e0bffd17 	ldw	r2,-12(fp)
 8008f00:	0007883a 	mov	r3,zero
 8008f04:	10c00035 	stwio	r3,0(r2)
    SCL_DELAY; // data low delay
 8008f08:	01000084 	movi	r4,2
 8008f0c:	801d36c0 	call	801d36c <usleep>
//    SDA_DIR_IN;  // set data read mode
    
    *pData = Data;
 8008f10:	e0bffe17 	ldw	r2,-8(fp)
 8008f14:	e0fffa03 	ldbu	r3,-24(fp)
 8008f18:	10c00005 	stb	r3,0(r2)
}
 8008f1c:	e037883a 	mov	sp,fp
 8008f20:	dfc00117 	ldw	ra,4(sp)
 8008f24:	df000017 	ldw	fp,0(sp)
 8008f28:	dec00204 	addi	sp,sp,8
 8008f2c:	f800283a 	ret

08008f30 <I2CL_Write>:

////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////
// size > 2Kbits
bool I2CL_Write(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 ControlData){
 8008f30:	defff704 	addi	sp,sp,-36
 8008f34:	dfc00815 	stw	ra,32(sp)
 8008f38:	df000715 	stw	fp,28(sp)
 8008f3c:	df000704 	addi	fp,sp,28
 8008f40:	e13ffb15 	stw	r4,-20(fp)
 8008f44:	e17ffc15 	stw	r5,-16(fp)
 8008f48:	3009883a 	mov	r4,r6
 8008f4c:	3807883a 	mov	r3,r7
 8008f50:	e0800217 	ldw	r2,8(fp)
 8008f54:	e13ffd05 	stb	r4,-12(fp)
 8008f58:	e0fffe0d 	sth	r3,-8(fp)
 8008f5c:	e0bfff05 	stb	r2,-4(fp)
    bool bSuccess = TRUE;
 8008f60:	00800044 	movi	r2,1
 8008f64:	e0bff915 	stw	r2,-28(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 8008f68:	e0bffe0b 	ldhu	r2,-8(fp)
 8008f6c:	1004d23a 	srli	r2,r2,8
 8008f70:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 8008f74:	e0bffe0b 	ldhu	r2,-8(fp)
 8008f78:	e0bffa45 	stb	r2,-23(fp)
    
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 8008f7c:	e13ffb17 	ldw	r4,-20(fp)
 8008f80:	e17ffc17 	ldw	r5,-16(fp)
 8008f84:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8008f88:	e0bffd03 	ldbu	r2,-12(fp)
 8008f8c:	10803fcc 	andi	r2,r2,255
 8008f90:	e13ffb17 	ldw	r4,-20(fp)
 8008f94:	e17ffc17 	ldw	r5,-16(fp)
 8008f98:	100d883a 	mov	r6,r2
 8008f9c:	8008cac0 	call	8008cac <i2c_write>
 8008fa0:	1000011e 	bne	r2,zero,8008fa8 <I2CL_Write+0x78>
        bSuccess = FALSE;
 8008fa4:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 8008fa8:	e0bff917 	ldw	r2,-28(fp)
 8008fac:	10000726 	beq	r2,zero,8008fcc <I2CL_Write+0x9c>
 8008fb0:	e0bffa03 	ldbu	r2,-24(fp)
 8008fb4:	e13ffb17 	ldw	r4,-20(fp)
 8008fb8:	e17ffc17 	ldw	r5,-16(fp)
 8008fbc:	100d883a 	mov	r6,r2
 8008fc0:	8008cac0 	call	8008cac <i2c_write>
 8008fc4:	1000011e 	bne	r2,zero,8008fcc <I2CL_Write+0x9c>
        bSuccess = FALSE;
 8008fc8:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 8008fcc:	e0bff917 	ldw	r2,-28(fp)
 8008fd0:	10000726 	beq	r2,zero,8008ff0 <I2CL_Write+0xc0>
 8008fd4:	e0bffa43 	ldbu	r2,-23(fp)
 8008fd8:	e13ffb17 	ldw	r4,-20(fp)
 8008fdc:	e17ffc17 	ldw	r5,-16(fp)
 8008fe0:	100d883a 	mov	r6,r2
 8008fe4:	8008cac0 	call	8008cac <i2c_write>
 8008fe8:	1000011e 	bne	r2,zero,8008ff0 <I2CL_Write+0xc0>
        bSuccess = FALSE;
 8008fec:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, ControlData)){  
 8008ff0:	e0bff917 	ldw	r2,-28(fp)
 8008ff4:	10000726 	beq	r2,zero,8009014 <I2CL_Write+0xe4>
 8008ff8:	e0bfff03 	ldbu	r2,-4(fp)
 8008ffc:	e13ffb17 	ldw	r4,-20(fp)
 8009000:	e17ffc17 	ldw	r5,-16(fp)
 8009004:	100d883a 	mov	r6,r2
 8009008:	8008cac0 	call	8008cac <i2c_write>
 800900c:	1000011e 	bne	r2,zero,8009014 <I2CL_Write+0xe4>
        bSuccess = FALSE;
 8009010:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 8009014:	e13ffb17 	ldw	r4,-20(fp)
 8009018:	e17ffc17 	ldw	r5,-16(fp)
 800901c:	8008c380 	call	8008c38 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 8009020:	0106d604 	movi	r4,7000
 8009024:	801d36c0 	call	801d36c <usleep>
    
    return bSuccess;
 8009028:	e0bff917 	ldw	r2,-28(fp)
    
}
 800902c:	e037883a 	mov	sp,fp
 8009030:	dfc00117 	ldw	ra,4(sp)
 8009034:	df000017 	ldw	fp,0(sp)
 8009038:	dec00204 	addi	sp,sp,8
 800903c:	f800283a 	ret

08009040 <I2CL_Read>:

bool I2CL_Read(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 *pControlData){
 8009040:	defff804 	addi	sp,sp,-32
 8009044:	dfc00715 	stw	ra,28(sp)
 8009048:	df000615 	stw	fp,24(sp)
 800904c:	df000604 	addi	fp,sp,24
 8009050:	e13ffc15 	stw	r4,-16(fp)
 8009054:	e17ffd15 	stw	r5,-12(fp)
 8009058:	3007883a 	mov	r3,r6
 800905c:	3805883a 	mov	r2,r7
 8009060:	e0fffe05 	stb	r3,-8(fp)
 8009064:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 8009068:	00800044 	movi	r2,1
 800906c:	e0bffa15 	stw	r2,-24(fp)
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 8009070:	e0bfff0b 	ldhu	r2,-4(fp)
 8009074:	1004d23a 	srli	r2,r2,8
 8009078:	e0bffb05 	stb	r2,-20(fp)
    AddrLow  = ControlAddr & 0xFF; 
 800907c:	e0bfff0b 	ldhu	r2,-4(fp)
 8009080:	e0bffb45 	stb	r2,-19(fp)

    i2c_start(clk_base, data_base);
 8009084:	e13ffc17 	ldw	r4,-16(fp)
 8009088:	e17ffd17 	ldw	r5,-12(fp)
 800908c:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 8009090:	e0bffe03 	ldbu	r2,-8(fp)
 8009094:	10803fcc 	andi	r2,r2,255
 8009098:	e13ffc17 	ldw	r4,-16(fp)
 800909c:	e17ffd17 	ldw	r5,-12(fp)
 80090a0:	100d883a 	mov	r6,r2
 80090a4:	8008cac0 	call	8008cac <i2c_write>
 80090a8:	1000011e 	bne	r2,zero,80090b0 <I2CL_Read+0x70>
        bSuccess = FALSE;
 80090ac:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 80090b0:	e0bffa17 	ldw	r2,-24(fp)
 80090b4:	10000726 	beq	r2,zero,80090d4 <I2CL_Read+0x94>
 80090b8:	e0bffb03 	ldbu	r2,-20(fp)
 80090bc:	e13ffc17 	ldw	r4,-16(fp)
 80090c0:	e17ffd17 	ldw	r5,-12(fp)
 80090c4:	100d883a 	mov	r6,r2
 80090c8:	8008cac0 	call	8008cac <i2c_write>
 80090cc:	1000011e 	bne	r2,zero,80090d4 <I2CL_Read+0x94>
        bSuccess = FALSE;
 80090d0:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 80090d4:	e0bffa17 	ldw	r2,-24(fp)
 80090d8:	10000726 	beq	r2,zero,80090f8 <I2CL_Read+0xb8>
 80090dc:	e0bffb43 	ldbu	r2,-19(fp)
 80090e0:	e13ffc17 	ldw	r4,-16(fp)
 80090e4:	e17ffd17 	ldw	r5,-12(fp)
 80090e8:	100d883a 	mov	r6,r2
 80090ec:	8008cac0 	call	8008cac <i2c_write>
 80090f0:	1000011e 	bne	r2,zero,80090f8 <I2CL_Read+0xb8>
        bSuccess = FALSE;
 80090f4:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    i2c_start(clk_base, data_base);  // restart
 80090f8:	e13ffc17 	ldw	r4,-16(fp)
 80090fc:	e17ffd17 	ldw	r5,-12(fp)
 8009100:	8008bb00 	call	8008bb0 <i2c_start>
    DeviceAddr |= 1; // Read
 8009104:	e0bffe03 	ldbu	r2,-8(fp)
 8009108:	10800054 	ori	r2,r2,1
 800910c:	e0bffe05 	stb	r2,-8(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 8009110:	e0bffa17 	ldw	r2,-24(fp)
 8009114:	10000826 	beq	r2,zero,8009138 <I2CL_Read+0xf8>
 8009118:	e0bffe03 	ldbu	r2,-8(fp)
 800911c:	10803fcc 	andi	r2,r2,255
 8009120:	e13ffc17 	ldw	r4,-16(fp)
 8009124:	e17ffd17 	ldw	r5,-12(fp)
 8009128:	100d883a 	mov	r6,r2
 800912c:	8008cac0 	call	8008cac <i2c_write>
 8009130:	1000011e 	bne	r2,zero,8009138 <I2CL_Read+0xf8>
        bSuccess = FALSE;
 8009134:	e03ffa15 	stw	zero,-24(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 8009138:	e0bffa17 	ldw	r2,-24(fp)
 800913c:	10000526 	beq	r2,zero,8009154 <I2CL_Read+0x114>
        i2c_read(clk_base, data_base, pControlData, FALSE);  // read
 8009140:	e13ffc17 	ldw	r4,-16(fp)
 8009144:	e17ffd17 	ldw	r5,-12(fp)
 8009148:	e1800217 	ldw	r6,8(fp)
 800914c:	000f883a 	mov	r7,zero
 8009150:	8008ddc0 	call	8008ddc <i2c_read>
    }        
    i2c_stop(clk_base, data_base);
 8009154:	e13ffc17 	ldw	r4,-16(fp)
 8009158:	e17ffd17 	ldw	r5,-12(fp)
 800915c:	8008c380 	call	8008c38 <i2c_stop>
    
    return bSuccess;    
 8009160:	e0bffa17 	ldw	r2,-24(fp)
}
 8009164:	e037883a 	mov	sp,fp
 8009168:	dfc00117 	ldw	ra,4(sp)
 800916c:	df000017 	ldw	fp,0(sp)
 8009170:	dec00204 	addi	sp,sp,8
 8009174:	f800283a 	ret

08009178 <I2CL_MultipleRead>:

// read from address 0
bool I2CL_MultipleRead(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 8009178:	defff604 	addi	sp,sp,-40
 800917c:	dfc00915 	stw	ra,36(sp)
 8009180:	df000815 	stw	fp,32(sp)
 8009184:	df000804 	addi	fp,sp,32
 8009188:	e13ffb15 	stw	r4,-20(fp)
 800918c:	e17ffc15 	stw	r5,-16(fp)
 8009190:	3009883a 	mov	r4,r6
 8009194:	3807883a 	mov	r3,r7
 8009198:	e0800317 	ldw	r2,12(fp)
 800919c:	e13ffd05 	stb	r4,-12(fp)
 80091a0:	e0fffe0d 	sth	r3,-8(fp)
 80091a4:	e0bfff0d 	sth	r2,-4(fp)
    int i;
    bool bSuccess = TRUE;
 80091a8:	00800044 	movi	r2,1
 80091ac:	e0bff915 	stw	r2,-28(fp)
  // alt_u8 ControlAddr = 0;
    alt_u8 AddrHigh, AddrLow;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 80091b0:	e0bffe0b 	ldhu	r2,-8(fp)
 80091b4:	1004d23a 	srli	r2,r2,8
 80091b8:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF;     
 80091bc:	e0bffe0b 	ldhu	r2,-8(fp)
 80091c0:	e0bffa45 	stb	r2,-23(fp)
    
   
    // device id
    //DeviceAddr = HMB_E2_I2C_ID;

    i2c_start(clk_base, data_base);
 80091c4:	e13ffb17 	ldw	r4,-20(fp)
 80091c8:	e17ffc17 	ldw	r5,-16(fp)
 80091cc:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 80091d0:	e0bffd03 	ldbu	r2,-12(fp)
 80091d4:	10803fcc 	andi	r2,r2,255
 80091d8:	e13ffb17 	ldw	r4,-20(fp)
 80091dc:	e17ffc17 	ldw	r5,-16(fp)
 80091e0:	100d883a 	mov	r6,r2
 80091e4:	8008cac0 	call	8008cac <i2c_write>
 80091e8:	1000011e 	bne	r2,zero,80091f0 <I2CL_MultipleRead+0x78>
        bSuccess = FALSE;
 80091ec:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 80091f0:	e0bff917 	ldw	r2,-28(fp)
 80091f4:	10000726 	beq	r2,zero,8009214 <I2CL_MultipleRead+0x9c>
 80091f8:	e0bffa03 	ldbu	r2,-24(fp)
 80091fc:	e13ffb17 	ldw	r4,-20(fp)
 8009200:	e17ffc17 	ldw	r5,-16(fp)
 8009204:	100d883a 	mov	r6,r2
 8009208:	8008cac0 	call	8008cac <i2c_write>
 800920c:	1000011e 	bne	r2,zero,8009214 <I2CL_MultipleRead+0x9c>
        bSuccess = FALSE;
 8009210:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }    
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 8009214:	e0bff917 	ldw	r2,-28(fp)
 8009218:	10000726 	beq	r2,zero,8009238 <I2CL_MultipleRead+0xc0>
 800921c:	e0bffa43 	ldbu	r2,-23(fp)
 8009220:	e13ffb17 	ldw	r4,-20(fp)
 8009224:	e17ffc17 	ldw	r5,-16(fp)
 8009228:	100d883a 	mov	r6,r2
 800922c:	8008cac0 	call	8008cac <i2c_write>
 8009230:	1000011e 	bne	r2,zero,8009238 <I2CL_MultipleRead+0xc0>
        bSuccess = FALSE;
 8009234:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }    
    if (bSuccess)        
 8009238:	e0bff917 	ldw	r2,-28(fp)
 800923c:	10000326 	beq	r2,zero,800924c <I2CL_MultipleRead+0xd4>
        i2c_start(clk_base, data_base);  // restart
 8009240:	e13ffb17 	ldw	r4,-20(fp)
 8009244:	e17ffc17 	ldw	r5,-16(fp)
 8009248:	8008bb00 	call	8008bb0 <i2c_start>
    DeviceAddr |= 1; // Read
 800924c:	e0bffd03 	ldbu	r2,-12(fp)
 8009250:	10800054 	ori	r2,r2,1
 8009254:	e0bffd05 	stb	r2,-12(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, DeviceAddr)){  // send id
 8009258:	e0bff917 	ldw	r2,-28(fp)
 800925c:	10000826 	beq	r2,zero,8009280 <I2CL_MultipleRead+0x108>
 8009260:	e0bffd03 	ldbu	r2,-12(fp)
 8009264:	10803fcc 	andi	r2,r2,255
 8009268:	e13ffb17 	ldw	r4,-20(fp)
 800926c:	e17ffc17 	ldw	r5,-16(fp)
 8009270:	100d883a 	mov	r6,r2
 8009274:	8008cac0 	call	8008cac <i2c_write>
 8009278:	1000011e 	bne	r2,zero,8009280 <I2CL_MultipleRead+0x108>
        bSuccess = FALSE;
 800927c:	e03ff915 	stw	zero,-28(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
 8009280:	e0bff917 	ldw	r2,-28(fp)
 8009284:	10001626 	beq	r2,zero,80092e0 <I2CL_MultipleRead+0x168>
        for(i=0;i<len && bSuccess;i++){
 8009288:	e03ff815 	stw	zero,-32(fp)
 800928c:	00000f06 	br	80092cc <I2CL_MultipleRead+0x154>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
 8009290:	e0bff817 	ldw	r2,-32(fp)
 8009294:	e0c00217 	ldw	r3,8(fp)
 8009298:	188d883a 	add	r6,r3,r2
 800929c:	e0bfff0b 	ldhu	r2,-4(fp)
 80092a0:	10ffffc4 	addi	r3,r2,-1
 80092a4:	e0bff817 	ldw	r2,-32(fp)
 80092a8:	1884c03a 	cmpne	r2,r3,r2
 80092ac:	10803fcc 	andi	r2,r2,255
 80092b0:	e13ffb17 	ldw	r4,-20(fp)
 80092b4:	e17ffc17 	ldw	r5,-16(fp)
 80092b8:	100f883a 	mov	r7,r2
 80092bc:	8008ddc0 	call	8008ddc <i2c_read>
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: Address+1 NACK!\n"));
    }
    
    if (bSuccess){
        for(i=0;i<len && bSuccess;i++){
 80092c0:	e0bff817 	ldw	r2,-32(fp)
 80092c4:	10800044 	addi	r2,r2,1
 80092c8:	e0bff815 	stw	r2,-32(fp)
 80092cc:	e0bfff0b 	ldhu	r2,-4(fp)
 80092d0:	e0fff817 	ldw	r3,-32(fp)
 80092d4:	1880020e 	bge	r3,r2,80092e0 <I2CL_MultipleRead+0x168>
 80092d8:	e0bff917 	ldw	r2,-28(fp)
 80092dc:	103fec1e 	bne	r2,zero,8009290 <__alt_data_end+0xf8009290>
            i2c_read(clk_base, data_base, &szData[i], (i==(len-1))?FALSE:TRUE);  // read
        }            
    }        
    i2c_stop(clk_base, data_base);
 80092e0:	e13ffb17 	ldw	r4,-20(fp)
 80092e4:	e17ffc17 	ldw	r5,-16(fp)
 80092e8:	8008c380 	call	8008c38 <i2c_stop>
    
    return bSuccess;    
 80092ec:	e0bff917 	ldw	r2,-28(fp)
    
} 
 80092f0:	e037883a 	mov	sp,fp
 80092f4:	dfc00117 	ldw	ra,4(sp)
 80092f8:	df000017 	ldw	fp,0(sp)
 80092fc:	dec00204 	addi	sp,sp,8
 8009300:	f800283a 	ret

08009304 <I2CL_MultipleWrite>:



bool I2CL_MultipleWrite(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u8 szData[], alt_u16 len){
 8009304:	defff604 	addi	sp,sp,-40
 8009308:	dfc00915 	stw	ra,36(sp)
 800930c:	df000815 	stw	fp,32(sp)
 8009310:	df000804 	addi	fp,sp,32
 8009314:	e13ffb15 	stw	r4,-20(fp)
 8009318:	e17ffc15 	stw	r5,-16(fp)
 800931c:	3009883a 	mov	r4,r6
 8009320:	3807883a 	mov	r3,r7
 8009324:	e0800317 	ldw	r2,12(fp)
 8009328:	e13ffd05 	stb	r4,-12(fp)
 800932c:	e0fffe0d 	sth	r3,-8(fp)
 8009330:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess = TRUE;
 8009334:	00800044 	movi	r2,1
 8009338:	e0bff815 	stw	r2,-32(fp)
    alt_u8 AddrHigh, AddrLow;
    int i;
    
    AddrHigh = (ControlAddr >> 8) & 0xFF; 
 800933c:	e0bffe0b 	ldhu	r2,-8(fp)
 8009340:	1004d23a 	srli	r2,r2,8
 8009344:	e0bffa05 	stb	r2,-24(fp)
    AddrLow  = ControlAddr & 0xFF; 
 8009348:	e0bffe0b 	ldhu	r2,-8(fp)
 800934c:	e0bffa45 	stb	r2,-23(fp)
    

    i2c_start(clk_base, data_base);
 8009350:	e13ffb17 	ldw	r4,-20(fp)
 8009354:	e17ffc17 	ldw	r5,-16(fp)
 8009358:	8008bb00 	call	8008bb0 <i2c_start>
    if (!i2c_write(clk_base, data_base, DeviceAddr)){  // send ID
 800935c:	e0bffd03 	ldbu	r2,-12(fp)
 8009360:	10803fcc 	andi	r2,r2,255
 8009364:	e13ffb17 	ldw	r4,-20(fp)
 8009368:	e17ffc17 	ldw	r5,-16(fp)
 800936c:	100d883a 	mov	r6,r2
 8009370:	8008cac0 	call	8008cac <i2c_write>
 8009374:	1000011e 	bne	r2,zero,800937c <I2CL_MultipleWrite+0x78>
        bSuccess = FALSE;
 8009378:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: Address NACK!\n"));
    }
    if (bSuccess && !i2c_write(clk_base, data_base, AddrHigh)){ // send sub-address
 800937c:	e0bff817 	ldw	r2,-32(fp)
 8009380:	10000726 	beq	r2,zero,80093a0 <I2CL_MultipleWrite+0x9c>
 8009384:	e0bffa03 	ldbu	r2,-24(fp)
 8009388:	e13ffb17 	ldw	r4,-20(fp)
 800938c:	e17ffc17 	ldw	r5,-16(fp)
 8009390:	100d883a 	mov	r6,r2
 8009394:	8008cac0 	call	8008cac <i2c_write>
 8009398:	1000011e 	bne	r2,zero,80093a0 <I2CL_MultipleWrite+0x9c>
        bSuccess = FALSE;
 800939c:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-high NACK!\n"));
    }            
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
 80093a0:	e0bff817 	ldw	r2,-32(fp)
 80093a4:	10000726 	beq	r2,zero,80093c4 <I2CL_MultipleWrite+0xc0>
 80093a8:	e0bffa43 	ldbu	r2,-23(fp)
 80093ac:	e13ffb17 	ldw	r4,-20(fp)
 80093b0:	e17ffc17 	ldw	r5,-16(fp)
 80093b4:	100d883a 	mov	r6,r2
 80093b8:	8008cac0 	call	8008cac <i2c_write>
 80093bc:	1000011e 	bne	r2,zero,80093c4 <I2CL_MultipleWrite+0xc0>
        bSuccess = FALSE;
 80093c0:	e03ff815 	stw	zero,-32(fp)
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
 80093c4:	e0bff817 	ldw	r2,-32(fp)
 80093c8:	10001426 	beq	r2,zero,800941c <I2CL_MultipleWrite+0x118>
        for(i=0;i<len && bSuccess;i++){
 80093cc:	e03ff915 	stw	zero,-28(fp)
 80093d0:	00000d06 	br	8009408 <I2CL_MultipleWrite+0x104>
            bSuccess = i2c_write(clk_base, data_base, szData[i]);
 80093d4:	e0bff917 	ldw	r2,-28(fp)
 80093d8:	e0c00217 	ldw	r3,8(fp)
 80093dc:	1885883a 	add	r2,r3,r2
 80093e0:	10800003 	ldbu	r2,0(r2)
 80093e4:	10803fcc 	andi	r2,r2,255
 80093e8:	e13ffb17 	ldw	r4,-20(fp)
 80093ec:	e17ffc17 	ldw	r5,-16(fp)
 80093f0:	100d883a 	mov	r6,r2
 80093f4:	8008cac0 	call	8008cac <i2c_write>
 80093f8:	e0bff815 	stw	r2,-32(fp)
    if (bSuccess && !i2c_write(clk_base, data_base, AddrLow)){ // send sub-address
        bSuccess = FALSE;
        I2C_DEBUG(("I2C HMB_E2 Fail: SubAddress-low NACK!\n"));
    }            
    if (bSuccess){// && !i2c_write(clk_base, data_base, ControlData)){
        for(i=0;i<len && bSuccess;i++){
 80093fc:	e0bff917 	ldw	r2,-28(fp)
 8009400:	10800044 	addi	r2,r2,1
 8009404:	e0bff915 	stw	r2,-28(fp)
 8009408:	e0bfff0b 	ldhu	r2,-4(fp)
 800940c:	e0fff917 	ldw	r3,-28(fp)
 8009410:	1880020e 	bge	r3,r2,800941c <I2CL_MultipleWrite+0x118>
 8009414:	e0bff817 	ldw	r2,-32(fp)
 8009418:	103fee1e 	bne	r2,zero,80093d4 <__alt_data_end+0xf80093d4>
        }  
        //bSuccess = FALSE;
        if (!bSuccess)
            I2C_DEBUG(("I2C HMB_E2 Fail: write NACK!\n"));
    }
    i2c_stop(clk_base, data_base);
 800941c:	e13ffb17 	ldw	r4,-20(fp)
 8009420:	e17ffc17 	ldw	r5,-16(fp)
 8009424:	8008c380 	call	8008c38 <i2c_stop>
    
    usleep(7*1000); // delay to wait EE2 ready (at least 5 ms delay is required)
 8009428:	0106d604 	movi	r4,7000
 800942c:	801d36c0 	call	801d36c <usleep>
    
    return bSuccess;
 8009430:	e0bff817 	ldw	r2,-32(fp)
    
}
 8009434:	e037883a 	mov	sp,fp
 8009438:	dfc00117 	ldw	ra,4(sp)
 800943c:	df000017 	ldw	fp,0(sp)
 8009440:	dec00204 	addi	sp,sp,8
 8009444:	f800283a 	ret

08009448 <I2CL_Read16>:



bool I2CL_Read16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 *pControlData){
 8009448:	defff604 	addi	sp,sp,-40
 800944c:	dfc00915 	stw	ra,36(sp)
 8009450:	df000815 	stw	fp,32(sp)
 8009454:	df000804 	addi	fp,sp,32
 8009458:	e13ffc15 	stw	r4,-16(fp)
 800945c:	e17ffd15 	stw	r5,-12(fp)
 8009460:	3007883a 	mov	r3,r6
 8009464:	3805883a 	mov	r2,r7
 8009468:	e0fffe05 	stb	r3,-8(fp)
 800946c:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    bSuccess = I2CL_MultipleRead(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 8009470:	e1bffe07 	ldb	r6,-8(fp)
 8009474:	e0ffff0b 	ldhu	r3,-4(fp)
 8009478:	e0bffb04 	addi	r2,fp,-20
 800947c:	d8800015 	stw	r2,0(sp)
 8009480:	00800084 	movi	r2,2
 8009484:	d8800115 	stw	r2,4(sp)
 8009488:	e13ffc17 	ldw	r4,-16(fp)
 800948c:	e17ffd17 	ldw	r5,-12(fp)
 8009490:	180f883a 	mov	r7,r3
 8009494:	80091780 	call	8009178 <I2CL_MultipleRead>
 8009498:	e0bffa15 	stw	r2,-24(fp)
    if (bSuccess){
 800949c:	e0bffa17 	ldw	r2,-24(fp)
 80094a0:	10000a26 	beq	r2,zero,80094cc <I2CL_Read16+0x84>
        *pControlData = (szData[0] << 8 ) | szData[1];
 80094a4:	e0bffb03 	ldbu	r2,-20(fp)
 80094a8:	10803fcc 	andi	r2,r2,255
 80094ac:	1004923a 	slli	r2,r2,8
 80094b0:	1007883a 	mov	r3,r2
 80094b4:	e0bffb43 	ldbu	r2,-19(fp)
 80094b8:	10803fcc 	andi	r2,r2,255
 80094bc:	1884b03a 	or	r2,r3,r2
 80094c0:	1007883a 	mov	r3,r2
 80094c4:	e0800217 	ldw	r2,8(fp)
 80094c8:	10c0000d 	sth	r3,0(r2)
    }
    return bSuccess;    
 80094cc:	e0bffa17 	ldw	r2,-24(fp)
}
 80094d0:	e037883a 	mov	sp,fp
 80094d4:	dfc00117 	ldw	ra,4(sp)
 80094d8:	df000017 	ldw	fp,0(sp)
 80094dc:	dec00204 	addi	sp,sp,8
 80094e0:	f800283a 	ret

080094e4 <I2CL_Write16>:

bool I2CL_Write16(alt_u32 clk_base, alt_u32 data_base, alt_8 DeviceAddr, alt_u16 ControlAddr, alt_u16 ControlData){
 80094e4:	defff504 	addi	sp,sp,-44
 80094e8:	dfc00a15 	stw	ra,40(sp)
 80094ec:	df000915 	stw	fp,36(sp)
 80094f0:	df000904 	addi	fp,sp,36
 80094f4:	e13ffb15 	stw	r4,-20(fp)
 80094f8:	e17ffc15 	stw	r5,-16(fp)
 80094fc:	3009883a 	mov	r4,r6
 8009500:	3807883a 	mov	r3,r7
 8009504:	e0800217 	ldw	r2,8(fp)
 8009508:	e13ffd05 	stb	r4,-12(fp)
 800950c:	e0fffe0d 	sth	r3,-8(fp)
 8009510:	e0bfff0d 	sth	r2,-4(fp)
    bool bSuccess;
    alt_u8 szData[2];
    szData[0] = (ControlData >> 8) & 0xFF;
 8009514:	e0bfff0b 	ldhu	r2,-4(fp)
 8009518:	1004d23a 	srli	r2,r2,8
 800951c:	e0bffa05 	stb	r2,-24(fp)
    szData[1] = ControlData & 0xFF;   
 8009520:	e0bfff0b 	ldhu	r2,-4(fp)
 8009524:	e0bffa45 	stb	r2,-23(fp)
    bSuccess = I2CL_MultipleWrite(clk_base, data_base, DeviceAddr, ControlAddr, szData, sizeof(szData));
 8009528:	e1bffd07 	ldb	r6,-12(fp)
 800952c:	e0fffe0b 	ldhu	r3,-8(fp)
 8009530:	e0bffa04 	addi	r2,fp,-24
 8009534:	d8800015 	stw	r2,0(sp)
 8009538:	00800084 	movi	r2,2
 800953c:	d8800115 	stw	r2,4(sp)
 8009540:	e13ffb17 	ldw	r4,-20(fp)
 8009544:	e17ffc17 	ldw	r5,-16(fp)
 8009548:	180f883a 	mov	r7,r3
 800954c:	80093040 	call	8009304 <I2CL_MultipleWrite>
 8009550:	e0bff915 	stw	r2,-28(fp)
    return bSuccess;    
 8009554:	e0bff917 	ldw	r2,-28(fp)
}
 8009558:	e037883a 	mov	sp,fp
 800955c:	dfc00117 	ldw	ra,4(sp)
 8009560:	df000017 	ldw	fp,0(sp)
 8009564:	dec00204 	addi	sp,sp,8
 8009568:	f800283a 	ret

0800956c <OC_I2C_Read>:

bool  OC_I2C_Read(alt_32 i2c_base,alt_u8 device_address,alt_u8 sub_address, alt_u8 *pData8, int nReadLength){
 800956c:	defff804 	addi	sp,sp,-32
 8009570:	dfc00715 	stw	ra,28(sp)
 8009574:	df000615 	stw	fp,24(sp)
 8009578:	df000604 	addi	fp,sp,24
 800957c:	e13ffc15 	stw	r4,-16(fp)
 8009580:	2807883a 	mov	r3,r5
 8009584:	3005883a 	mov	r2,r6
 8009588:	e1ffff15 	stw	r7,-4(fp)
 800958c:	e0fffd05 	stb	r3,-12(fp)
 8009590:	e0bffe05 	stb	r2,-8(fp)
    //BYTE data = 0x0;
    alt_32 Data32;
    int i;

   //set the tx reg audio chip dev address with write bit
   IOWR( i2c_base, 3,device_address);
 8009594:	e0bffc17 	ldw	r2,-16(fp)
 8009598:	10800304 	addi	r2,r2,12
 800959c:	1007883a 	mov	r3,r2
 80095a0:	e0bffd03 	ldbu	r2,-12(fp)
 80095a4:	18800035 	stwio	r2,0(r3)
   //set STA and WR bits(bit7 and bit4)
   IOWR( i2c_base, 4,0x90);
 80095a8:	e0bffc17 	ldw	r2,-16(fp)
 80095ac:	10800404 	addi	r2,r2,16
 80095b0:	1007883a 	mov	r3,r2
 80095b4:	00802404 	movi	r2,144
 80095b8:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
   if (!ACK_check( i2c_base)){
 80095bc:	e13ffc17 	ldw	r4,-16(fp)
 80095c0:	80098800 	call	8009880 <ACK_check>
 80095c4:	1000051e 	bne	r2,zero,80095dc <OC_I2C_Read+0x70>
       printf("OC_I2C_Read error[2]\r\n");
 80095c8:	010205b4 	movhi	r4,2070
 80095cc:	21162b04 	addi	r4,r4,22700
 80095d0:	800ffc40 	call	800ffc4 <puts>
       return FALSE;
 80095d4:	0005883a 	mov	r2,zero
 80095d8:	00005206 	br	8009724 <OC_I2C_Read+0x1b8>
   }
   IOWR(i2c_base, 3,sub_address);
 80095dc:	e0bffc17 	ldw	r2,-16(fp)
 80095e0:	10800304 	addi	r2,r2,12
 80095e4:	1007883a 	mov	r3,r2
 80095e8:	e0bffe03 	ldbu	r2,-8(fp)
 80095ec:	18800035 	stwio	r2,0(r3)

   //set WR bits(bit4)
   IOWR( i2c_base, 4,0x10);
 80095f0:	e0bffc17 	ldw	r2,-16(fp)
 80095f4:	10800404 	addi	r2,r2,16
 80095f8:	1007883a 	mov	r3,r2
 80095fc:	00800404 	movi	r2,16
 8009600:	18800035 	stwio	r2,0(r3)
   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 8009604:	e13ffc17 	ldw	r4,-16(fp)
 8009608:	80098800 	call	8009880 <ACK_check>
 800960c:	1000051e 	bne	r2,zero,8009624 <OC_I2C_Read+0xb8>
        printf("OC_I2C_Read error[5]\r\n");
 8009610:	010205b4 	movhi	r4,2070
 8009614:	21163104 	addi	r4,r4,22724
 8009618:	800ffc40 	call	800ffc4 <puts>
        return FALSE;
 800961c:	0005883a 	mov	r2,zero
 8009620:	00004006 	br	8009724 <OC_I2C_Read+0x1b8>
    }
  // printf("\n read receive ACK-reg address! \n");

   //read
    //set the tx reg audio chip dev address with read bit 1
    IOWR(i2c_base, 3,device_address|0x01);
 8009624:	e0bffc17 	ldw	r2,-16(fp)
 8009628:	10800304 	addi	r2,r2,12
 800962c:	1007883a 	mov	r3,r2
 8009630:	e0bffd03 	ldbu	r2,-12(fp)
 8009634:	10800054 	ori	r2,r2,1
 8009638:	10803fcc 	andi	r2,r2,255
 800963c:	18800035 	stwio	r2,0(r3)

   //set STA and WR bits(bit7 and bit4)
    IOWR( i2c_base, 4,0x90);
 8009640:	e0bffc17 	ldw	r2,-16(fp)
 8009644:	10800404 	addi	r2,r2,16
 8009648:	1007883a 	mov	r3,r2
 800964c:	00802404 	movi	r2,144
 8009650:	18800035 	stwio	r2,0(r3)

   //wait TIP bit go to 0 to end Tx
    if (!ACK_check( i2c_base)){
 8009654:	e13ffc17 	ldw	r4,-16(fp)
 8009658:	80098800 	call	8009880 <ACK_check>
 800965c:	1000051e 	bne	r2,zero,8009674 <OC_I2C_Read+0x108>
        printf("OC_I2C_Read error[8]\r\n");
 8009660:	010205b4 	movhi	r4,2070
 8009664:	21163704 	addi	r4,r4,22748
 8009668:	800ffc40 	call	800ffc4 <puts>
        return FALSE;
 800966c:	0005883a 	mov	r2,zero
 8009670:	00002c06 	br	8009724 <OC_I2C_Read+0x1b8>
    }

    for(i=0;i<nReadLength;i++){
 8009674:	e03ffa15 	stw	zero,-24(fp)
 8009678:	00001f06 	br	80096f8 <OC_I2C_Read+0x18c>
  // printf("\n read receive ACK-device address(read)! \n");
   //set the RD and ACK bit(bit5 and bit3)
    	IOWR( i2c_base, 4,((i+1) == nReadLength)?0x28:0x20);
 800967c:	e0bffc17 	ldw	r2,-16(fp)
 8009680:	10800404 	addi	r2,r2,16
 8009684:	1009883a 	mov	r4,r2
 8009688:	e0bffa17 	ldw	r2,-24(fp)
 800968c:	10c00044 	addi	r3,r2,1
 8009690:	e0800217 	ldw	r2,8(fp)
 8009694:	1880021e 	bne	r3,r2,80096a0 <OC_I2C_Read+0x134>
 8009698:	00800a04 	movi	r2,40
 800969c:	00000106 	br	80096a4 <OC_I2C_Read+0x138>
 80096a0:	00800804 	movi	r2,32
 80096a4:	20800035 	stwio	r2,0(r4)

        if (!ACK_judge_for_read( i2c_base)){
 80096a8:	e13ffc17 	ldw	r4,-16(fp)
 80096ac:	80097900 	call	8009790 <ACK_judge_for_read>
 80096b0:	1000051e 	bne	r2,zero,80096c8 <OC_I2C_Read+0x15c>
            printf("OC_I2C_Read error[10]\r\n");
 80096b4:	010205b4 	movhi	r4,2070
 80096b8:	21163d04 	addi	r4,r4,22772
 80096bc:	800ffc40 	call	800ffc4 <puts>
            return FALSE;
 80096c0:	0005883a 	mov	r2,zero
 80096c4:	00001706 	br	8009724 <OC_I2C_Read+0x1b8>
        }
   // printf("\n read receive ACK-device address(read)! \n");

        Data32=IORD( i2c_base, 3);
 80096c8:	e0bffc17 	ldw	r2,-16(fp)
 80096cc:	10800304 	addi	r2,r2,12
 80096d0:	10800037 	ldwio	r2,0(r2)
 80096d4:	e0bffb15 	stw	r2,-20(fp)
        *(pData8+i) =  Data32 & 0xff;
 80096d8:	e0bffa17 	ldw	r2,-24(fp)
 80096dc:	e0ffff17 	ldw	r3,-4(fp)
 80096e0:	1885883a 	add	r2,r3,r2
 80096e4:	e0fffb17 	ldw	r3,-20(fp)
 80096e8:	10c00005 	stb	r3,0(r2)
    if (!ACK_check( i2c_base)){
        printf("OC_I2C_Read error[8]\r\n");
        return FALSE;
    }

    for(i=0;i<nReadLength;i++){
 80096ec:	e0bffa17 	ldw	r2,-24(fp)
 80096f0:	10800044 	addi	r2,r2,1
 80096f4:	e0bffa15 	stw	r2,-24(fp)
 80096f8:	e0fffa17 	ldw	r3,-24(fp)
 80096fc:	e0800217 	ldw	r2,8(fp)
 8009700:	18bfde16 	blt	r3,r2,800967c <__alt_data_end+0xf800967c>

        Data32=IORD( i2c_base, 3);
        *(pData8+i) =  Data32 & 0xff;
    }

    IOWR( i2c_base, 4,0x40);
 8009704:	e0bffc17 	ldw	r2,-16(fp)
 8009708:	10800404 	addi	r2,r2,16
 800970c:	1007883a 	mov	r3,r2
 8009710:	00801004 	movi	r2,64
 8009714:	18800035 	stwio	r2,0(r3)

  // Sleep(10);
   //OS_msleep(1);
    usleep(SLEEP_TIME);
 8009718:	010003c4 	movi	r4,15
 800971c:	801d36c0 	call	801d36c <usleep>
 //  printf(" Read  [%02X] = %02Xh\r\n", sub_address, data);


   return TRUE;
 8009720:	00800044 	movi	r2,1

}
 8009724:	e037883a 	mov	sp,fp
 8009728:	dfc00117 	ldw	ra,4(sp)
 800972c:	df000017 	ldw	fp,0(sp)
 8009730:	dec00204 	addi	sp,sp,8
 8009734:	f800283a 	ret

08009738 <Read32_Data>:

bool  Read32_Data(alt_32 base_address, alt_32 offset_address, alt_32 *pData32){
 8009738:	defffb04 	addi	sp,sp,-20
 800973c:	df000415 	stw	fp,16(sp)
 8009740:	df000404 	addi	fp,sp,16
 8009744:	e13ffd15 	stw	r4,-12(fp)
 8009748:	e17ffe15 	stw	r5,-8(fp)
 800974c:	e1bfff15 	stw	r6,-4(fp)
	bool bPass;
	*pData32 =IORD(base_address ,offset_address  );
 8009750:	e0bffe17 	ldw	r2,-8(fp)
 8009754:	1085883a 	add	r2,r2,r2
 8009758:	1085883a 	add	r2,r2,r2
 800975c:	1007883a 	mov	r3,r2
 8009760:	e0bffd17 	ldw	r2,-12(fp)
 8009764:	1885883a 	add	r2,r3,r2
 8009768:	10c00037 	ldwio	r3,0(r2)
 800976c:	e0bfff17 	ldw	r2,-4(fp)
 8009770:	10c00015 	stw	r3,0(r2)
	bPass=TRUE;
 8009774:	00800044 	movi	r2,1
 8009778:	e0bffc15 	stw	r2,-16(fp)
    return bPass;
 800977c:	e0bffc17 	ldw	r2,-16(fp)
}
 8009780:	e037883a 	mov	sp,fp
 8009784:	df000017 	ldw	fp,0(sp)
 8009788:	dec00104 	addi	sp,sp,4
 800978c:	f800283a 	ret

08009790 <ACK_judge_for_read>:

bool ACK_judge_for_read(alt_32 i2c_base)
{
 8009790:	defffb04 	addi	sp,sp,-20
 8009794:	dfc00415 	stw	ra,16(sp)
 8009798:	df000315 	stw	fp,12(sp)
 800979c:	df000304 	addi	fp,sp,12
 80097a0:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess;
    alt_32 this_data;

   // OS_msleep( SLEEP_TIME );
     usleep(SLEEP_TIME);
 80097a4:	010003c4 	movi	r4,15
 80097a8:	801d36c0 	call	801d36c <usleep>
    //   while(this_data & 0x02)
//   {
//      this_data =  Read32_Data ( hPCIe, i2c_base, 4);
//   }
    bSuccess =  Read32_Data ( i2c_base, 4, &this_data);
 80097ac:	e0bffe04 	addi	r2,fp,-8
 80097b0:	e13fff17 	ldw	r4,-4(fp)
 80097b4:	01400104 	movi	r5,4
 80097b8:	100d883a 	mov	r6,r2
 80097bc:	80097380 	call	8009738 <Read32_Data>
 80097c0:	e0bffd15 	stw	r2,-12(fp)
    if (bSuccess){
 80097c4:	e0bffd17 	ldw	r2,-12(fp)
 80097c8:	10000426 	beq	r2,zero,80097dc <ACK_judge_for_read+0x4c>
        if(this_data & 0x02)
 80097cc:	e0bffe17 	ldw	r2,-8(fp)
 80097d0:	1080008c 	andi	r2,r2,2
 80097d4:	10000126 	beq	r2,zero,80097dc <ACK_judge_for_read+0x4c>
            bSuccess = FALSE;
 80097d8:	e03ffd15 	stw	zero,-12(fp)
    }
   //wait the rx ACK signal 0-valid

    return bSuccess;
 80097dc:	e0bffd17 	ldw	r2,-12(fp)

}
 80097e0:	e037883a 	mov	sp,fp
 80097e4:	dfc00117 	ldw	ra,4(sp)
 80097e8:	df000017 	ldw	fp,0(sp)
 80097ec:	dec00204 	addi	sp,sp,8
 80097f0:	f800283a 	ret

080097f4 <ACK_single_check>:

bool  ACK_single_check(alt_32 i2c_base)
{
 80097f4:	defffb04 	addi	sp,sp,-20
 80097f8:	dfc00415 	stw	ra,16(sp)
 80097fc:	df000315 	stw	fp,12(sp)
 8009800:	df000304 	addi	fp,sp,12
 8009804:	e13fff15 	stw	r4,-4(fp)
	bool bSuccess=TRUE;
 8009808:	00800044 	movi	r2,1
 800980c:	e0bffd15 	stw	r2,-12(fp)
	alt_32 read_data;

    usleep(SLEEP_TIME);
 8009810:	010003c4 	movi	r4,15
 8009814:	801d36c0 	call	801d36c <usleep>
    read_data =IORD(i2c_base, 4);
 8009818:	e0bfff17 	ldw	r2,-4(fp)
 800981c:	10800404 	addi	r2,r2,16
 8009820:	10800037 	ldwio	r2,0(r2)
 8009824:	e0bffe15 	stw	r2,-8(fp)
    if(read_data & 0x02)
 8009828:	e0bffe17 	ldw	r2,-8(fp)
 800982c:	1080008c 	andi	r2,r2,2
 8009830:	10000126 	beq	r2,zero,8009838 <ACK_single_check+0x44>
            bSuccess = FALSE;
 8009834:	e03ffd15 	stw	zero,-12(fp)
     if (bSuccess){
 8009838:	e0bffd17 	ldw	r2,-12(fp)
 800983c:	10000a26 	beq	r2,zero,8009868 <ACK_single_check+0x74>
            usleep(SLEEP_TIME);
 8009840:	010003c4 	movi	r4,15
 8009844:	801d36c0 	call	801d36c <usleep>
            read_data =IORD(i2c_base, 4);
 8009848:	e0bfff17 	ldw	r2,-4(fp)
 800984c:	10800404 	addi	r2,r2,16
 8009850:	10800037 	ldwio	r2,0(r2)
 8009854:	e0bffe15 	stw	r2,-8(fp)
                if(read_data & 0x80)
 8009858:	e0bffe17 	ldw	r2,-8(fp)
 800985c:	1080200c 	andi	r2,r2,128
 8009860:	10000126 	beq	r2,zero,8009868 <ACK_single_check+0x74>
                    bSuccess = FALSE;
 8009864:	e03ffd15 	stw	zero,-12(fp)
     }
    return bSuccess;
 8009868:	e0bffd17 	ldw	r2,-12(fp)
}
 800986c:	e037883a 	mov	sp,fp
 8009870:	dfc00117 	ldw	ra,4(sp)
 8009874:	df000017 	ldw	fp,0(sp)
 8009878:	dec00204 	addi	sp,sp,8
 800987c:	f800283a 	ret

08009880 <ACK_check>:


bool  ACK_check(alt_32 i2c_base){
 8009880:	defffb04 	addi	sp,sp,-20
 8009884:	dfc00415 	stw	ra,16(sp)
 8009888:	df000315 	stw	fp,12(sp)
 800988c:	df000304 	addi	fp,sp,12
 8009890:	e13fff15 	stw	r4,-4(fp)
    bool bSuccess = FALSE;
 8009894:	e03ffd15 	stw	zero,-12(fp)
    int i=0;
 8009898:	e03ffe15 	stw	zero,-8(fp)

    while(!bSuccess && i++ < 10){
 800989c:	00000306 	br	80098ac <ACK_check+0x2c>
        bSuccess = ACK_single_check(i2c_base);
 80098a0:	e13fff17 	ldw	r4,-4(fp)
 80098a4:	80097f40 	call	80097f4 <ACK_single_check>
 80098a8:	e0bffd15 	stw	r2,-12(fp)

bool  ACK_check(alt_32 i2c_base){
    bool bSuccess = FALSE;
    int i=0;

    while(!bSuccess && i++ < 10){
 80098ac:	e0bffd17 	ldw	r2,-12(fp)
 80098b0:	1000051e 	bne	r2,zero,80098c8 <ACK_check+0x48>
 80098b4:	e0bffe17 	ldw	r2,-8(fp)
 80098b8:	10c00044 	addi	r3,r2,1
 80098bc:	e0fffe15 	stw	r3,-8(fp)
 80098c0:	10800290 	cmplti	r2,r2,10
 80098c4:	103ff61e 	bne	r2,zero,80098a0 <__alt_data_end+0xf80098a0>
        bSuccess = ACK_single_check(i2c_base);
    }

    return bSuccess;
 80098c8:	e0bffd17 	ldw	r2,-12(fp)
}
 80098cc:	e037883a 	mov	sp,fp
 80098d0:	dfc00117 	ldw	ra,4(sp)
 80098d4:	df000017 	ldw	fp,0(sp)
 80098d8:	dec00204 	addi	sp,sp,8
 80098dc:	f800283a 	ret

080098e0 <RH_Temp_Sensor_init>:
#include "terasic_includes.h"
#include "I2C.h"


bool RH_Temp_Sensor_init(void)
{
 80098e0:	defffb04 	addi	sp,sp,-20
 80098e4:	dfc00415 	stw	ra,16(sp)
 80098e8:	df000315 	stw	fp,12(sp)
 80098ec:	df000304 	addi	fp,sp,12
	bool bPass;
    alt_u16 data;
	bPass = I2C_Read16(RH_TEMP_I2C_SCL_BASE,RH_TEMP_I2C_SDA_BASE,HDC1000_I2C_ADRESS,R_MANUFACTURER_ID,&data);
 80098f0:	e0bfff04 	addi	r2,fp,-4
 80098f4:	d8800015 	stw	r2,0(sp)
 80098f8:	01040034 	movhi	r4,4096
 80098fc:	21001004 	addi	r4,r4,64
 8009900:	01440034 	movhi	r5,4096
 8009904:	29400c04 	addi	r5,r5,48
 8009908:	01bfe004 	movi	r6,-128
 800990c:	01c03f84 	movi	r7,254
 8009910:	80088f80 	call	80088f8 <I2C_Read16>
 8009914:	e0bffe15 	stw	r2,-8(fp)
    if(bPass){
 8009918:	e0bffe17 	ldw	r2,-8(fp)
 800991c:	10000726 	beq	r2,zero,800993c <RH_Temp_Sensor_init+0x5c>
		printf("Manufacturer ID is %x\r\n",data);// 0x5449 expected
 8009920:	e0bfff0b 	ldhu	r2,-4(fp)
 8009924:	10bfffcc 	andi	r2,r2,65535
 8009928:	010205b4 	movhi	r4,2070
 800992c:	21164304 	addi	r4,r4,22796
 8009930:	100b883a 	mov	r5,r2
 8009934:	800fee00 	call	800fee0 <printf>
 8009938:	00000306 	br	8009948 <RH_Temp_Sensor_init+0x68>
    }else{
	    printf("I2C MultipleRead Failed!\r\n");
 800993c:	010205b4 	movhi	r4,2070
 8009940:	21164904 	addi	r4,r4,22820
 8009944:	800ffc40 	call	800ffc4 <puts>
    }

    bPass = I2C_Read16(RH_TEMP_I2C_SCL_BASE,RH_TEMP_I2C_SDA_BASE,HDC1000_I2C_ADRESS,R_DEVICE_ID,&data);
 8009948:	e0bfff04 	addi	r2,fp,-4
 800994c:	d8800015 	stw	r2,0(sp)
 8009950:	01040034 	movhi	r4,4096
 8009954:	21001004 	addi	r4,r4,64
 8009958:	01440034 	movhi	r5,4096
 800995c:	29400c04 	addi	r5,r5,48
 8009960:	01bfe004 	movi	r6,-128
 8009964:	01c03fc4 	movi	r7,255
 8009968:	80088f80 	call	80088f8 <I2C_Read16>
 800996c:	e0bffe15 	stw	r2,-8(fp)
    if(bPass){
 8009970:	e0bffe17 	ldw	r2,-8(fp)
 8009974:	10000726 	beq	r2,zero,8009994 <RH_Temp_Sensor_init+0xb4>
	    printf("Device ID is %x\r\n",data); // 0x1000 expected
 8009978:	e0bfff0b 	ldhu	r2,-4(fp)
 800997c:	10bfffcc 	andi	r2,r2,65535
 8009980:	010205b4 	movhi	r4,2070
 8009984:	21165004 	addi	r4,r4,22848
 8009988:	100b883a 	mov	r5,r2
 800998c:	800fee00 	call	800fee0 <printf>
 8009990:	00000306 	br	80099a0 <RH_Temp_Sensor_init+0xc0>
    }else{
	    printf("I2C Read16 Failed!\r\n");
 8009994:	010205b4 	movhi	r4,2070
 8009998:	21165504 	addi	r4,r4,22868
 800999c:	800ffc40 	call	800ffc4 <puts>
    }

    bPass =  Read_Configuration();
 80099a0:	8009be40 	call	8009be4 <Read_Configuration>
 80099a4:	e0bffe15 	stw	r2,-8(fp)
    if(!bPass){
 80099a8:	e0bffe17 	ldw	r2,-8(fp)
 80099ac:	1000031e 	bne	r2,zero,80099bc <RH_Temp_Sensor_init+0xdc>
		printf("I2C Read_Configuration Failed!\r\n");
 80099b0:	010205b4 	movhi	r4,2070
 80099b4:	21165a04 	addi	r4,r4,22888
 80099b8:	800ffc40 	call	800ffc4 <puts>
	}
	
	bPass =  Write_Configuration(1,0,0);
 80099bc:	01000044 	movi	r4,1
 80099c0:	000b883a 	mov	r5,zero
 80099c4:	000d883a 	mov	r6,zero
 80099c8:	8009d1c0 	call	8009d1c <Write_Configuration>
 80099cc:	e0bffe15 	stw	r2,-8(fp)
    if(!bPass){
 80099d0:	e0bffe17 	ldw	r2,-8(fp)
 80099d4:	1000031e 	bne	r2,zero,80099e4 <RH_Temp_Sensor_init+0x104>
		printf("[Note] Set Configuration Failed!\r\n");
 80099d8:	010205b4 	movhi	r4,2070
 80099dc:	21166204 	addi	r4,r4,22920
 80099e0:	800ffc40 	call	800ffc4 <puts>
	}	
	
	return bPass;
 80099e4:	e0bffe17 	ldw	r2,-8(fp)
	
}
 80099e8:	e037883a 	mov	sp,fp
 80099ec:	dfc00117 	ldw	ra,4(sp)
 80099f0:	df000017 	ldw	fp,0(sp)
 80099f4:	dec00204 	addi	sp,sp,8
 80099f8:	f800283a 	ret

080099fc <sensor_getdata>:



bool sensor_getdata()
{
 80099fc:	defff904 	addi	sp,sp,-28
 8009a00:	dfc00615 	stw	ra,24(sp)
 8009a04:	df000515 	stw	fp,20(sp)
 8009a08:	df000504 	addi	fp,sp,20
	bool    bPass;
	alt_u8  rh_temp[4];
	alt_u16 data;
	bPass =  I2C_MultipleRead(RH_TEMP_I2C_SCL_BASE,RH_TEMP_I2C_SDA_BASE,HDC1000_I2C_ADRESS,R_TEMPERATURE,rh_temp,4);
 8009a0c:	e0bffe84 	addi	r2,fp,-6
 8009a10:	d8800015 	stw	r2,0(sp)
 8009a14:	00800104 	movi	r2,4
 8009a18:	d8800115 	stw	r2,4(sp)
 8009a1c:	01040034 	movhi	r4,4096
 8009a20:	21001004 	addi	r4,r4,64
 8009a24:	01440034 	movhi	r5,4096
 8009a28:	29400c04 	addi	r5,r5,48
 8009a2c:	01bfe004 	movi	r6,-128
 8009a30:	000f883a 	mov	r7,zero
 8009a34:	8008a540 	call	8008a54 <I2C_MultipleRead>
 8009a38:	e0bffd15 	stw	r2,-12(fp)
    if(bPass){
 8009a3c:	e0bffd17 	ldw	r2,-12(fp)
 8009a40:	10005f26 	beq	r2,zero,8009bc0 <sensor_getdata+0x1c4>
		data = (rh_temp[0] << 8) | rh_temp[1] ;
 8009a44:	e0bffe83 	ldbu	r2,-6(fp)
 8009a48:	10803fcc 	andi	r2,r2,255
 8009a4c:	1004923a 	slli	r2,r2,8
 8009a50:	1007883a 	mov	r3,r2
 8009a54:	e0bffec3 	ldbu	r2,-5(fp)
 8009a58:	10803fcc 	andi	r2,r2,255
 8009a5c:	1884b03a 	or	r2,r3,r2
 8009a60:	e0bffe0d 	sth	r2,-8(fp)
		data = (rh_temp[0] << 8) | rh_temp[1] ;
 8009a64:	e0bffe83 	ldbu	r2,-6(fp)
 8009a68:	10803fcc 	andi	r2,r2,255
 8009a6c:	1004923a 	slli	r2,r2,8
 8009a70:	1007883a 	mov	r3,r2
 8009a74:	e0bffec3 	ldbu	r2,-5(fp)
 8009a78:	10803fcc 	andi	r2,r2,255
 8009a7c:	1884b03a 	or	r2,r3,r2
 8009a80:	e0bffe0d 	sth	r2,-8(fp)
		temp = (double)data/397.188 -40.0;
 8009a84:	e0bffe0b 	ldhu	r2,-8(fp)
 8009a88:	1009883a 	mov	r4,r2
 8009a8c:	800ef080 	call	800ef08 <__floatunsidf>
 8009a90:	100b883a 	mov	r5,r2
 8009a94:	180d883a 	mov	r6,r3
 8009a98:	2809883a 	mov	r4,r5
 8009a9c:	300b883a 	mov	r5,r6
 8009aa0:	018312b4 	movhi	r6,3146
 8009aa4:	31ae9784 	addi	r6,r6,-17826
 8009aa8:	01d01e74 	movhi	r7,16505
 8009aac:	39f4c084 	addi	r7,r7,-11518
 8009ab0:	800d2ac0 	call	800d2ac <__divdf3>
 8009ab4:	1009883a 	mov	r4,r2
 8009ab8:	180b883a 	mov	r5,r3
 8009abc:	2005883a 	mov	r2,r4
 8009ac0:	2807883a 	mov	r3,r5
 8009ac4:	1009883a 	mov	r4,r2
 8009ac8:	180b883a 	mov	r5,r3
 8009acc:	000d883a 	mov	r6,zero
 8009ad0:	01d01134 	movhi	r7,16452
 8009ad4:	800e4e00 	call	800e4e0 <__subdf3>
 8009ad8:	1009883a 	mov	r4,r2
 8009adc:	180b883a 	mov	r5,r3
 8009ae0:	2005883a 	mov	r2,r4
 8009ae4:	2807883a 	mov	r3,r5
 8009ae8:	d0ab1d15 	stw	r2,-21388(gp)
 8009aec:	d12b1e04 	addi	r4,gp,-21384
 8009af0:	20c00015 	stw	r3,0(r4)
		//  data/2^16 * 165 - 40
    	printf("[Together] Temperature: %.2f*C \n",temp);
 8009af4:	d0ab1d17 	ldw	r2,-21388(gp)
 8009af8:	d12b1e04 	addi	r4,gp,-21384
 8009afc:	20c00017 	ldw	r3,0(r4)
 8009b00:	010205b4 	movhi	r4,2070
 8009b04:	21166b04 	addi	r4,r4,22956
 8009b08:	100b883a 	mov	r5,r2
 8009b0c:	180d883a 	mov	r6,r3
 8009b10:	800fee00 	call	800fee0 <printf>

		data = (rh_temp[2] << 8) | rh_temp[3] ;
 8009b14:	e0bfff03 	ldbu	r2,-4(fp)
 8009b18:	10803fcc 	andi	r2,r2,255
 8009b1c:	1004923a 	slli	r2,r2,8
 8009b20:	1007883a 	mov	r3,r2
 8009b24:	e0bfff43 	ldbu	r2,-3(fp)
 8009b28:	10803fcc 	andi	r2,r2,255
 8009b2c:	1884b03a 	or	r2,r3,r2
 8009b30:	e0bffe0d 	sth	r2,-8(fp)
    	rh = (double)((double)data/65536)*100;
 8009b34:	e0bffe0b 	ldhu	r2,-8(fp)
 8009b38:	1009883a 	mov	r4,r2
 8009b3c:	800ef080 	call	800ef08 <__floatunsidf>
 8009b40:	100b883a 	mov	r5,r2
 8009b44:	180d883a 	mov	r6,r3
 8009b48:	2809883a 	mov	r4,r5
 8009b4c:	300b883a 	mov	r5,r6
 8009b50:	000d883a 	mov	r6,zero
 8009b54:	01d03c34 	movhi	r7,16624
 8009b58:	800d2ac0 	call	800d2ac <__divdf3>
 8009b5c:	1009883a 	mov	r4,r2
 8009b60:	180b883a 	mov	r5,r3
 8009b64:	2005883a 	mov	r2,r4
 8009b68:	2807883a 	mov	r3,r5
 8009b6c:	1009883a 	mov	r4,r2
 8009b70:	180b883a 	mov	r5,r3
 8009b74:	000d883a 	mov	r6,zero
 8009b78:	01d01674 	movhi	r7,16473
 8009b7c:	800ddbc0 	call	800ddbc <__muldf3>
 8009b80:	1009883a 	mov	r4,r2
 8009b84:	180b883a 	mov	r5,r3
 8009b88:	2005883a 	mov	r2,r4
 8009b8c:	2807883a 	mov	r3,r5
 8009b90:	d0ab1f15 	stw	r2,-21380(gp)
 8009b94:	d12b2004 	addi	r4,gp,-21376
 8009b98:	20c00015 	stw	r3,0(r4)
    	//  data/2^16 * 165 - 40
    	printf("[Together] Relative Humidity: %.2f%% \n",rh);
 8009b9c:	d0ab1f17 	ldw	r2,-21380(gp)
 8009ba0:	d12b2004 	addi	r4,gp,-21376
 8009ba4:	20c00017 	ldw	r3,0(r4)
 8009ba8:	010205b4 	movhi	r4,2070
 8009bac:	21167404 	addi	r4,r4,22992
 8009bb0:	100b883a 	mov	r5,r2
 8009bb4:	180d883a 	mov	r6,r3
 8009bb8:	800fee00 	call	800fee0 <printf>
 8009bbc:	00000306 	br	8009bcc <sensor_getdata+0x1d0>

    }else{
		printf("[Together] Read Temperature and Relative Humidity failed! \n");
 8009bc0:	010205b4 	movhi	r4,2070
 8009bc4:	21167e04 	addi	r4,r4,23032
 8009bc8:	800ffc40 	call	800ffc4 <puts>
    	   }
	return bPass;	   
 8009bcc:	e0bffd17 	ldw	r2,-12(fp)
}
 8009bd0:	e037883a 	mov	sp,fp
 8009bd4:	dfc00117 	ldw	ra,4(sp)
 8009bd8:	df000017 	ldw	fp,0(sp)
 8009bdc:	dec00204 	addi	sp,sp,8
 8009be0:	f800283a 	ret

08009be4 <Read_Configuration>:

bool Read_Configuration(void)
{
 8009be4:	defffb04 	addi	sp,sp,-20
 8009be8:	dfc00415 	stw	ra,16(sp)
 8009bec:	df000315 	stw	fp,12(sp)
 8009bf0:	df000304 	addi	fp,sp,12
	bool bPass;
	alt_u16 data;

	bPass = I2C_Read16(RH_TEMP_I2C_SCL_BASE,RH_TEMP_I2C_SDA_BASE,HDC1000_I2C_ADRESS,R_CONFIGURATION,&data);
 8009bf4:	e0bfff04 	addi	r2,fp,-4
 8009bf8:	d8800015 	stw	r2,0(sp)
 8009bfc:	01040034 	movhi	r4,4096
 8009c00:	21001004 	addi	r4,r4,64
 8009c04:	01440034 	movhi	r5,4096
 8009c08:	29400c04 	addi	r5,r5,48
 8009c0c:	01bfe004 	movi	r6,-128
 8009c10:	01c00084 	movi	r7,2
 8009c14:	80088f80 	call	80088f8 <I2C_Read16>
 8009c18:	e0bffe15 	stw	r2,-8(fp)

	if(bPass){
 8009c1c:	e0bffe17 	ldw	r2,-8(fp)
 8009c20:	10003826 	beq	r2,zero,8009d04 <Read_Configuration+0x120>

		printf("Read Configuration Data = 0x%x \r\n",data);
 8009c24:	e0bfff0b 	ldhu	r2,-4(fp)
 8009c28:	10bfffcc 	andi	r2,r2,65535
 8009c2c:	010205b4 	movhi	r4,2070
 8009c30:	21168d04 	addi	r4,r4,23092
 8009c34:	100b883a 	mov	r5,r2
 8009c38:	800fee00 	call	800fee0 <printf>

		if(((data>>12)&0x0001) == 0) printf("Acquisition mode:Temperature or Humidity is acquired.\r\n ");
 8009c3c:	e0bfff0b 	ldhu	r2,-4(fp)
 8009c40:	10bfffcc 	andi	r2,r2,65535
 8009c44:	1004d33a 	srli	r2,r2,12
 8009c48:	10bfffcc 	andi	r2,r2,65535
 8009c4c:	1080004c 	andi	r2,r2,1
 8009c50:	1000041e 	bne	r2,zero,8009c64 <Read_Configuration+0x80>
 8009c54:	010205b4 	movhi	r4,2070
 8009c58:	21169604 	addi	r4,r4,23128
 8009c5c:	800fee00 	call	800fee0 <printf>
 8009c60:	00000306 	br	8009c70 <Read_Configuration+0x8c>
		else printf("Acquisition mode:Temperature and Humidity are acquired in sequence,Temperature first.\r\n ");
 8009c64:	010205b4 	movhi	r4,2070
 8009c68:	2116a504 	addi	r4,r4,23188
 8009c6c:	800fee00 	call	800fee0 <printf>

		if(((data>>10)&0x0001) == 0) printf("Temperature Measurement Resolution: 14 bit.\r\n ");
 8009c70:	e0bfff0b 	ldhu	r2,-4(fp)
 8009c74:	10bfffcc 	andi	r2,r2,65535
 8009c78:	1004d2ba 	srli	r2,r2,10
 8009c7c:	10bfffcc 	andi	r2,r2,65535
 8009c80:	1080004c 	andi	r2,r2,1
 8009c84:	1000041e 	bne	r2,zero,8009c98 <Read_Configuration+0xb4>
 8009c88:	010205b4 	movhi	r4,2070
 8009c8c:	2116bc04 	addi	r4,r4,23280
 8009c90:	800fee00 	call	800fee0 <printf>
 8009c94:	00000306 	br	8009ca4 <Read_Configuration+0xc0>
		else  printf("Temperature Measurement Resolution: 11 bit.\r\n ");
 8009c98:	010205b4 	movhi	r4,2070
 8009c9c:	2116c804 	addi	r4,r4,23328
 8009ca0:	800fee00 	call	800fee0 <printf>

		if(((data>> 8)&0x0003) == 0) printf("Humidity Measurement Resolution: 14 bit.\r\n ");
 8009ca4:	e0bfff0b 	ldhu	r2,-4(fp)
 8009ca8:	10bfffcc 	andi	r2,r2,65535
 8009cac:	1004d23a 	srli	r2,r2,8
 8009cb0:	10bfffcc 	andi	r2,r2,65535
 8009cb4:	108000cc 	andi	r2,r2,3
 8009cb8:	1000041e 	bne	r2,zero,8009ccc <Read_Configuration+0xe8>
 8009cbc:	010205b4 	movhi	r4,2070
 8009cc0:	2116d404 	addi	r4,r4,23376
 8009cc4:	800fee00 	call	800fee0 <printf>
 8009cc8:	00000e06 	br	8009d04 <Read_Configuration+0x120>
		else if(((data>> 8)&0x0003) == 1) printf("Humidity Measurement Resolution: 11 bit.\r\n ");
 8009ccc:	e0bfff0b 	ldhu	r2,-4(fp)
 8009cd0:	10bfffcc 	andi	r2,r2,65535
 8009cd4:	1004d23a 	srli	r2,r2,8
 8009cd8:	10bfffcc 	andi	r2,r2,65535
 8009cdc:	108000cc 	andi	r2,r2,3
 8009ce0:	10800058 	cmpnei	r2,r2,1
 8009ce4:	1000041e 	bne	r2,zero,8009cf8 <Read_Configuration+0x114>
 8009ce8:	010205b4 	movhi	r4,2070
 8009cec:	2116df04 	addi	r4,r4,23420
 8009cf0:	800fee00 	call	800fee0 <printf>
 8009cf4:	00000306 	br	8009d04 <Read_Configuration+0x120>
		else  printf("Humidity Measurement Resolution: 8 bit.\r\n ");
 8009cf8:	010205b4 	movhi	r4,2070
 8009cfc:	2116ea04 	addi	r4,r4,23464
 8009d00:	800fee00 	call	800fee0 <printf>

	}

	return bPass;
 8009d04:	e0bffe17 	ldw	r2,-8(fp)
}
 8009d08:	e037883a 	mov	sp,fp
 8009d0c:	dfc00117 	ldw	ra,4(sp)
 8009d10:	df000017 	ldw	fp,0(sp)
 8009d14:	dec00204 	addi	sp,sp,8
 8009d18:	f800283a 	ret

08009d1c <Write_Configuration>:



bool Write_Configuration(alt_u8 acquisition_mode , alt_u8 temp_resolution,alt_u8 humidity_resolution)
{
 8009d1c:	defff804 	addi	sp,sp,-32
 8009d20:	dfc00715 	stw	ra,28(sp)
 8009d24:	df000615 	stw	fp,24(sp)
 8009d28:	df000604 	addi	fp,sp,24
 8009d2c:	2807883a 	mov	r3,r5
 8009d30:	3005883a 	mov	r2,r6
 8009d34:	e13ffd05 	stb	r4,-12(fp)
 8009d38:	e0fffe05 	stb	r3,-8(fp)
 8009d3c:	e0bfff05 	stb	r2,-4(fp)
	bool bPass;
	alt_u16 data;

	data = ((acquisition_mode&0x0001) <<12) + ((temp_resolution&0x0001)<<10) + ((humidity_resolution&0x0003)<<8);
 8009d40:	e0bffd03 	ldbu	r2,-12(fp)
 8009d44:	1080004c 	andi	r2,r2,1
 8009d48:	1004933a 	slli	r2,r2,12
 8009d4c:	1007883a 	mov	r3,r2
 8009d50:	e0bffe03 	ldbu	r2,-8(fp)
 8009d54:	1080004c 	andi	r2,r2,1
 8009d58:	100492ba 	slli	r2,r2,10
 8009d5c:	1885883a 	add	r2,r3,r2
 8009d60:	1007883a 	mov	r3,r2
 8009d64:	e0bfff03 	ldbu	r2,-4(fp)
 8009d68:	108000cc 	andi	r2,r2,3
 8009d6c:	1004923a 	slli	r2,r2,8
 8009d70:	1885883a 	add	r2,r3,r2
 8009d74:	e0bffb0d 	sth	r2,-20(fp)

//	printf("Write Configuration Data = 0x%x \r\n",data);

	bPass = I2C_Write16(RH_TEMP_I2C_SCL_BASE,RH_TEMP_I2C_SDA_BASE,HDC1000_I2C_ADRESS,R_CONFIGURATION,data);
 8009d78:	e0bffb0b 	ldhu	r2,-20(fp)
 8009d7c:	d8800015 	stw	r2,0(sp)
 8009d80:	01040034 	movhi	r4,4096
 8009d84:	21001004 	addi	r4,r4,64
 8009d88:	01440034 	movhi	r5,4096
 8009d8c:	29400c04 	addi	r5,r5,48
 8009d90:	01bfe004 	movi	r6,-128
 8009d94:	01c00084 	movi	r7,2
 8009d98:	80086e80 	call	80086e8 <I2C_Write16>
 8009d9c:	e0bffc15 	stw	r2,-16(fp)

	return bPass;
 8009da0:	e0bffc17 	ldw	r2,-16(fp)
}
 8009da4:	e037883a 	mov	sp,fp
 8009da8:	dfc00117 	ldw	ra,4(sp)
 8009dac:	df000017 	ldw	fp,0(sp)
 8009db0:	dec00204 	addi	sp,sp,8
 8009db4:	f800283a 	ret

08009db8 <mtc2_QueryData>:

#define TRUE 1

#define LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID 0

static void mtc2_QueryData(MTC2_INFO *p){
 8009db8:	deffe804 	addi	sp,sp,-96
 8009dbc:	dfc01715 	stw	ra,92(sp)
 8009dc0:	df001615 	stw	fp,88(sp)
 8009dc4:	df001604 	addi	fp,sp,88
 8009dc8:	e13fff15 	stw	r4,-4(fp)
    MTC2_EVENT *pEvent, *pOldEvent;
    unsigned char reg_data[31];
    unsigned long x1,y1,x2,y2,x3,y3,x4,y4,x5,y5;
    if(OC_I2C_Read(p->TOUCH_I2C_BASE,I2C_FT5316_ADDR,0x00,reg_data,31))
 8009dcc:	e0bfff17 	ldw	r2,-4(fp)
 8009dd0:	10800017 	ldw	r2,0(r2)
 8009dd4:	1009883a 	mov	r4,r2
 8009dd8:	e0fff704 	addi	r3,fp,-36
 8009ddc:	008007c4 	movi	r2,31
 8009de0:	d8800015 	stw	r2,0(sp)
 8009de4:	01401c04 	movi	r5,112
 8009de8:	000d883a 	mov	r6,zero
 8009dec:	180f883a 	mov	r7,r3
 8009df0:	800956c0 	call	800956c <OC_I2C_Read>
 8009df4:	10009f26 	beq	r2,zero,800a074 <mtc2_QueryData+0x2bc>
        {
 //   			if(reg_data[1]>0)
//    				printf("reg_data[1]=%x\n",reg_data[1]);
    			 pEvent = (MTC2_EVENT *)malloc(sizeof(MTC2_EVENT));
 8009df8:	01000584 	movi	r4,22
 8009dfc:	800f4880 	call	800f488 <malloc>
 8009e00:	e0bfeb15 	stw	r2,-84(fp)
    			 pEvent->Event=reg_data[1];
 8009e04:	e0fff743 	ldbu	r3,-35(fp)
 8009e08:	e0bfeb17 	ldw	r2,-84(fp)
 8009e0c:	10c00005 	stb	r3,0(r2)
        		 pEvent->TouchNum = reg_data[2];
 8009e10:	e0fff783 	ldbu	r3,-34(fp)
 8009e14:	e0bfeb17 	ldw	r2,-84(fp)
 8009e18:	10c00045 	stb	r3,1(r2)
        		 x1 = ((reg_data[3]&0x0f)<<8)|reg_data[4];
 8009e1c:	e0bff7c3 	ldbu	r2,-33(fp)
 8009e20:	10803fcc 	andi	r2,r2,255
 8009e24:	108003cc 	andi	r2,r2,15
 8009e28:	1006923a 	slli	r3,r2,8
 8009e2c:	e0bff803 	ldbu	r2,-32(fp)
 8009e30:	10803fcc 	andi	r2,r2,255
 8009e34:	1884b03a 	or	r2,r3,r2
 8009e38:	e0bfec15 	stw	r2,-80(fp)
        		 y1 = ((reg_data[5]&0x0f)<<8)|reg_data[6];
 8009e3c:	e0bff843 	ldbu	r2,-31(fp)
 8009e40:	10803fcc 	andi	r2,r2,255
 8009e44:	108003cc 	andi	r2,r2,15
 8009e48:	1006923a 	slli	r3,r2,8
 8009e4c:	e0bff883 	ldbu	r2,-30(fp)
 8009e50:	10803fcc 	andi	r2,r2,255
 8009e54:	1884b03a 	or	r2,r3,r2
 8009e58:	e0bfed15 	stw	r2,-76(fp)
        		 x2 = ((reg_data[9]&0x0f)<<8)|reg_data[10];
 8009e5c:	e0bff943 	ldbu	r2,-27(fp)
 8009e60:	10803fcc 	andi	r2,r2,255
 8009e64:	108003cc 	andi	r2,r2,15
 8009e68:	1006923a 	slli	r3,r2,8
 8009e6c:	e0bff983 	ldbu	r2,-26(fp)
 8009e70:	10803fcc 	andi	r2,r2,255
 8009e74:	1884b03a 	or	r2,r3,r2
 8009e78:	e0bfee15 	stw	r2,-72(fp)
        		 y2 = ((reg_data[11]&0x0f)<<8)|reg_data[12];
 8009e7c:	e0bff9c3 	ldbu	r2,-25(fp)
 8009e80:	10803fcc 	andi	r2,r2,255
 8009e84:	108003cc 	andi	r2,r2,15
 8009e88:	1006923a 	slli	r3,r2,8
 8009e8c:	e0bffa03 	ldbu	r2,-24(fp)
 8009e90:	10803fcc 	andi	r2,r2,255
 8009e94:	1884b03a 	or	r2,r3,r2
 8009e98:	e0bfef15 	stw	r2,-68(fp)

        		 x3 = ((reg_data[15]&0x0f)<<8)|reg_data[16];
 8009e9c:	e0bffac3 	ldbu	r2,-21(fp)
 8009ea0:	10803fcc 	andi	r2,r2,255
 8009ea4:	108003cc 	andi	r2,r2,15
 8009ea8:	1006923a 	slli	r3,r2,8
 8009eac:	e0bffb03 	ldbu	r2,-20(fp)
 8009eb0:	10803fcc 	andi	r2,r2,255
 8009eb4:	1884b03a 	or	r2,r3,r2
 8009eb8:	e0bff015 	stw	r2,-64(fp)
				 y3 = ((reg_data[17]&0x0f)<<8)|reg_data[18];
 8009ebc:	e0bffb43 	ldbu	r2,-19(fp)
 8009ec0:	10803fcc 	andi	r2,r2,255
 8009ec4:	108003cc 	andi	r2,r2,15
 8009ec8:	1006923a 	slli	r3,r2,8
 8009ecc:	e0bffb83 	ldbu	r2,-18(fp)
 8009ed0:	10803fcc 	andi	r2,r2,255
 8009ed4:	1884b03a 	or	r2,r3,r2
 8009ed8:	e0bff115 	stw	r2,-60(fp)

				 x4 = ((reg_data[21]&0x0f)<<8)|reg_data[22];
 8009edc:	e0bffc43 	ldbu	r2,-15(fp)
 8009ee0:	10803fcc 	andi	r2,r2,255
 8009ee4:	108003cc 	andi	r2,r2,15
 8009ee8:	1006923a 	slli	r3,r2,8
 8009eec:	e0bffc83 	ldbu	r2,-14(fp)
 8009ef0:	10803fcc 	andi	r2,r2,255
 8009ef4:	1884b03a 	or	r2,r3,r2
 8009ef8:	e0bff215 	stw	r2,-56(fp)
				 y4 = ((reg_data[23]&0x0f)<<8)|reg_data[24];
 8009efc:	e0bffcc3 	ldbu	r2,-13(fp)
 8009f00:	10803fcc 	andi	r2,r2,255
 8009f04:	108003cc 	andi	r2,r2,15
 8009f08:	1006923a 	slli	r3,r2,8
 8009f0c:	e0bffd03 	ldbu	r2,-12(fp)
 8009f10:	10803fcc 	andi	r2,r2,255
 8009f14:	1884b03a 	or	r2,r3,r2
 8009f18:	e0bff315 	stw	r2,-52(fp)

				 x5 = ((reg_data[27]&0x0f)<<8)|reg_data[28];
 8009f1c:	e0bffdc3 	ldbu	r2,-9(fp)
 8009f20:	10803fcc 	andi	r2,r2,255
 8009f24:	108003cc 	andi	r2,r2,15
 8009f28:	1006923a 	slli	r3,r2,8
 8009f2c:	e0bffe03 	ldbu	r2,-8(fp)
 8009f30:	10803fcc 	andi	r2,r2,255
 8009f34:	1884b03a 	or	r2,r3,r2
 8009f38:	e0bff415 	stw	r2,-48(fp)
				 y5 = ((reg_data[29]&0x0f)<<8)|reg_data[30];
 8009f3c:	e0bffe43 	ldbu	r2,-7(fp)
 8009f40:	10803fcc 	andi	r2,r2,255
 8009f44:	108003cc 	andi	r2,r2,15
 8009f48:	1006923a 	slli	r3,r2,8
 8009f4c:	e0bffe83 	ldbu	r2,-6(fp)
 8009f50:	10803fcc 	andi	r2,r2,255
 8009f54:	1884b03a 	or	r2,r3,r2
 8009f58:	e0bff515 	stw	r2,-44(fp)
				 //the register value (1024,600)
				 //change the value to (800,480)
        		 pEvent->x1=(x1*800)>>10;
 8009f5c:	e0bfec17 	ldw	r2,-80(fp)
 8009f60:	1080c824 	muli	r2,r2,800
 8009f64:	1004d2ba 	srli	r2,r2,10
 8009f68:	1007883a 	mov	r3,r2
 8009f6c:	e0bfeb17 	ldw	r2,-84(fp)
 8009f70:	10c0008d 	sth	r3,2(r2)
        		 pEvent->y1=(y1/10)<<3;
 8009f74:	e0bfed17 	ldw	r2,-76(fp)
 8009f78:	1009883a 	mov	r4,r2
 8009f7c:	01400284 	movi	r5,10
 8009f80:	800ca000 	call	800ca00 <__udivsi3>
 8009f84:	100490fa 	slli	r2,r2,3
 8009f88:	1007883a 	mov	r3,r2
 8009f8c:	e0bfeb17 	ldw	r2,-84(fp)
 8009f90:	10c0010d 	sth	r3,4(r2)
        		 pEvent->x2=(x2*800)>>10;
 8009f94:	e0bfee17 	ldw	r2,-72(fp)
 8009f98:	1080c824 	muli	r2,r2,800
 8009f9c:	1004d2ba 	srli	r2,r2,10
 8009fa0:	1007883a 	mov	r3,r2
 8009fa4:	e0bfeb17 	ldw	r2,-84(fp)
 8009fa8:	10c0018d 	sth	r3,6(r2)
        		 pEvent->y2=(y2/10)<<3;
 8009fac:	e0bfef17 	ldw	r2,-68(fp)
 8009fb0:	1009883a 	mov	r4,r2
 8009fb4:	01400284 	movi	r5,10
 8009fb8:	800ca000 	call	800ca00 <__udivsi3>
 8009fbc:	100490fa 	slli	r2,r2,3
 8009fc0:	1007883a 	mov	r3,r2
 8009fc4:	e0bfeb17 	ldw	r2,-84(fp)
 8009fc8:	10c0020d 	sth	r3,8(r2)
        		 pEvent->x3=(x3*800)>>10;
 8009fcc:	e0bff017 	ldw	r2,-64(fp)
 8009fd0:	1080c824 	muli	r2,r2,800
 8009fd4:	1004d2ba 	srli	r2,r2,10
 8009fd8:	1007883a 	mov	r3,r2
 8009fdc:	e0bfeb17 	ldw	r2,-84(fp)
 8009fe0:	10c0028d 	sth	r3,10(r2)
				 pEvent->y3=(y3/10)<<3;
 8009fe4:	e0bff117 	ldw	r2,-60(fp)
 8009fe8:	1009883a 	mov	r4,r2
 8009fec:	01400284 	movi	r5,10
 8009ff0:	800ca000 	call	800ca00 <__udivsi3>
 8009ff4:	100490fa 	slli	r2,r2,3
 8009ff8:	1007883a 	mov	r3,r2
 8009ffc:	e0bfeb17 	ldw	r2,-84(fp)
 800a000:	10c0030d 	sth	r3,12(r2)
				 pEvent->x4=(x4*800)>>10;
 800a004:	e0bff217 	ldw	r2,-56(fp)
 800a008:	1080c824 	muli	r2,r2,800
 800a00c:	1004d2ba 	srli	r2,r2,10
 800a010:	1007883a 	mov	r3,r2
 800a014:	e0bfeb17 	ldw	r2,-84(fp)
 800a018:	10c0038d 	sth	r3,14(r2)
				 pEvent->y4=(y4/10)<<3;
 800a01c:	e0bff317 	ldw	r2,-52(fp)
 800a020:	1009883a 	mov	r4,r2
 800a024:	01400284 	movi	r5,10
 800a028:	800ca000 	call	800ca00 <__udivsi3>
 800a02c:	100490fa 	slli	r2,r2,3
 800a030:	1007883a 	mov	r3,r2
 800a034:	e0bfeb17 	ldw	r2,-84(fp)
 800a038:	10c0040d 	sth	r3,16(r2)
				 pEvent->x5=(x5*800)>>10;
 800a03c:	e0bff417 	ldw	r2,-48(fp)
 800a040:	1080c824 	muli	r2,r2,800
 800a044:	1004d2ba 	srli	r2,r2,10
 800a048:	1007883a 	mov	r3,r2
 800a04c:	e0bfeb17 	ldw	r2,-84(fp)
 800a050:	10c0048d 	sth	r3,18(r2)
				 pEvent->y5=(y5/10)<<3;
 800a054:	e0bff517 	ldw	r2,-44(fp)
 800a058:	1009883a 	mov	r4,r2
 800a05c:	01400284 	movi	r5,10
 800a060:	800ca000 	call	800ca00 <__udivsi3>
 800a064:	100490fa 	slli	r2,r2,3
 800a068:	1007883a 	mov	r3,r2
 800a06c:	e0bfeb17 	ldw	r2,-84(fp)
 800a070:	10c0050d 	sth	r3,20(r2)

        }
    if((pEvent->TouchNum>0)&&(pEvent->TouchNum<=5))
 800a074:	e0bfeb17 	ldw	r2,-84(fp)
 800a078:	10800043 	ldbu	r2,1(r2)
 800a07c:	10803fcc 	andi	r2,r2,255
 800a080:	10001826 	beq	r2,zero,800a0e4 <mtc2_QueryData+0x32c>
 800a084:	e0bfeb17 	ldw	r2,-84(fp)
 800a088:	10800043 	ldbu	r2,1(r2)
 800a08c:	10803fcc 	andi	r2,r2,255
 800a090:	108001a8 	cmpgeui	r2,r2,6
 800a094:	1000131e 	bne	r2,zero,800a0e4 <mtc2_QueryData+0x32c>
    {
		if (QUEUE_IsFull(p->pQueue)){
 800a098:	e0bfff17 	ldw	r2,-4(fp)
 800a09c:	10800317 	ldw	r2,12(r2)
 800a0a0:	1009883a 	mov	r4,r2
 800a0a4:	800a5300 	call	800a530 <QUEUE_IsFull>
 800a0a8:	10000726 	beq	r2,zero,800a0c8 <mtc2_QueryData+0x310>
					  // remove the old one
		  pOldEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 800a0ac:	e0bfff17 	ldw	r2,-4(fp)
 800a0b0:	10800317 	ldw	r2,12(r2)
 800a0b4:	1009883a 	mov	r4,r2
 800a0b8:	800a6280 	call	800a628 <QUEUE_Pop>
 800a0bc:	e0bff615 	stw	r2,-40(fp)
		  free(pOldEvent);
 800a0c0:	e13ff617 	ldw	r4,-40(fp)
 800a0c4:	800f49c0 	call	800f49c <free>
		 }
		 QUEUE_Push(p->pQueue, (alt_u32)pEvent);
 800a0c8:	e0bfff17 	ldw	r2,-4(fp)
 800a0cc:	10c00317 	ldw	r3,12(r2)
 800a0d0:	e0bfeb17 	ldw	r2,-84(fp)
 800a0d4:	1809883a 	mov	r4,r3
 800a0d8:	100b883a 	mov	r5,r2
 800a0dc:	800a5940 	call	800a594 <QUEUE_Push>
 800a0e0:	00000206 	br	800a0ec <mtc2_QueryData+0x334>
    }
    else
    	free(pEvent);
 800a0e4:	e13feb17 	ldw	r4,-84(fp)
 800a0e8:	800f49c0 	call	800f49c <free>
}
 800a0ec:	e037883a 	mov	sp,fp
 800a0f0:	dfc00117 	ldw	ra,4(sp)
 800a0f4:	df000017 	ldw	fp,0(sp)
 800a0f8:	dec00204 	addi	sp,sp,8
 800a0fc:	f800283a 	ret

0800a100 <mtc2_ISR>:


#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void mtc2_ISR(void* context){
 800a100:	defffc04 	addi	sp,sp,-16
 800a104:	dfc00315 	stw	ra,12(sp)
 800a108:	df000215 	stw	fp,8(sp)
 800a10c:	df000204 	addi	fp,sp,8
 800a110:	e13fff15 	stw	r4,-4(fp)
#else
static void mtc2_ISR(void* context, alt_u32 id){
#endif
   MTC2_INFO *p = (MTC2_INFO *)context;
 800a114:	e0bfff17 	ldw	r2,-4(fp)
 800a118:	e0bffe15 	stw	r2,-8(fp)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_disable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
 800a11c:	e0bffe17 	ldw	r2,-8(fp)
 800a120:	10800217 	ldw	r2,8(r2)
 800a124:	0009883a 	mov	r4,zero
 800a128:	100b883a 	mov	r5,r2
 800a12c:	801c9240 	call	801c924 <alt_ic_irq_disable>
#else
    alt_irq_disable(id);
#endif
    mtc2_QueryData(p);
 800a130:	e13ffe17 	ldw	r4,-8(fp)
 800a134:	8009db80 	call	8009db8 <mtc2_QueryData>

    // Reset the edge capture register
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE,0);
 800a138:	e0bffe17 	ldw	r2,-8(fp)
 800a13c:	10800117 	ldw	r2,4(r2)
 800a140:	10800304 	addi	r2,r2,12
 800a144:	0007883a 	mov	r3,zero
 800a148:	10c00035 	stwio	r3,0(r2)
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_irq_enable(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,p->INT_IRQ_NUM);
 800a14c:	e0bffe17 	ldw	r2,-8(fp)
 800a150:	10800217 	ldw	r2,8(r2)
 800a154:	0009883a 	mov	r4,zero
 800a158:	100b883a 	mov	r5,r2
 800a15c:	801c8840 	call	801c884 <alt_ic_irq_enable>
#else
    alt_irq_enable(id);
#endif
 }
 800a160:	e037883a 	mov	sp,fp
 800a164:	dfc00117 	ldw	ra,4(sp)
 800a168:	df000017 	ldw	fp,0(sp)
 800a16c:	dec00204 	addi	sp,sp,8
 800a170:	f800283a 	ret

0800a174 <MTC2_Init>:

MTC2_INFO* MTC2_Init(alt_u32 TOUCH_I2C_BASE,alt_u32 TOUCH_INT_BASE, alt_u32 INT_IRQ_NUM)
{
 800a174:	defff904 	addi	sp,sp,-28
 800a178:	dfc00615 	stw	ra,24(sp)
 800a17c:	df000515 	stw	fp,20(sp)
 800a180:	df000504 	addi	fp,sp,20
 800a184:	e13ffd15 	stw	r4,-12(fp)
 800a188:	e17ffe15 	stw	r5,-8(fp)
 800a18c:	e1bfff15 	stw	r6,-4(fp)
    MTC2_INFO *p;

    p = (MTC2_INFO *)malloc(sizeof(MTC2_INFO));
 800a190:	01000404 	movi	r4,16
 800a194:	800f4880 	call	800f488 <malloc>
 800a198:	e0bffc15 	stw	r2,-16(fp)
    p->TOUCH_I2C_BASE=TOUCH_I2C_BASE;
 800a19c:	e0bffc17 	ldw	r2,-16(fp)
 800a1a0:	e0fffd17 	ldw	r3,-12(fp)
 800a1a4:	10c00015 	stw	r3,0(r2)
    p->TOUCH_INT_BASE=TOUCH_INT_BASE;
 800a1a8:	e0bffc17 	ldw	r2,-16(fp)
 800a1ac:	e0fffe17 	ldw	r3,-8(fp)
 800a1b0:	10c00115 	stw	r3,4(r2)

    p->INT_IRQ_NUM = INT_IRQ_NUM;
 800a1b4:	e0bffc17 	ldw	r2,-16(fp)
 800a1b8:	e0ffff17 	ldw	r3,-4(fp)
 800a1bc:	10c00215 	stw	r3,8(r2)
    p->pQueue = QUEUE_New(TOUCH_QUEUE_SIZE);
 800a1c0:	01000804 	movi	r4,32
 800a1c4:	800a4500 	call	800a450 <QUEUE_New>
 800a1c8:	1007883a 	mov	r3,r2
 800a1cc:	e0bffc17 	ldw	r2,-16(fp)
 800a1d0:	10c00315 	stw	r3,12(r2)


//    // enable interrupt
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x00);
 800a1d4:	e0bffc17 	ldw	r2,-16(fp)
 800a1d8:	10800117 	ldw	r2,4(r2)
 800a1dc:	10800204 	addi	r2,r2,8
 800a1e0:	0007883a 	mov	r3,zero
 800a1e4:	10c00035 	stwio	r3,0(r2)
//    // clear capture flag
    IOWR_ALTERA_AVALON_PIO_EDGE_CAP(p->TOUCH_INT_BASE, 0x00);
 800a1e8:	e0bffc17 	ldw	r2,-16(fp)
 800a1ec:	10800117 	ldw	r2,4(r2)
 800a1f0:	10800304 	addi	r2,r2,12
 800a1f4:	0007883a 	mov	r3,zero
 800a1f8:	10c00035 	stwio	r3,0(r2)
 // register callback function
 //   error = alt_irq_register (p->INT_IRQ_NUM, p, mtc2_ISR);
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  if ((alt_ic_isr_register(LCD_TOUCH_INT_IRQ_INTERRUPT_CONTROLLER_ID,
 800a1fc:	e0bffc17 	ldw	r2,-16(fp)
 800a200:	10800217 	ldw	r2,8(r2)
 800a204:	d8000015 	stw	zero,0(sp)
 800a208:	0009883a 	mov	r4,zero
 800a20c:	100b883a 	mov	r5,r2
 800a210:	01820074 	movhi	r6,2049
 800a214:	31a84004 	addi	r6,r6,-24320
 800a218:	e1fffc17 	ldw	r7,-16(fp)
 800a21c:	801c8340 	call	801c834 <alt_ic_isr_register>
 800a220:	10000426 	beq	r2,zero,800a234 <MTC2_Init+0xc0>
		                   ) != 0)){
 #else
  if ((alt_irq_register(p->INT_IRQ_NUM, (void *)p, mtc2_ISR) != 0)){
 #endif

	  printf(("[TOUCH]register IRQ fail\n"));
 800a224:	010205b4 	movhi	r4,2070
 800a228:	2116f504 	addi	r4,r4,23508
 800a22c:	800ffc40 	call	800ffc4 <puts>
 800a230:	00000306 	br	800a240 <MTC2_Init+0xcc>
		  }else{
			  printf(("[TOUCH]register IRQ success\n"));
 800a234:	010205b4 	movhi	r4,2070
 800a238:	2116fc04 	addi	r4,r4,23536
 800a23c:	800ffc40 	call	800ffc4 <puts>
		  }
    IOWR_ALTERA_AVALON_PIO_IRQ_MASK(p->TOUCH_INT_BASE, 0x01);
 800a240:	e0bffc17 	ldw	r2,-16(fp)
 800a244:	10800117 	ldw	r2,4(r2)
 800a248:	10800204 	addi	r2,r2,8
 800a24c:	1007883a 	mov	r3,r2
 800a250:	00800044 	movi	r2,1
 800a254:	18800035 	stwio	r2,0(r3)
    return p;
 800a258:	e0bffc17 	ldw	r2,-16(fp)
}
 800a25c:	e037883a 	mov	sp,fp
 800a260:	dfc00117 	ldw	ra,4(sp)
 800a264:	df000017 	ldw	fp,0(sp)
 800a268:	dec00204 	addi	sp,sp,8
 800a26c:	f800283a 	ret

0800a270 <MTC2_UnInit>:

void MTC2_UnInit(MTC2_INFO *p){
 800a270:	defffd04 	addi	sp,sp,-12
 800a274:	dfc00215 	stw	ra,8(sp)
 800a278:	df000115 	stw	fp,4(sp)
 800a27c:	df000104 	addi	fp,sp,4
 800a280:	e13fff15 	stw	r4,-4(fp)
    if (p){
 800a284:	e0bfff17 	ldw	r2,-4(fp)
 800a288:	10000626 	beq	r2,zero,800a2a4 <MTC2_UnInit+0x34>
        QUEUE_Delete(p->pQueue);
 800a28c:	e0bfff17 	ldw	r2,-4(fp)
 800a290:	10800317 	ldw	r2,12(r2)
 800a294:	1009883a 	mov	r4,r2
 800a298:	800a4c00 	call	800a4c0 <QUEUE_Delete>
        free(p);
 800a29c:	e13fff17 	ldw	r4,-4(fp)
 800a2a0:	800f49c0 	call	800f49c <free>
    }
}
 800a2a4:	e037883a 	mov	sp,fp
 800a2a8:	dfc00117 	ldw	ra,4(sp)
 800a2ac:	df000017 	ldw	fp,0(sp)
 800a2b0:	dec00204 	addi	sp,sp,8
 800a2b4:	f800283a 	ret

0800a2b8 <MTC2_GetStatus>:

//, int X3,int Y3,int X4,int Y4,int X5,int Y5
bool MTC2_GetStatus(MTC2_INFO *p, alt_u8 *Event, alt_u8 *TouchNum, int *X1, int *Y1, int *X2, int *Y2,int *X3, int *Y3, int *X4, int *Y4,int *X5,int *Y5)
{
 800a2b8:	defff804 	addi	sp,sp,-32
 800a2bc:	dfc00715 	stw	ra,28(sp)
 800a2c0:	df000615 	stw	fp,24(sp)
 800a2c4:	df000604 	addi	fp,sp,24
 800a2c8:	e13ffc15 	stw	r4,-16(fp)
 800a2cc:	e17ffd15 	stw	r5,-12(fp)
 800a2d0:	e1bffe15 	stw	r6,-8(fp)
 800a2d4:	e1ffff15 	stw	r7,-4(fp)
    bool bFind;
    MTC2_EVENT *pEvent;
    bFind = QUEUE_IsEmpty(p->pQueue)?FALSE:TRUE;
 800a2d8:	e0bffc17 	ldw	r2,-16(fp)
 800a2dc:	10800317 	ldw	r2,12(r2)
 800a2e0:	1009883a 	mov	r4,r2
 800a2e4:	800a4f00 	call	800a4f0 <QUEUE_IsEmpty>
 800a2e8:	1005003a 	cmpeq	r2,r2,zero
 800a2ec:	10803fcc 	andi	r2,r2,255
 800a2f0:	e0bffa15 	stw	r2,-24(fp)
    if (bFind){
 800a2f4:	e0bffa17 	ldw	r2,-24(fp)
 800a2f8:	10004126 	beq	r2,zero,800a400 <MTC2_GetStatus+0x148>
        pEvent = (MTC2_EVENT *)QUEUE_Pop(p->pQueue);
 800a2fc:	e0bffc17 	ldw	r2,-16(fp)
 800a300:	10800317 	ldw	r2,12(r2)
 800a304:	1009883a 	mov	r4,r2
 800a308:	800a6280 	call	800a628 <QUEUE_Pop>
 800a30c:	e0bffb15 	stw	r2,-20(fp)
        *Event=pEvent->Event;;
 800a310:	e0bffb17 	ldw	r2,-20(fp)
 800a314:	10c00003 	ldbu	r3,0(r2)
 800a318:	e0bffd17 	ldw	r2,-12(fp)
 800a31c:	10c00005 	stb	r3,0(r2)
        *TouchNum = pEvent->TouchNum;
 800a320:	e0bffb17 	ldw	r2,-20(fp)
 800a324:	10c00043 	ldbu	r3,1(r2)
 800a328:	e0bffe17 	ldw	r2,-8(fp)
 800a32c:	10c00005 	stb	r3,0(r2)
        *X1 = pEvent->x1;
 800a330:	e0bffb17 	ldw	r2,-20(fp)
 800a334:	1080008b 	ldhu	r2,2(r2)
 800a338:	10ffffcc 	andi	r3,r2,65535
 800a33c:	e0bfff17 	ldw	r2,-4(fp)
 800a340:	10c00015 	stw	r3,0(r2)
        *Y1 = pEvent->y1;
 800a344:	e0bffb17 	ldw	r2,-20(fp)
 800a348:	1080010b 	ldhu	r2,4(r2)
 800a34c:	10ffffcc 	andi	r3,r2,65535
 800a350:	e0800217 	ldw	r2,8(fp)
 800a354:	10c00015 	stw	r3,0(r2)
        *X2 = pEvent->x2;
 800a358:	e0bffb17 	ldw	r2,-20(fp)
 800a35c:	1080018b 	ldhu	r2,6(r2)
 800a360:	10ffffcc 	andi	r3,r2,65535
 800a364:	e0800317 	ldw	r2,12(fp)
 800a368:	10c00015 	stw	r3,0(r2)
        *Y2 = pEvent->y2;
 800a36c:	e0bffb17 	ldw	r2,-20(fp)
 800a370:	1080020b 	ldhu	r2,8(r2)
 800a374:	10ffffcc 	andi	r3,r2,65535
 800a378:	e0800417 	ldw	r2,16(fp)
 800a37c:	10c00015 	stw	r3,0(r2)
        *X3 = pEvent->x3;
 800a380:	e0bffb17 	ldw	r2,-20(fp)
 800a384:	1080028b 	ldhu	r2,10(r2)
 800a388:	10ffffcc 	andi	r3,r2,65535
 800a38c:	e0800517 	ldw	r2,20(fp)
 800a390:	10c00015 	stw	r3,0(r2)
		*Y3 = pEvent->y3;
 800a394:	e0bffb17 	ldw	r2,-20(fp)
 800a398:	1080030b 	ldhu	r2,12(r2)
 800a39c:	10ffffcc 	andi	r3,r2,65535
 800a3a0:	e0800617 	ldw	r2,24(fp)
 800a3a4:	10c00015 	stw	r3,0(r2)
		*X4 = pEvent->x4;
 800a3a8:	e0bffb17 	ldw	r2,-20(fp)
 800a3ac:	1080038b 	ldhu	r2,14(r2)
 800a3b0:	10ffffcc 	andi	r3,r2,65535
 800a3b4:	e0800717 	ldw	r2,28(fp)
 800a3b8:	10c00015 	stw	r3,0(r2)
		*Y4 = pEvent->y4;
 800a3bc:	e0bffb17 	ldw	r2,-20(fp)
 800a3c0:	1080040b 	ldhu	r2,16(r2)
 800a3c4:	10ffffcc 	andi	r3,r2,65535
 800a3c8:	e0800817 	ldw	r2,32(fp)
 800a3cc:	10c00015 	stw	r3,0(r2)
		*X5 = pEvent->x5;
 800a3d0:	e0bffb17 	ldw	r2,-20(fp)
 800a3d4:	1080048b 	ldhu	r2,18(r2)
 800a3d8:	10ffffcc 	andi	r3,r2,65535
 800a3dc:	e0800917 	ldw	r2,36(fp)
 800a3e0:	10c00015 	stw	r3,0(r2)
		*Y5 = pEvent->y5;
 800a3e4:	e0bffb17 	ldw	r2,-20(fp)
 800a3e8:	1080050b 	ldhu	r2,20(r2)
 800a3ec:	10ffffcc 	andi	r3,r2,65535
 800a3f0:	e0800a17 	ldw	r2,40(fp)
 800a3f4:	10c00015 	stw	r3,0(r2)
        free(pEvent);
 800a3f8:	e13ffb17 	ldw	r4,-20(fp)
 800a3fc:	800f49c0 	call	800f49c <free>
    }
    return bFind;
 800a400:	e0bffa17 	ldw	r2,-24(fp)
}
 800a404:	e037883a 	mov	sp,fp
 800a408:	dfc00117 	ldw	ra,4(sp)
 800a40c:	df000017 	ldw	fp,0(sp)
 800a410:	dec00204 	addi	sp,sp,8
 800a414:	f800283a 	ret

0800a418 <MTC2_ClearEvent>:


void MTC2_ClearEvent(MTC2_INFO *p){
 800a418:	defffd04 	addi	sp,sp,-12
 800a41c:	dfc00215 	stw	ra,8(sp)
 800a420:	df000115 	stw	fp,4(sp)
 800a424:	df000104 	addi	fp,sp,4
 800a428:	e13fff15 	stw	r4,-4(fp)
    QUEUE_Empty(p->pQueue);
 800a42c:	e0bfff17 	ldw	r2,-4(fp)
 800a430:	10800317 	ldw	r2,12(r2)
 800a434:	1009883a 	mov	r4,r2
 800a438:	800a6b80 	call	800a6b8 <QUEUE_Empty>
}
 800a43c:	e037883a 	mov	sp,fp
 800a440:	dfc00117 	ldw	ra,4(sp)
 800a444:	df000017 	ldw	fp,0(sp)
 800a448:	dec00204 	addi	sp,sp,8
 800a44c:	f800283a 	ret

0800a450 <QUEUE_New>:
#include "queue.h"




QUEUE_STRUCT* QUEUE_New(int nQueueNum){
 800a450:	defffb04 	addi	sp,sp,-20
 800a454:	dfc00415 	stw	ra,16(sp)
 800a458:	df000315 	stw	fp,12(sp)
 800a45c:	df000304 	addi	fp,sp,12
 800a460:	e13fff15 	stw	r4,-4(fp)
    int nSize;
    QUEUE_STRUCT *pQueue;
    nSize = sizeof(QUEUE_STRUCT)+nQueueNum*sizeof(alt_u32);
 800a464:	e0bfff17 	ldw	r2,-4(fp)
 800a468:	10800144 	addi	r2,r2,5
 800a46c:	1085883a 	add	r2,r2,r2
 800a470:	1085883a 	add	r2,r2,r2
 800a474:	e0bffd15 	stw	r2,-12(fp)
    pQueue = (QUEUE_STRUCT *)malloc(nSize);
 800a478:	e0bffd17 	ldw	r2,-12(fp)
 800a47c:	1009883a 	mov	r4,r2
 800a480:	800f4880 	call	800f488 <malloc>
 800a484:	e0bffe15 	stw	r2,-8(fp)
    memset((void *)pQueue, 0, nSize);
 800a488:	e0bffd17 	ldw	r2,-12(fp)
 800a48c:	e13ffe17 	ldw	r4,-8(fp)
 800a490:	000b883a 	mov	r5,zero
 800a494:	100d883a 	mov	r6,r2
 800a498:	800fd900 	call	800fd90 <memset>
    pQueue->num = nQueueNum;
 800a49c:	e0ffff17 	ldw	r3,-4(fp)
 800a4a0:	e0bffe17 	ldw	r2,-8(fp)
 800a4a4:	10c00015 	stw	r3,0(r2)
    return pQueue;
 800a4a8:	e0bffe17 	ldw	r2,-8(fp)
}
 800a4ac:	e037883a 	mov	sp,fp
 800a4b0:	dfc00117 	ldw	ra,4(sp)
 800a4b4:	df000017 	ldw	fp,0(sp)
 800a4b8:	dec00204 	addi	sp,sp,8
 800a4bc:	f800283a 	ret

0800a4c0 <QUEUE_Delete>:

void QUEUE_Delete(QUEUE_STRUCT *pQueue){
 800a4c0:	defffd04 	addi	sp,sp,-12
 800a4c4:	dfc00215 	stw	ra,8(sp)
 800a4c8:	df000115 	stw	fp,4(sp)
 800a4cc:	df000104 	addi	fp,sp,4
 800a4d0:	e13fff15 	stw	r4,-4(fp)
    free(pQueue);
 800a4d4:	e13fff17 	ldw	r4,-4(fp)
 800a4d8:	800f49c0 	call	800f49c <free>
}
 800a4dc:	e037883a 	mov	sp,fp
 800a4e0:	dfc00117 	ldw	ra,4(sp)
 800a4e4:	df000017 	ldw	fp,0(sp)
 800a4e8:	dec00204 	addi	sp,sp,8
 800a4ec:	f800283a 	ret

0800a4f0 <QUEUE_IsEmpty>:

bool QUEUE_IsEmpty(QUEUE_STRUCT *pQueue){
 800a4f0:	defffe04 	addi	sp,sp,-8
 800a4f4:	df000115 	stw	fp,4(sp)
 800a4f8:	df000104 	addi	fp,sp,4
 800a4fc:	e13fff15 	stw	r4,-4(fp)
    if (pQueue->front == pQueue->rear)
 800a500:	e0bfff17 	ldw	r2,-4(fp)
 800a504:	10c00117 	ldw	r3,4(r2)
 800a508:	e0bfff17 	ldw	r2,-4(fp)
 800a50c:	10800217 	ldw	r2,8(r2)
 800a510:	1880021e 	bne	r3,r2,800a51c <QUEUE_IsEmpty+0x2c>
        return TRUE;
 800a514:	00800044 	movi	r2,1
 800a518:	00000106 	br	800a520 <QUEUE_IsEmpty+0x30>
    return FALSE;
 800a51c:	0005883a 	mov	r2,zero
}
 800a520:	e037883a 	mov	sp,fp
 800a524:	df000017 	ldw	fp,0(sp)
 800a528:	dec00104 	addi	sp,sp,4
 800a52c:	f800283a 	ret

0800a530 <QUEUE_IsFull>:

bool QUEUE_IsFull(QUEUE_STRUCT *pQueue){
 800a530:	defffd04 	addi	sp,sp,-12
 800a534:	dfc00215 	stw	ra,8(sp)
 800a538:	df000115 	stw	fp,4(sp)
 800a53c:	df000104 	addi	fp,sp,4
 800a540:	e13fff15 	stw	r4,-4(fp)
    if (((pQueue->front+1)%pQueue->num) == pQueue->rear)
 800a544:	e0bfff17 	ldw	r2,-4(fp)
 800a548:	10800117 	ldw	r2,4(r2)
 800a54c:	10c00044 	addi	r3,r2,1
 800a550:	e0bfff17 	ldw	r2,-4(fp)
 800a554:	10800017 	ldw	r2,0(r2)
 800a558:	1809883a 	mov	r4,r3
 800a55c:	100b883a 	mov	r5,r2
 800a560:	800ca080 	call	800ca08 <__umodsi3>
 800a564:	1007883a 	mov	r3,r2
 800a568:	e0bfff17 	ldw	r2,-4(fp)
 800a56c:	10800217 	ldw	r2,8(r2)
 800a570:	1880021e 	bne	r3,r2,800a57c <QUEUE_IsFull+0x4c>
        return TRUE;
 800a574:	00800044 	movi	r2,1
 800a578:	00000106 	br	800a580 <QUEUE_IsFull+0x50>
    return FALSE;
 800a57c:	0005883a 	mov	r2,zero
}
 800a580:	e037883a 	mov	sp,fp
 800a584:	dfc00117 	ldw	ra,4(sp)
 800a588:	df000017 	ldw	fp,0(sp)
 800a58c:	dec00204 	addi	sp,sp,8
 800a590:	f800283a 	ret

0800a594 <QUEUE_Push>:

bool QUEUE_Push(QUEUE_STRUCT *pQueue, alt_u32 data32){
 800a594:	defffc04 	addi	sp,sp,-16
 800a598:	dfc00315 	stw	ra,12(sp)
 800a59c:	df000215 	stw	fp,8(sp)
 800a5a0:	df000204 	addi	fp,sp,8
 800a5a4:	e13ffe15 	stw	r4,-8(fp)
 800a5a8:	e17fff15 	stw	r5,-4(fp)
    if (QUEUE_IsFull(pQueue))
 800a5ac:	e13ffe17 	ldw	r4,-8(fp)
 800a5b0:	800a5300 	call	800a530 <QUEUE_IsFull>
 800a5b4:	10000226 	beq	r2,zero,800a5c0 <QUEUE_Push+0x2c>
        return FALSE;
 800a5b8:	0005883a 	mov	r2,zero
 800a5bc:	00001506 	br	800a614 <QUEUE_Push+0x80>
    pQueue->data[pQueue->front] = data32;
 800a5c0:	e0bffe17 	ldw	r2,-8(fp)
 800a5c4:	10800117 	ldw	r2,4(r2)
 800a5c8:	e0fffe17 	ldw	r3,-8(fp)
 800a5cc:	108000c4 	addi	r2,r2,3
 800a5d0:	1085883a 	add	r2,r2,r2
 800a5d4:	1085883a 	add	r2,r2,r2
 800a5d8:	1885883a 	add	r2,r3,r2
 800a5dc:	e0ffff17 	ldw	r3,-4(fp)
 800a5e0:	10c00015 	stw	r3,0(r2)
    pQueue->front = (pQueue->front+1)%pQueue->num;        
 800a5e4:	e0bffe17 	ldw	r2,-8(fp)
 800a5e8:	10800117 	ldw	r2,4(r2)
 800a5ec:	10c00044 	addi	r3,r2,1
 800a5f0:	e0bffe17 	ldw	r2,-8(fp)
 800a5f4:	10800017 	ldw	r2,0(r2)
 800a5f8:	1809883a 	mov	r4,r3
 800a5fc:	100b883a 	mov	r5,r2
 800a600:	800ca080 	call	800ca08 <__umodsi3>
 800a604:	1007883a 	mov	r3,r2
 800a608:	e0bffe17 	ldw	r2,-8(fp)
 800a60c:	10c00115 	stw	r3,4(r2)
    return TRUE;
 800a610:	00800044 	movi	r2,1
}
 800a614:	e037883a 	mov	sp,fp
 800a618:	dfc00117 	ldw	ra,4(sp)
 800a61c:	df000017 	ldw	fp,0(sp)
 800a620:	dec00204 	addi	sp,sp,8
 800a624:	f800283a 	ret

0800a628 <QUEUE_Pop>:

alt_u32 QUEUE_Pop(QUEUE_STRUCT *pQueue){
 800a628:	defffc04 	addi	sp,sp,-16
 800a62c:	dfc00315 	stw	ra,12(sp)
 800a630:	df000215 	stw	fp,8(sp)
 800a634:	df000204 	addi	fp,sp,8
 800a638:	e13fff15 	stw	r4,-4(fp)
    alt_u32 data32;
    if (QUEUE_IsEmpty(pQueue))
 800a63c:	e13fff17 	ldw	r4,-4(fp)
 800a640:	800a4f00 	call	800a4f0 <QUEUE_IsEmpty>
 800a644:	10000226 	beq	r2,zero,800a650 <QUEUE_Pop+0x28>
        return 0;
 800a648:	0005883a 	mov	r2,zero
 800a64c:	00001506 	br	800a6a4 <QUEUE_Pop+0x7c>
    data32 = pQueue->data[pQueue->rear];
 800a650:	e0bfff17 	ldw	r2,-4(fp)
 800a654:	10800217 	ldw	r2,8(r2)
 800a658:	e0ffff17 	ldw	r3,-4(fp)
 800a65c:	108000c4 	addi	r2,r2,3
 800a660:	1085883a 	add	r2,r2,r2
 800a664:	1085883a 	add	r2,r2,r2
 800a668:	1885883a 	add	r2,r3,r2
 800a66c:	10800017 	ldw	r2,0(r2)
 800a670:	e0bffe15 	stw	r2,-8(fp)
    pQueue->rear = (pQueue->rear+1)%pQueue->num;        
 800a674:	e0bfff17 	ldw	r2,-4(fp)
 800a678:	10800217 	ldw	r2,8(r2)
 800a67c:	10c00044 	addi	r3,r2,1
 800a680:	e0bfff17 	ldw	r2,-4(fp)
 800a684:	10800017 	ldw	r2,0(r2)
 800a688:	1809883a 	mov	r4,r3
 800a68c:	100b883a 	mov	r5,r2
 800a690:	800ca080 	call	800ca08 <__umodsi3>
 800a694:	1007883a 	mov	r3,r2
 800a698:	e0bfff17 	ldw	r2,-4(fp)
 800a69c:	10c00215 	stw	r3,8(r2)
    return data32;
 800a6a0:	e0bffe17 	ldw	r2,-8(fp)
}
 800a6a4:	e037883a 	mov	sp,fp
 800a6a8:	dfc00117 	ldw	ra,4(sp)
 800a6ac:	df000017 	ldw	fp,0(sp)
 800a6b0:	dec00204 	addi	sp,sp,8
 800a6b4:	f800283a 	ret

0800a6b8 <QUEUE_Empty>:

void QUEUE_Empty(QUEUE_STRUCT *pQueue){
 800a6b8:	defffe04 	addi	sp,sp,-8
 800a6bc:	df000115 	stw	fp,4(sp)
 800a6c0:	df000104 	addi	fp,sp,4
 800a6c4:	e13fff15 	stw	r4,-4(fp)
    pQueue->front = 0;
 800a6c8:	e0bfff17 	ldw	r2,-4(fp)
 800a6cc:	10000115 	stw	zero,4(r2)
    pQueue->rear = 0;
 800a6d0:	e0bfff17 	ldw	r2,-4(fp)
 800a6d4:	10000215 	stw	zero,8(r2)
}
 800a6d8:	e037883a 	mov	sp,fp
 800a6dc:	df000017 	ldw	fp,0(sp)
 800a6e0:	dec00104 	addi	sp,sp,4
 800a6e4:	f800283a 	ret

0800a6e8 <cos>:
 800a6e8:	00a00034 	movhi	r2,32768
 800a6ec:	defffa04 	addi	sp,sp,-24
 800a6f0:	10bfffc4 	addi	r2,r2,-1
 800a6f4:	00cffa74 	movhi	r3,16361
 800a6f8:	dfc00515 	stw	ra,20(sp)
 800a6fc:	2884703a 	and	r2,r5,r2
 800a700:	18c87ec4 	addi	r3,r3,8699
 800a704:	280f883a 	mov	r7,r5
 800a708:	1880170e 	bge	r3,r2,800a768 <cos+0x80>
 800a70c:	00dffc34 	movhi	r3,32752
 800a710:	18ffffc4 	addi	r3,r3,-1
 800a714:	1880050e 	bge	r3,r2,800a72c <cos+0x44>
 800a718:	200d883a 	mov	r6,r4
 800a71c:	800e4e00 	call	800e4e0 <__subdf3>
 800a720:	dfc00517 	ldw	ra,20(sp)
 800a724:	dec00604 	addi	sp,sp,24
 800a728:	f800283a 	ret
 800a72c:	d9800104 	addi	r6,sp,4
 800a730:	800a8c40 	call	800a8c4 <__ieee754_rem_pio2>
 800a734:	108000cc 	andi	r2,r2,3
 800a738:	00c00044 	movi	r3,1
 800a73c:	10c01726 	beq	r2,r3,800a79c <cos+0xb4>
 800a740:	01000084 	movi	r4,2
 800a744:	11000e26 	beq	r2,r4,800a780 <cos+0x98>
 800a748:	10001c26 	beq	r2,zero,800a7bc <cos+0xd4>
 800a74c:	d9000117 	ldw	r4,4(sp)
 800a750:	d9400217 	ldw	r5,8(sp)
 800a754:	d9800317 	ldw	r6,12(sp)
 800a758:	d9c00417 	ldw	r7,16(sp)
 800a75c:	d8c00015 	stw	r3,0(sp)
 800a760:	800c22c0 	call	800c22c <__kernel_sin>
 800a764:	003fee06 	br	800a720 <__alt_data_end+0xf800a720>
 800a768:	000d883a 	mov	r6,zero
 800a76c:	000f883a 	mov	r7,zero
 800a770:	800b0600 	call	800b060 <__kernel_cos>
 800a774:	dfc00517 	ldw	ra,20(sp)
 800a778:	dec00604 	addi	sp,sp,24
 800a77c:	f800283a 	ret
 800a780:	d9000117 	ldw	r4,4(sp)
 800a784:	d9400217 	ldw	r5,8(sp)
 800a788:	d9800317 	ldw	r6,12(sp)
 800a78c:	d9c00417 	ldw	r7,16(sp)
 800a790:	800b0600 	call	800b060 <__kernel_cos>
 800a794:	18e0003c 	xorhi	r3,r3,32768
 800a798:	003fe106 	br	800a720 <__alt_data_end+0xf800a720>
 800a79c:	d9000117 	ldw	r4,4(sp)
 800a7a0:	d9400217 	ldw	r5,8(sp)
 800a7a4:	d9800317 	ldw	r6,12(sp)
 800a7a8:	d9c00417 	ldw	r7,16(sp)
 800a7ac:	d8800015 	stw	r2,0(sp)
 800a7b0:	800c22c0 	call	800c22c <__kernel_sin>
 800a7b4:	18e0003c 	xorhi	r3,r3,32768
 800a7b8:	003fd906 	br	800a720 <__alt_data_end+0xf800a720>
 800a7bc:	d9000117 	ldw	r4,4(sp)
 800a7c0:	d9400217 	ldw	r5,8(sp)
 800a7c4:	d9800317 	ldw	r6,12(sp)
 800a7c8:	d9c00417 	ldw	r7,16(sp)
 800a7cc:	800b0600 	call	800b060 <__kernel_cos>
 800a7d0:	003fd306 	br	800a720 <__alt_data_end+0xf800a720>

0800a7d4 <sin>:
 800a7d4:	00a00034 	movhi	r2,32768
 800a7d8:	defffa04 	addi	sp,sp,-24
 800a7dc:	10bfffc4 	addi	r2,r2,-1
 800a7e0:	00cffa74 	movhi	r3,16361
 800a7e4:	dfc00515 	stw	ra,20(sp)
 800a7e8:	2884703a 	and	r2,r5,r2
 800a7ec:	18c87ec4 	addi	r3,r3,8699
 800a7f0:	280f883a 	mov	r7,r5
 800a7f4:	1880170e 	bge	r3,r2,800a854 <sin+0x80>
 800a7f8:	00dffc34 	movhi	r3,32752
 800a7fc:	18ffffc4 	addi	r3,r3,-1
 800a800:	1880050e 	bge	r3,r2,800a818 <sin+0x44>
 800a804:	200d883a 	mov	r6,r4
 800a808:	800e4e00 	call	800e4e0 <__subdf3>
 800a80c:	dfc00517 	ldw	ra,20(sp)
 800a810:	dec00604 	addi	sp,sp,24
 800a814:	f800283a 	ret
 800a818:	d9800104 	addi	r6,sp,4
 800a81c:	800a8c40 	call	800a8c4 <__ieee754_rem_pio2>
 800a820:	108000cc 	andi	r2,r2,3
 800a824:	00c00044 	movi	r3,1
 800a828:	10c01926 	beq	r2,r3,800a890 <sin+0xbc>
 800a82c:	01000084 	movi	r4,2
 800a830:	11000f26 	beq	r2,r4,800a870 <sin+0x9c>
 800a834:	10001c26 	beq	r2,zero,800a8a8 <sin+0xd4>
 800a838:	d9000117 	ldw	r4,4(sp)
 800a83c:	d9400217 	ldw	r5,8(sp)
 800a840:	d9800317 	ldw	r6,12(sp)
 800a844:	d9c00417 	ldw	r7,16(sp)
 800a848:	800b0600 	call	800b060 <__kernel_cos>
 800a84c:	18e0003c 	xorhi	r3,r3,32768
 800a850:	003fee06 	br	800a80c <__alt_data_end+0xf800a80c>
 800a854:	d8000015 	stw	zero,0(sp)
 800a858:	000d883a 	mov	r6,zero
 800a85c:	000f883a 	mov	r7,zero
 800a860:	800c22c0 	call	800c22c <__kernel_sin>
 800a864:	dfc00517 	ldw	ra,20(sp)
 800a868:	dec00604 	addi	sp,sp,24
 800a86c:	f800283a 	ret
 800a870:	d9000117 	ldw	r4,4(sp)
 800a874:	d9400217 	ldw	r5,8(sp)
 800a878:	d9800317 	ldw	r6,12(sp)
 800a87c:	d9c00417 	ldw	r7,16(sp)
 800a880:	d8c00015 	stw	r3,0(sp)
 800a884:	800c22c0 	call	800c22c <__kernel_sin>
 800a888:	18e0003c 	xorhi	r3,r3,32768
 800a88c:	003fdf06 	br	800a80c <__alt_data_end+0xf800a80c>
 800a890:	d9000117 	ldw	r4,4(sp)
 800a894:	d9400217 	ldw	r5,8(sp)
 800a898:	d9800317 	ldw	r6,12(sp)
 800a89c:	d9c00417 	ldw	r7,16(sp)
 800a8a0:	800b0600 	call	800b060 <__kernel_cos>
 800a8a4:	003fd906 	br	800a80c <__alt_data_end+0xf800a80c>
 800a8a8:	d9000117 	ldw	r4,4(sp)
 800a8ac:	d9400217 	ldw	r5,8(sp)
 800a8b0:	d9800317 	ldw	r6,12(sp)
 800a8b4:	d9c00417 	ldw	r7,16(sp)
 800a8b8:	d8c00015 	stw	r3,0(sp)
 800a8bc:	800c22c0 	call	800c22c <__kernel_sin>
 800a8c0:	003fd206 	br	800a80c <__alt_data_end+0xf800a80c>

0800a8c4 <__ieee754_rem_pio2>:
 800a8c4:	02200034 	movhi	r8,32768
 800a8c8:	deffea04 	addi	sp,sp,-88
 800a8cc:	423fffc4 	addi	r8,r8,-1
 800a8d0:	00cffa74 	movhi	r3,16361
 800a8d4:	ddc01315 	stw	r23,76(sp)
 800a8d8:	dc400d15 	stw	r17,52(sp)
 800a8dc:	dfc01515 	stw	ra,84(sp)
 800a8e0:	df001415 	stw	fp,80(sp)
 800a8e4:	dd801215 	stw	r22,72(sp)
 800a8e8:	dd401115 	stw	r21,68(sp)
 800a8ec:	dd001015 	stw	r20,64(sp)
 800a8f0:	dcc00f15 	stw	r19,60(sp)
 800a8f4:	dc800e15 	stw	r18,56(sp)
 800a8f8:	dc000c15 	stw	r16,48(sp)
 800a8fc:	2a2e703a 	and	r23,r5,r8
 800a900:	18c87ec4 	addi	r3,r3,8699
 800a904:	2823883a 	mov	r17,r5
 800a908:	1dc0790e 	bge	r3,r23,800aaf0 <__ieee754_rem_pio2+0x22c>
 800a90c:	009000f4 	movhi	r2,16387
 800a910:	10b65ec4 	addi	r2,r2,-9861
 800a914:	3021883a 	mov	r16,r6
 800a918:	2027883a 	mov	r19,r4
 800a91c:	15c02316 	blt	r2,r23,800a9ac <__ieee754_rem_pio2+0xe8>
 800a920:	01cffe74 	movhi	r7,16377
 800a924:	39c87ec4 	addi	r7,r7,8699
 800a928:	01951034 	movhi	r6,21568
 800a92c:	0141800e 	bge	zero,r5,800af30 <__ieee754_rem_pio2+0x66c>
 800a930:	800e4e00 	call	800e4e0 <__subdf3>
 800a934:	1025883a 	mov	r18,r2
 800a938:	008ffe74 	movhi	r2,16377
 800a93c:	10887ec4 	addi	r2,r2,8699
 800a940:	1823883a 	mov	r17,r3
 800a944:	b8808426 	beq	r23,r2,800ab58 <__ieee754_rem_pio2+0x294>
 800a948:	018698b4 	movhi	r6,6754
 800a94c:	01cf7474 	movhi	r7,15825
 800a950:	3198cc44 	addi	r6,r6,25393
 800a954:	39ed1844 	addi	r7,r7,-19359
 800a958:	9009883a 	mov	r4,r18
 800a95c:	180b883a 	mov	r5,r3
 800a960:	800e4e00 	call	800e4e0 <__subdf3>
 800a964:	100d883a 	mov	r6,r2
 800a968:	180f883a 	mov	r7,r3
 800a96c:	9009883a 	mov	r4,r18
 800a970:	880b883a 	mov	r5,r17
 800a974:	80800015 	stw	r2,0(r16)
 800a978:	80c00115 	stw	r3,4(r16)
 800a97c:	800e4e00 	call	800e4e0 <__subdf3>
 800a980:	018698b4 	movhi	r6,6754
 800a984:	01cf7474 	movhi	r7,15825
 800a988:	1009883a 	mov	r4,r2
 800a98c:	180b883a 	mov	r5,r3
 800a990:	3198cc44 	addi	r6,r6,25393
 800a994:	39ed1844 	addi	r7,r7,-19359
 800a998:	800e4e00 	call	800e4e0 <__subdf3>
 800a99c:	80800215 	stw	r2,8(r16)
 800a9a0:	80c00315 	stw	r3,12(r16)
 800a9a4:	00800044 	movi	r2,1
 800a9a8:	00005606 	br	800ab04 <__ieee754_rem_pio2+0x240>
 800a9ac:	00904e74 	movhi	r2,16697
 800a9b0:	10887ec4 	addi	r2,r2,8699
 800a9b4:	15c0890e 	bge	r2,r23,800abdc <__ieee754_rem_pio2+0x318>
 800a9b8:	009ffc34 	movhi	r2,32752
 800a9bc:	10bfffc4 	addi	r2,r2,-1
 800a9c0:	15c05c16 	blt	r2,r23,800ab34 <__ieee754_rem_pio2+0x270>
 800a9c4:	b829d53a 	srai	r20,r23,20
 800a9c8:	a53efa84 	addi	r20,r20,-1046
 800a9cc:	a024953a 	slli	r18,r20,20
 800a9d0:	bca5c83a 	sub	r18,r23,r18
 800a9d4:	900b883a 	mov	r5,r18
 800a9d8:	800edb00 	call	800edb0 <__fixdfsi>
 800a9dc:	1009883a 	mov	r4,r2
 800a9e0:	800ee380 	call	800ee38 <__floatsidf>
 800a9e4:	9809883a 	mov	r4,r19
 800a9e8:	900b883a 	mov	r5,r18
 800a9ec:	100d883a 	mov	r6,r2
 800a9f0:	180f883a 	mov	r7,r3
 800a9f4:	d8800215 	stw	r2,8(sp)
 800a9f8:	d8c00315 	stw	r3,12(sp)
 800a9fc:	800e4e00 	call	800e4e0 <__subdf3>
 800aa00:	000d883a 	mov	r6,zero
 800aa04:	01d05c34 	movhi	r7,16752
 800aa08:	1009883a 	mov	r4,r2
 800aa0c:	180b883a 	mov	r5,r3
 800aa10:	800ddbc0 	call	800ddbc <__muldf3>
 800aa14:	180b883a 	mov	r5,r3
 800aa18:	1009883a 	mov	r4,r2
 800aa1c:	182b883a 	mov	r21,r3
 800aa20:	102d883a 	mov	r22,r2
 800aa24:	800edb00 	call	800edb0 <__fixdfsi>
 800aa28:	1009883a 	mov	r4,r2
 800aa2c:	800ee380 	call	800ee38 <__floatsidf>
 800aa30:	100d883a 	mov	r6,r2
 800aa34:	180f883a 	mov	r7,r3
 800aa38:	b009883a 	mov	r4,r22
 800aa3c:	a80b883a 	mov	r5,r21
 800aa40:	1027883a 	mov	r19,r2
 800aa44:	1825883a 	mov	r18,r3
 800aa48:	d8800415 	stw	r2,16(sp)
 800aa4c:	d8c00515 	stw	r3,20(sp)
 800aa50:	800e4e00 	call	800e4e0 <__subdf3>
 800aa54:	1009883a 	mov	r4,r2
 800aa58:	180b883a 	mov	r5,r3
 800aa5c:	000d883a 	mov	r6,zero
 800aa60:	01d05c34 	movhi	r7,16752
 800aa64:	800ddbc0 	call	800ddbc <__muldf3>
 800aa68:	1009883a 	mov	r4,r2
 800aa6c:	180b883a 	mov	r5,r3
 800aa70:	000d883a 	mov	r6,zero
 800aa74:	000f883a 	mov	r7,zero
 800aa78:	d8800615 	stw	r2,24(sp)
 800aa7c:	d8c00715 	stw	r3,28(sp)
 800aa80:	800db780 	call	800db78 <__eqdf2>
 800aa84:	1001491e 	bne	r2,zero,800afac <__ieee754_rem_pio2+0x6e8>
 800aa88:	000f883a 	mov	r7,zero
 800aa8c:	9809883a 	mov	r4,r19
 800aa90:	900b883a 	mov	r5,r18
 800aa94:	000d883a 	mov	r6,zero
 800aa98:	800db780 	call	800db78 <__eqdf2>
 800aa9c:	100f003a 	cmpeq	r7,r2,zero
 800aaa0:	00800084 	movi	r2,2
 800aaa4:	11cfc83a 	sub	r7,r2,r7
 800aaa8:	00800084 	movi	r2,2
 800aaac:	d8800015 	stw	r2,0(sp)
 800aab0:	008205b4 	movhi	r2,2070
 800aab4:	10972304 	addi	r2,r2,23692
 800aab8:	d8800115 	stw	r2,4(sp)
 800aabc:	d9000204 	addi	r4,sp,8
 800aac0:	800b883a 	mov	r5,r16
 800aac4:	a00d883a 	mov	r6,r20
 800aac8:	800b5040 	call	800b504 <__kernel_rem_pio2>
 800aacc:	88000d0e 	bge	r17,zero,800ab04 <__ieee754_rem_pio2+0x240>
 800aad0:	81000117 	ldw	r4,4(r16)
 800aad4:	80c00317 	ldw	r3,12(r16)
 800aad8:	0085c83a 	sub	r2,zero,r2
 800aadc:	2120003c 	xorhi	r4,r4,32768
 800aae0:	18e0003c 	xorhi	r3,r3,32768
 800aae4:	81000115 	stw	r4,4(r16)
 800aae8:	80c00315 	stw	r3,12(r16)
 800aaec:	00000506 	br	800ab04 <__ieee754_rem_pio2+0x240>
 800aaf0:	31000015 	stw	r4,0(r6)
 800aaf4:	31400115 	stw	r5,4(r6)
 800aaf8:	30000215 	stw	zero,8(r6)
 800aafc:	30000315 	stw	zero,12(r6)
 800ab00:	0005883a 	mov	r2,zero
 800ab04:	dfc01517 	ldw	ra,84(sp)
 800ab08:	df001417 	ldw	fp,80(sp)
 800ab0c:	ddc01317 	ldw	r23,76(sp)
 800ab10:	dd801217 	ldw	r22,72(sp)
 800ab14:	dd401117 	ldw	r21,68(sp)
 800ab18:	dd001017 	ldw	r20,64(sp)
 800ab1c:	dcc00f17 	ldw	r19,60(sp)
 800ab20:	dc800e17 	ldw	r18,56(sp)
 800ab24:	dc400d17 	ldw	r17,52(sp)
 800ab28:	dc000c17 	ldw	r16,48(sp)
 800ab2c:	dec01604 	addi	sp,sp,88
 800ab30:	f800283a 	ret
 800ab34:	200d883a 	mov	r6,r4
 800ab38:	280f883a 	mov	r7,r5
 800ab3c:	800e4e00 	call	800e4e0 <__subdf3>
 800ab40:	80800215 	stw	r2,8(r16)
 800ab44:	80800015 	stw	r2,0(r16)
 800ab48:	80c00315 	stw	r3,12(r16)
 800ab4c:	80c00115 	stw	r3,4(r16)
 800ab50:	0005883a 	mov	r2,zero
 800ab54:	003feb06 	br	800ab04 <__alt_data_end+0xf800ab04>
 800ab58:	01cf7474 	movhi	r7,15825
 800ab5c:	9009883a 	mov	r4,r18
 800ab60:	39ed1844 	addi	r7,r7,-19359
 800ab64:	01869834 	movhi	r6,6752
 800ab68:	180b883a 	mov	r5,r3
 800ab6c:	800e4e00 	call	800e4e0 <__subdf3>
 800ab70:	018b80f4 	movhi	r6,11779
 800ab74:	01cee8f4 	movhi	r7,15267
 800ab78:	1009883a 	mov	r4,r2
 800ab7c:	180b883a 	mov	r5,r3
 800ab80:	319c1cc4 	addi	r6,r6,28787
 800ab84:	39c66284 	addi	r7,r7,6538
 800ab88:	1025883a 	mov	r18,r2
 800ab8c:	1823883a 	mov	r17,r3
 800ab90:	800e4e00 	call	800e4e0 <__subdf3>
 800ab94:	100d883a 	mov	r6,r2
 800ab98:	180f883a 	mov	r7,r3
 800ab9c:	9009883a 	mov	r4,r18
 800aba0:	880b883a 	mov	r5,r17
 800aba4:	80800015 	stw	r2,0(r16)
 800aba8:	80c00115 	stw	r3,4(r16)
 800abac:	800e4e00 	call	800e4e0 <__subdf3>
 800abb0:	018b80f4 	movhi	r6,11779
 800abb4:	01cee8f4 	movhi	r7,15267
 800abb8:	1009883a 	mov	r4,r2
 800abbc:	180b883a 	mov	r5,r3
 800abc0:	319c1cc4 	addi	r6,r6,28787
 800abc4:	39c66284 	addi	r7,r7,6538
 800abc8:	800e4e00 	call	800e4e0 <__subdf3>
 800abcc:	80800215 	stw	r2,8(r16)
 800abd0:	80c00315 	stw	r3,12(r16)
 800abd4:	00800044 	movi	r2,1
 800abd8:	003fca06 	br	800ab04 <__alt_data_end+0xf800ab04>
 800abdc:	800c4f40 	call	800c4f4 <fabs>
 800abe0:	019b72b4 	movhi	r6,28106
 800abe4:	01cff934 	movhi	r7,16356
 800abe8:	1009883a 	mov	r4,r2
 800abec:	180b883a 	mov	r5,r3
 800abf0:	31b220c4 	addi	r6,r6,-14205
 800abf4:	39d7cc04 	addi	r7,r7,24368
 800abf8:	102d883a 	mov	r22,r2
 800abfc:	182b883a 	mov	r21,r3
 800ac00:	800ddbc0 	call	800ddbc <__muldf3>
 800ac04:	000d883a 	mov	r6,zero
 800ac08:	01cff834 	movhi	r7,16352
 800ac0c:	1009883a 	mov	r4,r2
 800ac10:	180b883a 	mov	r5,r3
 800ac14:	800ca100 	call	800ca10 <__adddf3>
 800ac18:	180b883a 	mov	r5,r3
 800ac1c:	1009883a 	mov	r4,r2
 800ac20:	800edb00 	call	800edb0 <__fixdfsi>
 800ac24:	1009883a 	mov	r4,r2
 800ac28:	1025883a 	mov	r18,r2
 800ac2c:	800ee380 	call	800ee38 <__floatsidf>
 800ac30:	01cffe74 	movhi	r7,16377
 800ac34:	1009883a 	mov	r4,r2
 800ac38:	180b883a 	mov	r5,r3
 800ac3c:	39c87ec4 	addi	r7,r7,8699
 800ac40:	01951034 	movhi	r6,21568
 800ac44:	1029883a 	mov	r20,r2
 800ac48:	1827883a 	mov	r19,r3
 800ac4c:	800ddbc0 	call	800ddbc <__muldf3>
 800ac50:	b009883a 	mov	r4,r22
 800ac54:	a80b883a 	mov	r5,r21
 800ac58:	100d883a 	mov	r6,r2
 800ac5c:	180f883a 	mov	r7,r3
 800ac60:	800e4e00 	call	800e4e0 <__subdf3>
 800ac64:	018698b4 	movhi	r6,6754
 800ac68:	01cf7474 	movhi	r7,15825
 800ac6c:	a009883a 	mov	r4,r20
 800ac70:	3198cc44 	addi	r6,r6,25393
 800ac74:	39ed1844 	addi	r7,r7,-19359
 800ac78:	980b883a 	mov	r5,r19
 800ac7c:	1039883a 	mov	fp,r2
 800ac80:	d8c00815 	stw	r3,32(sp)
 800ac84:	800ddbc0 	call	800ddbc <__muldf3>
 800ac88:	010007c4 	movi	r4,31
 800ac8c:	e017883a 	mov	r11,fp
 800ac90:	da800817 	ldw	r10,32(sp)
 800ac94:	102d883a 	mov	r22,r2
 800ac98:	182b883a 	mov	r21,r3
 800ac9c:	24802816 	blt	r4,r18,800ad40 <__ieee754_rem_pio2+0x47c>
 800aca0:	927fffc4 	addi	r9,r18,-1
 800aca4:	4a53883a 	add	r9,r9,r9
 800aca8:	010205b4 	movhi	r4,2070
 800acac:	21170304 	addi	r4,r4,23564
 800acb0:	4a53883a 	add	r9,r9,r9
 800acb4:	2253883a 	add	r9,r4,r9
 800acb8:	49000017 	ldw	r4,0(r9)
 800acbc:	25c02026 	beq	r4,r23,800ad40 <__ieee754_rem_pio2+0x47c>
 800acc0:	e009883a 	mov	r4,fp
 800acc4:	500b883a 	mov	r5,r10
 800acc8:	100d883a 	mov	r6,r2
 800accc:	180f883a 	mov	r7,r3
 800acd0:	da800b15 	stw	r10,44(sp)
 800acd4:	df000a15 	stw	fp,40(sp)
 800acd8:	800e4e00 	call	800e4e0 <__subdf3>
 800acdc:	da800b17 	ldw	r10,44(sp)
 800ace0:	dac00a17 	ldw	r11,40(sp)
 800ace4:	1019883a 	mov	r12,r2
 800ace8:	1813883a 	mov	r9,r3
 800acec:	80800015 	stw	r2,0(r16)
 800acf0:	80c00115 	stw	r3,4(r16)
 800acf4:	600d883a 	mov	r6,r12
 800acf8:	480f883a 	mov	r7,r9
 800acfc:	5809883a 	mov	r4,r11
 800ad00:	500b883a 	mov	r5,r10
 800ad04:	da400b15 	stw	r9,44(sp)
 800ad08:	db000a15 	stw	r12,40(sp)
 800ad0c:	800e4e00 	call	800e4e0 <__subdf3>
 800ad10:	1009883a 	mov	r4,r2
 800ad14:	180b883a 	mov	r5,r3
 800ad18:	b00d883a 	mov	r6,r22
 800ad1c:	a80f883a 	mov	r7,r21
 800ad20:	800e4e00 	call	800e4e0 <__subdf3>
 800ad24:	80800215 	stw	r2,8(r16)
 800ad28:	80c00315 	stw	r3,12(r16)
 800ad2c:	da400b17 	ldw	r9,44(sp)
 800ad30:	db000a17 	ldw	r12,40(sp)
 800ad34:	88009f16 	blt	r17,zero,800afb4 <__ieee754_rem_pio2+0x6f0>
 800ad38:	9005883a 	mov	r2,r18
 800ad3c:	003f7106 	br	800ab04 <__alt_data_end+0xf800ab04>
 800ad40:	d9400817 	ldw	r5,32(sp)
 800ad44:	e009883a 	mov	r4,fp
 800ad48:	100d883a 	mov	r6,r2
 800ad4c:	180f883a 	mov	r7,r3
 800ad50:	da800b15 	stw	r10,44(sp)
 800ad54:	dac00a15 	stw	r11,40(sp)
 800ad58:	800e4e00 	call	800e4e0 <__subdf3>
 800ad5c:	1019883a 	mov	r12,r2
 800ad60:	1804d53a 	srli	r2,r3,20
 800ad64:	b811d53a 	srai	r8,r23,20
 800ad68:	1813883a 	mov	r9,r3
 800ad6c:	1081ffcc 	andi	r2,r2,2047
 800ad70:	80c00115 	stw	r3,4(r16)
 800ad74:	83000015 	stw	r12,0(r16)
 800ad78:	4085c83a 	sub	r2,r8,r2
 800ad7c:	00c00404 	movi	r3,16
 800ad80:	da800b17 	ldw	r10,44(sp)
 800ad84:	dac00a17 	ldw	r11,40(sp)
 800ad88:	18bfda0e 	bge	r3,r2,800acf4 <__alt_data_end+0xf800acf4>
 800ad8c:	01cf7474 	movhi	r7,15825
 800ad90:	39ed1844 	addi	r7,r7,-19359
 800ad94:	a009883a 	mov	r4,r20
 800ad98:	980b883a 	mov	r5,r19
 800ad9c:	01869834 	movhi	r6,6752
 800ada0:	da000a15 	stw	r8,40(sp)
 800ada4:	800ddbc0 	call	800ddbc <__muldf3>
 800ada8:	d9400817 	ldw	r5,32(sp)
 800adac:	e009883a 	mov	r4,fp
 800adb0:	100d883a 	mov	r6,r2
 800adb4:	180f883a 	mov	r7,r3
 800adb8:	102d883a 	mov	r22,r2
 800adbc:	182b883a 	mov	r21,r3
 800adc0:	800e4e00 	call	800e4e0 <__subdf3>
 800adc4:	d9400817 	ldw	r5,32(sp)
 800adc8:	e009883a 	mov	r4,fp
 800adcc:	100d883a 	mov	r6,r2
 800add0:	180f883a 	mov	r7,r3
 800add4:	182f883a 	mov	r23,r3
 800add8:	d8800915 	stw	r2,36(sp)
 800addc:	800e4e00 	call	800e4e0 <__subdf3>
 800ade0:	b00d883a 	mov	r6,r22
 800ade4:	a80f883a 	mov	r7,r21
 800ade8:	1009883a 	mov	r4,r2
 800adec:	180b883a 	mov	r5,r3
 800adf0:	800e4e00 	call	800e4e0 <__subdf3>
 800adf4:	018b80f4 	movhi	r6,11779
 800adf8:	01cee8f4 	movhi	r7,15267
 800adfc:	a009883a 	mov	r4,r20
 800ae00:	980b883a 	mov	r5,r19
 800ae04:	319c1cc4 	addi	r6,r6,28787
 800ae08:	39c66284 	addi	r7,r7,6538
 800ae0c:	102d883a 	mov	r22,r2
 800ae10:	182b883a 	mov	r21,r3
 800ae14:	800ddbc0 	call	800ddbc <__muldf3>
 800ae18:	b00d883a 	mov	r6,r22
 800ae1c:	a80f883a 	mov	r7,r21
 800ae20:	1009883a 	mov	r4,r2
 800ae24:	180b883a 	mov	r5,r3
 800ae28:	800e4e00 	call	800e4e0 <__subdf3>
 800ae2c:	d9000917 	ldw	r4,36(sp)
 800ae30:	b80b883a 	mov	r5,r23
 800ae34:	100d883a 	mov	r6,r2
 800ae38:	180f883a 	mov	r7,r3
 800ae3c:	102d883a 	mov	r22,r2
 800ae40:	182b883a 	mov	r21,r3
 800ae44:	800e4e00 	call	800e4e0 <__subdf3>
 800ae48:	1019883a 	mov	r12,r2
 800ae4c:	1804d53a 	srli	r2,r3,20
 800ae50:	da000a17 	ldw	r8,40(sp)
 800ae54:	83000015 	stw	r12,0(r16)
 800ae58:	1081ffcc 	andi	r2,r2,2047
 800ae5c:	4091c83a 	sub	r8,r8,r2
 800ae60:	80c00115 	stw	r3,4(r16)
 800ae64:	00800c44 	movi	r2,49
 800ae68:	1813883a 	mov	r9,r3
 800ae6c:	1200790e 	bge	r2,r8,800b054 <__ieee754_rem_pio2+0x790>
 800ae70:	01cee8f4 	movhi	r7,15267
 800ae74:	39c66284 	addi	r7,r7,6538
 800ae78:	a009883a 	mov	r4,r20
 800ae7c:	980b883a 	mov	r5,r19
 800ae80:	018b8034 	movhi	r6,11776
 800ae84:	800ddbc0 	call	800ddbc <__muldf3>
 800ae88:	d9000917 	ldw	r4,36(sp)
 800ae8c:	b80b883a 	mov	r5,r23
 800ae90:	100d883a 	mov	r6,r2
 800ae94:	180f883a 	mov	r7,r3
 800ae98:	102d883a 	mov	r22,r2
 800ae9c:	182b883a 	mov	r21,r3
 800aea0:	800e4e00 	call	800e4e0 <__subdf3>
 800aea4:	d9000917 	ldw	r4,36(sp)
 800aea8:	b80b883a 	mov	r5,r23
 800aeac:	100d883a 	mov	r6,r2
 800aeb0:	180f883a 	mov	r7,r3
 800aeb4:	d8c00b15 	stw	r3,44(sp)
 800aeb8:	d8800a15 	stw	r2,40(sp)
 800aebc:	800e4e00 	call	800e4e0 <__subdf3>
 800aec0:	b00d883a 	mov	r6,r22
 800aec4:	a80f883a 	mov	r7,r21
 800aec8:	1009883a 	mov	r4,r2
 800aecc:	180b883a 	mov	r5,r3
 800aed0:	800e4e00 	call	800e4e0 <__subdf3>
 800aed4:	01894834 	movhi	r6,9504
 800aed8:	01ce5f34 	movhi	r7,14716
 800aedc:	a009883a 	mov	r4,r20
 800aee0:	980b883a 	mov	r5,r19
 800aee4:	31927044 	addi	r6,r6,18881
 800aee8:	39e0e684 	addi	r7,r7,-31846
 800aeec:	102d883a 	mov	r22,r2
 800aef0:	182b883a 	mov	r21,r3
 800aef4:	800ddbc0 	call	800ddbc <__muldf3>
 800aef8:	b00d883a 	mov	r6,r22
 800aefc:	a80f883a 	mov	r7,r21
 800af00:	1009883a 	mov	r4,r2
 800af04:	180b883a 	mov	r5,r3
 800af08:	800e4e00 	call	800e4e0 <__subdf3>
 800af0c:	dac00a17 	ldw	r11,40(sp)
 800af10:	da800b17 	ldw	r10,44(sp)
 800af14:	102d883a 	mov	r22,r2
 800af18:	182b883a 	mov	r21,r3
 800af1c:	5809883a 	mov	r4,r11
 800af20:	500b883a 	mov	r5,r10
 800af24:	100d883a 	mov	r6,r2
 800af28:	180f883a 	mov	r7,r3
 800af2c:	003f6a06 	br	800acd8 <__alt_data_end+0xf800acd8>
 800af30:	800ca100 	call	800ca10 <__adddf3>
 800af34:	1025883a 	mov	r18,r2
 800af38:	008ffe74 	movhi	r2,16377
 800af3c:	10887ec4 	addi	r2,r2,8699
 800af40:	1823883a 	mov	r17,r3
 800af44:	b8802226 	beq	r23,r2,800afd0 <__ieee754_rem_pio2+0x70c>
 800af48:	018698b4 	movhi	r6,6754
 800af4c:	01cf7474 	movhi	r7,15825
 800af50:	3198cc44 	addi	r6,r6,25393
 800af54:	39ed1844 	addi	r7,r7,-19359
 800af58:	9009883a 	mov	r4,r18
 800af5c:	180b883a 	mov	r5,r3
 800af60:	800ca100 	call	800ca10 <__adddf3>
 800af64:	100d883a 	mov	r6,r2
 800af68:	180f883a 	mov	r7,r3
 800af6c:	9009883a 	mov	r4,r18
 800af70:	880b883a 	mov	r5,r17
 800af74:	80800015 	stw	r2,0(r16)
 800af78:	80c00115 	stw	r3,4(r16)
 800af7c:	800e4e00 	call	800e4e0 <__subdf3>
 800af80:	018698b4 	movhi	r6,6754
 800af84:	01cf7474 	movhi	r7,15825
 800af88:	1009883a 	mov	r4,r2
 800af8c:	180b883a 	mov	r5,r3
 800af90:	3198cc44 	addi	r6,r6,25393
 800af94:	39ed1844 	addi	r7,r7,-19359
 800af98:	800ca100 	call	800ca10 <__adddf3>
 800af9c:	80800215 	stw	r2,8(r16)
 800afa0:	80c00315 	stw	r3,12(r16)
 800afa4:	00bfffc4 	movi	r2,-1
 800afa8:	003ed606 	br	800ab04 <__alt_data_end+0xf800ab04>
 800afac:	01c000c4 	movi	r7,3
 800afb0:	003ebd06 	br	800aaa8 <__alt_data_end+0xf800aaa8>
 800afb4:	4a60003c 	xorhi	r9,r9,32768
 800afb8:	18e0003c 	xorhi	r3,r3,32768
 800afbc:	83000015 	stw	r12,0(r16)
 800afc0:	82400115 	stw	r9,4(r16)
 800afc4:	80c00315 	stw	r3,12(r16)
 800afc8:	0485c83a 	sub	r2,zero,r18
 800afcc:	003ecd06 	br	800ab04 <__alt_data_end+0xf800ab04>
 800afd0:	01cf7474 	movhi	r7,15825
 800afd4:	9009883a 	mov	r4,r18
 800afd8:	39ed1844 	addi	r7,r7,-19359
 800afdc:	01869834 	movhi	r6,6752
 800afe0:	180b883a 	mov	r5,r3
 800afe4:	800ca100 	call	800ca10 <__adddf3>
 800afe8:	018b80f4 	movhi	r6,11779
 800afec:	01cee8f4 	movhi	r7,15267
 800aff0:	1009883a 	mov	r4,r2
 800aff4:	180b883a 	mov	r5,r3
 800aff8:	319c1cc4 	addi	r6,r6,28787
 800affc:	39c66284 	addi	r7,r7,6538
 800b000:	1025883a 	mov	r18,r2
 800b004:	1823883a 	mov	r17,r3
 800b008:	800ca100 	call	800ca10 <__adddf3>
 800b00c:	100d883a 	mov	r6,r2
 800b010:	180f883a 	mov	r7,r3
 800b014:	9009883a 	mov	r4,r18
 800b018:	880b883a 	mov	r5,r17
 800b01c:	80800015 	stw	r2,0(r16)
 800b020:	80c00115 	stw	r3,4(r16)
 800b024:	800e4e00 	call	800e4e0 <__subdf3>
 800b028:	018b80f4 	movhi	r6,11779
 800b02c:	01cee8f4 	movhi	r7,15267
 800b030:	1009883a 	mov	r4,r2
 800b034:	180b883a 	mov	r5,r3
 800b038:	319c1cc4 	addi	r6,r6,28787
 800b03c:	39c66284 	addi	r7,r7,6538
 800b040:	800ca100 	call	800ca10 <__adddf3>
 800b044:	80800215 	stw	r2,8(r16)
 800b048:	80c00315 	stw	r3,12(r16)
 800b04c:	00bfffc4 	movi	r2,-1
 800b050:	003eac06 	br	800ab04 <__alt_data_end+0xf800ab04>
 800b054:	dac00917 	ldw	r11,36(sp)
 800b058:	b815883a 	mov	r10,r23
 800b05c:	003f2506 	br	800acf4 <__alt_data_end+0xf800acf4>

0800b060 <__kernel_cos>:
 800b060:	defff304 	addi	sp,sp,-52
 800b064:	dc000315 	stw	r16,12(sp)
 800b068:	04200034 	movhi	r16,32768
 800b06c:	843fffc4 	addi	r16,r16,-1
 800b070:	008f9034 	movhi	r2,15936
 800b074:	df000b15 	stw	fp,44(sp)
 800b078:	ddc00a15 	stw	r23,40(sp)
 800b07c:	dd800915 	stw	r22,36(sp)
 800b080:	dcc00615 	stw	r19,24(sp)
 800b084:	dfc00c15 	stw	ra,48(sp)
 800b088:	dd400815 	stw	r21,32(sp)
 800b08c:	dd000715 	stw	r20,28(sp)
 800b090:	dc800515 	stw	r18,20(sp)
 800b094:	dc400415 	stw	r17,16(sp)
 800b098:	2c20703a 	and	r16,r5,r16
 800b09c:	10bfffc4 	addi	r2,r2,-1
 800b0a0:	2827883a 	mov	r19,r5
 800b0a4:	202d883a 	mov	r22,r4
 800b0a8:	302f883a 	mov	r23,r6
 800b0ac:	3839883a 	mov	fp,r7
 800b0b0:	14007516 	blt	r2,r16,800b288 <__kernel_cos+0x228>
 800b0b4:	800edb00 	call	800edb0 <__fixdfsi>
 800b0b8:	10010f26 	beq	r2,zero,800b4f8 <__kernel_cos+0x498>
 800b0bc:	b00d883a 	mov	r6,r22
 800b0c0:	980f883a 	mov	r7,r19
 800b0c4:	b009883a 	mov	r4,r22
 800b0c8:	980b883a 	mov	r5,r19
 800b0cc:	800ddbc0 	call	800ddbc <__muldf3>
 800b0d0:	01afa234 	movhi	r6,48776
 800b0d4:	01ef6a74 	movhi	r7,48553
 800b0d8:	1009883a 	mov	r4,r2
 800b0dc:	180b883a 	mov	r5,r3
 800b0e0:	318e3504 	addi	r6,r6,14548
 800b0e4:	39feba44 	addi	r7,r7,-1303
 800b0e8:	102b883a 	mov	r21,r2
 800b0ec:	1829883a 	mov	r20,r3
 800b0f0:	800ddbc0 	call	800ddbc <__muldf3>
 800b0f4:	01af6d74 	movhi	r6,48565
 800b0f8:	01cf88b4 	movhi	r7,15906
 800b0fc:	1009883a 	mov	r4,r2
 800b100:	180b883a 	mov	r5,r3
 800b104:	31ac7104 	addi	r6,r6,-20028
 800b108:	39fba784 	addi	r7,r7,-4450
 800b10c:	800ca100 	call	800ca10 <__adddf3>
 800b110:	1009883a 	mov	r4,r2
 800b114:	180b883a 	mov	r5,r3
 800b118:	a80d883a 	mov	r6,r21
 800b11c:	a00f883a 	mov	r7,r20
 800b120:	800ddbc0 	call	800ddbc <__muldf3>
 800b124:	01a02734 	movhi	r6,32924
 800b128:	01cfa4b4 	movhi	r7,16018
 800b12c:	1009883a 	mov	r4,r2
 800b130:	180b883a 	mov	r5,r3
 800b134:	3194ab44 	addi	r6,r6,21165
 800b138:	39df93c4 	addi	r7,r7,32335
 800b13c:	800e4e00 	call	800e4e0 <__subdf3>
 800b140:	1009883a 	mov	r4,r2
 800b144:	180b883a 	mov	r5,r3
 800b148:	a80d883a 	mov	r6,r21
 800b14c:	a00f883a 	mov	r7,r20
 800b150:	800ddbc0 	call	800ddbc <__muldf3>
 800b154:	018672f4 	movhi	r6,6603
 800b158:	01cfbeb4 	movhi	r7,16122
 800b15c:	1009883a 	mov	r4,r2
 800b160:	180b883a 	mov	r5,r3
 800b164:	31856404 	addi	r6,r6,5520
 800b168:	39c06804 	addi	r7,r7,416
 800b16c:	800ca100 	call	800ca10 <__adddf3>
 800b170:	1009883a 	mov	r4,r2
 800b174:	180b883a 	mov	r5,r3
 800b178:	a80d883a 	mov	r6,r21
 800b17c:	a00f883a 	mov	r7,r20
 800b180:	800ddbc0 	call	800ddbc <__muldf3>
 800b184:	0185b074 	movhi	r6,5825
 800b188:	01cfd5f4 	movhi	r7,16215
 800b18c:	1009883a 	mov	r4,r2
 800b190:	180b883a 	mov	r5,r3
 800b194:	31945dc4 	addi	r6,r6,20855
 800b198:	39f05b04 	addi	r7,r7,-16020
 800b19c:	800e4e00 	call	800e4e0 <__subdf3>
 800b1a0:	1009883a 	mov	r4,r2
 800b1a4:	180b883a 	mov	r5,r3
 800b1a8:	a80d883a 	mov	r6,r21
 800b1ac:	a00f883a 	mov	r7,r20
 800b1b0:	800ddbc0 	call	800ddbc <__muldf3>
 800b1b4:	01955574 	movhi	r6,21845
 800b1b8:	01cfe974 	movhi	r7,16293
 800b1bc:	1009883a 	mov	r4,r2
 800b1c0:	180b883a 	mov	r5,r3
 800b1c4:	31955304 	addi	r6,r6,21836
 800b1c8:	39d55544 	addi	r7,r7,21845
 800b1cc:	800ca100 	call	800ca10 <__adddf3>
 800b1d0:	1009883a 	mov	r4,r2
 800b1d4:	180b883a 	mov	r5,r3
 800b1d8:	a80d883a 	mov	r6,r21
 800b1dc:	a00f883a 	mov	r7,r20
 800b1e0:	800ddbc0 	call	800ddbc <__muldf3>
 800b1e4:	1017883a 	mov	r11,r2
 800b1e8:	1815883a 	mov	r10,r3
 800b1ec:	a809883a 	mov	r4,r21
 800b1f0:	a00b883a 	mov	r5,r20
 800b1f4:	000d883a 	mov	r6,zero
 800b1f8:	01cff834 	movhi	r7,16352
 800b1fc:	da800215 	stw	r10,8(sp)
 800b200:	dac00115 	stw	r11,4(sp)
 800b204:	800ddbc0 	call	800ddbc <__muldf3>
 800b208:	dac00117 	ldw	r11,4(sp)
 800b20c:	da800217 	ldw	r10,8(sp)
 800b210:	a809883a 	mov	r4,r21
 800b214:	580d883a 	mov	r6,r11
 800b218:	500f883a 	mov	r7,r10
 800b21c:	a00b883a 	mov	r5,r20
 800b220:	1023883a 	mov	r17,r2
 800b224:	1821883a 	mov	r16,r3
 800b228:	800ddbc0 	call	800ddbc <__muldf3>
 800b22c:	b009883a 	mov	r4,r22
 800b230:	980b883a 	mov	r5,r19
 800b234:	b80d883a 	mov	r6,r23
 800b238:	e00f883a 	mov	r7,fp
 800b23c:	1029883a 	mov	r20,r2
 800b240:	1825883a 	mov	r18,r3
 800b244:	800ddbc0 	call	800ddbc <__muldf3>
 800b248:	a009883a 	mov	r4,r20
 800b24c:	900b883a 	mov	r5,r18
 800b250:	100d883a 	mov	r6,r2
 800b254:	180f883a 	mov	r7,r3
 800b258:	800e4e00 	call	800e4e0 <__subdf3>
 800b25c:	8809883a 	mov	r4,r17
 800b260:	800b883a 	mov	r5,r16
 800b264:	100d883a 	mov	r6,r2
 800b268:	180f883a 	mov	r7,r3
 800b26c:	800e4e00 	call	800e4e0 <__subdf3>
 800b270:	0009883a 	mov	r4,zero
 800b274:	014ffc34 	movhi	r5,16368
 800b278:	100d883a 	mov	r6,r2
 800b27c:	180f883a 	mov	r7,r3
 800b280:	800e4e00 	call	800e4e0 <__subdf3>
 800b284:	00008b06 	br	800b4b4 <__kernel_cos+0x454>
 800b288:	200d883a 	mov	r6,r4
 800b28c:	280f883a 	mov	r7,r5
 800b290:	800ddbc0 	call	800ddbc <__muldf3>
 800b294:	01afa234 	movhi	r6,48776
 800b298:	01ef6a74 	movhi	r7,48553
 800b29c:	318e3504 	addi	r6,r6,14548
 800b2a0:	39feba44 	addi	r7,r7,-1303
 800b2a4:	1009883a 	mov	r4,r2
 800b2a8:	180b883a 	mov	r5,r3
 800b2ac:	1025883a 	mov	r18,r2
 800b2b0:	1823883a 	mov	r17,r3
 800b2b4:	800ddbc0 	call	800ddbc <__muldf3>
 800b2b8:	01af6d74 	movhi	r6,48565
 800b2bc:	01cf88b4 	movhi	r7,15906
 800b2c0:	1009883a 	mov	r4,r2
 800b2c4:	180b883a 	mov	r5,r3
 800b2c8:	31ac7104 	addi	r6,r6,-20028
 800b2cc:	39fba784 	addi	r7,r7,-4450
 800b2d0:	800ca100 	call	800ca10 <__adddf3>
 800b2d4:	1009883a 	mov	r4,r2
 800b2d8:	180b883a 	mov	r5,r3
 800b2dc:	900d883a 	mov	r6,r18
 800b2e0:	880f883a 	mov	r7,r17
 800b2e4:	800ddbc0 	call	800ddbc <__muldf3>
 800b2e8:	01a02734 	movhi	r6,32924
 800b2ec:	01cfa4b4 	movhi	r7,16018
 800b2f0:	1009883a 	mov	r4,r2
 800b2f4:	180b883a 	mov	r5,r3
 800b2f8:	3194ab44 	addi	r6,r6,21165
 800b2fc:	39df93c4 	addi	r7,r7,32335
 800b300:	800e4e00 	call	800e4e0 <__subdf3>
 800b304:	1009883a 	mov	r4,r2
 800b308:	180b883a 	mov	r5,r3
 800b30c:	900d883a 	mov	r6,r18
 800b310:	880f883a 	mov	r7,r17
 800b314:	800ddbc0 	call	800ddbc <__muldf3>
 800b318:	018672f4 	movhi	r6,6603
 800b31c:	01cfbeb4 	movhi	r7,16122
 800b320:	1009883a 	mov	r4,r2
 800b324:	180b883a 	mov	r5,r3
 800b328:	31856404 	addi	r6,r6,5520
 800b32c:	39c06804 	addi	r7,r7,416
 800b330:	800ca100 	call	800ca10 <__adddf3>
 800b334:	1009883a 	mov	r4,r2
 800b338:	180b883a 	mov	r5,r3
 800b33c:	900d883a 	mov	r6,r18
 800b340:	880f883a 	mov	r7,r17
 800b344:	800ddbc0 	call	800ddbc <__muldf3>
 800b348:	0185b074 	movhi	r6,5825
 800b34c:	01cfd5f4 	movhi	r7,16215
 800b350:	1009883a 	mov	r4,r2
 800b354:	180b883a 	mov	r5,r3
 800b358:	31945dc4 	addi	r6,r6,20855
 800b35c:	39f05b04 	addi	r7,r7,-16020
 800b360:	800e4e00 	call	800e4e0 <__subdf3>
 800b364:	1009883a 	mov	r4,r2
 800b368:	180b883a 	mov	r5,r3
 800b36c:	900d883a 	mov	r6,r18
 800b370:	880f883a 	mov	r7,r17
 800b374:	800ddbc0 	call	800ddbc <__muldf3>
 800b378:	01955574 	movhi	r6,21845
 800b37c:	01cfe974 	movhi	r7,16293
 800b380:	1009883a 	mov	r4,r2
 800b384:	180b883a 	mov	r5,r3
 800b388:	31955304 	addi	r6,r6,21836
 800b38c:	39d55544 	addi	r7,r7,21845
 800b390:	800ca100 	call	800ca10 <__adddf3>
 800b394:	1009883a 	mov	r4,r2
 800b398:	180b883a 	mov	r5,r3
 800b39c:	900d883a 	mov	r6,r18
 800b3a0:	880f883a 	mov	r7,r17
 800b3a4:	800ddbc0 	call	800ddbc <__muldf3>
 800b3a8:	1013883a 	mov	r9,r2
 800b3ac:	1017883a 	mov	r11,r2
 800b3b0:	008ff4f4 	movhi	r2,16339
 800b3b4:	108ccc84 	addi	r2,r2,13106
 800b3b8:	902b883a 	mov	r21,r18
 800b3bc:	8829883a 	mov	r20,r17
 800b3c0:	1811883a 	mov	r8,r3
 800b3c4:	1815883a 	mov	r10,r3
 800b3c8:	143f880e 	bge	r2,r16,800b1ec <__alt_data_end+0xf800b1ec>
 800b3cc:	008ffa74 	movhi	r2,16361
 800b3d0:	14004416 	blt	r2,r16,800b4e4 <__kernel_cos+0x484>
 800b3d4:	00bff834 	movhi	r2,65504
 800b3d8:	80a1883a 	add	r16,r16,r2
 800b3dc:	0009883a 	mov	r4,zero
 800b3e0:	014ffc34 	movhi	r5,16368
 800b3e4:	000d883a 	mov	r6,zero
 800b3e8:	800f883a 	mov	r7,r16
 800b3ec:	da400115 	stw	r9,4(sp)
 800b3f0:	d8c00215 	stw	r3,8(sp)
 800b3f4:	800e4e00 	call	800e4e0 <__subdf3>
 800b3f8:	da000217 	ldw	r8,8(sp)
 800b3fc:	da400117 	ldw	r9,4(sp)
 800b400:	102b883a 	mov	r21,r2
 800b404:	d8c00015 	stw	r3,0(sp)
 800b408:	9009883a 	mov	r4,r18
 800b40c:	880b883a 	mov	r5,r17
 800b410:	000d883a 	mov	r6,zero
 800b414:	01cff834 	movhi	r7,16352
 800b418:	da000215 	stw	r8,8(sp)
 800b41c:	da400115 	stw	r9,4(sp)
 800b420:	800ddbc0 	call	800ddbc <__muldf3>
 800b424:	800f883a 	mov	r7,r16
 800b428:	1009883a 	mov	r4,r2
 800b42c:	180b883a 	mov	r5,r3
 800b430:	000d883a 	mov	r6,zero
 800b434:	800e4e00 	call	800e4e0 <__subdf3>
 800b438:	da400117 	ldw	r9,4(sp)
 800b43c:	da000217 	ldw	r8,8(sp)
 800b440:	9009883a 	mov	r4,r18
 800b444:	480d883a 	mov	r6,r9
 800b448:	400f883a 	mov	r7,r8
 800b44c:	880b883a 	mov	r5,r17
 800b450:	1029883a 	mov	r20,r2
 800b454:	1821883a 	mov	r16,r3
 800b458:	800ddbc0 	call	800ddbc <__muldf3>
 800b45c:	b009883a 	mov	r4,r22
 800b460:	980b883a 	mov	r5,r19
 800b464:	b80d883a 	mov	r6,r23
 800b468:	e00f883a 	mov	r7,fp
 800b46c:	1025883a 	mov	r18,r2
 800b470:	1823883a 	mov	r17,r3
 800b474:	800ddbc0 	call	800ddbc <__muldf3>
 800b478:	9009883a 	mov	r4,r18
 800b47c:	880b883a 	mov	r5,r17
 800b480:	100d883a 	mov	r6,r2
 800b484:	180f883a 	mov	r7,r3
 800b488:	800e4e00 	call	800e4e0 <__subdf3>
 800b48c:	a009883a 	mov	r4,r20
 800b490:	800b883a 	mov	r5,r16
 800b494:	100d883a 	mov	r6,r2
 800b498:	180f883a 	mov	r7,r3
 800b49c:	800e4e00 	call	800e4e0 <__subdf3>
 800b4a0:	d9400017 	ldw	r5,0(sp)
 800b4a4:	a809883a 	mov	r4,r21
 800b4a8:	100d883a 	mov	r6,r2
 800b4ac:	180f883a 	mov	r7,r3
 800b4b0:	800e4e00 	call	800e4e0 <__subdf3>
 800b4b4:	dfc00c17 	ldw	ra,48(sp)
 800b4b8:	df000b17 	ldw	fp,44(sp)
 800b4bc:	ddc00a17 	ldw	r23,40(sp)
 800b4c0:	dd800917 	ldw	r22,36(sp)
 800b4c4:	dd400817 	ldw	r21,32(sp)
 800b4c8:	dd000717 	ldw	r20,28(sp)
 800b4cc:	dcc00617 	ldw	r19,24(sp)
 800b4d0:	dc800517 	ldw	r18,20(sp)
 800b4d4:	dc400417 	ldw	r17,16(sp)
 800b4d8:	dc000317 	ldw	r16,12(sp)
 800b4dc:	dec00d04 	addi	sp,sp,52
 800b4e0:	f800283a 	ret
 800b4e4:	008ff9f4 	movhi	r2,16359
 800b4e8:	002b883a 	mov	r21,zero
 800b4ec:	d8800015 	stw	r2,0(sp)
 800b4f0:	040ff4b4 	movhi	r16,16338
 800b4f4:	003fc406 	br	800b408 <__alt_data_end+0xf800b408>
 800b4f8:	0005883a 	mov	r2,zero
 800b4fc:	00cffc34 	movhi	r3,16368
 800b500:	003fec06 	br	800b4b4 <__alt_data_end+0xf800b4b4>

0800b504 <__kernel_rem_pio2>:
 800b504:	deff5b04 	addi	sp,sp,-660
 800b508:	da00a517 	ldw	r8,660(sp)
 800b50c:	00c205b4 	movhi	r3,2070
 800b510:	18d77504 	addi	r3,r3,24020
 800b514:	4205883a 	add	r2,r8,r8
 800b518:	1085883a 	add	r2,r2,r2
 800b51c:	1885883a 	add	r2,r3,r2
 800b520:	d9008d15 	stw	r4,564(sp)
 800b524:	d9409015 	stw	r5,576(sp)
 800b528:	313fff44 	addi	r4,r6,-3
 800b52c:	01400604 	movi	r5,24
 800b530:	dd80a115 	stw	r22,644(sp)
 800b534:	dc009b15 	stw	r16,620(sp)
 800b538:	dfc0a415 	stw	ra,656(sp)
 800b53c:	df00a315 	stw	fp,652(sp)
 800b540:	ddc0a215 	stw	r23,648(sp)
 800b544:	dd40a015 	stw	r21,640(sp)
 800b548:	dd009f15 	stw	r20,636(sp)
 800b54c:	dcc09e15 	stw	r19,632(sp)
 800b550:	dc809d15 	stw	r18,628(sp)
 800b554:	dc409c15 	stw	r17,624(sp)
 800b558:	3021883a 	mov	r16,r6
 800b55c:	d9c09315 	stw	r7,588(sp)
 800b560:	15800017 	ldw	r22,0(r2)
 800b564:	800c9500 	call	800c950 <__divsi3>
 800b568:	da009317 	ldw	r8,588(sp)
 800b56c:	d8809215 	stw	r2,584(sp)
 800b570:	423fffc4 	addi	r8,r8,-1
 800b574:	da008c15 	stw	r8,560(sp)
 800b578:	10032a16 	blt	r2,zero,800c224 <__kernel_rem_pio2+0xd20>
 800b57c:	da009217 	ldw	r8,584(sp)
 800b580:	d9009217 	ldw	r4,584(sp)
 800b584:	0206303a 	nor	r3,zero,r8
 800b588:	18c00624 	muli	r3,r3,24
 800b58c:	da008c17 	ldw	r8,560(sp)
 800b590:	1c07883a 	add	r3,r3,r16
 800b594:	4585883a 	add	r2,r8,r22
 800b598:	d8c08f15 	stw	r3,572(sp)
 800b59c:	2223c83a 	sub	r17,r4,r8
 800b5a0:	10001016 	blt	r2,zero,800b5e4 <__kernel_rem_pio2+0xe0>
 800b5a4:	da00a617 	ldw	r8,664(sp)
 800b5a8:	8c65883a 	add	r18,r17,r17
 800b5ac:	94a5883a 	add	r18,r18,r18
 800b5b0:	8885883a 	add	r2,r17,r2
 800b5b4:	dcc05004 	addi	r19,sp,320
 800b5b8:	44a5883a 	add	r18,r8,r18
 800b5bc:	14000044 	addi	r16,r2,1
 800b5c0:	88014516 	blt	r17,zero,800bad8 <__kernel_rem_pio2+0x5d4>
 800b5c4:	91000017 	ldw	r4,0(r18)
 800b5c8:	800ee380 	call	800ee38 <__floatsidf>
 800b5cc:	98800015 	stw	r2,0(r19)
 800b5d0:	98c00115 	stw	r3,4(r19)
 800b5d4:	8c400044 	addi	r17,r17,1
 800b5d8:	9cc00204 	addi	r19,r19,8
 800b5dc:	94800104 	addi	r18,r18,4
 800b5e0:	8c3ff71e 	bne	r17,r16,800b5c0 <__alt_data_end+0xf800b5c0>
 800b5e4:	b0002116 	blt	r22,zero,800b66c <__kernel_rem_pio2+0x168>
 800b5e8:	da009317 	ldw	r8,588(sp)
 800b5ec:	b02490fa 	slli	r18,r22,3
 800b5f0:	d8805004 	addi	r2,sp,320
 800b5f4:	402e90fa 	slli	r23,r8,3
 800b5f8:	d823883a 	mov	r17,sp
 800b5fc:	dc004e04 	addi	r16,sp,312
 800b600:	14b9883a 	add	fp,r2,r18
 800b604:	da008c17 	ldw	r8,560(sp)
 800b608:	40015816 	blt	r8,zero,800bb6c <__kernel_rem_pio2+0x668>
 800b60c:	dcc08d17 	ldw	r19,564(sp)
 800b610:	85e5883a 	add	r18,r16,r23
 800b614:	002b883a 	mov	r21,zero
 800b618:	0029883a 	mov	r20,zero
 800b61c:	99000017 	ldw	r4,0(r19)
 800b620:	99400117 	ldw	r5,4(r19)
 800b624:	91800017 	ldw	r6,0(r18)
 800b628:	91c00117 	ldw	r7,4(r18)
 800b62c:	94bffe04 	addi	r18,r18,-8
 800b630:	9cc00204 	addi	r19,r19,8
 800b634:	800ddbc0 	call	800ddbc <__muldf3>
 800b638:	a809883a 	mov	r4,r21
 800b63c:	a00b883a 	mov	r5,r20
 800b640:	100d883a 	mov	r6,r2
 800b644:	180f883a 	mov	r7,r3
 800b648:	800ca100 	call	800ca10 <__adddf3>
 800b64c:	102b883a 	mov	r21,r2
 800b650:	1829883a 	mov	r20,r3
 800b654:	84bff11e 	bne	r16,r18,800b61c <__alt_data_end+0xf800b61c>
 800b658:	8d400015 	stw	r21,0(r17)
 800b65c:	8d000115 	stw	r20,4(r17)
 800b660:	84000204 	addi	r16,r16,8
 800b664:	8c400204 	addi	r17,r17,8
 800b668:	873fe61e 	bne	r16,fp,800b604 <__alt_data_end+0xf800b604>
 800b66c:	da009317 	ldw	r8,588(sp)
 800b670:	b00690ba 	slli	r3,r22,2
 800b674:	b0bfffc4 	addi	r2,r22,-1
 800b678:	423ffe24 	muli	r8,r8,-8
 800b67c:	193fff04 	addi	r4,r3,-4
 800b680:	1085883a 	add	r2,r2,r2
 800b684:	da008e15 	stw	r8,568(sp)
 800b688:	18fffe04 	addi	r3,r3,-8
 800b68c:	da007804 	addi	r8,sp,480
 800b690:	40d1883a 	add	r8,r8,r3
 800b694:	1085883a 	add	r2,r2,r2
 800b698:	d885883a 	add	r2,sp,r2
 800b69c:	da009515 	stw	r8,596(sp)
 800b6a0:	da007804 	addi	r8,sp,480
 800b6a4:	4111883a 	add	r8,r8,r4
 800b6a8:	10807804 	addi	r2,r2,480
 800b6ac:	da009615 	stw	r8,600(sp)
 800b6b0:	b021883a 	mov	r16,r22
 800b6b4:	d8809715 	stw	r2,604(sp)
 800b6b8:	dd809415 	stw	r22,592(sp)
 800b6bc:	800490fa 	slli	r2,r16,3
 800b6c0:	d885883a 	add	r2,sp,r2
 800b6c4:	15c00017 	ldw	r23,0(r2)
 800b6c8:	15000117 	ldw	r20,4(r2)
 800b6cc:	04002d0e 	bge	zero,r16,800b784 <__kernel_rem_pio2+0x280>
 800b6d0:	00880034 	movhi	r2,8192
 800b6d4:	10bfffc4 	addi	r2,r2,-1
 800b6d8:	80a5883a 	add	r18,r16,r2
 800b6dc:	902490fa 	slli	r18,r18,3
 800b6e0:	8423883a 	add	r17,r16,r16
 800b6e4:	8c63883a 	add	r17,r17,r17
 800b6e8:	dcc07804 	addi	r19,sp,480
 800b6ec:	dca5883a 	add	r18,sp,r18
 800b6f0:	9c63883a 	add	r17,r19,r17
 800b6f4:	000d883a 	mov	r6,zero
 800b6f8:	01cf9c34 	movhi	r7,15984
 800b6fc:	b809883a 	mov	r4,r23
 800b700:	a00b883a 	mov	r5,r20
 800b704:	800ddbc0 	call	800ddbc <__muldf3>
 800b708:	180b883a 	mov	r5,r3
 800b70c:	1009883a 	mov	r4,r2
 800b710:	800edb00 	call	800edb0 <__fixdfsi>
 800b714:	1009883a 	mov	r4,r2
 800b718:	800ee380 	call	800ee38 <__floatsidf>
 800b71c:	1009883a 	mov	r4,r2
 800b720:	180b883a 	mov	r5,r3
 800b724:	000d883a 	mov	r6,zero
 800b728:	01d05c34 	movhi	r7,16752
 800b72c:	102d883a 	mov	r22,r2
 800b730:	182b883a 	mov	r21,r3
 800b734:	800ddbc0 	call	800ddbc <__muldf3>
 800b738:	b809883a 	mov	r4,r23
 800b73c:	a00b883a 	mov	r5,r20
 800b740:	100d883a 	mov	r6,r2
 800b744:	180f883a 	mov	r7,r3
 800b748:	800e4e00 	call	800e4e0 <__subdf3>
 800b74c:	180b883a 	mov	r5,r3
 800b750:	1009883a 	mov	r4,r2
 800b754:	800edb00 	call	800edb0 <__fixdfsi>
 800b758:	91800017 	ldw	r6,0(r18)
 800b75c:	91c00117 	ldw	r7,4(r18)
 800b760:	98800015 	stw	r2,0(r19)
 800b764:	b009883a 	mov	r4,r22
 800b768:	a80b883a 	mov	r5,r21
 800b76c:	800ca100 	call	800ca10 <__adddf3>
 800b770:	9cc00104 	addi	r19,r19,4
 800b774:	102f883a 	mov	r23,r2
 800b778:	1829883a 	mov	r20,r3
 800b77c:	94bffe04 	addi	r18,r18,-8
 800b780:	9c7fdc1e 	bne	r19,r17,800b6f4 <__alt_data_end+0xf800b6f4>
 800b784:	d9808f17 	ldw	r6,572(sp)
 800b788:	a00b883a 	mov	r5,r20
 800b78c:	b809883a 	mov	r4,r23
 800b790:	800c6fc0 	call	800c6fc <scalbn>
 800b794:	000d883a 	mov	r6,zero
 800b798:	01cff034 	movhi	r7,16320
 800b79c:	1009883a 	mov	r4,r2
 800b7a0:	180b883a 	mov	r5,r3
 800b7a4:	1025883a 	mov	r18,r2
 800b7a8:	1823883a 	mov	r17,r3
 800b7ac:	800ddbc0 	call	800ddbc <__muldf3>
 800b7b0:	1009883a 	mov	r4,r2
 800b7b4:	180b883a 	mov	r5,r3
 800b7b8:	800c5080 	call	800c508 <floor>
 800b7bc:	1009883a 	mov	r4,r2
 800b7c0:	180b883a 	mov	r5,r3
 800b7c4:	000d883a 	mov	r6,zero
 800b7c8:	01d00834 	movhi	r7,16416
 800b7cc:	800ddbc0 	call	800ddbc <__muldf3>
 800b7d0:	100d883a 	mov	r6,r2
 800b7d4:	180f883a 	mov	r7,r3
 800b7d8:	9009883a 	mov	r4,r18
 800b7dc:	880b883a 	mov	r5,r17
 800b7e0:	800e4e00 	call	800e4e0 <__subdf3>
 800b7e4:	180b883a 	mov	r5,r3
 800b7e8:	1009883a 	mov	r4,r2
 800b7ec:	1825883a 	mov	r18,r3
 800b7f0:	1027883a 	mov	r19,r2
 800b7f4:	800edb00 	call	800edb0 <__fixdfsi>
 800b7f8:	1009883a 	mov	r4,r2
 800b7fc:	1023883a 	mov	r17,r2
 800b800:	800ee380 	call	800ee38 <__floatsidf>
 800b804:	9809883a 	mov	r4,r19
 800b808:	900b883a 	mov	r5,r18
 800b80c:	100d883a 	mov	r6,r2
 800b810:	180f883a 	mov	r7,r3
 800b814:	800e4e00 	call	800e4e0 <__subdf3>
 800b818:	da008f17 	ldw	r8,572(sp)
 800b81c:	1019883a 	mov	r12,r2
 800b820:	1029883a 	mov	r20,r2
 800b824:	1817883a 	mov	r11,r3
 800b828:	0200ae0e 	bge	zero,r8,800bae4 <__kernel_rem_pio2+0x5e0>
 800b82c:	80bfffc4 	addi	r2,r16,-1
 800b830:	1085883a 	add	r2,r2,r2
 800b834:	1085883a 	add	r2,r2,r2
 800b838:	d885883a 	add	r2,sp,r2
 800b83c:	10807804 	addi	r2,r2,480
 800b840:	11400017 	ldw	r5,0(r2)
 800b844:	01000604 	movi	r4,24
 800b848:	2209c83a 	sub	r4,r4,r8
 800b84c:	290dd83a 	sra	r6,r5,r4
 800b850:	048005c4 	movi	r18,23
 800b854:	9225c83a 	sub	r18,r18,r8
 800b858:	3108983a 	sll	r4,r6,r4
 800b85c:	89a3883a 	add	r17,r17,r6
 800b860:	2909c83a 	sub	r4,r5,r4
 800b864:	24a5d83a 	sra	r18,r4,r18
 800b868:	11000015 	stw	r4,0(r2)
 800b86c:	04802a0e 	bge	zero,r18,800b918 <__kernel_rem_pio2+0x414>
 800b870:	8c400044 	addi	r17,r17,1
 800b874:	0400c40e 	bge	zero,r16,800bb88 <__kernel_rem_pio2+0x684>
 800b878:	01404034 	movhi	r5,256
 800b87c:	297fffc4 	addi	r5,r5,-1
 800b880:	da007804 	addi	r8,sp,480
 800b884:	0015883a 	mov	r10,zero
 800b888:	0027883a 	mov	r19,zero
 800b88c:	01004034 	movhi	r4,256
 800b890:	00000706 	br	800b8b0 <__kernel_rem_pio2+0x3ac>
 800b894:	208dc83a 	sub	r6,r4,r2
 800b898:	10000226 	beq	r2,zero,800b8a4 <__kernel_rem_pio2+0x3a0>
 800b89c:	41800015 	stw	r6,0(r8)
 800b8a0:	04c00044 	movi	r19,1
 800b8a4:	52800044 	addi	r10,r10,1
 800b8a8:	42000104 	addi	r8,r8,4
 800b8ac:	5400080e 	bge	r10,r16,800b8d0 <__kernel_rem_pio2+0x3cc>
 800b8b0:	40800017 	ldw	r2,0(r8)
 800b8b4:	983ff726 	beq	r19,zero,800b894 <__alt_data_end+0xf800b894>
 800b8b8:	2885c83a 	sub	r2,r5,r2
 800b8bc:	40800015 	stw	r2,0(r8)
 800b8c0:	52800044 	addi	r10,r10,1
 800b8c4:	04c00044 	movi	r19,1
 800b8c8:	42000104 	addi	r8,r8,4
 800b8cc:	543ff816 	blt	r10,r16,800b8b0 <__alt_data_end+0xf800b8b0>
 800b8d0:	da008f17 	ldw	r8,572(sp)
 800b8d4:	02000e0e 	bge	zero,r8,800b910 <__kernel_rem_pio2+0x40c>
 800b8d8:	00800044 	movi	r2,1
 800b8dc:	40808a26 	beq	r8,r2,800bb08 <__kernel_rem_pio2+0x604>
 800b8e0:	00800084 	movi	r2,2
 800b8e4:	40800a1e 	bne	r8,r2,800b910 <__kernel_rem_pio2+0x40c>
 800b8e8:	80bfffc4 	addi	r2,r16,-1
 800b8ec:	1085883a 	add	r2,r2,r2
 800b8f0:	1085883a 	add	r2,r2,r2
 800b8f4:	d885883a 	add	r2,sp,r2
 800b8f8:	10807804 	addi	r2,r2,480
 800b8fc:	11400017 	ldw	r5,0(r2)
 800b900:	01001034 	movhi	r4,64
 800b904:	213fffc4 	addi	r4,r4,-1
 800b908:	2908703a 	and	r4,r5,r4
 800b90c:	11000015 	stw	r4,0(r2)
 800b910:	00800084 	movi	r2,2
 800b914:	90805a26 	beq	r18,r2,800ba80 <__kernel_rem_pio2+0x57c>
 800b918:	580b883a 	mov	r5,r11
 800b91c:	a009883a 	mov	r4,r20
 800b920:	000d883a 	mov	r6,zero
 800b924:	000f883a 	mov	r7,zero
 800b928:	dac09a15 	stw	r11,616(sp)
 800b92c:	800db780 	call	800db78 <__eqdf2>
 800b930:	dac09a17 	ldw	r11,616(sp)
 800b934:	1000961e 	bne	r2,zero,800bb90 <__kernel_rem_pio2+0x68c>
 800b938:	da009417 	ldw	r8,592(sp)
 800b93c:	817fffc4 	addi	r5,r16,-1
 800b940:	2a000b16 	blt	r5,r8,800b970 <__kernel_rem_pio2+0x46c>
 800b944:	800490ba 	slli	r2,r16,2
 800b948:	d9809617 	ldw	r6,600(sp)
 800b94c:	d9007804 	addi	r4,sp,480
 800b950:	10bfff04 	addi	r2,r2,-4
 800b954:	0007883a 	mov	r3,zero
 800b958:	2085883a 	add	r2,r4,r2
 800b95c:	11000017 	ldw	r4,0(r2)
 800b960:	10bfff04 	addi	r2,r2,-4
 800b964:	1906b03a 	or	r3,r3,r4
 800b968:	11bffc1e 	bne	r2,r6,800b95c <__alt_data_end+0xf800b95c>
 800b96c:	18013c1e 	bne	r3,zero,800be60 <__kernel_rem_pio2+0x95c>
 800b970:	da009717 	ldw	r8,604(sp)
 800b974:	40800017 	ldw	r2,0(r8)
 800b978:	1001371e 	bne	r2,zero,800be58 <__kernel_rem_pio2+0x954>
 800b97c:	d8809517 	ldw	r2,596(sp)
 800b980:	00c00044 	movi	r3,1
 800b984:	10bfff04 	addi	r2,r2,-4
 800b988:	11000117 	ldw	r4,4(r2)
 800b98c:	18c00044 	addi	r3,r3,1
 800b990:	203ffc26 	beq	r4,zero,800b984 <__alt_data_end+0xf800b984>
 800b994:	80c7883a 	add	r3,r16,r3
 800b998:	80800044 	addi	r2,r16,1
 800b99c:	d8c09115 	stw	r3,580(sp)
 800b9a0:	18803216 	blt	r3,r2,800ba6c <__kernel_rem_pio2+0x568>
 800b9a4:	da009317 	ldw	r8,588(sp)
 800b9a8:	8223883a 	add	r17,r16,r8
 800b9ac:	da009117 	ldw	r8,580(sp)
 800b9b0:	882290fa 	slli	r17,r17,3
 800b9b4:	45000044 	addi	r20,r8,1
 800b9b8:	da009217 	ldw	r8,584(sp)
 800b9bc:	a02890fa 	slli	r20,r20,3
 800b9c0:	1227883a 	add	r19,r2,r8
 800b9c4:	100490fa 	slli	r2,r2,3
 800b9c8:	da00a617 	ldw	r8,664(sp)
 800b9cc:	9ce7883a 	add	r19,r19,r19
 800b9d0:	9ce7883a 	add	r19,r19,r19
 800b9d4:	d8a5883a 	add	r18,sp,r2
 800b9d8:	d8805004 	addi	r2,sp,320
 800b9dc:	44e7883a 	add	r19,r8,r19
 800b9e0:	1463883a 	add	r17,r2,r17
 800b9e4:	dd29883a 	add	r20,sp,r20
 800b9e8:	99000017 	ldw	r4,0(r19)
 800b9ec:	800ee380 	call	800ee38 <__floatsidf>
 800b9f0:	da008c17 	ldw	r8,560(sp)
 800b9f4:	88800015 	stw	r2,0(r17)
 800b9f8:	88c00115 	stw	r3,4(r17)
 800b9fc:	40001d16 	blt	r8,zero,800ba74 <__kernel_rem_pio2+0x570>
 800ba00:	da008e17 	ldw	r8,568(sp)
 800ba04:	dd808d17 	ldw	r22,564(sp)
 800ba08:	8821883a 	mov	r16,r17
 800ba0c:	8a2b883a 	add	r21,r17,r8
 800ba10:	0039883a 	mov	fp,zero
 800ba14:	002f883a 	mov	r23,zero
 800ba18:	b1000017 	ldw	r4,0(r22)
 800ba1c:	b1400117 	ldw	r5,4(r22)
 800ba20:	81800017 	ldw	r6,0(r16)
 800ba24:	81c00117 	ldw	r7,4(r16)
 800ba28:	843ffe04 	addi	r16,r16,-8
 800ba2c:	b5800204 	addi	r22,r22,8
 800ba30:	800ddbc0 	call	800ddbc <__muldf3>
 800ba34:	e009883a 	mov	r4,fp
 800ba38:	b80b883a 	mov	r5,r23
 800ba3c:	100d883a 	mov	r6,r2
 800ba40:	180f883a 	mov	r7,r3
 800ba44:	800ca100 	call	800ca10 <__adddf3>
 800ba48:	1039883a 	mov	fp,r2
 800ba4c:	182f883a 	mov	r23,r3
 800ba50:	857ff11e 	bne	r16,r21,800ba18 <__alt_data_end+0xf800ba18>
 800ba54:	97000015 	stw	fp,0(r18)
 800ba58:	95c00115 	stw	r23,4(r18)
 800ba5c:	94800204 	addi	r18,r18,8
 800ba60:	9cc00104 	addi	r19,r19,4
 800ba64:	8c400204 	addi	r17,r17,8
 800ba68:	953fdf1e 	bne	r18,r20,800b9e8 <__alt_data_end+0xf800b9e8>
 800ba6c:	dc009117 	ldw	r16,580(sp)
 800ba70:	003f1206 	br	800b6bc <__alt_data_end+0xf800b6bc>
 800ba74:	0039883a 	mov	fp,zero
 800ba78:	002f883a 	mov	r23,zero
 800ba7c:	003ff506 	br	800ba54 <__alt_data_end+0xf800ba54>
 800ba80:	0009883a 	mov	r4,zero
 800ba84:	014ffc34 	movhi	r5,16368
 800ba88:	600d883a 	mov	r6,r12
 800ba8c:	180f883a 	mov	r7,r3
 800ba90:	800e4e00 	call	800e4e0 <__subdf3>
 800ba94:	1029883a 	mov	r20,r2
 800ba98:	1817883a 	mov	r11,r3
 800ba9c:	983f9e26 	beq	r19,zero,800b918 <__alt_data_end+0xf800b918>
 800baa0:	d9808f17 	ldw	r6,572(sp)
 800baa4:	0009883a 	mov	r4,zero
 800baa8:	014ffc34 	movhi	r5,16368
 800baac:	d8c09a15 	stw	r3,616(sp)
 800bab0:	800c6fc0 	call	800c6fc <scalbn>
 800bab4:	dac09a17 	ldw	r11,616(sp)
 800bab8:	a009883a 	mov	r4,r20
 800babc:	100d883a 	mov	r6,r2
 800bac0:	580b883a 	mov	r5,r11
 800bac4:	180f883a 	mov	r7,r3
 800bac8:	800e4e00 	call	800e4e0 <__subdf3>
 800bacc:	1029883a 	mov	r20,r2
 800bad0:	1817883a 	mov	r11,r3
 800bad4:	003f9006 	br	800b918 <__alt_data_end+0xf800b918>
 800bad8:	0005883a 	mov	r2,zero
 800badc:	0007883a 	mov	r3,zero
 800bae0:	003eba06 	br	800b5cc <__alt_data_end+0xf800b5cc>
 800bae4:	da008f17 	ldw	r8,572(sp)
 800bae8:	4000121e 	bne	r8,zero,800bb34 <__kernel_rem_pio2+0x630>
 800baec:	80bfffc4 	addi	r2,r16,-1
 800baf0:	1085883a 	add	r2,r2,r2
 800baf4:	1085883a 	add	r2,r2,r2
 800baf8:	d885883a 	add	r2,sp,r2
 800bafc:	14807817 	ldw	r18,480(r2)
 800bb00:	9025d5fa 	srai	r18,r18,23
 800bb04:	003f5906 	br	800b86c <__alt_data_end+0xf800b86c>
 800bb08:	80bfffc4 	addi	r2,r16,-1
 800bb0c:	1085883a 	add	r2,r2,r2
 800bb10:	1085883a 	add	r2,r2,r2
 800bb14:	d885883a 	add	r2,sp,r2
 800bb18:	10807804 	addi	r2,r2,480
 800bb1c:	11000017 	ldw	r4,0(r2)
 800bb20:	01402034 	movhi	r5,128
 800bb24:	297fffc4 	addi	r5,r5,-1
 800bb28:	2148703a 	and	r4,r4,r5
 800bb2c:	11000015 	stw	r4,0(r2)
 800bb30:	003f7706 	br	800b910 <__alt_data_end+0xf800b910>
 800bb34:	180b883a 	mov	r5,r3
 800bb38:	1009883a 	mov	r4,r2
 800bb3c:	000d883a 	mov	r6,zero
 800bb40:	01cff834 	movhi	r7,16352
 800bb44:	d8c09915 	stw	r3,612(sp)
 800bb48:	d8c09a15 	stw	r3,616(sp)
 800bb4c:	d8809815 	stw	r2,608(sp)
 800bb50:	800dbfc0 	call	800dbfc <__gedf2>
 800bb54:	d8c09917 	ldw	r3,612(sp)
 800bb58:	dac09a17 	ldw	r11,616(sp)
 800bb5c:	db009817 	ldw	r12,608(sp)
 800bb60:	1000050e 	bge	r2,zero,800bb78 <__kernel_rem_pio2+0x674>
 800bb64:	0025883a 	mov	r18,zero
 800bb68:	003f6b06 	br	800b918 <__alt_data_end+0xf800b918>
 800bb6c:	002b883a 	mov	r21,zero
 800bb70:	0029883a 	mov	r20,zero
 800bb74:	003eb806 	br	800b658 <__alt_data_end+0xf800b658>
 800bb78:	8c400044 	addi	r17,r17,1
 800bb7c:	0401960e 	bge	zero,r16,800c1d8 <__kernel_rem_pio2+0xcd4>
 800bb80:	04800084 	movi	r18,2
 800bb84:	003f3c06 	br	800b878 <__alt_data_end+0xf800b878>
 800bb88:	0027883a 	mov	r19,zero
 800bb8c:	003f5006 	br	800b8d0 <__alt_data_end+0xf800b8d0>
 800bb90:	da008f17 	ldw	r8,572(sp)
 800bb94:	a009883a 	mov	r4,r20
 800bb98:	580b883a 	mov	r5,r11
 800bb9c:	020dc83a 	sub	r6,zero,r8
 800bba0:	dc808c15 	stw	r18,560(sp)
 800bba4:	dd809417 	ldw	r22,592(sp)
 800bba8:	dc408e15 	stw	r17,568(sp)
 800bbac:	800c6fc0 	call	800c6fc <scalbn>
 800bbb0:	1009883a 	mov	r4,r2
 800bbb4:	180b883a 	mov	r5,r3
 800bbb8:	000d883a 	mov	r6,zero
 800bbbc:	01d05c34 	movhi	r7,16752
 800bbc0:	1029883a 	mov	r20,r2
 800bbc4:	182f883a 	mov	r23,r3
 800bbc8:	800dbfc0 	call	800dbfc <__gedf2>
 800bbcc:	10018b16 	blt	r2,zero,800c1fc <__kernel_rem_pio2+0xcf8>
 800bbd0:	01cf9c34 	movhi	r7,15984
 800bbd4:	000d883a 	mov	r6,zero
 800bbd8:	a009883a 	mov	r4,r20
 800bbdc:	b80b883a 	mov	r5,r23
 800bbe0:	800ddbc0 	call	800ddbc <__muldf3>
 800bbe4:	180b883a 	mov	r5,r3
 800bbe8:	1009883a 	mov	r4,r2
 800bbec:	800edb00 	call	800edb0 <__fixdfsi>
 800bbf0:	840d883a 	add	r6,r16,r16
 800bbf4:	318d883a 	add	r6,r6,r6
 800bbf8:	1009883a 	mov	r4,r2
 800bbfc:	d9a7883a 	add	r19,sp,r6
 800bc00:	102b883a 	mov	r21,r2
 800bc04:	800ee380 	call	800ee38 <__floatsidf>
 800bc08:	1009883a 	mov	r4,r2
 800bc0c:	180b883a 	mov	r5,r3
 800bc10:	000d883a 	mov	r6,zero
 800bc14:	01d05c34 	movhi	r7,16752
 800bc18:	800ddbc0 	call	800ddbc <__muldf3>
 800bc1c:	a009883a 	mov	r4,r20
 800bc20:	b80b883a 	mov	r5,r23
 800bc24:	100d883a 	mov	r6,r2
 800bc28:	180f883a 	mov	r7,r3
 800bc2c:	800e4e00 	call	800e4e0 <__subdf3>
 800bc30:	180b883a 	mov	r5,r3
 800bc34:	1009883a 	mov	r4,r2
 800bc38:	800edb00 	call	800edb0 <__fixdfsi>
 800bc3c:	da008f17 	ldw	r8,572(sp)
 800bc40:	84400044 	addi	r17,r16,1
 800bc44:	8c47883a 	add	r3,r17,r17
 800bc48:	9cc07804 	addi	r19,r19,480
 800bc4c:	18c7883a 	add	r3,r3,r3
 800bc50:	98800015 	stw	r2,0(r19)
 800bc54:	d8c7883a 	add	r3,sp,r3
 800bc58:	42000604 	addi	r8,r8,24
 800bc5c:	da008f15 	stw	r8,572(sp)
 800bc60:	1d407815 	stw	r21,480(r3)
 800bc64:	d9808f17 	ldw	r6,572(sp)
 800bc68:	0009883a 	mov	r4,zero
 800bc6c:	014ffc34 	movhi	r5,16368
 800bc70:	800c6fc0 	call	800c6fc <scalbn>
 800bc74:	1029883a 	mov	r20,r2
 800bc78:	182b883a 	mov	r21,r3
 800bc7c:	88006e16 	blt	r17,zero,800be38 <__kernel_rem_pio2+0x934>
 800bc80:	881090fa 	slli	r8,r17,3
 800bc84:	d8c07804 	addi	r3,sp,480
 800bc88:	dc3ffe04 	addi	r16,sp,-8
 800bc8c:	da008d15 	stw	r8,564(sp)
 800bc90:	d8808d17 	ldw	r2,564(sp)
 800bc94:	8c51883a 	add	r8,r17,r17
 800bc98:	4211883a 	add	r8,r8,r8
 800bc9c:	d8a7883a 	add	r19,sp,r2
 800bca0:	1a2f883a 	add	r23,r3,r8
 800bca4:	9839883a 	mov	fp,r19
 800bca8:	b9000017 	ldw	r4,0(r23)
 800bcac:	e73ffe04 	addi	fp,fp,-8
 800bcb0:	bdffff04 	addi	r23,r23,-4
 800bcb4:	800ee380 	call	800ee38 <__floatsidf>
 800bcb8:	a00d883a 	mov	r6,r20
 800bcbc:	a80f883a 	mov	r7,r21
 800bcc0:	1009883a 	mov	r4,r2
 800bcc4:	180b883a 	mov	r5,r3
 800bcc8:	800ddbc0 	call	800ddbc <__muldf3>
 800bccc:	a009883a 	mov	r4,r20
 800bcd0:	a80b883a 	mov	r5,r21
 800bcd4:	e0800215 	stw	r2,8(fp)
 800bcd8:	e0c00315 	stw	r3,12(fp)
 800bcdc:	000d883a 	mov	r6,zero
 800bce0:	01cf9c34 	movhi	r7,15984
 800bce4:	800ddbc0 	call	800ddbc <__muldf3>
 800bce8:	1029883a 	mov	r20,r2
 800bcec:	182b883a 	mov	r21,r3
 800bcf0:	e43fed1e 	bne	fp,r16,800bca8 <__alt_data_end+0xf800bca8>
 800bcf4:	8a000044 	addi	r8,r17,1
 800bcf8:	0029883a 	mov	r20,zero
 800bcfc:	4039883a 	mov	fp,r8
 800bd00:	dc408f15 	stw	r17,572(sp)
 800bd04:	b0004916 	blt	r22,zero,800be2c <__kernel_rem_pio2+0x928>
 800bd08:	a0004816 	blt	r20,zero,800be2c <__kernel_rem_pio2+0x928>
 800bd0c:	040205b4 	movhi	r16,2070
 800bd10:	84176504 	addi	r16,r16,23956
 800bd14:	982b883a 	mov	r21,r19
 800bd18:	0023883a 	mov	r17,zero
 800bd1c:	002f883a 	mov	r23,zero
 800bd20:	0025883a 	mov	r18,zero
 800bd24:	00000206 	br	800bd30 <__kernel_rem_pio2+0x82c>
 800bd28:	ad400204 	addi	r21,r21,8
 800bd2c:	a4800f16 	blt	r20,r18,800bd6c <__kernel_rem_pio2+0x868>
 800bd30:	81000017 	ldw	r4,0(r16)
 800bd34:	81400117 	ldw	r5,4(r16)
 800bd38:	a9800017 	ldw	r6,0(r21)
 800bd3c:	a9c00117 	ldw	r7,4(r21)
 800bd40:	94800044 	addi	r18,r18,1
 800bd44:	84000204 	addi	r16,r16,8
 800bd48:	800ddbc0 	call	800ddbc <__muldf3>
 800bd4c:	8809883a 	mov	r4,r17
 800bd50:	b80b883a 	mov	r5,r23
 800bd54:	100d883a 	mov	r6,r2
 800bd58:	180f883a 	mov	r7,r3
 800bd5c:	800ca100 	call	800ca10 <__adddf3>
 800bd60:	1023883a 	mov	r17,r2
 800bd64:	182f883a 	mov	r23,r3
 800bd68:	b4bfef0e 	bge	r22,r18,800bd28 <__alt_data_end+0xf800bd28>
 800bd6c:	a00490fa 	slli	r2,r20,3
 800bd70:	a5000044 	addi	r20,r20,1
 800bd74:	9cfffe04 	addi	r19,r19,-8
 800bd78:	d885883a 	add	r2,sp,r2
 800bd7c:	10802804 	addi	r2,r2,160
 800bd80:	14400015 	stw	r17,0(r2)
 800bd84:	15c00115 	stw	r23,4(r2)
 800bd88:	a73fde1e 	bne	r20,fp,800bd04 <__alt_data_end+0xf800bd04>
 800bd8c:	da00a517 	ldw	r8,660(sp)
 800bd90:	00800084 	movi	r2,2
 800bd94:	dc408f17 	ldw	r17,572(sp)
 800bd98:	12007316 	blt	r2,r8,800bf68 <__kernel_rem_pio2+0xa64>
 800bd9c:	02004816 	blt	zero,r8,800bec0 <__kernel_rem_pio2+0x9bc>
 800bda0:	4000141e 	bne	r8,zero,800bdf4 <__kernel_rem_pio2+0x8f0>
 800bda4:	da008d17 	ldw	r8,564(sp)
 800bda8:	d8802804 	addi	r2,sp,160
 800bdac:	0007883a 	mov	r3,zero
 800bdb0:	1221883a 	add	r16,r2,r8
 800bdb4:	04ffffc4 	movi	r19,-1
 800bdb8:	0005883a 	mov	r2,zero
 800bdbc:	81800017 	ldw	r6,0(r16)
 800bdc0:	81c00117 	ldw	r7,4(r16)
 800bdc4:	1009883a 	mov	r4,r2
 800bdc8:	180b883a 	mov	r5,r3
 800bdcc:	8c7fffc4 	addi	r17,r17,-1
 800bdd0:	800ca100 	call	800ca10 <__adddf3>
 800bdd4:	843ffe04 	addi	r16,r16,-8
 800bdd8:	8cfff81e 	bne	r17,r19,800bdbc <__alt_data_end+0xf800bdbc>
 800bddc:	da008c17 	ldw	r8,560(sp)
 800bde0:	40000126 	beq	r8,zero,800bde8 <__kernel_rem_pio2+0x8e4>
 800bde4:	18e0003c 	xorhi	r3,r3,32768
 800bde8:	da009017 	ldw	r8,576(sp)
 800bdec:	40800015 	stw	r2,0(r8)
 800bdf0:	40c00115 	stw	r3,4(r8)
 800bdf4:	da008e17 	ldw	r8,568(sp)
 800bdf8:	408001cc 	andi	r2,r8,7
 800bdfc:	dfc0a417 	ldw	ra,656(sp)
 800be00:	df00a317 	ldw	fp,652(sp)
 800be04:	ddc0a217 	ldw	r23,648(sp)
 800be08:	dd80a117 	ldw	r22,644(sp)
 800be0c:	dd40a017 	ldw	r21,640(sp)
 800be10:	dd009f17 	ldw	r20,636(sp)
 800be14:	dcc09e17 	ldw	r19,632(sp)
 800be18:	dc809d17 	ldw	r18,628(sp)
 800be1c:	dc409c17 	ldw	r17,624(sp)
 800be20:	dc009b17 	ldw	r16,620(sp)
 800be24:	dec0a504 	addi	sp,sp,660
 800be28:	f800283a 	ret
 800be2c:	0023883a 	mov	r17,zero
 800be30:	002f883a 	mov	r23,zero
 800be34:	003fcd06 	br	800bd6c <__alt_data_end+0xf800bd6c>
 800be38:	da00a517 	ldw	r8,660(sp)
 800be3c:	00800084 	movi	r2,2
 800be40:	1200d216 	blt	r2,r8,800c18c <__kernel_rem_pio2+0xc88>
 800be44:	0200c016 	blt	zero,r8,800c148 <__kernel_rem_pio2+0xc44>
 800be48:	403fea1e 	bne	r8,zero,800bdf4 <__alt_data_end+0xf800bdf4>
 800be4c:	0005883a 	mov	r2,zero
 800be50:	0007883a 	mov	r3,zero
 800be54:	003fe106 	br	800bddc <__alt_data_end+0xf800bddc>
 800be58:	00c00044 	movi	r3,1
 800be5c:	003ecd06 	br	800b994 <__alt_data_end+0xf800b994>
 800be60:	2945883a 	add	r2,r5,r5
 800be64:	da008f17 	ldw	r8,572(sp)
 800be68:	1085883a 	add	r2,r2,r2
 800be6c:	d885883a 	add	r2,sp,r2
 800be70:	10807817 	ldw	r2,480(r2)
 800be74:	423ffa04 	addi	r8,r8,-24
 800be78:	dc408e15 	stw	r17,568(sp)
 800be7c:	dc808c15 	stw	r18,560(sp)
 800be80:	da008f15 	stw	r8,572(sp)
 800be84:	dd809417 	ldw	r22,592(sp)
 800be88:	2823883a 	mov	r17,r5
 800be8c:	103f751e 	bne	r2,zero,800bc64 <__alt_data_end+0xf800bc64>
 800be90:	280490ba 	slli	r2,r5,2
 800be94:	d8c07804 	addi	r3,sp,480
 800be98:	10bfff04 	addi	r2,r2,-4
 800be9c:	1885883a 	add	r2,r3,r2
 800bea0:	4007883a 	mov	r3,r8
 800bea4:	10bfff04 	addi	r2,r2,-4
 800bea8:	11000117 	ldw	r4,4(r2)
 800beac:	8c7fffc4 	addi	r17,r17,-1
 800beb0:	18fffa04 	addi	r3,r3,-24
 800beb4:	203ffb26 	beq	r4,zero,800bea4 <__alt_data_end+0xf800bea4>
 800beb8:	d8c08f15 	stw	r3,572(sp)
 800bebc:	003f6906 	br	800bc64 <__alt_data_end+0xf800bc64>
 800bec0:	da008d17 	ldw	r8,564(sp)
 800bec4:	d8802804 	addi	r2,sp,160
 800bec8:	dcc02604 	addi	r19,sp,152
 800becc:	1221883a 	add	r16,r2,r8
 800bed0:	0007883a 	mov	r3,zero
 800bed4:	0005883a 	mov	r2,zero
 800bed8:	81800017 	ldw	r6,0(r16)
 800bedc:	81c00117 	ldw	r7,4(r16)
 800bee0:	1009883a 	mov	r4,r2
 800bee4:	843ffe04 	addi	r16,r16,-8
 800bee8:	180b883a 	mov	r5,r3
 800beec:	800ca100 	call	800ca10 <__adddf3>
 800bef0:	84fff91e 	bne	r16,r19,800bed8 <__alt_data_end+0xf800bed8>
 800bef4:	da008c17 	ldw	r8,560(sp)
 800bef8:	d9002817 	ldw	r4,160(sp)
 800befc:	d9402917 	ldw	r5,164(sp)
 800bf00:	40009726 	beq	r8,zero,800c160 <__kernel_rem_pio2+0xc5c>
 800bf04:	da009017 	ldw	r8,576(sp)
 800bf08:	19a0003c 	xorhi	r6,r3,32768
 800bf0c:	180f883a 	mov	r7,r3
 800bf10:	41800115 	stw	r6,4(r8)
 800bf14:	40800015 	stw	r2,0(r8)
 800bf18:	100d883a 	mov	r6,r2
 800bf1c:	800e4e00 	call	800e4e0 <__subdf3>
 800bf20:	04400c0e 	bge	zero,r17,800bf54 <__kernel_rem_pio2+0xa50>
 800bf24:	dc002a04 	addi	r16,sp,168
 800bf28:	04c00044 	movi	r19,1
 800bf2c:	81800017 	ldw	r6,0(r16)
 800bf30:	81c00117 	ldw	r7,4(r16)
 800bf34:	1009883a 	mov	r4,r2
 800bf38:	180b883a 	mov	r5,r3
 800bf3c:	9cc00044 	addi	r19,r19,1
 800bf40:	800ca100 	call	800ca10 <__adddf3>
 800bf44:	84000204 	addi	r16,r16,8
 800bf48:	8cfff80e 	bge	r17,r19,800bf2c <__alt_data_end+0xf800bf2c>
 800bf4c:	da008c17 	ldw	r8,560(sp)
 800bf50:	40000126 	beq	r8,zero,800bf58 <__kernel_rem_pio2+0xa54>
 800bf54:	18e0003c 	xorhi	r3,r3,32768
 800bf58:	da009017 	ldw	r8,576(sp)
 800bf5c:	40800215 	stw	r2,8(r8)
 800bf60:	40c00315 	stw	r3,12(r8)
 800bf64:	003fa306 	br	800bdf4 <__alt_data_end+0xf800bdf4>
 800bf68:	da00a517 	ldw	r8,660(sp)
 800bf6c:	008000c4 	movi	r2,3
 800bf70:	40bfa01e 	bne	r8,r2,800bdf4 <__alt_data_end+0xf800bdf4>
 800bf74:	0440880e 	bge	zero,r17,800c198 <__kernel_rem_pio2+0xc94>
 800bf78:	da008d17 	ldw	r8,564(sp)
 800bf7c:	882690fa 	slli	r19,r17,3
 800bf80:	dd402804 	addi	r21,sp,160
 800bf84:	da05883a 	add	r2,sp,r8
 800bf88:	10802804 	addi	r2,r2,160
 800bf8c:	15c00017 	ldw	r23,0(r2)
 800bf90:	15800117 	ldw	r22,4(r2)
 800bf94:	9829883a 	mov	r20,r19
 800bf98:	9cfffe04 	addi	r19,r19,-8
 800bf9c:	ace7883a 	add	r19,r21,r19
 800bfa0:	ad29883a 	add	r20,r21,r20
 800bfa4:	dac02604 	addi	r11,sp,152
 800bfa8:	8811883a 	mov	r8,r17
 800bfac:	9c400017 	ldw	r17,0(r19)
 800bfb0:	9f000117 	ldw	fp,4(r19)
 800bfb4:	b809883a 	mov	r4,r23
 800bfb8:	b00b883a 	mov	r5,r22
 800bfbc:	880d883a 	mov	r6,r17
 800bfc0:	e00f883a 	mov	r7,fp
 800bfc4:	da009815 	stw	r8,608(sp)
 800bfc8:	dac09a15 	stw	r11,616(sp)
 800bfcc:	800ca100 	call	800ca10 <__adddf3>
 800bfd0:	8809883a 	mov	r4,r17
 800bfd4:	e00b883a 	mov	r5,fp
 800bfd8:	100d883a 	mov	r6,r2
 800bfdc:	180f883a 	mov	r7,r3
 800bfe0:	1025883a 	mov	r18,r2
 800bfe4:	1821883a 	mov	r16,r3
 800bfe8:	800e4e00 	call	800e4e0 <__subdf3>
 800bfec:	b809883a 	mov	r4,r23
 800bff0:	b00b883a 	mov	r5,r22
 800bff4:	100d883a 	mov	r6,r2
 800bff8:	180f883a 	mov	r7,r3
 800bffc:	800ca100 	call	800ca10 <__adddf3>
 800c000:	dac09a17 	ldw	r11,616(sp)
 800c004:	a0800015 	stw	r2,0(r20)
 800c008:	a0c00115 	stw	r3,4(r20)
 800c00c:	9c800015 	stw	r18,0(r19)
 800c010:	9c000115 	stw	r16,4(r19)
 800c014:	9cfffe04 	addi	r19,r19,-8
 800c018:	a53ffe04 	addi	r20,r20,-8
 800c01c:	902f883a 	mov	r23,r18
 800c020:	802d883a 	mov	r22,r16
 800c024:	da009817 	ldw	r8,608(sp)
 800c028:	9affe01e 	bne	r19,r11,800bfac <__alt_data_end+0xf800bfac>
 800c02c:	00800044 	movi	r2,1
 800c030:	1200590e 	bge	r2,r8,800c198 <__kernel_rem_pio2+0xc94>
 800c034:	402290fa 	slli	r17,r8,3
 800c038:	da008d17 	ldw	r8,564(sp)
 800c03c:	8c3ffe04 	addi	r16,r17,-8
 800c040:	da05883a 	add	r2,sp,r8
 800c044:	10802804 	addi	r2,r2,160
 800c048:	15800017 	ldw	r22,0(r2)
 800c04c:	15000117 	ldw	r20,4(r2)
 800c050:	ac63883a 	add	r17,r21,r17
 800c054:	ac21883a 	add	r16,r21,r16
 800c058:	8827883a 	mov	r19,r17
 800c05c:	8811883a 	mov	r8,r17
 800c060:	84400017 	ldw	r17,0(r16)
 800c064:	87000117 	ldw	fp,4(r16)
 800c068:	b00d883a 	mov	r6,r22
 800c06c:	a00f883a 	mov	r7,r20
 800c070:	8809883a 	mov	r4,r17
 800c074:	e00b883a 	mov	r5,fp
 800c078:	da009815 	stw	r8,608(sp)
 800c07c:	800ca100 	call	800ca10 <__adddf3>
 800c080:	8809883a 	mov	r4,r17
 800c084:	e00b883a 	mov	r5,fp
 800c088:	100d883a 	mov	r6,r2
 800c08c:	180f883a 	mov	r7,r3
 800c090:	102f883a 	mov	r23,r2
 800c094:	1825883a 	mov	r18,r3
 800c098:	800e4e00 	call	800e4e0 <__subdf3>
 800c09c:	b00d883a 	mov	r6,r22
 800c0a0:	a00f883a 	mov	r7,r20
 800c0a4:	1009883a 	mov	r4,r2
 800c0a8:	180b883a 	mov	r5,r3
 800c0ac:	800ca100 	call	800ca10 <__adddf3>
 800c0b0:	98800015 	stw	r2,0(r19)
 800c0b4:	98c00115 	stw	r3,4(r19)
 800c0b8:	85c00015 	stw	r23,0(r16)
 800c0bc:	84800115 	stw	r18,4(r16)
 800c0c0:	843ffe04 	addi	r16,r16,-8
 800c0c4:	9cfffe04 	addi	r19,r19,-8
 800c0c8:	b82d883a 	mov	r22,r23
 800c0cc:	9029883a 	mov	r20,r18
 800c0d0:	da009817 	ldw	r8,608(sp)
 800c0d4:	ac3fe21e 	bne	r21,r16,800c060 <__alt_data_end+0xf800c060>
 800c0d8:	4023883a 	mov	r17,r8
 800c0dc:	dc002a04 	addi	r16,sp,168
 800c0e0:	0005883a 	mov	r2,zero
 800c0e4:	0007883a 	mov	r3,zero
 800c0e8:	89800017 	ldw	r6,0(r17)
 800c0ec:	89c00117 	ldw	r7,4(r17)
 800c0f0:	1009883a 	mov	r4,r2
 800c0f4:	8c7ffe04 	addi	r17,r17,-8
 800c0f8:	180b883a 	mov	r5,r3
 800c0fc:	800ca100 	call	800ca10 <__adddf3>
 800c100:	8c3ff91e 	bne	r17,r16,800c0e8 <__alt_data_end+0xf800c0e8>
 800c104:	da008c17 	ldw	r8,560(sp)
 800c108:	40002726 	beq	r8,zero,800c1a8 <__kernel_rem_pio2+0xca4>
 800c10c:	d9002b17 	ldw	r4,172(sp)
 800c110:	d9402917 	ldw	r5,164(sp)
 800c114:	d9802a17 	ldw	r6,168(sp)
 800c118:	da009017 	ldw	r8,576(sp)
 800c11c:	d9c02817 	ldw	r7,160(sp)
 800c120:	2960003c 	xorhi	r5,r5,32768
 800c124:	2120003c 	xorhi	r4,r4,32768
 800c128:	18e0003c 	xorhi	r3,r3,32768
 800c12c:	41c00015 	stw	r7,0(r8)
 800c130:	41400115 	stw	r5,4(r8)
 800c134:	41800215 	stw	r6,8(r8)
 800c138:	41000315 	stw	r4,12(r8)
 800c13c:	40800415 	stw	r2,16(r8)
 800c140:	40c00515 	stw	r3,20(r8)
 800c144:	003f2b06 	br	800bdf4 <__alt_data_end+0xf800bdf4>
 800c148:	da008c17 	ldw	r8,560(sp)
 800c14c:	0005883a 	mov	r2,zero
 800c150:	0007883a 	mov	r3,zero
 800c154:	d9002817 	ldw	r4,160(sp)
 800c158:	d9402917 	ldw	r5,164(sp)
 800c15c:	403f691e 	bne	r8,zero,800bf04 <__alt_data_end+0xf800bf04>
 800c160:	da009017 	ldw	r8,576(sp)
 800c164:	100d883a 	mov	r6,r2
 800c168:	180f883a 	mov	r7,r3
 800c16c:	40800015 	stw	r2,0(r8)
 800c170:	40c00115 	stw	r3,4(r8)
 800c174:	800e4e00 	call	800e4e0 <__subdf3>
 800c178:	047f6a16 	blt	zero,r17,800bf24 <__alt_data_end+0xf800bf24>
 800c17c:	da009017 	ldw	r8,576(sp)
 800c180:	40800215 	stw	r2,8(r8)
 800c184:	40c00315 	stw	r3,12(r8)
 800c188:	003f1a06 	br	800bdf4 <__alt_data_end+0xf800bdf4>
 800c18c:	da00a517 	ldw	r8,660(sp)
 800c190:	008000c4 	movi	r2,3
 800c194:	40bf171e 	bne	r8,r2,800bdf4 <__alt_data_end+0xf800bdf4>
 800c198:	da008c17 	ldw	r8,560(sp)
 800c19c:	0005883a 	mov	r2,zero
 800c1a0:	0007883a 	mov	r3,zero
 800c1a4:	403fd91e 	bne	r8,zero,800c10c <__alt_data_end+0xf800c10c>
 800c1a8:	da009017 	ldw	r8,576(sp)
 800c1ac:	d9802817 	ldw	r6,160(sp)
 800c1b0:	d9402a17 	ldw	r5,168(sp)
 800c1b4:	d9002b17 	ldw	r4,172(sp)
 800c1b8:	41800015 	stw	r6,0(r8)
 800c1bc:	d9802917 	ldw	r6,164(sp)
 800c1c0:	41400215 	stw	r5,8(r8)
 800c1c4:	41000315 	stw	r4,12(r8)
 800c1c8:	41800115 	stw	r6,4(r8)
 800c1cc:	40800415 	stw	r2,16(r8)
 800c1d0:	40c00515 	stw	r3,20(r8)
 800c1d4:	003f0706 	br	800bdf4 <__alt_data_end+0xf800bdf4>
 800c1d8:	a00d883a 	mov	r6,r20
 800c1dc:	580f883a 	mov	r7,r11
 800c1e0:	0009883a 	mov	r4,zero
 800c1e4:	014ffc34 	movhi	r5,16368
 800c1e8:	800e4e00 	call	800e4e0 <__subdf3>
 800c1ec:	1029883a 	mov	r20,r2
 800c1f0:	1817883a 	mov	r11,r3
 800c1f4:	04800084 	movi	r18,2
 800c1f8:	003dc706 	br	800b918 <__alt_data_end+0xf800b918>
 800c1fc:	840d883a 	add	r6,r16,r16
 800c200:	318d883a 	add	r6,r6,r6
 800c204:	d9a3883a 	add	r17,sp,r6
 800c208:	a009883a 	mov	r4,r20
 800c20c:	b80b883a 	mov	r5,r23
 800c210:	8c407804 	addi	r17,r17,480
 800c214:	800edb00 	call	800edb0 <__fixdfsi>
 800c218:	88800015 	stw	r2,0(r17)
 800c21c:	8023883a 	mov	r17,r16
 800c220:	003e9006 	br	800bc64 <__alt_data_end+0xf800bc64>
 800c224:	d8009215 	stw	zero,584(sp)
 800c228:	003cd406 	br	800b57c <__alt_data_end+0xf800b57c>

0800c22c <__kernel_sin>:
 800c22c:	00a00034 	movhi	r2,32768
 800c230:	defff404 	addi	sp,sp,-48
 800c234:	10bfffc4 	addi	r2,r2,-1
 800c238:	00cf9034 	movhi	r3,15936
 800c23c:	ddc00915 	stw	r23,36(sp)
 800c240:	dd800815 	stw	r22,32(sp)
 800c244:	dc400315 	stw	r17,12(sp)
 800c248:	dc000215 	stw	r16,8(sp)
 800c24c:	dfc00b15 	stw	ra,44(sp)
 800c250:	df000a15 	stw	fp,40(sp)
 800c254:	dd400715 	stw	r21,28(sp)
 800c258:	dd000615 	stw	r20,24(sp)
 800c25c:	dcc00515 	stw	r19,20(sp)
 800c260:	dc800415 	stw	r18,16(sp)
 800c264:	2884703a 	and	r2,r5,r2
 800c268:	18ffffc4 	addi	r3,r3,-1
 800c26c:	2821883a 	mov	r16,r5
 800c270:	2023883a 	mov	r17,r4
 800c274:	302f883a 	mov	r23,r6
 800c278:	382d883a 	mov	r22,r7
 800c27c:	18800216 	blt	r3,r2,800c288 <__kernel_sin+0x5c>
 800c280:	800edb00 	call	800edb0 <__fixdfsi>
 800c284:	10009826 	beq	r2,zero,800c4e8 <__kernel_sin+0x2bc>
 800c288:	8809883a 	mov	r4,r17
 800c28c:	800b883a 	mov	r5,r16
 800c290:	880d883a 	mov	r6,r17
 800c294:	800f883a 	mov	r7,r16
 800c298:	800ddbc0 	call	800ddbc <__muldf3>
 800c29c:	1009883a 	mov	r4,r2
 800c2a0:	180b883a 	mov	r5,r3
 800c2a4:	880d883a 	mov	r6,r17
 800c2a8:	800f883a 	mov	r7,r16
 800c2ac:	1027883a 	mov	r19,r2
 800c2b0:	1825883a 	mov	r18,r3
 800c2b4:	800ddbc0 	call	800ddbc <__muldf3>
 800c2b8:	0196b434 	movhi	r6,23248
 800c2bc:	01cf79b4 	movhi	r7,15846
 800c2c0:	9809883a 	mov	r4,r19
 800c2c4:	900b883a 	mov	r5,r18
 800c2c8:	31b55f04 	addi	r6,r6,-10884
 800c2cc:	39f64e84 	addi	r7,r7,-9926
 800c2d0:	102b883a 	mov	r21,r2
 800c2d4:	1829883a 	mov	r20,r3
 800c2d8:	800ddbc0 	call	800ddbc <__muldf3>
 800c2dc:	01a28b34 	movhi	r6,35372
 800c2e0:	01cf96f4 	movhi	r7,15963
 800c2e4:	1009883a 	mov	r4,r2
 800c2e8:	180b883a 	mov	r5,r3
 800c2ec:	31a73ac4 	addi	r6,r6,-25365
 800c2f0:	39f97984 	addi	r7,r7,-6682
 800c2f4:	800e4e00 	call	800e4e0 <__subdf3>
 800c2f8:	1009883a 	mov	r4,r2
 800c2fc:	180b883a 	mov	r5,r3
 800c300:	980d883a 	mov	r6,r19
 800c304:	900f883a 	mov	r7,r18
 800c308:	800ddbc0 	call	800ddbc <__muldf3>
 800c30c:	0195ecb4 	movhi	r6,22450
 800c310:	01cfb1f4 	movhi	r7,16071
 800c314:	1009883a 	mov	r4,r2
 800c318:	180b883a 	mov	r5,r3
 800c31c:	31bf9f44 	addi	r6,r6,-387
 800c320:	39c778c4 	addi	r7,r7,7651
 800c324:	800ca100 	call	800ca10 <__adddf3>
 800c328:	1009883a 	mov	r4,r2
 800c32c:	180b883a 	mov	r5,r3
 800c330:	980d883a 	mov	r6,r19
 800c334:	900f883a 	mov	r7,r18
 800c338:	800ddbc0 	call	800ddbc <__muldf3>
 800c33c:	01867074 	movhi	r6,6593
 800c340:	01cfcab4 	movhi	r7,16170
 800c344:	1009883a 	mov	r4,r2
 800c348:	180b883a 	mov	r5,r3
 800c34c:	31987544 	addi	r6,r6,25045
 800c350:	39c06804 	addi	r7,r7,416
 800c354:	800e4e00 	call	800e4e0 <__subdf3>
 800c358:	1009883a 	mov	r4,r2
 800c35c:	180b883a 	mov	r5,r3
 800c360:	980d883a 	mov	r6,r19
 800c364:	900f883a 	mov	r7,r18
 800c368:	800ddbc0 	call	800ddbc <__muldf3>
 800c36c:	01844474 	movhi	r6,4369
 800c370:	01cfe074 	movhi	r7,16257
 800c374:	1009883a 	mov	r4,r2
 800c378:	180b883a 	mov	r5,r3
 800c37c:	31be2984 	addi	r6,r6,-1882
 800c380:	39c44444 	addi	r7,r7,4369
 800c384:	800ca100 	call	800ca10 <__adddf3>
 800c388:	d9000c17 	ldw	r4,48(sp)
 800c38c:	1839883a 	mov	fp,r3
 800c390:	20003e26 	beq	r4,zero,800c48c <__kernel_sin+0x260>
 800c394:	b809883a 	mov	r4,r23
 800c398:	b00b883a 	mov	r5,r22
 800c39c:	000d883a 	mov	r6,zero
 800c3a0:	01cff834 	movhi	r7,16352
 800c3a4:	d8800015 	stw	r2,0(sp)
 800c3a8:	800ddbc0 	call	800ddbc <__muldf3>
 800c3ac:	da000017 	ldw	r8,0(sp)
 800c3b0:	a809883a 	mov	r4,r21
 800c3b4:	a00b883a 	mov	r5,r20
 800c3b8:	400d883a 	mov	r6,r8
 800c3bc:	e00f883a 	mov	r7,fp
 800c3c0:	d8c00115 	stw	r3,4(sp)
 800c3c4:	d8800015 	stw	r2,0(sp)
 800c3c8:	800ddbc0 	call	800ddbc <__muldf3>
 800c3cc:	da800017 	ldw	r10,0(sp)
 800c3d0:	da400117 	ldw	r9,4(sp)
 800c3d4:	100d883a 	mov	r6,r2
 800c3d8:	5009883a 	mov	r4,r10
 800c3dc:	480b883a 	mov	r5,r9
 800c3e0:	180f883a 	mov	r7,r3
 800c3e4:	800e4e00 	call	800e4e0 <__subdf3>
 800c3e8:	980d883a 	mov	r6,r19
 800c3ec:	900f883a 	mov	r7,r18
 800c3f0:	1009883a 	mov	r4,r2
 800c3f4:	180b883a 	mov	r5,r3
 800c3f8:	800ddbc0 	call	800ddbc <__muldf3>
 800c3fc:	1009883a 	mov	r4,r2
 800c400:	180b883a 	mov	r5,r3
 800c404:	b80d883a 	mov	r6,r23
 800c408:	b00f883a 	mov	r7,r22
 800c40c:	800e4e00 	call	800e4e0 <__subdf3>
 800c410:	01955574 	movhi	r6,21845
 800c414:	01cff174 	movhi	r7,16325
 800c418:	a809883a 	mov	r4,r21
 800c41c:	a00b883a 	mov	r5,r20
 800c420:	31955244 	addi	r6,r6,21833
 800c424:	39d55544 	addi	r7,r7,21845
 800c428:	1027883a 	mov	r19,r2
 800c42c:	1825883a 	mov	r18,r3
 800c430:	800ddbc0 	call	800ddbc <__muldf3>
 800c434:	9809883a 	mov	r4,r19
 800c438:	900b883a 	mov	r5,r18
 800c43c:	100d883a 	mov	r6,r2
 800c440:	180f883a 	mov	r7,r3
 800c444:	800ca100 	call	800ca10 <__adddf3>
 800c448:	8809883a 	mov	r4,r17
 800c44c:	800b883a 	mov	r5,r16
 800c450:	100d883a 	mov	r6,r2
 800c454:	180f883a 	mov	r7,r3
 800c458:	800e4e00 	call	800e4e0 <__subdf3>
 800c45c:	dfc00b17 	ldw	ra,44(sp)
 800c460:	df000a17 	ldw	fp,40(sp)
 800c464:	ddc00917 	ldw	r23,36(sp)
 800c468:	dd800817 	ldw	r22,32(sp)
 800c46c:	dd400717 	ldw	r21,28(sp)
 800c470:	dd000617 	ldw	r20,24(sp)
 800c474:	dcc00517 	ldw	r19,20(sp)
 800c478:	dc800417 	ldw	r18,16(sp)
 800c47c:	dc400317 	ldw	r17,12(sp)
 800c480:	dc000217 	ldw	r16,8(sp)
 800c484:	dec00c04 	addi	sp,sp,48
 800c488:	f800283a 	ret
 800c48c:	9809883a 	mov	r4,r19
 800c490:	900b883a 	mov	r5,r18
 800c494:	100d883a 	mov	r6,r2
 800c498:	180f883a 	mov	r7,r3
 800c49c:	800ddbc0 	call	800ddbc <__muldf3>
 800c4a0:	01955574 	movhi	r6,21845
 800c4a4:	01cff174 	movhi	r7,16325
 800c4a8:	1009883a 	mov	r4,r2
 800c4ac:	180b883a 	mov	r5,r3
 800c4b0:	31955244 	addi	r6,r6,21833
 800c4b4:	39d55544 	addi	r7,r7,21845
 800c4b8:	800e4e00 	call	800e4e0 <__subdf3>
 800c4bc:	a80d883a 	mov	r6,r21
 800c4c0:	a00f883a 	mov	r7,r20
 800c4c4:	1009883a 	mov	r4,r2
 800c4c8:	180b883a 	mov	r5,r3
 800c4cc:	800ddbc0 	call	800ddbc <__muldf3>
 800c4d0:	1009883a 	mov	r4,r2
 800c4d4:	180b883a 	mov	r5,r3
 800c4d8:	880d883a 	mov	r6,r17
 800c4dc:	800f883a 	mov	r7,r16
 800c4e0:	800ca100 	call	800ca10 <__adddf3>
 800c4e4:	003fdd06 	br	800c45c <__alt_data_end+0xf800c45c>
 800c4e8:	8805883a 	mov	r2,r17
 800c4ec:	8007883a 	mov	r3,r16
 800c4f0:	003fda06 	br	800c45c <__alt_data_end+0xf800c45c>

0800c4f4 <fabs>:
 800c4f4:	00e00034 	movhi	r3,32768
 800c4f8:	18ffffc4 	addi	r3,r3,-1
 800c4fc:	2005883a 	mov	r2,r4
 800c500:	28c6703a 	and	r3,r5,r3
 800c504:	f800283a 	ret

0800c508 <floor>:
 800c508:	defff904 	addi	sp,sp,-28
 800c50c:	dc800215 	stw	r18,8(sp)
 800c510:	2825d53a 	srai	r18,r5,20
 800c514:	dd000415 	stw	r20,16(sp)
 800c518:	dcc00315 	stw	r19,12(sp)
 800c51c:	9481ffcc 	andi	r18,r18,2047
 800c520:	dc400115 	stw	r17,4(sp)
 800c524:	dc000015 	stw	r16,0(sp)
 800c528:	dfc00615 	stw	ra,24(sp)
 800c52c:	dd400515 	stw	r21,20(sp)
 800c530:	94ff0044 	addi	r19,r18,-1023
 800c534:	018004c4 	movi	r6,19
 800c538:	2821883a 	mov	r16,r5
 800c53c:	2005883a 	mov	r2,r4
 800c540:	280f883a 	mov	r7,r5
 800c544:	2829883a 	mov	r20,r5
 800c548:	2023883a 	mov	r17,r4
 800c54c:	34c01916 	blt	r6,r19,800c5b4 <floor+0xac>
 800c550:	98003d16 	blt	r19,zero,800c648 <floor+0x140>
 800c554:	04800434 	movhi	r18,16
 800c558:	94bfffc4 	addi	r18,r18,-1
 800c55c:	94e5d83a 	sra	r18,r18,r19
 800c560:	914c703a 	and	r6,r18,r5
 800c564:	310cb03a 	or	r6,r6,r4
 800c568:	30001626 	beq	r6,zero,800c5c4 <floor+0xbc>
 800c56c:	01a20034 	movhi	r6,34816
 800c570:	01df8e34 	movhi	r7,32312
 800c574:	319d6704 	addi	r6,r6,30108
 800c578:	39f90f04 	addi	r7,r7,-7108
 800c57c:	800ca100 	call	800ca10 <__adddf3>
 800c580:	1009883a 	mov	r4,r2
 800c584:	180b883a 	mov	r5,r3
 800c588:	000d883a 	mov	r6,zero
 800c58c:	000f883a 	mov	r7,zero
 800c590:	800dbfc0 	call	800dbfc <__gedf2>
 800c594:	0080040e 	bge	zero,r2,800c5a8 <floor+0xa0>
 800c598:	80003d16 	blt	r16,zero,800c690 <floor+0x188>
 800c59c:	04a0303a 	nor	r16,zero,r18
 800c5a0:	a420703a 	and	r16,r20,r16
 800c5a4:	0023883a 	mov	r17,zero
 800c5a8:	8805883a 	mov	r2,r17
 800c5ac:	8007883a 	mov	r3,r16
 800c5b0:	00000506 	br	800c5c8 <floor+0xc0>
 800c5b4:	01800cc4 	movi	r6,51
 800c5b8:	34c00c0e 	bge	r6,r19,800c5ec <floor+0xe4>
 800c5bc:	01810004 	movi	r6,1024
 800c5c0:	99803026 	beq	r19,r6,800c684 <floor+0x17c>
 800c5c4:	3807883a 	mov	r3,r7
 800c5c8:	dfc00617 	ldw	ra,24(sp)
 800c5cc:	dd400517 	ldw	r21,20(sp)
 800c5d0:	dd000417 	ldw	r20,16(sp)
 800c5d4:	dcc00317 	ldw	r19,12(sp)
 800c5d8:	dc800217 	ldw	r18,8(sp)
 800c5dc:	dc400117 	ldw	r17,4(sp)
 800c5e0:	dc000017 	ldw	r16,0(sp)
 800c5e4:	dec00704 	addi	sp,sp,28
 800c5e8:	f800283a 	ret
 800c5ec:	01bfffc4 	movi	r6,-1
 800c5f0:	957efb44 	addi	r21,r18,-1043
 800c5f4:	356ad83a 	srl	r21,r6,r21
 800c5f8:	a90c703a 	and	r6,r21,r4
 800c5fc:	303ff126 	beq	r6,zero,800c5c4 <__alt_data_end+0xf800c5c4>
 800c600:	01a20034 	movhi	r6,34816
 800c604:	01df8e34 	movhi	r7,32312
 800c608:	319d6704 	addi	r6,r6,30108
 800c60c:	39f90f04 	addi	r7,r7,-7108
 800c610:	800ca100 	call	800ca10 <__adddf3>
 800c614:	1009883a 	mov	r4,r2
 800c618:	180b883a 	mov	r5,r3
 800c61c:	000d883a 	mov	r6,zero
 800c620:	000f883a 	mov	r7,zero
 800c624:	800dbfc0 	call	800dbfc <__gedf2>
 800c628:	00bfdf0e 	bge	zero,r2,800c5a8 <__alt_data_end+0xf800c5a8>
 800c62c:	80001c16 	blt	r16,zero,800c6a0 <floor+0x198>
 800c630:	056a303a 	nor	r21,zero,r21
 800c634:	a021883a 	mov	r16,r20
 800c638:	8d62703a 	and	r17,r17,r21
 800c63c:	8805883a 	mov	r2,r17
 800c640:	8007883a 	mov	r3,r16
 800c644:	003fe006 	br	800c5c8 <__alt_data_end+0xf800c5c8>
 800c648:	01a20034 	movhi	r6,34816
 800c64c:	01df8e34 	movhi	r7,32312
 800c650:	319d6704 	addi	r6,r6,30108
 800c654:	39f90f04 	addi	r7,r7,-7108
 800c658:	800ca100 	call	800ca10 <__adddf3>
 800c65c:	1009883a 	mov	r4,r2
 800c660:	180b883a 	mov	r5,r3
 800c664:	000d883a 	mov	r6,zero
 800c668:	000f883a 	mov	r7,zero
 800c66c:	800dbfc0 	call	800dbfc <__gedf2>
 800c670:	00bfcd0e 	bge	zero,r2,800c5a8 <__alt_data_end+0xf800c5a8>
 800c674:	80001516 	blt	r16,zero,800c6cc <floor+0x1c4>
 800c678:	0023883a 	mov	r17,zero
 800c67c:	0021883a 	mov	r16,zero
 800c680:	003fc906 	br	800c5a8 <__alt_data_end+0xf800c5a8>
 800c684:	200d883a 	mov	r6,r4
 800c688:	800ca100 	call	800ca10 <__adddf3>
 800c68c:	003fce06 	br	800c5c8 <__alt_data_end+0xf800c5c8>
 800c690:	00800434 	movhi	r2,16
 800c694:	14e7d83a 	sra	r19,r2,r19
 800c698:	84e9883a 	add	r20,r16,r19
 800c69c:	003fbf06 	br	800c59c <__alt_data_end+0xf800c59c>
 800c6a0:	00800504 	movi	r2,20
 800c6a4:	98801326 	beq	r19,r2,800c6f4 <floor+0x1ec>
 800c6a8:	00810cc4 	movi	r2,1075
 800c6ac:	14a5c83a 	sub	r18,r2,r18
 800c6b0:	00800044 	movi	r2,1
 800c6b4:	1484983a 	sll	r2,r2,r18
 800c6b8:	1445883a 	add	r2,r2,r17
 800c6bc:	14400b2e 	bgeu	r2,r17,800c6ec <floor+0x1e4>
 800c6c0:	85000044 	addi	r20,r16,1
 800c6c4:	1023883a 	mov	r17,r2
 800c6c8:	003fd906 	br	800c630 <__alt_data_end+0xf800c630>
 800c6cc:	00a00034 	movhi	r2,32768
 800c6d0:	10bfffc4 	addi	r2,r2,-1
 800c6d4:	8084703a 	and	r2,r16,r2
 800c6d8:	1462b03a 	or	r17,r2,r17
 800c6dc:	883fb226 	beq	r17,zero,800c5a8 <__alt_data_end+0xf800c5a8>
 800c6e0:	0023883a 	mov	r17,zero
 800c6e4:	042ffc34 	movhi	r16,49136
 800c6e8:	003faf06 	br	800c5a8 <__alt_data_end+0xf800c5a8>
 800c6ec:	1023883a 	mov	r17,r2
 800c6f0:	003fcf06 	br	800c630 <__alt_data_end+0xf800c630>
 800c6f4:	85000044 	addi	r20,r16,1
 800c6f8:	003fcd06 	br	800c630 <__alt_data_end+0xf800c630>

0800c6fc <scalbn>:
 800c6fc:	2a1ffc2c 	andhi	r8,r5,32752
 800c700:	4011d53a 	srai	r8,r8,20
 800c704:	defffe04 	addi	sp,sp,-8
 800c708:	dc000015 	stw	r16,0(sp)
 800c70c:	dfc00115 	stw	ra,4(sp)
 800c710:	280f883a 	mov	r7,r5
 800c714:	2015883a 	mov	r10,r4
 800c718:	3021883a 	mov	r16,r6
 800c71c:	4000251e 	bne	r8,zero,800c7b4 <scalbn+0xb8>
 800c720:	00a00034 	movhi	r2,32768
 800c724:	10bfffc4 	addi	r2,r2,-1
 800c728:	2884703a 	and	r2,r5,r2
 800c72c:	1104b03a 	or	r2,r2,r4
 800c730:	10003126 	beq	r2,zero,800c7f8 <scalbn+0xfc>
 800c734:	01d0d434 	movhi	r7,17232
 800c738:	000d883a 	mov	r6,zero
 800c73c:	800ddbc0 	call	800ddbc <__muldf3>
 800c740:	013ffff4 	movhi	r4,65535
 800c744:	210f2c04 	addi	r4,r4,15536
 800c748:	1015883a 	mov	r10,r2
 800c74c:	180f883a 	mov	r7,r3
 800c750:	81002f16 	blt	r16,r4,800c810 <scalbn+0x114>
 800c754:	1a5ffc2c 	andhi	r9,r3,32752
 800c758:	4813d53a 	srai	r9,r9,20
 800c75c:	0081ff84 	movi	r2,2046
 800c760:	180d883a 	mov	r6,r3
 800c764:	4a3ff284 	addi	r8,r9,-54
 800c768:	4411883a 	add	r8,r8,r16
 800c76c:	1200170e 	bge	r2,r8,800c7cc <scalbn+0xd0>
 800c770:	01220034 	movhi	r4,34816
 800c774:	015f8e34 	movhi	r5,32312
 800c778:	500d883a 	mov	r6,r10
 800c77c:	211d6704 	addi	r4,r4,30108
 800c780:	29790f04 	addi	r5,r5,-7108
 800c784:	800c8c80 	call	800c8c8 <copysign>
 800c788:	01a20034 	movhi	r6,34816
 800c78c:	01df8e34 	movhi	r7,32312
 800c790:	1009883a 	mov	r4,r2
 800c794:	180b883a 	mov	r5,r3
 800c798:	319d6704 	addi	r6,r6,30108
 800c79c:	39f90f04 	addi	r7,r7,-7108
 800c7a0:	800ddbc0 	call	800ddbc <__muldf3>
 800c7a4:	dfc00117 	ldw	ra,4(sp)
 800c7a8:	dc000017 	ldw	r16,0(sp)
 800c7ac:	dec00204 	addi	sp,sp,8
 800c7b0:	f800283a 	ret
 800c7b4:	0081ffc4 	movi	r2,2047
 800c7b8:	280d883a 	mov	r6,r5
 800c7bc:	40803126 	beq	r8,r2,800c884 <scalbn+0x188>
 800c7c0:	4411883a 	add	r8,r8,r16
 800c7c4:	0081ff84 	movi	r2,2046
 800c7c8:	123fe916 	blt	r2,r8,800c770 <__alt_data_end+0xf800c770>
 800c7cc:	02001b0e 	bge	zero,r8,800c83c <scalbn+0x140>
 800c7d0:	4010953a 	slli	r8,r8,20
 800c7d4:	00e00434 	movhi	r3,32784
 800c7d8:	18ffffc4 	addi	r3,r3,-1
 800c7dc:	30ce703a 	and	r7,r6,r3
 800c7e0:	5005883a 	mov	r2,r10
 800c7e4:	41c6b03a 	or	r3,r8,r7
 800c7e8:	dfc00117 	ldw	ra,4(sp)
 800c7ec:	dc000017 	ldw	r16,0(sp)
 800c7f0:	dec00204 	addi	sp,sp,8
 800c7f4:	f800283a 	ret
 800c7f8:	2005883a 	mov	r2,r4
 800c7fc:	2807883a 	mov	r3,r5
 800c800:	dfc00117 	ldw	ra,4(sp)
 800c804:	dc000017 	ldw	r16,0(sp)
 800c808:	dec00204 	addi	sp,sp,8
 800c80c:	f800283a 	ret
 800c810:	01b0be74 	movhi	r6,49913
 800c814:	01c06974 	movhi	r7,421
 800c818:	31bcd644 	addi	r6,r6,-3239
 800c81c:	39db87c4 	addi	r7,r7,28191
 800c820:	1009883a 	mov	r4,r2
 800c824:	180b883a 	mov	r5,r3
 800c828:	800ddbc0 	call	800ddbc <__muldf3>
 800c82c:	dfc00117 	ldw	ra,4(sp)
 800c830:	dc000017 	ldw	r16,0(sp)
 800c834:	dec00204 	addi	sp,sp,8
 800c838:	f800283a 	ret
 800c83c:	00bff2c4 	movi	r2,-53
 800c840:	4080160e 	bge	r8,r2,800c89c <scalbn+0x1a0>
 800c844:	00b0d414 	movui	r2,50000
 800c848:	143fc916 	blt	r2,r16,800c770 <__alt_data_end+0xf800c770>
 800c84c:	0130be74 	movhi	r4,49913
 800c850:	01406974 	movhi	r5,421
 800c854:	500d883a 	mov	r6,r10
 800c858:	213cd644 	addi	r4,r4,-3239
 800c85c:	295b87c4 	addi	r5,r5,28191
 800c860:	800c8c80 	call	800c8c8 <copysign>
 800c864:	01b0be74 	movhi	r6,49913
 800c868:	01c06974 	movhi	r7,421
 800c86c:	1009883a 	mov	r4,r2
 800c870:	180b883a 	mov	r5,r3
 800c874:	31bcd644 	addi	r6,r6,-3239
 800c878:	39db87c4 	addi	r7,r7,28191
 800c87c:	800ddbc0 	call	800ddbc <__muldf3>
 800c880:	003fd906 	br	800c7e8 <__alt_data_end+0xf800c7e8>
 800c884:	200d883a 	mov	r6,r4
 800c888:	800ca100 	call	800ca10 <__adddf3>
 800c88c:	dfc00117 	ldw	ra,4(sp)
 800c890:	dc000017 	ldw	r16,0(sp)
 800c894:	dec00204 	addi	sp,sp,8
 800c898:	f800283a 	ret
 800c89c:	42000d84 	addi	r8,r8,54
 800c8a0:	4012953a 	slli	r9,r8,20
 800c8a4:	01e00434 	movhi	r7,32784
 800c8a8:	39ffffc4 	addi	r7,r7,-1
 800c8ac:	31ca703a 	and	r5,r6,r7
 800c8b0:	5009883a 	mov	r4,r10
 800c8b4:	494ab03a 	or	r5,r9,r5
 800c8b8:	000d883a 	mov	r6,zero
 800c8bc:	01cf2434 	movhi	r7,15504
 800c8c0:	800ddbc0 	call	800ddbc <__muldf3>
 800c8c4:	003fc806 	br	800c7e8 <__alt_data_end+0xf800c7e8>

0800c8c8 <copysign>:
 800c8c8:	2005883a 	mov	r2,r4
 800c8cc:	01200034 	movhi	r4,32768
 800c8d0:	213fffc4 	addi	r4,r4,-1
 800c8d4:	38e0002c 	andhi	r3,r7,32768
 800c8d8:	290a703a 	and	r5,r5,r4
 800c8dc:	1946b03a 	or	r3,r3,r5
 800c8e0:	f800283a 	ret

0800c8e4 <udivmodsi4>:
 800c8e4:	2900182e 	bgeu	r5,r4,800c948 <udivmodsi4+0x64>
 800c8e8:	28001716 	blt	r5,zero,800c948 <udivmodsi4+0x64>
 800c8ec:	00800804 	movi	r2,32
 800c8f0:	00c00044 	movi	r3,1
 800c8f4:	00000206 	br	800c900 <udivmodsi4+0x1c>
 800c8f8:	10001126 	beq	r2,zero,800c940 <udivmodsi4+0x5c>
 800c8fc:	28000516 	blt	r5,zero,800c914 <udivmodsi4+0x30>
 800c900:	294b883a 	add	r5,r5,r5
 800c904:	10bfffc4 	addi	r2,r2,-1
 800c908:	18c7883a 	add	r3,r3,r3
 800c90c:	293ffa36 	bltu	r5,r4,800c8f8 <__alt_data_end+0xf800c8f8>
 800c910:	18000b26 	beq	r3,zero,800c940 <udivmodsi4+0x5c>
 800c914:	0005883a 	mov	r2,zero
 800c918:	21400236 	bltu	r4,r5,800c924 <udivmodsi4+0x40>
 800c91c:	2149c83a 	sub	r4,r4,r5
 800c920:	10c4b03a 	or	r2,r2,r3
 800c924:	1806d07a 	srli	r3,r3,1
 800c928:	280ad07a 	srli	r5,r5,1
 800c92c:	183ffa1e 	bne	r3,zero,800c918 <__alt_data_end+0xf800c918>
 800c930:	3000011e 	bne	r6,zero,800c938 <udivmodsi4+0x54>
 800c934:	f800283a 	ret
 800c938:	2005883a 	mov	r2,r4
 800c93c:	f800283a 	ret
 800c940:	0005883a 	mov	r2,zero
 800c944:	003ffa06 	br	800c930 <__alt_data_end+0xf800c930>
 800c948:	00c00044 	movi	r3,1
 800c94c:	003ff106 	br	800c914 <__alt_data_end+0xf800c914>

0800c950 <__divsi3>:
 800c950:	defffe04 	addi	sp,sp,-8
 800c954:	dfc00115 	stw	ra,4(sp)
 800c958:	dc000015 	stw	r16,0(sp)
 800c95c:	20000b16 	blt	r4,zero,800c98c <__divsi3+0x3c>
 800c960:	0021883a 	mov	r16,zero
 800c964:	28000c16 	blt	r5,zero,800c998 <__divsi3+0x48>
 800c968:	000d883a 	mov	r6,zero
 800c96c:	800c8e40 	call	800c8e4 <udivmodsi4>
 800c970:	0407c83a 	sub	r3,zero,r16
 800c974:	1884f03a 	xor	r2,r3,r2
 800c978:	1405883a 	add	r2,r2,r16
 800c97c:	dfc00117 	ldw	ra,4(sp)
 800c980:	dc000017 	ldw	r16,0(sp)
 800c984:	dec00204 	addi	sp,sp,8
 800c988:	f800283a 	ret
 800c98c:	0109c83a 	sub	r4,zero,r4
 800c990:	04000044 	movi	r16,1
 800c994:	283ff40e 	bge	r5,zero,800c968 <__alt_data_end+0xf800c968>
 800c998:	014bc83a 	sub	r5,zero,r5
 800c99c:	8400005c 	xori	r16,r16,1
 800c9a0:	003ff106 	br	800c968 <__alt_data_end+0xf800c968>

0800c9a4 <__modsi3>:
 800c9a4:	defffd04 	addi	sp,sp,-12
 800c9a8:	dfc00215 	stw	ra,8(sp)
 800c9ac:	dc400115 	stw	r17,4(sp)
 800c9b0:	dc000015 	stw	r16,0(sp)
 800c9b4:	20000c16 	blt	r4,zero,800c9e8 <__modsi3+0x44>
 800c9b8:	0023883a 	mov	r17,zero
 800c9bc:	0021883a 	mov	r16,zero
 800c9c0:	28000d16 	blt	r5,zero,800c9f8 <__modsi3+0x54>
 800c9c4:	01800044 	movi	r6,1
 800c9c8:	800c8e40 	call	800c8e4 <udivmodsi4>
 800c9cc:	1404f03a 	xor	r2,r2,r16
 800c9d0:	8885883a 	add	r2,r17,r2
 800c9d4:	dfc00217 	ldw	ra,8(sp)
 800c9d8:	dc400117 	ldw	r17,4(sp)
 800c9dc:	dc000017 	ldw	r16,0(sp)
 800c9e0:	dec00304 	addi	sp,sp,12
 800c9e4:	f800283a 	ret
 800c9e8:	0109c83a 	sub	r4,zero,r4
 800c9ec:	04400044 	movi	r17,1
 800c9f0:	043fffc4 	movi	r16,-1
 800c9f4:	283ff30e 	bge	r5,zero,800c9c4 <__alt_data_end+0xf800c9c4>
 800c9f8:	014bc83a 	sub	r5,zero,r5
 800c9fc:	003ff106 	br	800c9c4 <__alt_data_end+0xf800c9c4>

0800ca00 <__udivsi3>:
 800ca00:	000d883a 	mov	r6,zero
 800ca04:	800c8e41 	jmpi	800c8e4 <udivmodsi4>

0800ca08 <__umodsi3>:
 800ca08:	01800044 	movi	r6,1
 800ca0c:	800c8e41 	jmpi	800c8e4 <udivmodsi4>

0800ca10 <__adddf3>:
 800ca10:	02000434 	movhi	r8,16
 800ca14:	423fffc4 	addi	r8,r8,-1
 800ca18:	defffb04 	addi	sp,sp,-20
 800ca1c:	2a12703a 	and	r9,r5,r8
 800ca20:	2806d7fa 	srli	r3,r5,31
 800ca24:	3a10703a 	and	r8,r7,r8
 800ca28:	3804d53a 	srli	r2,r7,20
 800ca2c:	3014d77a 	srli	r10,r6,29
 800ca30:	dc000015 	stw	r16,0(sp)
 800ca34:	481290fa 	slli	r9,r9,3
 800ca38:	2820d53a 	srli	r16,r5,20
 800ca3c:	401090fa 	slli	r8,r8,3
 800ca40:	200ad77a 	srli	r5,r4,29
 800ca44:	380ed7fa 	srli	r7,r7,31
 800ca48:	dc800215 	stw	r18,8(sp)
 800ca4c:	dc400115 	stw	r17,4(sp)
 800ca50:	dfc00415 	stw	ra,16(sp)
 800ca54:	dcc00315 	stw	r19,12(sp)
 800ca58:	1c803fcc 	andi	r18,r3,255
 800ca5c:	8401ffcc 	andi	r16,r16,2047
 800ca60:	494ab03a 	or	r5,r9,r5
 800ca64:	202290fa 	slli	r17,r4,3
 800ca68:	1081ffcc 	andi	r2,r2,2047
 800ca6c:	4290b03a 	or	r8,r8,r10
 800ca70:	300c90fa 	slli	r6,r6,3
 800ca74:	91c07026 	beq	r18,r7,800cc38 <__adddf3+0x228>
 800ca78:	8087c83a 	sub	r3,r16,r2
 800ca7c:	00c0b30e 	bge	zero,r3,800cd4c <__adddf3+0x33c>
 800ca80:	10002a1e 	bne	r2,zero,800cb2c <__adddf3+0x11c>
 800ca84:	4184b03a 	or	r2,r8,r6
 800ca88:	1000991e 	bne	r2,zero,800ccf0 <__adddf3+0x2e0>
 800ca8c:	888001cc 	andi	r2,r17,7
 800ca90:	10005b26 	beq	r2,zero,800cc00 <__adddf3+0x1f0>
 800ca94:	88c003cc 	andi	r3,r17,15
 800ca98:	00800104 	movi	r2,4
 800ca9c:	18805826 	beq	r3,r2,800cc00 <__adddf3+0x1f0>
 800caa0:	89800104 	addi	r6,r17,4
 800caa4:	3463803a 	cmpltu	r17,r6,r17
 800caa8:	2c4b883a 	add	r5,r5,r17
 800caac:	2880202c 	andhi	r2,r5,128
 800cab0:	9007883a 	mov	r3,r18
 800cab4:	3023883a 	mov	r17,r6
 800cab8:	10005426 	beq	r2,zero,800cc0c <__adddf3+0x1fc>
 800cabc:	84000044 	addi	r16,r16,1
 800cac0:	0081ffc4 	movi	r2,2047
 800cac4:	8080c126 	beq	r16,r2,800cdcc <__adddf3+0x3bc>
 800cac8:	013fe034 	movhi	r4,65408
 800cacc:	213fffc4 	addi	r4,r4,-1
 800cad0:	290a703a 	and	r5,r5,r4
 800cad4:	2804977a 	slli	r2,r5,29
 800cad8:	280a927a 	slli	r5,r5,9
 800cadc:	8822d0fa 	srli	r17,r17,3
 800cae0:	8401ffcc 	andi	r16,r16,2047
 800cae4:	2808d33a 	srli	r4,r5,12
 800cae8:	1444b03a 	or	r2,r2,r17
 800caec:	8401ffcc 	andi	r16,r16,2047
 800caf0:	800a953a 	slli	r5,r16,20
 800caf4:	18c03fcc 	andi	r3,r3,255
 800caf8:	04000434 	movhi	r16,16
 800cafc:	180697fa 	slli	r3,r3,31
 800cb00:	843fffc4 	addi	r16,r16,-1
 800cb04:	2420703a 	and	r16,r4,r16
 800cb08:	8160b03a 	or	r16,r16,r5
 800cb0c:	80c6b03a 	or	r3,r16,r3
 800cb10:	dfc00417 	ldw	ra,16(sp)
 800cb14:	dcc00317 	ldw	r19,12(sp)
 800cb18:	dc800217 	ldw	r18,8(sp)
 800cb1c:	dc400117 	ldw	r17,4(sp)
 800cb20:	dc000017 	ldw	r16,0(sp)
 800cb24:	dec00504 	addi	sp,sp,20
 800cb28:	f800283a 	ret
 800cb2c:	0081ffc4 	movi	r2,2047
 800cb30:	80bfd626 	beq	r16,r2,800ca8c <__alt_data_end+0xf800ca8c>
 800cb34:	42002034 	orhi	r8,r8,128
 800cb38:	00800e04 	movi	r2,56
 800cb3c:	10c0a616 	blt	r2,r3,800cdd8 <__adddf3+0x3c8>
 800cb40:	008007c4 	movi	r2,31
 800cb44:	10c0c916 	blt	r2,r3,800ce6c <__adddf3+0x45c>
 800cb48:	00800804 	movi	r2,32
 800cb4c:	10c5c83a 	sub	r2,r2,r3
 800cb50:	408e983a 	sll	r7,r8,r2
 800cb54:	30c8d83a 	srl	r4,r6,r3
 800cb58:	3084983a 	sll	r2,r6,r2
 800cb5c:	40c6d83a 	srl	r3,r8,r3
 800cb60:	390cb03a 	or	r6,r7,r4
 800cb64:	1004c03a 	cmpne	r2,r2,zero
 800cb68:	308cb03a 	or	r6,r6,r2
 800cb6c:	898dc83a 	sub	r6,r17,r6
 800cb70:	89a3803a 	cmpltu	r17,r17,r6
 800cb74:	28cbc83a 	sub	r5,r5,r3
 800cb78:	2c4bc83a 	sub	r5,r5,r17
 800cb7c:	3023883a 	mov	r17,r6
 800cb80:	2880202c 	andhi	r2,r5,128
 800cb84:	10006d26 	beq	r2,zero,800cd3c <__adddf3+0x32c>
 800cb88:	04c02034 	movhi	r19,128
 800cb8c:	9cffffc4 	addi	r19,r19,-1
 800cb90:	2ce6703a 	and	r19,r5,r19
 800cb94:	98007e26 	beq	r19,zero,800cd90 <__adddf3+0x380>
 800cb98:	9809883a 	mov	r4,r19
 800cb9c:	800f2540 	call	800f254 <__clzsi2>
 800cba0:	10fffe04 	addi	r3,r2,-8
 800cba4:	010007c4 	movi	r4,31
 800cba8:	20c07f16 	blt	r4,r3,800cda8 <__adddf3+0x398>
 800cbac:	01400a04 	movi	r5,40
 800cbb0:	2885c83a 	sub	r2,r5,r2
 800cbb4:	888ad83a 	srl	r5,r17,r2
 800cbb8:	98e6983a 	sll	r19,r19,r3
 800cbbc:	88e2983a 	sll	r17,r17,r3
 800cbc0:	2ce6b03a 	or	r19,r5,r19
 800cbc4:	1c007c16 	blt	r3,r16,800cdb8 <__adddf3+0x3a8>
 800cbc8:	1c21c83a 	sub	r16,r3,r16
 800cbcc:	81400044 	addi	r5,r16,1
 800cbd0:	00c007c4 	movi	r3,31
 800cbd4:	19409816 	blt	r3,r5,800ce38 <__adddf3+0x428>
 800cbd8:	1c21c83a 	sub	r16,r3,r16
 800cbdc:	8c08983a 	sll	r4,r17,r16
 800cbe0:	8946d83a 	srl	r3,r17,r5
 800cbe4:	9c20983a 	sll	r16,r19,r16
 800cbe8:	2008c03a 	cmpne	r4,r4,zero
 800cbec:	994ad83a 	srl	r5,r19,r5
 800cbf0:	1c06b03a 	or	r3,r3,r16
 800cbf4:	1922b03a 	or	r17,r3,r4
 800cbf8:	0021883a 	mov	r16,zero
 800cbfc:	003fa306 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cc00:	2880202c 	andhi	r2,r5,128
 800cc04:	9007883a 	mov	r3,r18
 800cc08:	103fac1e 	bne	r2,zero,800cabc <__alt_data_end+0xf800cabc>
 800cc0c:	2804977a 	slli	r2,r5,29
 800cc10:	8822d0fa 	srli	r17,r17,3
 800cc14:	0101ffc4 	movi	r4,2047
 800cc18:	280ad0fa 	srli	r5,r5,3
 800cc1c:	1444b03a 	or	r2,r2,r17
 800cc20:	81002c26 	beq	r16,r4,800ccd4 <__adddf3+0x2c4>
 800cc24:	8120703a 	and	r16,r16,r4
 800cc28:	01000434 	movhi	r4,16
 800cc2c:	213fffc4 	addi	r4,r4,-1
 800cc30:	2908703a 	and	r4,r5,r4
 800cc34:	003fad06 	br	800caec <__alt_data_end+0xf800caec>
 800cc38:	8089c83a 	sub	r4,r16,r2
 800cc3c:	01006a0e 	bge	zero,r4,800cde8 <__adddf3+0x3d8>
 800cc40:	10003326 	beq	r2,zero,800cd10 <__adddf3+0x300>
 800cc44:	0081ffc4 	movi	r2,2047
 800cc48:	80bf9026 	beq	r16,r2,800ca8c <__alt_data_end+0xf800ca8c>
 800cc4c:	42002034 	orhi	r8,r8,128
 800cc50:	00800e04 	movi	r2,56
 800cc54:	1100b116 	blt	r2,r4,800cf1c <__adddf3+0x50c>
 800cc58:	008007c4 	movi	r2,31
 800cc5c:	1100e216 	blt	r2,r4,800cfe8 <__adddf3+0x5d8>
 800cc60:	00800804 	movi	r2,32
 800cc64:	1105c83a 	sub	r2,r2,r4
 800cc68:	4092983a 	sll	r9,r8,r2
 800cc6c:	310ed83a 	srl	r7,r6,r4
 800cc70:	3084983a 	sll	r2,r6,r2
 800cc74:	4110d83a 	srl	r8,r8,r4
 800cc78:	49ccb03a 	or	r6,r9,r7
 800cc7c:	1004c03a 	cmpne	r2,r2,zero
 800cc80:	308cb03a 	or	r6,r6,r2
 800cc84:	344d883a 	add	r6,r6,r17
 800cc88:	3463803a 	cmpltu	r17,r6,r17
 800cc8c:	414b883a 	add	r5,r8,r5
 800cc90:	2c4b883a 	add	r5,r5,r17
 800cc94:	3023883a 	mov	r17,r6
 800cc98:	2880202c 	andhi	r2,r5,128
 800cc9c:	10002726 	beq	r2,zero,800cd3c <__adddf3+0x32c>
 800cca0:	84000044 	addi	r16,r16,1
 800cca4:	0081ffc4 	movi	r2,2047
 800cca8:	8080ae26 	beq	r16,r2,800cf64 <__adddf3+0x554>
 800ccac:	00bfe034 	movhi	r2,65408
 800ccb0:	10bfffc4 	addi	r2,r2,-1
 800ccb4:	288a703a 	and	r5,r5,r2
 800ccb8:	880cd07a 	srli	r6,r17,1
 800ccbc:	280897fa 	slli	r4,r5,31
 800ccc0:	88c0004c 	andi	r3,r17,1
 800ccc4:	30e2b03a 	or	r17,r6,r3
 800ccc8:	280ad07a 	srli	r5,r5,1
 800cccc:	8922b03a 	or	r17,r17,r4
 800ccd0:	003f6e06 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800ccd4:	1148b03a 	or	r4,r2,r5
 800ccd8:	20003c26 	beq	r4,zero,800cdcc <__adddf3+0x3bc>
 800ccdc:	29000234 	orhi	r4,r5,8
 800cce0:	01400434 	movhi	r5,16
 800cce4:	297fffc4 	addi	r5,r5,-1
 800cce8:	2148703a 	and	r4,r4,r5
 800ccec:	003f7f06 	br	800caec <__alt_data_end+0xf800caec>
 800ccf0:	18ffffc4 	addi	r3,r3,-1
 800ccf4:	18004d1e 	bne	r3,zero,800ce2c <__adddf3+0x41c>
 800ccf8:	898dc83a 	sub	r6,r17,r6
 800ccfc:	89a3803a 	cmpltu	r17,r17,r6
 800cd00:	2a0bc83a 	sub	r5,r5,r8
 800cd04:	2c4bc83a 	sub	r5,r5,r17
 800cd08:	3023883a 	mov	r17,r6
 800cd0c:	003f9c06 	br	800cb80 <__alt_data_end+0xf800cb80>
 800cd10:	4184b03a 	or	r2,r8,r6
 800cd14:	103f5d26 	beq	r2,zero,800ca8c <__alt_data_end+0xf800ca8c>
 800cd18:	213fffc4 	addi	r4,r4,-1
 800cd1c:	203fd926 	beq	r4,zero,800cc84 <__alt_data_end+0xf800cc84>
 800cd20:	0081ffc4 	movi	r2,2047
 800cd24:	80bfca1e 	bne	r16,r2,800cc50 <__alt_data_end+0xf800cc50>
 800cd28:	003f5806 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cd2c:	10c8b03a 	or	r4,r2,r3
 800cd30:	20008b26 	beq	r4,zero,800cf60 <__adddf3+0x550>
 800cd34:	100b883a 	mov	r5,r2
 800cd38:	1823883a 	mov	r17,r3
 800cd3c:	888001cc 	andi	r2,r17,7
 800cd40:	103f541e 	bne	r2,zero,800ca94 <__alt_data_end+0xf800ca94>
 800cd44:	9007883a 	mov	r3,r18
 800cd48:	003fb006 	br	800cc0c <__alt_data_end+0xf800cc0c>
 800cd4c:	1800531e 	bne	r3,zero,800ce9c <__adddf3+0x48c>
 800cd50:	80800044 	addi	r2,r16,1
 800cd54:	1081ffcc 	andi	r2,r2,2047
 800cd58:	00c00044 	movi	r3,1
 800cd5c:	1880990e 	bge	r3,r2,800cfc4 <__adddf3+0x5b4>
 800cd60:	8985c83a 	sub	r2,r17,r6
 800cd64:	8887803a 	cmpltu	r3,r17,r2
 800cd68:	2a27c83a 	sub	r19,r5,r8
 800cd6c:	98e7c83a 	sub	r19,r19,r3
 800cd70:	98c0202c 	andhi	r3,r19,128
 800cd74:	18006226 	beq	r3,zero,800cf00 <__adddf3+0x4f0>
 800cd78:	3463c83a 	sub	r17,r6,r17
 800cd7c:	4151c83a 	sub	r8,r8,r5
 800cd80:	344d803a 	cmpltu	r6,r6,r17
 800cd84:	41a7c83a 	sub	r19,r8,r6
 800cd88:	3825883a 	mov	r18,r7
 800cd8c:	983f821e 	bne	r19,zero,800cb98 <__alt_data_end+0xf800cb98>
 800cd90:	8809883a 	mov	r4,r17
 800cd94:	800f2540 	call	800f254 <__clzsi2>
 800cd98:	10800804 	addi	r2,r2,32
 800cd9c:	10fffe04 	addi	r3,r2,-8
 800cda0:	010007c4 	movi	r4,31
 800cda4:	20ff810e 	bge	r4,r3,800cbac <__alt_data_end+0xf800cbac>
 800cda8:	14fff604 	addi	r19,r2,-40
 800cdac:	8ce6983a 	sll	r19,r17,r19
 800cdb0:	0023883a 	mov	r17,zero
 800cdb4:	1c3f840e 	bge	r3,r16,800cbc8 <__alt_data_end+0xf800cbc8>
 800cdb8:	017fe034 	movhi	r5,65408
 800cdbc:	297fffc4 	addi	r5,r5,-1
 800cdc0:	80e1c83a 	sub	r16,r16,r3
 800cdc4:	994a703a 	and	r5,r19,r5
 800cdc8:	003f3006 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cdcc:	0009883a 	mov	r4,zero
 800cdd0:	0005883a 	mov	r2,zero
 800cdd4:	003f4506 	br	800caec <__alt_data_end+0xf800caec>
 800cdd8:	418cb03a 	or	r6,r8,r6
 800cddc:	300cc03a 	cmpne	r6,r6,zero
 800cde0:	0007883a 	mov	r3,zero
 800cde4:	003f6106 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800cde8:	2000921e 	bne	r4,zero,800d034 <__adddf3+0x624>
 800cdec:	80800044 	addi	r2,r16,1
 800cdf0:	11c1ffcc 	andi	r7,r2,2047
 800cdf4:	01000044 	movi	r4,1
 800cdf8:	21c0610e 	bge	r4,r7,800cf80 <__adddf3+0x570>
 800cdfc:	0101ffc4 	movi	r4,2047
 800ce00:	1100a326 	beq	r2,r4,800d090 <__adddf3+0x680>
 800ce04:	344d883a 	add	r6,r6,r17
 800ce08:	3463803a 	cmpltu	r17,r6,r17
 800ce0c:	414b883a 	add	r5,r8,r5
 800ce10:	2c4b883a 	add	r5,r5,r17
 800ce14:	282297fa 	slli	r17,r5,31
 800ce18:	300cd07a 	srli	r6,r6,1
 800ce1c:	280ad07a 	srli	r5,r5,1
 800ce20:	1021883a 	mov	r16,r2
 800ce24:	89a2b03a 	or	r17,r17,r6
 800ce28:	003f1806 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800ce2c:	0081ffc4 	movi	r2,2047
 800ce30:	80bf411e 	bne	r16,r2,800cb38 <__alt_data_end+0xf800cb38>
 800ce34:	003f1506 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800ce38:	80bff844 	addi	r2,r16,-31
 800ce3c:	00c00804 	movi	r3,32
 800ce40:	9884d83a 	srl	r2,r19,r2
 800ce44:	28c04a26 	beq	r5,r3,800cf70 <__adddf3+0x560>
 800ce48:	00c00fc4 	movi	r3,63
 800ce4c:	1c21c83a 	sub	r16,r3,r16
 800ce50:	9c26983a 	sll	r19,r19,r16
 800ce54:	9c62b03a 	or	r17,r19,r17
 800ce58:	8822c03a 	cmpne	r17,r17,zero
 800ce5c:	88a2b03a 	or	r17,r17,r2
 800ce60:	000b883a 	mov	r5,zero
 800ce64:	0021883a 	mov	r16,zero
 800ce68:	003fb406 	br	800cd3c <__alt_data_end+0xf800cd3c>
 800ce6c:	18bff804 	addi	r2,r3,-32
 800ce70:	01000804 	movi	r4,32
 800ce74:	4084d83a 	srl	r2,r8,r2
 800ce78:	19003f26 	beq	r3,r4,800cf78 <__adddf3+0x568>
 800ce7c:	01001004 	movi	r4,64
 800ce80:	20c7c83a 	sub	r3,r4,r3
 800ce84:	40d0983a 	sll	r8,r8,r3
 800ce88:	418cb03a 	or	r6,r8,r6
 800ce8c:	300cc03a 	cmpne	r6,r6,zero
 800ce90:	308cb03a 	or	r6,r6,r2
 800ce94:	0007883a 	mov	r3,zero
 800ce98:	003f3406 	br	800cb6c <__alt_data_end+0xf800cb6c>
 800ce9c:	80002326 	beq	r16,zero,800cf2c <__adddf3+0x51c>
 800cea0:	0101ffc4 	movi	r4,2047
 800cea4:	11005e26 	beq	r2,r4,800d020 <__adddf3+0x610>
 800cea8:	00c7c83a 	sub	r3,zero,r3
 800ceac:	29402034 	orhi	r5,r5,128
 800ceb0:	01000e04 	movi	r4,56
 800ceb4:	20c07216 	blt	r4,r3,800d080 <__adddf3+0x670>
 800ceb8:	010007c4 	movi	r4,31
 800cebc:	20c0ce16 	blt	r4,r3,800d1f8 <__adddf3+0x7e8>
 800cec0:	01000804 	movi	r4,32
 800cec4:	20c9c83a 	sub	r4,r4,r3
 800cec8:	2914983a 	sll	r10,r5,r4
 800cecc:	88d2d83a 	srl	r9,r17,r3
 800ced0:	8908983a 	sll	r4,r17,r4
 800ced4:	28c6d83a 	srl	r3,r5,r3
 800ced8:	5262b03a 	or	r17,r10,r9
 800cedc:	2008c03a 	cmpne	r4,r4,zero
 800cee0:	8922b03a 	or	r17,r17,r4
 800cee4:	3463c83a 	sub	r17,r6,r17
 800cee8:	40c7c83a 	sub	r3,r8,r3
 800ceec:	344d803a 	cmpltu	r6,r6,r17
 800cef0:	198bc83a 	sub	r5,r3,r6
 800cef4:	1021883a 	mov	r16,r2
 800cef8:	3825883a 	mov	r18,r7
 800cefc:	003f2006 	br	800cb80 <__alt_data_end+0xf800cb80>
 800cf00:	9886b03a 	or	r3,r19,r2
 800cf04:	1800141e 	bne	r3,zero,800cf58 <__adddf3+0x548>
 800cf08:	0007883a 	mov	r3,zero
 800cf0c:	000b883a 	mov	r5,zero
 800cf10:	0023883a 	mov	r17,zero
 800cf14:	0021883a 	mov	r16,zero
 800cf18:	003f3c06 	br	800cc0c <__alt_data_end+0xf800cc0c>
 800cf1c:	418cb03a 	or	r6,r8,r6
 800cf20:	300cc03a 	cmpne	r6,r6,zero
 800cf24:	0011883a 	mov	r8,zero
 800cf28:	003f5606 	br	800cc84 <__alt_data_end+0xf800cc84>
 800cf2c:	2c48b03a 	or	r4,r5,r17
 800cf30:	20003b26 	beq	r4,zero,800d020 <__adddf3+0x610>
 800cf34:	00c6303a 	nor	r3,zero,r3
 800cf38:	1800371e 	bne	r3,zero,800d018 <__adddf3+0x608>
 800cf3c:	3463c83a 	sub	r17,r6,r17
 800cf40:	414bc83a 	sub	r5,r8,r5
 800cf44:	344d803a 	cmpltu	r6,r6,r17
 800cf48:	298bc83a 	sub	r5,r5,r6
 800cf4c:	1021883a 	mov	r16,r2
 800cf50:	3825883a 	mov	r18,r7
 800cf54:	003f0a06 	br	800cb80 <__alt_data_end+0xf800cb80>
 800cf58:	1023883a 	mov	r17,r2
 800cf5c:	003f0d06 	br	800cb94 <__alt_data_end+0xf800cb94>
 800cf60:	0007883a 	mov	r3,zero
 800cf64:	000b883a 	mov	r5,zero
 800cf68:	0023883a 	mov	r17,zero
 800cf6c:	003f2706 	br	800cc0c <__alt_data_end+0xf800cc0c>
 800cf70:	0027883a 	mov	r19,zero
 800cf74:	003fb706 	br	800ce54 <__alt_data_end+0xf800ce54>
 800cf78:	0011883a 	mov	r8,zero
 800cf7c:	003fc206 	br	800ce88 <__alt_data_end+0xf800ce88>
 800cf80:	2c44b03a 	or	r2,r5,r17
 800cf84:	8000871e 	bne	r16,zero,800d1a4 <__adddf3+0x794>
 800cf88:	1000b126 	beq	r2,zero,800d250 <__adddf3+0x840>
 800cf8c:	4184b03a 	or	r2,r8,r6
 800cf90:	103ebe26 	beq	r2,zero,800ca8c <__alt_data_end+0xf800ca8c>
 800cf94:	3445883a 	add	r2,r6,r17
 800cf98:	1463803a 	cmpltu	r17,r2,r17
 800cf9c:	414b883a 	add	r5,r8,r5
 800cfa0:	2c4b883a 	add	r5,r5,r17
 800cfa4:	28c0202c 	andhi	r3,r5,128
 800cfa8:	1023883a 	mov	r17,r2
 800cfac:	183f6326 	beq	r3,zero,800cd3c <__alt_data_end+0xf800cd3c>
 800cfb0:	00bfe034 	movhi	r2,65408
 800cfb4:	10bfffc4 	addi	r2,r2,-1
 800cfb8:	2021883a 	mov	r16,r4
 800cfbc:	288a703a 	and	r5,r5,r2
 800cfc0:	003eb206 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cfc4:	2c44b03a 	or	r2,r5,r17
 800cfc8:	8000251e 	bne	r16,zero,800d060 <__adddf3+0x650>
 800cfcc:	10004b1e 	bne	r2,zero,800d0fc <__adddf3+0x6ec>
 800cfd0:	4184b03a 	or	r2,r8,r6
 800cfd4:	103fe226 	beq	r2,zero,800cf60 <__alt_data_end+0xf800cf60>
 800cfd8:	400b883a 	mov	r5,r8
 800cfdc:	3023883a 	mov	r17,r6
 800cfe0:	3825883a 	mov	r18,r7
 800cfe4:	003ea906 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800cfe8:	20bff804 	addi	r2,r4,-32
 800cfec:	01c00804 	movi	r7,32
 800cff0:	4084d83a 	srl	r2,r8,r2
 800cff4:	21c07e26 	beq	r4,r7,800d1f0 <__adddf3+0x7e0>
 800cff8:	01c01004 	movi	r7,64
 800cffc:	3909c83a 	sub	r4,r7,r4
 800d000:	4110983a 	sll	r8,r8,r4
 800d004:	418cb03a 	or	r6,r8,r6
 800d008:	300cc03a 	cmpne	r6,r6,zero
 800d00c:	308cb03a 	or	r6,r6,r2
 800d010:	0011883a 	mov	r8,zero
 800d014:	003f1b06 	br	800cc84 <__alt_data_end+0xf800cc84>
 800d018:	0101ffc4 	movi	r4,2047
 800d01c:	113fa41e 	bne	r2,r4,800ceb0 <__alt_data_end+0xf800ceb0>
 800d020:	400b883a 	mov	r5,r8
 800d024:	3023883a 	mov	r17,r6
 800d028:	1021883a 	mov	r16,r2
 800d02c:	3825883a 	mov	r18,r7
 800d030:	003e9606 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d034:	80001a1e 	bne	r16,zero,800d0a0 <__adddf3+0x690>
 800d038:	2c4eb03a 	or	r7,r5,r17
 800d03c:	38005526 	beq	r7,zero,800d194 <__adddf3+0x784>
 800d040:	0108303a 	nor	r4,zero,r4
 800d044:	2000511e 	bne	r4,zero,800d18c <__adddf3+0x77c>
 800d048:	89a3883a 	add	r17,r17,r6
 800d04c:	414b883a 	add	r5,r8,r5
 800d050:	898d803a 	cmpltu	r6,r17,r6
 800d054:	298b883a 	add	r5,r5,r6
 800d058:	1021883a 	mov	r16,r2
 800d05c:	003f0e06 	br	800cc98 <__alt_data_end+0xf800cc98>
 800d060:	1000341e 	bne	r2,zero,800d134 <__adddf3+0x724>
 800d064:	4184b03a 	or	r2,r8,r6
 800d068:	10006f26 	beq	r2,zero,800d228 <__adddf3+0x818>
 800d06c:	400b883a 	mov	r5,r8
 800d070:	3023883a 	mov	r17,r6
 800d074:	3825883a 	mov	r18,r7
 800d078:	0401ffc4 	movi	r16,2047
 800d07c:	003e8306 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d080:	2c62b03a 	or	r17,r5,r17
 800d084:	8822c03a 	cmpne	r17,r17,zero
 800d088:	0007883a 	mov	r3,zero
 800d08c:	003f9506 	br	800cee4 <__alt_data_end+0xf800cee4>
 800d090:	1021883a 	mov	r16,r2
 800d094:	000b883a 	mov	r5,zero
 800d098:	0023883a 	mov	r17,zero
 800d09c:	003edb06 	br	800cc0c <__alt_data_end+0xf800cc0c>
 800d0a0:	01c1ffc4 	movi	r7,2047
 800d0a4:	11c03b26 	beq	r2,r7,800d194 <__adddf3+0x784>
 800d0a8:	0109c83a 	sub	r4,zero,r4
 800d0ac:	29402034 	orhi	r5,r5,128
 800d0b0:	01c00e04 	movi	r7,56
 800d0b4:	39006216 	blt	r7,r4,800d240 <__adddf3+0x830>
 800d0b8:	01c007c4 	movi	r7,31
 800d0bc:	39006b16 	blt	r7,r4,800d26c <__adddf3+0x85c>
 800d0c0:	01c00804 	movi	r7,32
 800d0c4:	390fc83a 	sub	r7,r7,r4
 800d0c8:	29d4983a 	sll	r10,r5,r7
 800d0cc:	8912d83a 	srl	r9,r17,r4
 800d0d0:	89ce983a 	sll	r7,r17,r7
 800d0d4:	2908d83a 	srl	r4,r5,r4
 800d0d8:	5262b03a 	or	r17,r10,r9
 800d0dc:	380ac03a 	cmpne	r5,r7,zero
 800d0e0:	8962b03a 	or	r17,r17,r5
 800d0e4:	89a3883a 	add	r17,r17,r6
 800d0e8:	2211883a 	add	r8,r4,r8
 800d0ec:	898d803a 	cmpltu	r6,r17,r6
 800d0f0:	418b883a 	add	r5,r8,r6
 800d0f4:	1021883a 	mov	r16,r2
 800d0f8:	003ee706 	br	800cc98 <__alt_data_end+0xf800cc98>
 800d0fc:	4184b03a 	or	r2,r8,r6
 800d100:	103e6226 	beq	r2,zero,800ca8c <__alt_data_end+0xf800ca8c>
 800d104:	8987c83a 	sub	r3,r17,r6
 800d108:	88c9803a 	cmpltu	r4,r17,r3
 800d10c:	2a05c83a 	sub	r2,r5,r8
 800d110:	1105c83a 	sub	r2,r2,r4
 800d114:	1100202c 	andhi	r4,r2,128
 800d118:	203f0426 	beq	r4,zero,800cd2c <__alt_data_end+0xf800cd2c>
 800d11c:	3463c83a 	sub	r17,r6,r17
 800d120:	414bc83a 	sub	r5,r8,r5
 800d124:	344d803a 	cmpltu	r6,r6,r17
 800d128:	298bc83a 	sub	r5,r5,r6
 800d12c:	3825883a 	mov	r18,r7
 800d130:	003e5606 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d134:	4184b03a 	or	r2,r8,r6
 800d138:	10002b26 	beq	r2,zero,800d1e8 <__adddf3+0x7d8>
 800d13c:	2804d0fa 	srli	r2,r5,3
 800d140:	8822d0fa 	srli	r17,r17,3
 800d144:	280a977a 	slli	r5,r5,29
 800d148:	10c0022c 	andhi	r3,r2,8
 800d14c:	2c62b03a 	or	r17,r5,r17
 800d150:	18000826 	beq	r3,zero,800d174 <__adddf3+0x764>
 800d154:	4008d0fa 	srli	r4,r8,3
 800d158:	20c0022c 	andhi	r3,r4,8
 800d15c:	1800051e 	bne	r3,zero,800d174 <__adddf3+0x764>
 800d160:	300cd0fa 	srli	r6,r6,3
 800d164:	4010977a 	slli	r8,r8,29
 800d168:	2005883a 	mov	r2,r4
 800d16c:	3825883a 	mov	r18,r7
 800d170:	41a2b03a 	or	r17,r8,r6
 800d174:	880ad77a 	srli	r5,r17,29
 800d178:	100490fa 	slli	r2,r2,3
 800d17c:	882290fa 	slli	r17,r17,3
 800d180:	0401ffc4 	movi	r16,2047
 800d184:	288ab03a 	or	r5,r5,r2
 800d188:	003e4006 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d18c:	01c1ffc4 	movi	r7,2047
 800d190:	11ffc71e 	bne	r2,r7,800d0b0 <__alt_data_end+0xf800d0b0>
 800d194:	400b883a 	mov	r5,r8
 800d198:	3023883a 	mov	r17,r6
 800d19c:	1021883a 	mov	r16,r2
 800d1a0:	003e3a06 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d1a4:	10002d26 	beq	r2,zero,800d25c <__adddf3+0x84c>
 800d1a8:	4184b03a 	or	r2,r8,r6
 800d1ac:	10000e26 	beq	r2,zero,800d1e8 <__adddf3+0x7d8>
 800d1b0:	2804d0fa 	srli	r2,r5,3
 800d1b4:	8822d0fa 	srli	r17,r17,3
 800d1b8:	280a977a 	slli	r5,r5,29
 800d1bc:	10c0022c 	andhi	r3,r2,8
 800d1c0:	2c62b03a 	or	r17,r5,r17
 800d1c4:	183feb26 	beq	r3,zero,800d174 <__alt_data_end+0xf800d174>
 800d1c8:	4008d0fa 	srli	r4,r8,3
 800d1cc:	20c0022c 	andhi	r3,r4,8
 800d1d0:	183fe81e 	bne	r3,zero,800d174 <__alt_data_end+0xf800d174>
 800d1d4:	300cd0fa 	srli	r6,r6,3
 800d1d8:	4010977a 	slli	r8,r8,29
 800d1dc:	2005883a 	mov	r2,r4
 800d1e0:	41a2b03a 	or	r17,r8,r6
 800d1e4:	003fe306 	br	800d174 <__alt_data_end+0xf800d174>
 800d1e8:	0401ffc4 	movi	r16,2047
 800d1ec:	003e2706 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d1f0:	0011883a 	mov	r8,zero
 800d1f4:	003f8306 	br	800d004 <__alt_data_end+0xf800d004>
 800d1f8:	193ff804 	addi	r4,r3,-32
 800d1fc:	02400804 	movi	r9,32
 800d200:	2908d83a 	srl	r4,r5,r4
 800d204:	1a402526 	beq	r3,r9,800d29c <__adddf3+0x88c>
 800d208:	02401004 	movi	r9,64
 800d20c:	48c7c83a 	sub	r3,r9,r3
 800d210:	28ca983a 	sll	r5,r5,r3
 800d214:	2c62b03a 	or	r17,r5,r17
 800d218:	8822c03a 	cmpne	r17,r17,zero
 800d21c:	8922b03a 	or	r17,r17,r4
 800d220:	0007883a 	mov	r3,zero
 800d224:	003f2f06 	br	800cee4 <__alt_data_end+0xf800cee4>
 800d228:	01402034 	movhi	r5,128
 800d22c:	0007883a 	mov	r3,zero
 800d230:	297fffc4 	addi	r5,r5,-1
 800d234:	047ffe04 	movi	r17,-8
 800d238:	0401ffc4 	movi	r16,2047
 800d23c:	003e7306 	br	800cc0c <__alt_data_end+0xf800cc0c>
 800d240:	2c62b03a 	or	r17,r5,r17
 800d244:	8822c03a 	cmpne	r17,r17,zero
 800d248:	0009883a 	mov	r4,zero
 800d24c:	003fa506 	br	800d0e4 <__alt_data_end+0xf800d0e4>
 800d250:	400b883a 	mov	r5,r8
 800d254:	3023883a 	mov	r17,r6
 800d258:	003e0c06 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d25c:	400b883a 	mov	r5,r8
 800d260:	3023883a 	mov	r17,r6
 800d264:	0401ffc4 	movi	r16,2047
 800d268:	003e0806 	br	800ca8c <__alt_data_end+0xf800ca8c>
 800d26c:	21fff804 	addi	r7,r4,-32
 800d270:	02400804 	movi	r9,32
 800d274:	29ced83a 	srl	r7,r5,r7
 800d278:	22400a26 	beq	r4,r9,800d2a4 <__adddf3+0x894>
 800d27c:	02401004 	movi	r9,64
 800d280:	4909c83a 	sub	r4,r9,r4
 800d284:	290a983a 	sll	r5,r5,r4
 800d288:	2c62b03a 	or	r17,r5,r17
 800d28c:	8822c03a 	cmpne	r17,r17,zero
 800d290:	89e2b03a 	or	r17,r17,r7
 800d294:	0009883a 	mov	r4,zero
 800d298:	003f9206 	br	800d0e4 <__alt_data_end+0xf800d0e4>
 800d29c:	000b883a 	mov	r5,zero
 800d2a0:	003fdc06 	br	800d214 <__alt_data_end+0xf800d214>
 800d2a4:	000b883a 	mov	r5,zero
 800d2a8:	003ff706 	br	800d288 <__alt_data_end+0xf800d288>

0800d2ac <__divdf3>:
 800d2ac:	defff204 	addi	sp,sp,-56
 800d2b0:	dd000815 	stw	r20,32(sp)
 800d2b4:	2828d53a 	srli	r20,r5,20
 800d2b8:	dd800a15 	stw	r22,40(sp)
 800d2bc:	282cd7fa 	srli	r22,r5,31
 800d2c0:	dc000415 	stw	r16,16(sp)
 800d2c4:	04000434 	movhi	r16,16
 800d2c8:	df000c15 	stw	fp,48(sp)
 800d2cc:	dcc00715 	stw	r19,28(sp)
 800d2d0:	dc800615 	stw	r18,24(sp)
 800d2d4:	dc400515 	stw	r17,20(sp)
 800d2d8:	843fffc4 	addi	r16,r16,-1
 800d2dc:	dfc00d15 	stw	ra,52(sp)
 800d2e0:	ddc00b15 	stw	r23,44(sp)
 800d2e4:	dd400915 	stw	r21,36(sp)
 800d2e8:	a501ffcc 	andi	r20,r20,2047
 800d2ec:	2025883a 	mov	r18,r4
 800d2f0:	2027883a 	mov	r19,r4
 800d2f4:	2c22703a 	and	r17,r5,r16
 800d2f8:	b7003fcc 	andi	fp,r22,255
 800d2fc:	a0005e26 	beq	r20,zero,800d478 <__divdf3+0x1cc>
 800d300:	0081ffc4 	movi	r2,2047
 800d304:	a0803526 	beq	r20,r2,800d3dc <__divdf3+0x130>
 800d308:	8c000434 	orhi	r16,r17,16
 800d30c:	2004d77a 	srli	r2,r4,29
 800d310:	802090fa 	slli	r16,r16,3
 800d314:	202690fa 	slli	r19,r4,3
 800d318:	a53f0044 	addi	r20,r20,-1023
 800d31c:	80a2b03a 	or	r17,r16,r2
 800d320:	0025883a 	mov	r18,zero
 800d324:	0011883a 	mov	r8,zero
 800d328:	380ad53a 	srli	r5,r7,20
 800d32c:	382ed7fa 	srli	r23,r7,31
 800d330:	04000434 	movhi	r16,16
 800d334:	843fffc4 	addi	r16,r16,-1
 800d338:	2941ffcc 	andi	r5,r5,2047
 800d33c:	302b883a 	mov	r21,r6
 800d340:	3c20703a 	and	r16,r7,r16
 800d344:	ba403fcc 	andi	r9,r23,255
 800d348:	28006726 	beq	r5,zero,800d4e8 <__divdf3+0x23c>
 800d34c:	0081ffc4 	movi	r2,2047
 800d350:	28805f26 	beq	r5,r2,800d4d0 <__divdf3+0x224>
 800d354:	84000434 	orhi	r16,r16,16
 800d358:	3004d77a 	srli	r2,r6,29
 800d35c:	802090fa 	slli	r16,r16,3
 800d360:	302a90fa 	slli	r21,r6,3
 800d364:	297f0044 	addi	r5,r5,-1023
 800d368:	80a0b03a 	or	r16,r16,r2
 800d36c:	000f883a 	mov	r7,zero
 800d370:	3c86b03a 	or	r3,r7,r18
 800d374:	180690ba 	slli	r3,r3,2
 800d378:	00820074 	movhi	r2,2049
 800d37c:	10b4e704 	addi	r2,r2,-11364
 800d380:	1887883a 	add	r3,r3,r2
 800d384:	18c00017 	ldw	r3,0(r3)
 800d388:	b5c8f03a 	xor	r4,r22,r23
 800d38c:	200d883a 	mov	r6,r4
 800d390:	24803fcc 	andi	r18,r4,255
 800d394:	a169c83a 	sub	r20,r20,r5
 800d398:	1800683a 	jmp	r3
 800d39c:	0800d5e4 	muli	zero,at,855
 800d3a0:	0800d414 	ori	zero,at,848
 800d3a4:	0800d5a8 	cmpgeui	zero,at,854
 800d3a8:	0800d3f8 	rdprs	zero,at,847
 800d3ac:	0800d5a8 	cmpgeui	zero,at,854
 800d3b0:	0800d57c 	xorhi	zero,at,853
 800d3b4:	0800d5a8 	cmpgeui	zero,at,854
 800d3b8:	0800d3f8 	rdprs	zero,at,847
 800d3bc:	0800d414 	ori	zero,at,848
 800d3c0:	0800d414 	ori	zero,at,848
 800d3c4:	0800d57c 	xorhi	zero,at,853
 800d3c8:	0800d3f8 	rdprs	zero,at,847
 800d3cc:	0800d408 	cmpgei	zero,at,848
 800d3d0:	0800d408 	cmpgei	zero,at,848
 800d3d4:	0800d408 	cmpgei	zero,at,848
 800d3d8:	0800d5b8 	rdprs	zero,at,854
 800d3dc:	8904b03a 	or	r2,r17,r4
 800d3e0:	1000631e 	bne	r2,zero,800d570 <__divdf3+0x2c4>
 800d3e4:	04800204 	movi	r18,8
 800d3e8:	0023883a 	mov	r17,zero
 800d3ec:	0027883a 	mov	r19,zero
 800d3f0:	02000084 	movi	r8,2
 800d3f4:	003fcc06 	br	800d328 <__alt_data_end+0xf800d328>
 800d3f8:	8023883a 	mov	r17,r16
 800d3fc:	a827883a 	mov	r19,r21
 800d400:	4839883a 	mov	fp,r9
 800d404:	3811883a 	mov	r8,r7
 800d408:	00800084 	movi	r2,2
 800d40c:	40812a1e 	bne	r8,r2,800d8b8 <__divdf3+0x60c>
 800d410:	e025883a 	mov	r18,fp
 800d414:	9180004c 	andi	r6,r18,1
 800d418:	0101ffc4 	movi	r4,2047
 800d41c:	000b883a 	mov	r5,zero
 800d420:	0027883a 	mov	r19,zero
 800d424:	2008953a 	slli	r4,r4,20
 800d428:	30c03fcc 	andi	r3,r6,255
 800d42c:	04000434 	movhi	r16,16
 800d430:	180697fa 	slli	r3,r3,31
 800d434:	843fffc4 	addi	r16,r16,-1
 800d438:	2c20703a 	and	r16,r5,r16
 800d43c:	8120b03a 	or	r16,r16,r4
 800d440:	80c6b03a 	or	r3,r16,r3
 800d444:	9805883a 	mov	r2,r19
 800d448:	dfc00d17 	ldw	ra,52(sp)
 800d44c:	df000c17 	ldw	fp,48(sp)
 800d450:	ddc00b17 	ldw	r23,44(sp)
 800d454:	dd800a17 	ldw	r22,40(sp)
 800d458:	dd400917 	ldw	r21,36(sp)
 800d45c:	dd000817 	ldw	r20,32(sp)
 800d460:	dcc00717 	ldw	r19,28(sp)
 800d464:	dc800617 	ldw	r18,24(sp)
 800d468:	dc400517 	ldw	r17,20(sp)
 800d46c:	dc000417 	ldw	r16,16(sp)
 800d470:	dec00e04 	addi	sp,sp,56
 800d474:	f800283a 	ret
 800d478:	8904b03a 	or	r2,r17,r4
 800d47c:	10003726 	beq	r2,zero,800d55c <__divdf3+0x2b0>
 800d480:	88011c26 	beq	r17,zero,800d8f4 <__divdf3+0x648>
 800d484:	8809883a 	mov	r4,r17
 800d488:	d9800315 	stw	r6,12(sp)
 800d48c:	d9c00115 	stw	r7,4(sp)
 800d490:	800f2540 	call	800f254 <__clzsi2>
 800d494:	d9800317 	ldw	r6,12(sp)
 800d498:	d9c00117 	ldw	r7,4(sp)
 800d49c:	1007883a 	mov	r3,r2
 800d4a0:	01000a04 	movi	r4,40
 800d4a4:	1cfffe04 	addi	r19,r3,-8
 800d4a8:	20c9c83a 	sub	r4,r4,r3
 800d4ac:	8cca983a 	sll	r5,r17,r19
 800d4b0:	9108d83a 	srl	r4,r18,r4
 800d4b4:	94e6983a 	sll	r19,r18,r19
 800d4b8:	2162b03a 	or	r17,r4,r5
 800d4bc:	053f0344 	movi	r20,-1011
 800d4c0:	a0e9c83a 	sub	r20,r20,r3
 800d4c4:	0025883a 	mov	r18,zero
 800d4c8:	0011883a 	mov	r8,zero
 800d4cc:	003f9606 	br	800d328 <__alt_data_end+0xf800d328>
 800d4d0:	8184b03a 	or	r2,r16,r6
 800d4d4:	10001f1e 	bne	r2,zero,800d554 <__divdf3+0x2a8>
 800d4d8:	0021883a 	mov	r16,zero
 800d4dc:	002b883a 	mov	r21,zero
 800d4e0:	01c00084 	movi	r7,2
 800d4e4:	003fa206 	br	800d370 <__alt_data_end+0xf800d370>
 800d4e8:	8184b03a 	or	r2,r16,r6
 800d4ec:	10001526 	beq	r2,zero,800d544 <__divdf3+0x298>
 800d4f0:	80010c26 	beq	r16,zero,800d924 <__divdf3+0x678>
 800d4f4:	8009883a 	mov	r4,r16
 800d4f8:	d9800315 	stw	r6,12(sp)
 800d4fc:	da000215 	stw	r8,8(sp)
 800d500:	da400015 	stw	r9,0(sp)
 800d504:	800f2540 	call	800f254 <__clzsi2>
 800d508:	d9800317 	ldw	r6,12(sp)
 800d50c:	da000217 	ldw	r8,8(sp)
 800d510:	da400017 	ldw	r9,0(sp)
 800d514:	1007883a 	mov	r3,r2
 800d518:	01000a04 	movi	r4,40
 800d51c:	1d7ffe04 	addi	r21,r3,-8
 800d520:	20c9c83a 	sub	r4,r4,r3
 800d524:	8560983a 	sll	r16,r16,r21
 800d528:	3108d83a 	srl	r4,r6,r4
 800d52c:	356a983a 	sll	r21,r6,r21
 800d530:	2420b03a 	or	r16,r4,r16
 800d534:	017f0344 	movi	r5,-1011
 800d538:	28cbc83a 	sub	r5,r5,r3
 800d53c:	000f883a 	mov	r7,zero
 800d540:	003f8b06 	br	800d370 <__alt_data_end+0xf800d370>
 800d544:	0021883a 	mov	r16,zero
 800d548:	002b883a 	mov	r21,zero
 800d54c:	01c00044 	movi	r7,1
 800d550:	003f8706 	br	800d370 <__alt_data_end+0xf800d370>
 800d554:	01c000c4 	movi	r7,3
 800d558:	003f8506 	br	800d370 <__alt_data_end+0xf800d370>
 800d55c:	04800104 	movi	r18,4
 800d560:	0023883a 	mov	r17,zero
 800d564:	0027883a 	mov	r19,zero
 800d568:	02000044 	movi	r8,1
 800d56c:	003f6e06 	br	800d328 <__alt_data_end+0xf800d328>
 800d570:	04800304 	movi	r18,12
 800d574:	020000c4 	movi	r8,3
 800d578:	003f6b06 	br	800d328 <__alt_data_end+0xf800d328>
 800d57c:	01400434 	movhi	r5,16
 800d580:	000d883a 	mov	r6,zero
 800d584:	297fffc4 	addi	r5,r5,-1
 800d588:	04ffffc4 	movi	r19,-1
 800d58c:	0101ffc4 	movi	r4,2047
 800d590:	003fa406 	br	800d424 <__alt_data_end+0xf800d424>
 800d594:	043f0084 	movi	r16,-1022
 800d598:	8521c83a 	sub	r16,r16,r20
 800d59c:	00800e04 	movi	r2,56
 800d5a0:	1401200e 	bge	r2,r16,800da24 <__divdf3+0x778>
 800d5a4:	9180004c 	andi	r6,r18,1
 800d5a8:	0009883a 	mov	r4,zero
 800d5ac:	000b883a 	mov	r5,zero
 800d5b0:	0027883a 	mov	r19,zero
 800d5b4:	003f9b06 	br	800d424 <__alt_data_end+0xf800d424>
 800d5b8:	8880022c 	andhi	r2,r17,8
 800d5bc:	1000c726 	beq	r2,zero,800d8dc <__divdf3+0x630>
 800d5c0:	8080022c 	andhi	r2,r16,8
 800d5c4:	1000c51e 	bne	r2,zero,800d8dc <__divdf3+0x630>
 800d5c8:	00800434 	movhi	r2,16
 800d5cc:	81400234 	orhi	r5,r16,8
 800d5d0:	10bfffc4 	addi	r2,r2,-1
 800d5d4:	b80d883a 	mov	r6,r23
 800d5d8:	288a703a 	and	r5,r5,r2
 800d5dc:	a827883a 	mov	r19,r21
 800d5e0:	003fea06 	br	800d58c <__alt_data_end+0xf800d58c>
 800d5e4:	8440ea36 	bltu	r16,r17,800d990 <__divdf3+0x6e4>
 800d5e8:	8c00e826 	beq	r17,r16,800d98c <__divdf3+0x6e0>
 800d5ec:	a53fffc4 	addi	r20,r20,-1
 800d5f0:	882d883a 	mov	r22,r17
 800d5f4:	000d883a 	mov	r6,zero
 800d5f8:	a804d63a 	srli	r2,r21,24
 800d5fc:	8020923a 	slli	r16,r16,8
 800d600:	b009883a 	mov	r4,r22
 800d604:	d9800315 	stw	r6,12(sp)
 800d608:	1420b03a 	or	r16,r2,r16
 800d60c:	802ed43a 	srli	r23,r16,16
 800d610:	873fffcc 	andi	fp,r16,65535
 800d614:	a82a923a 	slli	r21,r21,8
 800d618:	b80b883a 	mov	r5,r23
 800d61c:	800ca000 	call	800ca00 <__udivsi3>
 800d620:	b009883a 	mov	r4,r22
 800d624:	b80b883a 	mov	r5,r23
 800d628:	1023883a 	mov	r17,r2
 800d62c:	800ca080 	call	800ca08 <__umodsi3>
 800d630:	1004943a 	slli	r2,r2,16
 800d634:	9808d43a 	srli	r4,r19,16
 800d638:	8f2d383a 	mul	r22,r17,fp
 800d63c:	d9800317 	ldw	r6,12(sp)
 800d640:	1106b03a 	or	r3,r2,r4
 800d644:	1d80062e 	bgeu	r3,r22,800d660 <__divdf3+0x3b4>
 800d648:	1c07883a 	add	r3,r3,r16
 800d64c:	88bfffc4 	addi	r2,r17,-1
 800d650:	1c00dc36 	bltu	r3,r16,800d9c4 <__divdf3+0x718>
 800d654:	1d80db2e 	bgeu	r3,r22,800d9c4 <__divdf3+0x718>
 800d658:	8c7fff84 	addi	r17,r17,-2
 800d65c:	1c07883a 	add	r3,r3,r16
 800d660:	1dadc83a 	sub	r22,r3,r22
 800d664:	b009883a 	mov	r4,r22
 800d668:	b80b883a 	mov	r5,r23
 800d66c:	d9800315 	stw	r6,12(sp)
 800d670:	800ca000 	call	800ca00 <__udivsi3>
 800d674:	b009883a 	mov	r4,r22
 800d678:	b80b883a 	mov	r5,r23
 800d67c:	d8800015 	stw	r2,0(sp)
 800d680:	800ca080 	call	800ca08 <__umodsi3>
 800d684:	da400017 	ldw	r9,0(sp)
 800d688:	1004943a 	slli	r2,r2,16
 800d68c:	9cffffcc 	andi	r19,r19,65535
 800d690:	4f07383a 	mul	r3,r9,fp
 800d694:	14c8b03a 	or	r4,r2,r19
 800d698:	d9800317 	ldw	r6,12(sp)
 800d69c:	20c0062e 	bgeu	r4,r3,800d6b8 <__divdf3+0x40c>
 800d6a0:	2409883a 	add	r4,r4,r16
 800d6a4:	48bfffc4 	addi	r2,r9,-1
 800d6a8:	2400c436 	bltu	r4,r16,800d9bc <__divdf3+0x710>
 800d6ac:	20c0c32e 	bgeu	r4,r3,800d9bc <__divdf3+0x710>
 800d6b0:	4a7fff84 	addi	r9,r9,-2
 800d6b4:	2409883a 	add	r4,r4,r16
 800d6b8:	8822943a 	slli	r17,r17,16
 800d6bc:	a80ed43a 	srli	r7,r21,16
 800d6c0:	aa3fffcc 	andi	r8,r21,65535
 800d6c4:	4c62b03a 	or	r17,r9,r17
 800d6c8:	8816d43a 	srli	r11,r17,16
 800d6cc:	897fffcc 	andi	r5,r17,65535
 800d6d0:	2a15383a 	mul	r10,r5,r8
 800d6d4:	5a19383a 	mul	r12,r11,r8
 800d6d8:	29cb383a 	mul	r5,r5,r7
 800d6dc:	5012d43a 	srli	r9,r10,16
 800d6e0:	20c5c83a 	sub	r2,r4,r3
 800d6e4:	614b883a 	add	r5,r12,r5
 800d6e8:	2a4b883a 	add	r5,r5,r9
 800d6ec:	59c7383a 	mul	r3,r11,r7
 800d6f0:	2b00022e 	bgeu	r5,r12,800d6fc <__divdf3+0x450>
 800d6f4:	01000074 	movhi	r4,1
 800d6f8:	1907883a 	add	r3,r3,r4
 800d6fc:	2808d43a 	srli	r4,r5,16
 800d700:	280a943a 	slli	r5,r5,16
 800d704:	54ffffcc 	andi	r19,r10,65535
 800d708:	1907883a 	add	r3,r3,r4
 800d70c:	2ccb883a 	add	r5,r5,r19
 800d710:	10c09336 	bltu	r2,r3,800d960 <__divdf3+0x6b4>
 800d714:	10c0ad26 	beq	r2,r3,800d9cc <__divdf3+0x720>
 800d718:	10c7c83a 	sub	r3,r2,r3
 800d71c:	3167c83a 	sub	r19,r6,r5
 800d720:	34ed803a 	cmpltu	r22,r6,r19
 800d724:	1dadc83a 	sub	r22,r3,r22
 800d728:	b400b226 	beq	r22,r16,800d9f4 <__divdf3+0x748>
 800d72c:	b009883a 	mov	r4,r22
 800d730:	b80b883a 	mov	r5,r23
 800d734:	d9c00115 	stw	r7,4(sp)
 800d738:	da000215 	stw	r8,8(sp)
 800d73c:	800ca000 	call	800ca00 <__udivsi3>
 800d740:	b009883a 	mov	r4,r22
 800d744:	b80b883a 	mov	r5,r23
 800d748:	d8800315 	stw	r2,12(sp)
 800d74c:	800ca080 	call	800ca08 <__umodsi3>
 800d750:	d9800317 	ldw	r6,12(sp)
 800d754:	1004943a 	slli	r2,r2,16
 800d758:	9808d43a 	srli	r4,r19,16
 800d75c:	372d383a 	mul	r22,r6,fp
 800d760:	d9c00117 	ldw	r7,4(sp)
 800d764:	1106b03a 	or	r3,r2,r4
 800d768:	da000217 	ldw	r8,8(sp)
 800d76c:	1d80062e 	bgeu	r3,r22,800d788 <__divdf3+0x4dc>
 800d770:	1c07883a 	add	r3,r3,r16
 800d774:	30bfffc4 	addi	r2,r6,-1
 800d778:	1c00a036 	bltu	r3,r16,800d9fc <__divdf3+0x750>
 800d77c:	1d809f2e 	bgeu	r3,r22,800d9fc <__divdf3+0x750>
 800d780:	31bfff84 	addi	r6,r6,-2
 800d784:	1c07883a 	add	r3,r3,r16
 800d788:	1dadc83a 	sub	r22,r3,r22
 800d78c:	b009883a 	mov	r4,r22
 800d790:	b80b883a 	mov	r5,r23
 800d794:	d9800315 	stw	r6,12(sp)
 800d798:	d9c00115 	stw	r7,4(sp)
 800d79c:	da000215 	stw	r8,8(sp)
 800d7a0:	800ca000 	call	800ca00 <__udivsi3>
 800d7a4:	b009883a 	mov	r4,r22
 800d7a8:	b80b883a 	mov	r5,r23
 800d7ac:	d8800015 	stw	r2,0(sp)
 800d7b0:	800ca080 	call	800ca08 <__umodsi3>
 800d7b4:	da400017 	ldw	r9,0(sp)
 800d7b8:	1004943a 	slli	r2,r2,16
 800d7bc:	993fffcc 	andi	r4,r19,65535
 800d7c0:	4f39383a 	mul	fp,r9,fp
 800d7c4:	1106b03a 	or	r3,r2,r4
 800d7c8:	d9800317 	ldw	r6,12(sp)
 800d7cc:	d9c00117 	ldw	r7,4(sp)
 800d7d0:	da000217 	ldw	r8,8(sp)
 800d7d4:	1f00062e 	bgeu	r3,fp,800d7f0 <__divdf3+0x544>
 800d7d8:	1c07883a 	add	r3,r3,r16
 800d7dc:	48bfffc4 	addi	r2,r9,-1
 800d7e0:	1c008836 	bltu	r3,r16,800da04 <__divdf3+0x758>
 800d7e4:	1f00872e 	bgeu	r3,fp,800da04 <__divdf3+0x758>
 800d7e8:	4a7fff84 	addi	r9,r9,-2
 800d7ec:	1c07883a 	add	r3,r3,r16
 800d7f0:	3008943a 	slli	r4,r6,16
 800d7f4:	1f07c83a 	sub	r3,r3,fp
 800d7f8:	4926b03a 	or	r19,r9,r4
 800d7fc:	993fffcc 	andi	r4,r19,65535
 800d800:	980cd43a 	srli	r6,r19,16
 800d804:	220b383a 	mul	r5,r4,r8
 800d808:	21c5383a 	mul	r2,r4,r7
 800d80c:	3211383a 	mul	r8,r6,r8
 800d810:	2808d43a 	srli	r4,r5,16
 800d814:	31cf383a 	mul	r7,r6,r7
 800d818:	4085883a 	add	r2,r8,r2
 800d81c:	1105883a 	add	r2,r2,r4
 800d820:	1200022e 	bgeu	r2,r8,800d82c <__divdf3+0x580>
 800d824:	01000074 	movhi	r4,1
 800d828:	390f883a 	add	r7,r7,r4
 800d82c:	1008d43a 	srli	r4,r2,16
 800d830:	1004943a 	slli	r2,r2,16
 800d834:	297fffcc 	andi	r5,r5,65535
 800d838:	390f883a 	add	r7,r7,r4
 800d83c:	1145883a 	add	r2,r2,r5
 800d840:	19c06536 	bltu	r3,r7,800d9d8 <__divdf3+0x72c>
 800d844:	19c09f26 	beq	r3,r7,800dac4 <__divdf3+0x818>
 800d848:	9cc00054 	ori	r19,r19,1
 800d84c:	a100ffc4 	addi	r4,r20,1023
 800d850:	013f500e 	bge	zero,r4,800d594 <__alt_data_end+0xf800d594>
 800d854:	988001cc 	andi	r2,r19,7
 800d858:	10000726 	beq	r2,zero,800d878 <__divdf3+0x5cc>
 800d85c:	98c003cc 	andi	r3,r19,15
 800d860:	00800104 	movi	r2,4
 800d864:	18800426 	beq	r3,r2,800d878 <__divdf3+0x5cc>
 800d868:	9885883a 	add	r2,r19,r2
 800d86c:	14e1803a 	cmpltu	r16,r2,r19
 800d870:	8c23883a 	add	r17,r17,r16
 800d874:	1027883a 	mov	r19,r2
 800d878:	8880402c 	andhi	r2,r17,256
 800d87c:	10000426 	beq	r2,zero,800d890 <__divdf3+0x5e4>
 800d880:	00bfc034 	movhi	r2,65280
 800d884:	10bfffc4 	addi	r2,r2,-1
 800d888:	a1010004 	addi	r4,r20,1024
 800d88c:	88a2703a 	and	r17,r17,r2
 800d890:	0081ff84 	movi	r2,2046
 800d894:	113edf16 	blt	r2,r4,800d414 <__alt_data_end+0xf800d414>
 800d898:	9826d0fa 	srli	r19,r19,3
 800d89c:	8804977a 	slli	r2,r17,29
 800d8a0:	8820927a 	slli	r16,r17,9
 800d8a4:	2101ffcc 	andi	r4,r4,2047
 800d8a8:	14e6b03a 	or	r19,r2,r19
 800d8ac:	800ad33a 	srli	r5,r16,12
 800d8b0:	9180004c 	andi	r6,r18,1
 800d8b4:	003edb06 	br	800d424 <__alt_data_end+0xf800d424>
 800d8b8:	008000c4 	movi	r2,3
 800d8bc:	4080a826 	beq	r8,r2,800db60 <__divdf3+0x8b4>
 800d8c0:	00800044 	movi	r2,1
 800d8c4:	4080551e 	bne	r8,r2,800da1c <__divdf3+0x770>
 800d8c8:	e00d883a 	mov	r6,fp
 800d8cc:	0009883a 	mov	r4,zero
 800d8d0:	000b883a 	mov	r5,zero
 800d8d4:	0027883a 	mov	r19,zero
 800d8d8:	003ed206 	br	800d424 <__alt_data_end+0xf800d424>
 800d8dc:	00800434 	movhi	r2,16
 800d8e0:	89400234 	orhi	r5,r17,8
 800d8e4:	10bfffc4 	addi	r2,r2,-1
 800d8e8:	b00d883a 	mov	r6,r22
 800d8ec:	288a703a 	and	r5,r5,r2
 800d8f0:	003f2606 	br	800d58c <__alt_data_end+0xf800d58c>
 800d8f4:	d9800315 	stw	r6,12(sp)
 800d8f8:	d9c00115 	stw	r7,4(sp)
 800d8fc:	800f2540 	call	800f254 <__clzsi2>
 800d900:	10c00804 	addi	r3,r2,32
 800d904:	010009c4 	movi	r4,39
 800d908:	d9800317 	ldw	r6,12(sp)
 800d90c:	d9c00117 	ldw	r7,4(sp)
 800d910:	20fee30e 	bge	r4,r3,800d4a0 <__alt_data_end+0xf800d4a0>
 800d914:	117ffe04 	addi	r5,r2,-8
 800d918:	9162983a 	sll	r17,r18,r5
 800d91c:	0027883a 	mov	r19,zero
 800d920:	003ee606 	br	800d4bc <__alt_data_end+0xf800d4bc>
 800d924:	3009883a 	mov	r4,r6
 800d928:	d9800315 	stw	r6,12(sp)
 800d92c:	da000215 	stw	r8,8(sp)
 800d930:	da400015 	stw	r9,0(sp)
 800d934:	800f2540 	call	800f254 <__clzsi2>
 800d938:	10c00804 	addi	r3,r2,32
 800d93c:	010009c4 	movi	r4,39
 800d940:	d9800317 	ldw	r6,12(sp)
 800d944:	da000217 	ldw	r8,8(sp)
 800d948:	da400017 	ldw	r9,0(sp)
 800d94c:	20fef20e 	bge	r4,r3,800d518 <__alt_data_end+0xf800d518>
 800d950:	10bffe04 	addi	r2,r2,-8
 800d954:	a8a0983a 	sll	r16,r21,r2
 800d958:	002b883a 	mov	r21,zero
 800d95c:	003ef506 	br	800d534 <__alt_data_end+0xf800d534>
 800d960:	354d883a 	add	r6,r6,r21
 800d964:	3549803a 	cmpltu	r4,r6,r21
 800d968:	2409883a 	add	r4,r4,r16
 800d96c:	2089883a 	add	r4,r4,r2
 800d970:	88bfffc4 	addi	r2,r17,-1
 800d974:	81000c2e 	bgeu	r16,r4,800d9a8 <__divdf3+0x6fc>
 800d978:	20c04436 	bltu	r4,r3,800da8c <__divdf3+0x7e0>
 800d97c:	19006f26 	beq	r3,r4,800db3c <__divdf3+0x890>
 800d980:	20c7c83a 	sub	r3,r4,r3
 800d984:	1023883a 	mov	r17,r2
 800d988:	003f6406 	br	800d71c <__alt_data_end+0xf800d71c>
 800d98c:	9d7f1736 	bltu	r19,r21,800d5ec <__alt_data_end+0xf800d5ec>
 800d990:	9806d07a 	srli	r3,r19,1
 800d994:	880497fa 	slli	r2,r17,31
 800d998:	980c97fa 	slli	r6,r19,31
 800d99c:	882cd07a 	srli	r22,r17,1
 800d9a0:	18a6b03a 	or	r19,r3,r2
 800d9a4:	003f1406 	br	800d5f8 <__alt_data_end+0xf800d5f8>
 800d9a8:	243ff51e 	bne	r4,r16,800d980 <__alt_data_end+0xf800d980>
 800d9ac:	357ff22e 	bgeu	r6,r21,800d978 <__alt_data_end+0xf800d978>
 800d9b0:	80c7c83a 	sub	r3,r16,r3
 800d9b4:	1023883a 	mov	r17,r2
 800d9b8:	003f5806 	br	800d71c <__alt_data_end+0xf800d71c>
 800d9bc:	1013883a 	mov	r9,r2
 800d9c0:	003f3d06 	br	800d6b8 <__alt_data_end+0xf800d6b8>
 800d9c4:	1023883a 	mov	r17,r2
 800d9c8:	003f2506 	br	800d660 <__alt_data_end+0xf800d660>
 800d9cc:	317fe436 	bltu	r6,r5,800d960 <__alt_data_end+0xf800d960>
 800d9d0:	0007883a 	mov	r3,zero
 800d9d4:	003f5106 	br	800d71c <__alt_data_end+0xf800d71c>
 800d9d8:	1c07883a 	add	r3,r3,r16
 800d9dc:	993fffc4 	addi	r4,r19,-1
 800d9e0:	1c000a2e 	bgeu	r3,r16,800da0c <__divdf3+0x760>
 800d9e4:	2027883a 	mov	r19,r4
 800d9e8:	19ff971e 	bne	r3,r7,800d848 <__alt_data_end+0xf800d848>
 800d9ec:	a8bf961e 	bne	r21,r2,800d848 <__alt_data_end+0xf800d848>
 800d9f0:	003f9606 	br	800d84c <__alt_data_end+0xf800d84c>
 800d9f4:	04ffffc4 	movi	r19,-1
 800d9f8:	003f9406 	br	800d84c <__alt_data_end+0xf800d84c>
 800d9fc:	100d883a 	mov	r6,r2
 800da00:	003f6106 	br	800d788 <__alt_data_end+0xf800d788>
 800da04:	1013883a 	mov	r9,r2
 800da08:	003f7906 	br	800d7f0 <__alt_data_end+0xf800d7f0>
 800da0c:	19c02636 	bltu	r3,r7,800daa8 <__divdf3+0x7fc>
 800da10:	38c04d26 	beq	r7,r3,800db48 <__divdf3+0x89c>
 800da14:	2027883a 	mov	r19,r4
 800da18:	003f8b06 	br	800d848 <__alt_data_end+0xf800d848>
 800da1c:	e025883a 	mov	r18,fp
 800da20:	003f8a06 	br	800d84c <__alt_data_end+0xf800d84c>
 800da24:	008007c4 	movi	r2,31
 800da28:	14002a16 	blt	r2,r16,800dad4 <__divdf3+0x828>
 800da2c:	a5010784 	addi	r20,r20,1054
 800da30:	8d04983a 	sll	r2,r17,r20
 800da34:	9c06d83a 	srl	r3,r19,r16
 800da38:	9d28983a 	sll	r20,r19,r20
 800da3c:	8c20d83a 	srl	r16,r17,r16
 800da40:	1886b03a 	or	r3,r3,r2
 800da44:	a004c03a 	cmpne	r2,r20,zero
 800da48:	1884b03a 	or	r2,r3,r2
 800da4c:	10c001cc 	andi	r3,r2,7
 800da50:	18000726 	beq	r3,zero,800da70 <__divdf3+0x7c4>
 800da54:	110003cc 	andi	r4,r2,15
 800da58:	00c00104 	movi	r3,4
 800da5c:	20c00426 	beq	r4,r3,800da70 <__divdf3+0x7c4>
 800da60:	10c00104 	addi	r3,r2,4
 800da64:	1885803a 	cmpltu	r2,r3,r2
 800da68:	80a1883a 	add	r16,r16,r2
 800da6c:	1805883a 	mov	r2,r3
 800da70:	80c0202c 	andhi	r3,r16,128
 800da74:	18002d26 	beq	r3,zero,800db2c <__divdf3+0x880>
 800da78:	9180004c 	andi	r6,r18,1
 800da7c:	01000044 	movi	r4,1
 800da80:	000b883a 	mov	r5,zero
 800da84:	0027883a 	mov	r19,zero
 800da88:	003e6606 	br	800d424 <__alt_data_end+0xf800d424>
 800da8c:	354d883a 	add	r6,r6,r21
 800da90:	356d803a 	cmpltu	r22,r6,r21
 800da94:	b42d883a 	add	r22,r22,r16
 800da98:	b12d883a 	add	r22,r22,r4
 800da9c:	8c7fff84 	addi	r17,r17,-2
 800daa0:	b0c7c83a 	sub	r3,r22,r3
 800daa4:	003f1d06 	br	800d71c <__alt_data_end+0xf800d71c>
 800daa8:	ad4b883a 	add	r5,r21,r21
 800daac:	2d6b803a 	cmpltu	r21,r5,r21
 800dab0:	ac2b883a 	add	r21,r21,r16
 800dab4:	1d47883a 	add	r3,r3,r21
 800dab8:	993fff84 	addi	r4,r19,-2
 800dabc:	282b883a 	mov	r21,r5
 800dac0:	003fc806 	br	800d9e4 <__alt_data_end+0xf800d9e4>
 800dac4:	103fc41e 	bne	r2,zero,800d9d8 <__alt_data_end+0xf800d9d8>
 800dac8:	002b883a 	mov	r21,zero
 800dacc:	a8bf5e1e 	bne	r21,r2,800d848 <__alt_data_end+0xf800d848>
 800dad0:	003f5e06 	br	800d84c <__alt_data_end+0xf800d84c>
 800dad4:	00bef884 	movi	r2,-1054
 800dad8:	1505c83a 	sub	r2,r2,r20
 800dadc:	00c00804 	movi	r3,32
 800dae0:	8884d83a 	srl	r2,r17,r2
 800dae4:	80c01c26 	beq	r16,r3,800db58 <__divdf3+0x8ac>
 800dae8:	a0c10f84 	addi	r3,r20,1086
 800daec:	88c6983a 	sll	r3,r17,r3
 800daf0:	1cc6b03a 	or	r3,r3,r19
 800daf4:	1806c03a 	cmpne	r3,r3,zero
 800daf8:	1884b03a 	or	r2,r3,r2
 800dafc:	140001cc 	andi	r16,r2,7
 800db00:	8000061e 	bne	r16,zero,800db1c <__divdf3+0x870>
 800db04:	000b883a 	mov	r5,zero
 800db08:	1004d0fa 	srli	r2,r2,3
 800db0c:	9180004c 	andi	r6,r18,1
 800db10:	0009883a 	mov	r4,zero
 800db14:	1426b03a 	or	r19,r2,r16
 800db18:	003e4206 	br	800d424 <__alt_data_end+0xf800d424>
 800db1c:	110003cc 	andi	r4,r2,15
 800db20:	00c00104 	movi	r3,4
 800db24:	0021883a 	mov	r16,zero
 800db28:	20ffcd1e 	bne	r4,r3,800da60 <__alt_data_end+0xf800da60>
 800db2c:	800a927a 	slli	r5,r16,9
 800db30:	8020977a 	slli	r16,r16,29
 800db34:	280ad33a 	srli	r5,r5,12
 800db38:	003ff306 	br	800db08 <__alt_data_end+0xf800db08>
 800db3c:	317fd336 	bltu	r6,r5,800da8c <__alt_data_end+0xf800da8c>
 800db40:	1023883a 	mov	r17,r2
 800db44:	003fa206 	br	800d9d0 <__alt_data_end+0xf800d9d0>
 800db48:	a8bfd736 	bltu	r21,r2,800daa8 <__alt_data_end+0xf800daa8>
 800db4c:	2027883a 	mov	r19,r4
 800db50:	a8bf3d1e 	bne	r21,r2,800d848 <__alt_data_end+0xf800d848>
 800db54:	003f3d06 	br	800d84c <__alt_data_end+0xf800d84c>
 800db58:	0007883a 	mov	r3,zero
 800db5c:	003fe406 	br	800daf0 <__alt_data_end+0xf800daf0>
 800db60:	00800434 	movhi	r2,16
 800db64:	89400234 	orhi	r5,r17,8
 800db68:	10bfffc4 	addi	r2,r2,-1
 800db6c:	e00d883a 	mov	r6,fp
 800db70:	288a703a 	and	r5,r5,r2
 800db74:	003e8506 	br	800d58c <__alt_data_end+0xf800d58c>

0800db78 <__eqdf2>:
 800db78:	2804d53a 	srli	r2,r5,20
 800db7c:	3806d53a 	srli	r3,r7,20
 800db80:	02000434 	movhi	r8,16
 800db84:	423fffc4 	addi	r8,r8,-1
 800db88:	1081ffcc 	andi	r2,r2,2047
 800db8c:	0241ffc4 	movi	r9,2047
 800db90:	2a14703a 	and	r10,r5,r8
 800db94:	18c1ffcc 	andi	r3,r3,2047
 800db98:	3a10703a 	and	r8,r7,r8
 800db9c:	280ad7fa 	srli	r5,r5,31
 800dba0:	380ed7fa 	srli	r7,r7,31
 800dba4:	12400f26 	beq	r2,r9,800dbe4 <__eqdf2+0x6c>
 800dba8:	0241ffc4 	movi	r9,2047
 800dbac:	1a400326 	beq	r3,r9,800dbbc <__eqdf2+0x44>
 800dbb0:	10c00526 	beq	r2,r3,800dbc8 <__eqdf2+0x50>
 800dbb4:	00800044 	movi	r2,1
 800dbb8:	f800283a 	ret
 800dbbc:	4192b03a 	or	r9,r8,r6
 800dbc0:	483ffc1e 	bne	r9,zero,800dbb4 <__alt_data_end+0xf800dbb4>
 800dbc4:	10fffb1e 	bne	r2,r3,800dbb4 <__alt_data_end+0xf800dbb4>
 800dbc8:	523ffa1e 	bne	r10,r8,800dbb4 <__alt_data_end+0xf800dbb4>
 800dbcc:	21bff91e 	bne	r4,r6,800dbb4 <__alt_data_end+0xf800dbb4>
 800dbd0:	29c00826 	beq	r5,r7,800dbf4 <__eqdf2+0x7c>
 800dbd4:	103ff71e 	bne	r2,zero,800dbb4 <__alt_data_end+0xf800dbb4>
 800dbd8:	5104b03a 	or	r2,r10,r4
 800dbdc:	1004c03a 	cmpne	r2,r2,zero
 800dbe0:	f800283a 	ret
 800dbe4:	5112b03a 	or	r9,r10,r4
 800dbe8:	483fef26 	beq	r9,zero,800dba8 <__alt_data_end+0xf800dba8>
 800dbec:	00800044 	movi	r2,1
 800dbf0:	f800283a 	ret
 800dbf4:	0005883a 	mov	r2,zero
 800dbf8:	f800283a 	ret

0800dbfc <__gedf2>:
 800dbfc:	2804d53a 	srli	r2,r5,20
 800dc00:	3806d53a 	srli	r3,r7,20
 800dc04:	02000434 	movhi	r8,16
 800dc08:	423fffc4 	addi	r8,r8,-1
 800dc0c:	0241ffc4 	movi	r9,2047
 800dc10:	1081ffcc 	andi	r2,r2,2047
 800dc14:	2a14703a 	and	r10,r5,r8
 800dc18:	1a46703a 	and	r3,r3,r9
 800dc1c:	3a10703a 	and	r8,r7,r8
 800dc20:	280ad7fa 	srli	r5,r5,31
 800dc24:	380ed7fa 	srli	r7,r7,31
 800dc28:	12400b26 	beq	r2,r9,800dc58 <__gedf2+0x5c>
 800dc2c:	1a401626 	beq	r3,r9,800dc88 <__gedf2+0x8c>
 800dc30:	10000c1e 	bne	r2,zero,800dc64 <__gedf2+0x68>
 800dc34:	5112b03a 	or	r9,r10,r4
 800dc38:	4813003a 	cmpeq	r9,r9,zero
 800dc3c:	4817883a 	mov	r11,r9
 800dc40:	18000c1e 	bne	r3,zero,800dc74 <__gedf2+0x78>
 800dc44:	4198b03a 	or	r12,r8,r6
 800dc48:	60000a1e 	bne	r12,zero,800dc74 <__gedf2+0x78>
 800dc4c:	48001326 	beq	r9,zero,800dc9c <__gedf2+0xa0>
 800dc50:	0005883a 	mov	r2,zero
 800dc54:	f800283a 	ret
 800dc58:	5112b03a 	or	r9,r10,r4
 800dc5c:	4800191e 	bne	r9,zero,800dcc4 <__gedf2+0xc8>
 800dc60:	18800926 	beq	r3,r2,800dc88 <__gedf2+0x8c>
 800dc64:	18000b1e 	bne	r3,zero,800dc94 <__gedf2+0x98>
 800dc68:	4192b03a 	or	r9,r8,r6
 800dc6c:	0017883a 	mov	r11,zero
 800dc70:	48000a26 	beq	r9,zero,800dc9c <__gedf2+0xa0>
 800dc74:	39c03fcc 	andi	r7,r7,255
 800dc78:	58000726 	beq	r11,zero,800dc98 <__gedf2+0x9c>
 800dc7c:	3800081e 	bne	r7,zero,800dca0 <__gedf2+0xa4>
 800dc80:	00bfffc4 	movi	r2,-1
 800dc84:	f800283a 	ret
 800dc88:	4192b03a 	or	r9,r8,r6
 800dc8c:	48000d1e 	bne	r9,zero,800dcc4 <__gedf2+0xc8>
 800dc90:	103fe826 	beq	r2,zero,800dc34 <__alt_data_end+0xf800dc34>
 800dc94:	39c03fcc 	andi	r7,r7,255
 800dc98:	29c00326 	beq	r5,r7,800dca8 <__gedf2+0xac>
 800dc9c:	283ff81e 	bne	r5,zero,800dc80 <__alt_data_end+0xf800dc80>
 800dca0:	00800044 	movi	r2,1
 800dca4:	f800283a 	ret
 800dca8:	18bffc16 	blt	r3,r2,800dc9c <__alt_data_end+0xf800dc9c>
 800dcac:	10c00316 	blt	r2,r3,800dcbc <__gedf2+0xc0>
 800dcb0:	42bffa36 	bltu	r8,r10,800dc9c <__alt_data_end+0xf800dc9c>
 800dcb4:	52000526 	beq	r10,r8,800dccc <__gedf2+0xd0>
 800dcb8:	523fe52e 	bgeu	r10,r8,800dc50 <__alt_data_end+0xf800dc50>
 800dcbc:	283ff026 	beq	r5,zero,800dc80 <__alt_data_end+0xf800dc80>
 800dcc0:	003ff706 	br	800dca0 <__alt_data_end+0xf800dca0>
 800dcc4:	00bfff84 	movi	r2,-2
 800dcc8:	f800283a 	ret
 800dccc:	313ff336 	bltu	r6,r4,800dc9c <__alt_data_end+0xf800dc9c>
 800dcd0:	21bfdf2e 	bgeu	r4,r6,800dc50 <__alt_data_end+0xf800dc50>
 800dcd4:	283fea26 	beq	r5,zero,800dc80 <__alt_data_end+0xf800dc80>
 800dcd8:	003ff106 	br	800dca0 <__alt_data_end+0xf800dca0>

0800dcdc <__ledf2>:
 800dcdc:	2804d53a 	srli	r2,r5,20
 800dce0:	3810d53a 	srli	r8,r7,20
 800dce4:	00c00434 	movhi	r3,16
 800dce8:	18ffffc4 	addi	r3,r3,-1
 800dcec:	0241ffc4 	movi	r9,2047
 800dcf0:	1081ffcc 	andi	r2,r2,2047
 800dcf4:	28d4703a 	and	r10,r5,r3
 800dcf8:	4250703a 	and	r8,r8,r9
 800dcfc:	38c6703a 	and	r3,r7,r3
 800dd00:	280ad7fa 	srli	r5,r5,31
 800dd04:	380ed7fa 	srli	r7,r7,31
 800dd08:	12400b26 	beq	r2,r9,800dd38 <__ledf2+0x5c>
 800dd0c:	42401926 	beq	r8,r9,800dd74 <__ledf2+0x98>
 800dd10:	10000c1e 	bne	r2,zero,800dd44 <__ledf2+0x68>
 800dd14:	5112b03a 	or	r9,r10,r4
 800dd18:	4813003a 	cmpeq	r9,r9,zero
 800dd1c:	4817883a 	mov	r11,r9
 800dd20:	40000f26 	beq	r8,zero,800dd60 <__ledf2+0x84>
 800dd24:	39c03fcc 	andi	r7,r7,255
 800dd28:	58001826 	beq	r11,zero,800dd8c <__ledf2+0xb0>
 800dd2c:	38000a1e 	bne	r7,zero,800dd58 <__ledf2+0x7c>
 800dd30:	00bfffc4 	movi	r2,-1
 800dd34:	f800283a 	ret
 800dd38:	5112b03a 	or	r9,r10,r4
 800dd3c:	48000f1e 	bne	r9,zero,800dd7c <__ledf2+0xa0>
 800dd40:	40800c26 	beq	r8,r2,800dd74 <__ledf2+0x98>
 800dd44:	4000101e 	bne	r8,zero,800dd88 <__ledf2+0xac>
 800dd48:	1992b03a 	or	r9,r3,r6
 800dd4c:	0017883a 	mov	r11,zero
 800dd50:	483ff41e 	bne	r9,zero,800dd24 <__alt_data_end+0xf800dd24>
 800dd54:	283ff61e 	bne	r5,zero,800dd30 <__alt_data_end+0xf800dd30>
 800dd58:	00800044 	movi	r2,1
 800dd5c:	f800283a 	ret
 800dd60:	1998b03a 	or	r12,r3,r6
 800dd64:	603fef1e 	bne	r12,zero,800dd24 <__alt_data_end+0xf800dd24>
 800dd68:	483ffa26 	beq	r9,zero,800dd54 <__alt_data_end+0xf800dd54>
 800dd6c:	0005883a 	mov	r2,zero
 800dd70:	f800283a 	ret
 800dd74:	1992b03a 	or	r9,r3,r6
 800dd78:	48000226 	beq	r9,zero,800dd84 <__ledf2+0xa8>
 800dd7c:	00800084 	movi	r2,2
 800dd80:	f800283a 	ret
 800dd84:	103fe326 	beq	r2,zero,800dd14 <__alt_data_end+0xf800dd14>
 800dd88:	39c03fcc 	andi	r7,r7,255
 800dd8c:	29fff11e 	bne	r5,r7,800dd54 <__alt_data_end+0xf800dd54>
 800dd90:	40bff016 	blt	r8,r2,800dd54 <__alt_data_end+0xf800dd54>
 800dd94:	12000316 	blt	r2,r8,800dda4 <__ledf2+0xc8>
 800dd98:	1abfee36 	bltu	r3,r10,800dd54 <__alt_data_end+0xf800dd54>
 800dd9c:	50c00326 	beq	r10,r3,800ddac <__ledf2+0xd0>
 800dda0:	50fff22e 	bgeu	r10,r3,800dd6c <__alt_data_end+0xf800dd6c>
 800dda4:	283fe226 	beq	r5,zero,800dd30 <__alt_data_end+0xf800dd30>
 800dda8:	003feb06 	br	800dd58 <__alt_data_end+0xf800dd58>
 800ddac:	313fe936 	bltu	r6,r4,800dd54 <__alt_data_end+0xf800dd54>
 800ddb0:	21bfee2e 	bgeu	r4,r6,800dd6c <__alt_data_end+0xf800dd6c>
 800ddb4:	283fde26 	beq	r5,zero,800dd30 <__alt_data_end+0xf800dd30>
 800ddb8:	003fe706 	br	800dd58 <__alt_data_end+0xf800dd58>

0800ddbc <__muldf3>:
 800ddbc:	defff204 	addi	sp,sp,-56
 800ddc0:	2804d53a 	srli	r2,r5,20
 800ddc4:	dd800a15 	stw	r22,40(sp)
 800ddc8:	282cd7fa 	srli	r22,r5,31
 800ddcc:	dc000415 	stw	r16,16(sp)
 800ddd0:	04000434 	movhi	r16,16
 800ddd4:	df000c15 	stw	fp,48(sp)
 800ddd8:	dd000815 	stw	r20,32(sp)
 800dddc:	dcc00715 	stw	r19,28(sp)
 800dde0:	dc800615 	stw	r18,24(sp)
 800dde4:	dc400515 	stw	r17,20(sp)
 800dde8:	843fffc4 	addi	r16,r16,-1
 800ddec:	dfc00d15 	stw	ra,52(sp)
 800ddf0:	ddc00b15 	stw	r23,44(sp)
 800ddf4:	dd400915 	stw	r21,36(sp)
 800ddf8:	1501ffcc 	andi	r20,r2,2047
 800ddfc:	2023883a 	mov	r17,r4
 800de00:	2025883a 	mov	r18,r4
 800de04:	2c20703a 	and	r16,r5,r16
 800de08:	b027883a 	mov	r19,r22
 800de0c:	b7003fcc 	andi	fp,r22,255
 800de10:	a0005926 	beq	r20,zero,800df78 <__muldf3+0x1bc>
 800de14:	0081ffc4 	movi	r2,2047
 800de18:	a0803426 	beq	r20,r2,800deec <__muldf3+0x130>
 800de1c:	84000434 	orhi	r16,r16,16
 800de20:	2004d77a 	srli	r2,r4,29
 800de24:	802090fa 	slli	r16,r16,3
 800de28:	202490fa 	slli	r18,r4,3
 800de2c:	a53f0044 	addi	r20,r20,-1023
 800de30:	80a0b03a 	or	r16,r16,r2
 800de34:	002b883a 	mov	r21,zero
 800de38:	0015883a 	mov	r10,zero
 800de3c:	3812d53a 	srli	r9,r7,20
 800de40:	3806d7fa 	srli	r3,r7,31
 800de44:	02000434 	movhi	r8,16
 800de48:	423fffc4 	addi	r8,r8,-1
 800de4c:	4941ffcc 	andi	r5,r9,2047
 800de50:	302f883a 	mov	r23,r6
 800de54:	3a22703a 	and	r17,r7,r8
 800de58:	1ac03fcc 	andi	r11,r3,255
 800de5c:	28006226 	beq	r5,zero,800dfe8 <__muldf3+0x22c>
 800de60:	0081ffc4 	movi	r2,2047
 800de64:	28805a26 	beq	r5,r2,800dfd0 <__muldf3+0x214>
 800de68:	8a000434 	orhi	r8,r17,16
 800de6c:	3004d77a 	srli	r2,r6,29
 800de70:	401090fa 	slli	r8,r8,3
 800de74:	302e90fa 	slli	r23,r6,3
 800de78:	297f0044 	addi	r5,r5,-1023
 800de7c:	40a2b03a 	or	r17,r8,r2
 800de80:	0013883a 	mov	r9,zero
 800de84:	4d4cb03a 	or	r6,r9,r21
 800de88:	300c90ba 	slli	r6,r6,2
 800de8c:	02020074 	movhi	r8,2049
 800de90:	4237ab04 	addi	r8,r8,-8532
 800de94:	320d883a 	add	r6,r6,r8
 800de98:	31800017 	ldw	r6,0(r6)
 800de9c:	a14b883a 	add	r5,r20,r5
 800dea0:	1dacf03a 	xor	r22,r3,r22
 800dea4:	2b000044 	addi	r12,r5,1
 800dea8:	3000683a 	jmp	r6
 800deac:	0800e0e8 	cmpgeui	zero,at,899
 800deb0:	0800e0d4 	ori	zero,at,899
 800deb4:	0800e0d4 	ori	zero,at,899
 800deb8:	0800e0c0 	call	800e0c <__reset-0x77ff1f4>
 800debc:	0800df08 	cmpgei	zero,at,892
 800dec0:	0800df08 	cmpgei	zero,at,892
 800dec4:	0800e0a8 	cmpgeui	zero,at,898
 800dec8:	0800e0c0 	call	800e0c <__reset-0x77ff1f4>
 800decc:	0800df08 	cmpgei	zero,at,892
 800ded0:	0800e0a8 	cmpgeui	zero,at,898
 800ded4:	0800df08 	cmpgei	zero,at,892
 800ded8:	0800e0c0 	call	800e0c <__reset-0x77ff1f4>
 800dedc:	0800df0c 	andi	zero,at,892
 800dee0:	0800df0c 	andi	zero,at,892
 800dee4:	0800df0c 	andi	zero,at,892
 800dee8:	0800e2e4 	muli	zero,at,907
 800deec:	8104b03a 	or	r2,r16,r4
 800def0:	10006a1e 	bne	r2,zero,800e09c <__muldf3+0x2e0>
 800def4:	05400204 	movi	r21,8
 800def8:	0021883a 	mov	r16,zero
 800defc:	0025883a 	mov	r18,zero
 800df00:	02800084 	movi	r10,2
 800df04:	003fcd06 	br	800de3c <__alt_data_end+0xf800de3c>
 800df08:	b039883a 	mov	fp,r22
 800df0c:	00800084 	movi	r2,2
 800df10:	50804e1e 	bne	r10,r2,800e04c <__muldf3+0x290>
 800df14:	e4c0004c 	andi	r19,fp,1
 800df18:	0101ffc4 	movi	r4,2047
 800df1c:	0021883a 	mov	r16,zero
 800df20:	0025883a 	mov	r18,zero
 800df24:	2008953a 	slli	r4,r4,20
 800df28:	98c03fcc 	andi	r3,r19,255
 800df2c:	01400434 	movhi	r5,16
 800df30:	297fffc4 	addi	r5,r5,-1
 800df34:	180697fa 	slli	r3,r3,31
 800df38:	8160703a 	and	r16,r16,r5
 800df3c:	8120b03a 	or	r16,r16,r4
 800df40:	80c6b03a 	or	r3,r16,r3
 800df44:	9005883a 	mov	r2,r18
 800df48:	dfc00d17 	ldw	ra,52(sp)
 800df4c:	df000c17 	ldw	fp,48(sp)
 800df50:	ddc00b17 	ldw	r23,44(sp)
 800df54:	dd800a17 	ldw	r22,40(sp)
 800df58:	dd400917 	ldw	r21,36(sp)
 800df5c:	dd000817 	ldw	r20,32(sp)
 800df60:	dcc00717 	ldw	r19,28(sp)
 800df64:	dc800617 	ldw	r18,24(sp)
 800df68:	dc400517 	ldw	r17,20(sp)
 800df6c:	dc000417 	ldw	r16,16(sp)
 800df70:	dec00e04 	addi	sp,sp,56
 800df74:	f800283a 	ret
 800df78:	8104b03a 	or	r2,r16,r4
 800df7c:	10004226 	beq	r2,zero,800e088 <__muldf3+0x2cc>
 800df80:	8000f926 	beq	r16,zero,800e368 <__muldf3+0x5ac>
 800df84:	8009883a 	mov	r4,r16
 800df88:	d9800315 	stw	r6,12(sp)
 800df8c:	d9c00015 	stw	r7,0(sp)
 800df90:	800f2540 	call	800f254 <__clzsi2>
 800df94:	d9800317 	ldw	r6,12(sp)
 800df98:	d9c00017 	ldw	r7,0(sp)
 800df9c:	1007883a 	mov	r3,r2
 800dfa0:	01000a04 	movi	r4,40
 800dfa4:	18bffe04 	addi	r2,r3,-8
 800dfa8:	20c9c83a 	sub	r4,r4,r3
 800dfac:	80a0983a 	sll	r16,r16,r2
 800dfb0:	8908d83a 	srl	r4,r17,r4
 800dfb4:	88a4983a 	sll	r18,r17,r2
 800dfb8:	2420b03a 	or	r16,r4,r16
 800dfbc:	017f0344 	movi	r5,-1011
 800dfc0:	28e9c83a 	sub	r20,r5,r3
 800dfc4:	002b883a 	mov	r21,zero
 800dfc8:	0015883a 	mov	r10,zero
 800dfcc:	003f9b06 	br	800de3c <__alt_data_end+0xf800de3c>
 800dfd0:	8984b03a 	or	r2,r17,r6
 800dfd4:	10002a1e 	bne	r2,zero,800e080 <__muldf3+0x2c4>
 800dfd8:	0023883a 	mov	r17,zero
 800dfdc:	002f883a 	mov	r23,zero
 800dfe0:	02400084 	movi	r9,2
 800dfe4:	003fa706 	br	800de84 <__alt_data_end+0xf800de84>
 800dfe8:	8984b03a 	or	r2,r17,r6
 800dfec:	10002026 	beq	r2,zero,800e070 <__muldf3+0x2b4>
 800dff0:	8800cc26 	beq	r17,zero,800e324 <__muldf3+0x568>
 800dff4:	8809883a 	mov	r4,r17
 800dff8:	d8c00215 	stw	r3,8(sp)
 800dffc:	d9800315 	stw	r6,12(sp)
 800e000:	da800015 	stw	r10,0(sp)
 800e004:	dac00115 	stw	r11,4(sp)
 800e008:	800f2540 	call	800f254 <__clzsi2>
 800e00c:	d8c00217 	ldw	r3,8(sp)
 800e010:	d9800317 	ldw	r6,12(sp)
 800e014:	da800017 	ldw	r10,0(sp)
 800e018:	dac00117 	ldw	r11,4(sp)
 800e01c:	1009883a 	mov	r4,r2
 800e020:	01400a04 	movi	r5,40
 800e024:	25fffe04 	addi	r23,r4,-8
 800e028:	290bc83a 	sub	r5,r5,r4
 800e02c:	8dd0983a 	sll	r8,r17,r23
 800e030:	314ad83a 	srl	r5,r6,r5
 800e034:	35ee983a 	sll	r23,r6,r23
 800e038:	2a22b03a 	or	r17,r5,r8
 800e03c:	017f0344 	movi	r5,-1011
 800e040:	290bc83a 	sub	r5,r5,r4
 800e044:	0013883a 	mov	r9,zero
 800e048:	003f8e06 	br	800de84 <__alt_data_end+0xf800de84>
 800e04c:	008000c4 	movi	r2,3
 800e050:	50811d26 	beq	r10,r2,800e4c8 <__muldf3+0x70c>
 800e054:	00800044 	movi	r2,1
 800e058:	5080e01e 	bne	r10,r2,800e3dc <__muldf3+0x620>
 800e05c:	e0a6703a 	and	r19,fp,r2
 800e060:	0009883a 	mov	r4,zero
 800e064:	0021883a 	mov	r16,zero
 800e068:	0025883a 	mov	r18,zero
 800e06c:	003fad06 	br	800df24 <__alt_data_end+0xf800df24>
 800e070:	0023883a 	mov	r17,zero
 800e074:	002f883a 	mov	r23,zero
 800e078:	02400044 	movi	r9,1
 800e07c:	003f8106 	br	800de84 <__alt_data_end+0xf800de84>
 800e080:	024000c4 	movi	r9,3
 800e084:	003f7f06 	br	800de84 <__alt_data_end+0xf800de84>
 800e088:	05400104 	movi	r21,4
 800e08c:	0021883a 	mov	r16,zero
 800e090:	0025883a 	mov	r18,zero
 800e094:	02800044 	movi	r10,1
 800e098:	003f6806 	br	800de3c <__alt_data_end+0xf800de3c>
 800e09c:	05400304 	movi	r21,12
 800e0a0:	028000c4 	movi	r10,3
 800e0a4:	003f6506 	br	800de3c <__alt_data_end+0xf800de3c>
 800e0a8:	04000434 	movhi	r16,16
 800e0ac:	0027883a 	mov	r19,zero
 800e0b0:	843fffc4 	addi	r16,r16,-1
 800e0b4:	04bfffc4 	movi	r18,-1
 800e0b8:	0101ffc4 	movi	r4,2047
 800e0bc:	003f9906 	br	800df24 <__alt_data_end+0xf800df24>
 800e0c0:	8821883a 	mov	r16,r17
 800e0c4:	b825883a 	mov	r18,r23
 800e0c8:	5839883a 	mov	fp,r11
 800e0cc:	4815883a 	mov	r10,r9
 800e0d0:	003f8e06 	br	800df0c <__alt_data_end+0xf800df0c>
 800e0d4:	8821883a 	mov	r16,r17
 800e0d8:	b825883a 	mov	r18,r23
 800e0dc:	b039883a 	mov	fp,r22
 800e0e0:	4815883a 	mov	r10,r9
 800e0e4:	003f8906 	br	800df0c <__alt_data_end+0xf800df0c>
 800e0e8:	b80cd43a 	srli	r6,r23,16
 800e0ec:	9006d43a 	srli	r3,r18,16
 800e0f0:	90bfffcc 	andi	r2,r18,65535
 800e0f4:	bdffffcc 	andi	r23,r23,65535
 800e0f8:	b891383a 	mul	r8,r23,r2
 800e0fc:	b8c9383a 	mul	r4,r23,r3
 800e100:	309b383a 	mul	r13,r6,r2
 800e104:	400ed43a 	srli	r7,r8,16
 800e108:	30df383a 	mul	r15,r6,r3
 800e10c:	235b883a 	add	r13,r4,r13
 800e110:	69db883a 	add	r13,r13,r7
 800e114:	6900022e 	bgeu	r13,r4,800e120 <__muldf3+0x364>
 800e118:	01000074 	movhi	r4,1
 800e11c:	791f883a 	add	r15,r15,r4
 800e120:	8828d43a 	srli	r20,r17,16
 800e124:	8c7fffcc 	andi	r17,r17,65535
 800e128:	888f383a 	mul	r7,r17,r2
 800e12c:	88d3383a 	mul	r9,r17,r3
 800e130:	a0a5383a 	mul	r18,r20,r2
 800e134:	3816d43a 	srli	r11,r7,16
 800e138:	6814943a 	slli	r10,r13,16
 800e13c:	4ca5883a 	add	r18,r9,r18
 800e140:	423fffcc 	andi	r8,r8,65535
 800e144:	92e5883a 	add	r18,r18,r11
 800e148:	6808d43a 	srli	r4,r13,16
 800e14c:	5215883a 	add	r10,r10,r8
 800e150:	a0c7383a 	mul	r3,r20,r3
 800e154:	9240022e 	bgeu	r18,r9,800e160 <__muldf3+0x3a4>
 800e158:	00800074 	movhi	r2,1
 800e15c:	1887883a 	add	r3,r3,r2
 800e160:	802ad43a 	srli	r21,r16,16
 800e164:	80bfffcc 	andi	r2,r16,65535
 800e168:	b893383a 	mul	r9,r23,r2
 800e16c:	3091383a 	mul	r8,r6,r2
 800e170:	bd6f383a 	mul	r23,r23,r21
 800e174:	9026943a 	slli	r19,r18,16
 800e178:	481ad43a 	srli	r13,r9,16
 800e17c:	9024d43a 	srli	r18,r18,16
 800e180:	39ffffcc 	andi	r7,r7,65535
 800e184:	ba11883a 	add	r8,r23,r8
 800e188:	99e7883a 	add	r19,r19,r7
 800e18c:	4351883a 	add	r8,r8,r13
 800e190:	1c97883a 	add	r11,r3,r18
 800e194:	354d383a 	mul	r6,r6,r21
 800e198:	9925883a 	add	r18,r19,r4
 800e19c:	45c0022e 	bgeu	r8,r23,800e1a8 <__muldf3+0x3ec>
 800e1a0:	00c00074 	movhi	r3,1
 800e1a4:	30cd883a 	add	r6,r6,r3
 800e1a8:	8889383a 	mul	r4,r17,r2
 800e1ac:	8d63383a 	mul	r17,r17,r21
 800e1b0:	a085383a 	mul	r2,r20,r2
 800e1b4:	200ed43a 	srli	r7,r4,16
 800e1b8:	401cd43a 	srli	r14,r8,16
 800e1bc:	401a943a 	slli	r13,r8,16
 800e1c0:	8885883a 	add	r2,r17,r2
 800e1c4:	4a3fffcc 	andi	r8,r9,65535
 800e1c8:	11c5883a 	add	r2,r2,r7
 800e1cc:	339d883a 	add	r14,r6,r14
 800e1d0:	6a11883a 	add	r8,r13,r8
 800e1d4:	a561383a 	mul	r16,r20,r21
 800e1d8:	1440022e 	bgeu	r2,r17,800e1e4 <__muldf3+0x428>
 800e1dc:	00c00074 	movhi	r3,1
 800e1e0:	80e1883a 	add	r16,r16,r3
 800e1e4:	1006943a 	slli	r3,r2,16
 800e1e8:	213fffcc 	andi	r4,r4,65535
 800e1ec:	93db883a 	add	r13,r18,r15
 800e1f0:	1909883a 	add	r4,r3,r4
 800e1f4:	22c7883a 	add	r3,r4,r11
 800e1f8:	6cd3803a 	cmpltu	r9,r13,r19
 800e1fc:	6a09883a 	add	r4,r13,r8
 800e200:	1a5b883a 	add	r13,r3,r9
 800e204:	2211803a 	cmpltu	r8,r4,r8
 800e208:	734d883a 	add	r6,r14,r13
 800e20c:	100ed43a 	srli	r7,r2,16
 800e210:	6a53803a 	cmpltu	r9,r13,r9
 800e214:	3205883a 	add	r2,r6,r8
 800e218:	1ac7803a 	cmpltu	r3,r3,r11
 800e21c:	1211803a 	cmpltu	r8,r2,r8
 800e220:	48c6b03a 	or	r3,r9,r3
 800e224:	338d803a 	cmpltu	r6,r6,r14
 800e228:	19c7883a 	add	r3,r3,r7
 800e22c:	418cb03a 	or	r6,r8,r6
 800e230:	1987883a 	add	r3,r3,r6
 800e234:	2024927a 	slli	r18,r4,9
 800e238:	1c07883a 	add	r3,r3,r16
 800e23c:	1806927a 	slli	r3,r3,9
 800e240:	1020d5fa 	srli	r16,r2,23
 800e244:	2008d5fa 	srli	r4,r4,23
 800e248:	9294b03a 	or	r10,r18,r10
 800e24c:	1004927a 	slli	r2,r2,9
 800e250:	5024c03a 	cmpne	r18,r10,zero
 800e254:	1c20b03a 	or	r16,r3,r16
 800e258:	9108b03a 	or	r4,r18,r4
 800e25c:	80c0402c 	andhi	r3,r16,256
 800e260:	20a4b03a 	or	r18,r4,r2
 800e264:	18000726 	beq	r3,zero,800e284 <__muldf3+0x4c8>
 800e268:	9006d07a 	srli	r3,r18,1
 800e26c:	800897fa 	slli	r4,r16,31
 800e270:	9080004c 	andi	r2,r18,1
 800e274:	8020d07a 	srli	r16,r16,1
 800e278:	10c4b03a 	or	r2,r2,r3
 800e27c:	1124b03a 	or	r18,r2,r4
 800e280:	600b883a 	mov	r5,r12
 800e284:	2900ffc4 	addi	r4,r5,1023
 800e288:	01004b0e 	bge	zero,r4,800e3b8 <__muldf3+0x5fc>
 800e28c:	908001cc 	andi	r2,r18,7
 800e290:	10000726 	beq	r2,zero,800e2b0 <__muldf3+0x4f4>
 800e294:	90c003cc 	andi	r3,r18,15
 800e298:	00800104 	movi	r2,4
 800e29c:	18800426 	beq	r3,r2,800e2b0 <__muldf3+0x4f4>
 800e2a0:	9087883a 	add	r3,r18,r2
 800e2a4:	1c85803a 	cmpltu	r2,r3,r18
 800e2a8:	80a1883a 	add	r16,r16,r2
 800e2ac:	1825883a 	mov	r18,r3
 800e2b0:	8080402c 	andhi	r2,r16,256
 800e2b4:	10000426 	beq	r2,zero,800e2c8 <__muldf3+0x50c>
 800e2b8:	00bfc034 	movhi	r2,65280
 800e2bc:	10bfffc4 	addi	r2,r2,-1
 800e2c0:	29010004 	addi	r4,r5,1024
 800e2c4:	80a0703a 	and	r16,r16,r2
 800e2c8:	0081ff84 	movi	r2,2046
 800e2cc:	1100320e 	bge	r2,r4,800e398 <__muldf3+0x5dc>
 800e2d0:	b4c0004c 	andi	r19,r22,1
 800e2d4:	0101ffc4 	movi	r4,2047
 800e2d8:	0021883a 	mov	r16,zero
 800e2dc:	0025883a 	mov	r18,zero
 800e2e0:	003f1006 	br	800df24 <__alt_data_end+0xf800df24>
 800e2e4:	8080022c 	andhi	r2,r16,8
 800e2e8:	10000926 	beq	r2,zero,800e310 <__muldf3+0x554>
 800e2ec:	8880022c 	andhi	r2,r17,8
 800e2f0:	1000071e 	bne	r2,zero,800e310 <__muldf3+0x554>
 800e2f4:	00800434 	movhi	r2,16
 800e2f8:	8c000234 	orhi	r16,r17,8
 800e2fc:	10bfffc4 	addi	r2,r2,-1
 800e300:	1827883a 	mov	r19,r3
 800e304:	80a0703a 	and	r16,r16,r2
 800e308:	b825883a 	mov	r18,r23
 800e30c:	003f6a06 	br	800e0b8 <__alt_data_end+0xf800e0b8>
 800e310:	00800434 	movhi	r2,16
 800e314:	84000234 	orhi	r16,r16,8
 800e318:	10bfffc4 	addi	r2,r2,-1
 800e31c:	80a0703a 	and	r16,r16,r2
 800e320:	003f6506 	br	800e0b8 <__alt_data_end+0xf800e0b8>
 800e324:	3009883a 	mov	r4,r6
 800e328:	d8c00215 	stw	r3,8(sp)
 800e32c:	d9800315 	stw	r6,12(sp)
 800e330:	da800015 	stw	r10,0(sp)
 800e334:	dac00115 	stw	r11,4(sp)
 800e338:	800f2540 	call	800f254 <__clzsi2>
 800e33c:	11000804 	addi	r4,r2,32
 800e340:	014009c4 	movi	r5,39
 800e344:	d8c00217 	ldw	r3,8(sp)
 800e348:	d9800317 	ldw	r6,12(sp)
 800e34c:	da800017 	ldw	r10,0(sp)
 800e350:	dac00117 	ldw	r11,4(sp)
 800e354:	293f320e 	bge	r5,r4,800e020 <__alt_data_end+0xf800e020>
 800e358:	10bffe04 	addi	r2,r2,-8
 800e35c:	b8a2983a 	sll	r17,r23,r2
 800e360:	002f883a 	mov	r23,zero
 800e364:	003f3506 	br	800e03c <__alt_data_end+0xf800e03c>
 800e368:	d9800315 	stw	r6,12(sp)
 800e36c:	d9c00015 	stw	r7,0(sp)
 800e370:	800f2540 	call	800f254 <__clzsi2>
 800e374:	10c00804 	addi	r3,r2,32
 800e378:	010009c4 	movi	r4,39
 800e37c:	d9800317 	ldw	r6,12(sp)
 800e380:	d9c00017 	ldw	r7,0(sp)
 800e384:	20ff060e 	bge	r4,r3,800dfa0 <__alt_data_end+0xf800dfa0>
 800e388:	10bffe04 	addi	r2,r2,-8
 800e38c:	88a0983a 	sll	r16,r17,r2
 800e390:	0025883a 	mov	r18,zero
 800e394:	003f0906 	br	800dfbc <__alt_data_end+0xf800dfbc>
 800e398:	9004d0fa 	srli	r2,r18,3
 800e39c:	8024977a 	slli	r18,r16,29
 800e3a0:	8020927a 	slli	r16,r16,9
 800e3a4:	2101ffcc 	andi	r4,r4,2047
 800e3a8:	90a4b03a 	or	r18,r18,r2
 800e3ac:	8020d33a 	srli	r16,r16,12
 800e3b0:	b4c0004c 	andi	r19,r22,1
 800e3b4:	003edb06 	br	800df24 <__alt_data_end+0xf800df24>
 800e3b8:	00ff0084 	movi	r3,-1022
 800e3bc:	1947c83a 	sub	r3,r3,r5
 800e3c0:	00800e04 	movi	r2,56
 800e3c4:	10c0080e 	bge	r2,r3,800e3e8 <__muldf3+0x62c>
 800e3c8:	b4c0004c 	andi	r19,r22,1
 800e3cc:	0009883a 	mov	r4,zero
 800e3d0:	0021883a 	mov	r16,zero
 800e3d4:	0025883a 	mov	r18,zero
 800e3d8:	003ed206 	br	800df24 <__alt_data_end+0xf800df24>
 800e3dc:	600b883a 	mov	r5,r12
 800e3e0:	e02d883a 	mov	r22,fp
 800e3e4:	003fa706 	br	800e284 <__alt_data_end+0xf800e284>
 800e3e8:	008007c4 	movi	r2,31
 800e3ec:	10c01816 	blt	r2,r3,800e450 <__muldf3+0x694>
 800e3f0:	29410784 	addi	r5,r5,1054
 800e3f4:	8144983a 	sll	r2,r16,r5
 800e3f8:	90c8d83a 	srl	r4,r18,r3
 800e3fc:	914a983a 	sll	r5,r18,r5
 800e400:	80c6d83a 	srl	r3,r16,r3
 800e404:	2088b03a 	or	r4,r4,r2
 800e408:	2804c03a 	cmpne	r2,r5,zero
 800e40c:	2084b03a 	or	r2,r4,r2
 800e410:	110001cc 	andi	r4,r2,7
 800e414:	20000726 	beq	r4,zero,800e434 <__muldf3+0x678>
 800e418:	114003cc 	andi	r5,r2,15
 800e41c:	01000104 	movi	r4,4
 800e420:	29000426 	beq	r5,r4,800e434 <__muldf3+0x678>
 800e424:	11000104 	addi	r4,r2,4
 800e428:	2085803a 	cmpltu	r2,r4,r2
 800e42c:	1887883a 	add	r3,r3,r2
 800e430:	2005883a 	mov	r2,r4
 800e434:	1900202c 	andhi	r4,r3,128
 800e438:	20001826 	beq	r4,zero,800e49c <__muldf3+0x6e0>
 800e43c:	b4c0004c 	andi	r19,r22,1
 800e440:	01000044 	movi	r4,1
 800e444:	0021883a 	mov	r16,zero
 800e448:	0025883a 	mov	r18,zero
 800e44c:	003eb506 	br	800df24 <__alt_data_end+0xf800df24>
 800e450:	00bef884 	movi	r2,-1054
 800e454:	1145c83a 	sub	r2,r2,r5
 800e458:	8088d83a 	srl	r4,r16,r2
 800e45c:	00800804 	movi	r2,32
 800e460:	18801726 	beq	r3,r2,800e4c0 <__muldf3+0x704>
 800e464:	28810f84 	addi	r2,r5,1086
 800e468:	8084983a 	sll	r2,r16,r2
 800e46c:	1484b03a 	or	r2,r2,r18
 800e470:	1004c03a 	cmpne	r2,r2,zero
 800e474:	1104b03a 	or	r2,r2,r4
 800e478:	10c001cc 	andi	r3,r2,7
 800e47c:	18000b1e 	bne	r3,zero,800e4ac <__muldf3+0x6f0>
 800e480:	0021883a 	mov	r16,zero
 800e484:	1004d0fa 	srli	r2,r2,3
 800e488:	b4c0004c 	andi	r19,r22,1
 800e48c:	0009883a 	mov	r4,zero
 800e490:	10e4b03a 	or	r18,r2,r3
 800e494:	003ea306 	br	800df24 <__alt_data_end+0xf800df24>
 800e498:	0007883a 	mov	r3,zero
 800e49c:	1820927a 	slli	r16,r3,9
 800e4a0:	1806977a 	slli	r3,r3,29
 800e4a4:	8020d33a 	srli	r16,r16,12
 800e4a8:	003ff606 	br	800e484 <__alt_data_end+0xf800e484>
 800e4ac:	110003cc 	andi	r4,r2,15
 800e4b0:	00c00104 	movi	r3,4
 800e4b4:	20fff826 	beq	r4,r3,800e498 <__alt_data_end+0xf800e498>
 800e4b8:	0007883a 	mov	r3,zero
 800e4bc:	003fd906 	br	800e424 <__alt_data_end+0xf800e424>
 800e4c0:	0005883a 	mov	r2,zero
 800e4c4:	003fe906 	br	800e46c <__alt_data_end+0xf800e46c>
 800e4c8:	00800434 	movhi	r2,16
 800e4cc:	84000234 	orhi	r16,r16,8
 800e4d0:	10bfffc4 	addi	r2,r2,-1
 800e4d4:	e4c0004c 	andi	r19,fp,1
 800e4d8:	80a0703a 	and	r16,r16,r2
 800e4dc:	003ef606 	br	800e0b8 <__alt_data_end+0xf800e0b8>

0800e4e0 <__subdf3>:
 800e4e0:	00c00434 	movhi	r3,16
 800e4e4:	18ffffc4 	addi	r3,r3,-1
 800e4e8:	defffb04 	addi	sp,sp,-20
 800e4ec:	28d2703a 	and	r9,r5,r3
 800e4f0:	3814d53a 	srli	r10,r7,20
 800e4f4:	38c6703a 	and	r3,r7,r3
 800e4f8:	3004d77a 	srli	r2,r6,29
 800e4fc:	dc800215 	stw	r18,8(sp)
 800e500:	dc000015 	stw	r16,0(sp)
 800e504:	2824d7fa 	srli	r18,r5,31
 800e508:	2820d53a 	srli	r16,r5,20
 800e50c:	481290fa 	slli	r9,r9,3
 800e510:	200ad77a 	srli	r5,r4,29
 800e514:	180690fa 	slli	r3,r3,3
 800e518:	dc400115 	stw	r17,4(sp)
 800e51c:	dfc00415 	stw	ra,16(sp)
 800e520:	202290fa 	slli	r17,r4,3
 800e524:	dcc00315 	stw	r19,12(sp)
 800e528:	5281ffcc 	andi	r10,r10,2047
 800e52c:	0101ffc4 	movi	r4,2047
 800e530:	9011883a 	mov	r8,r18
 800e534:	8401ffcc 	andi	r16,r16,2047
 800e538:	94803fcc 	andi	r18,r18,255
 800e53c:	494ab03a 	or	r5,r9,r5
 800e540:	380ed7fa 	srli	r7,r7,31
 800e544:	1886b03a 	or	r3,r3,r2
 800e548:	300c90fa 	slli	r6,r6,3
 800e54c:	51009026 	beq	r10,r4,800e790 <__subdf3+0x2b0>
 800e550:	39c0005c 	xori	r7,r7,1
 800e554:	8285c83a 	sub	r2,r16,r10
 800e558:	91c06f26 	beq	r18,r7,800e718 <__subdf3+0x238>
 800e55c:	0080b10e 	bge	zero,r2,800e824 <__subdf3+0x344>
 800e560:	50002a1e 	bne	r10,zero,800e60c <__subdf3+0x12c>
 800e564:	1988b03a 	or	r4,r3,r6
 800e568:	2000941e 	bne	r4,zero,800e7bc <__subdf3+0x2dc>
 800e56c:	888001cc 	andi	r2,r17,7
 800e570:	10005b26 	beq	r2,zero,800e6e0 <__subdf3+0x200>
 800e574:	88c003cc 	andi	r3,r17,15
 800e578:	00800104 	movi	r2,4
 800e57c:	18805826 	beq	r3,r2,800e6e0 <__subdf3+0x200>
 800e580:	88c00104 	addi	r3,r17,4
 800e584:	1c63803a 	cmpltu	r17,r3,r17
 800e588:	2c4b883a 	add	r5,r5,r17
 800e58c:	2880202c 	andhi	r2,r5,128
 800e590:	9200004c 	andi	r8,r18,1
 800e594:	1823883a 	mov	r17,r3
 800e598:	10005426 	beq	r2,zero,800e6ec <__subdf3+0x20c>
 800e59c:	84000044 	addi	r16,r16,1
 800e5a0:	0081ffc4 	movi	r2,2047
 800e5a4:	8080bf26 	beq	r16,r2,800e8a4 <__subdf3+0x3c4>
 800e5a8:	013fe034 	movhi	r4,65408
 800e5ac:	213fffc4 	addi	r4,r4,-1
 800e5b0:	290a703a 	and	r5,r5,r4
 800e5b4:	2804977a 	slli	r2,r5,29
 800e5b8:	280a927a 	slli	r5,r5,9
 800e5bc:	8822d0fa 	srli	r17,r17,3
 800e5c0:	8401ffcc 	andi	r16,r16,2047
 800e5c4:	2808d33a 	srli	r4,r5,12
 800e5c8:	1444b03a 	or	r2,r2,r17
 800e5cc:	8401ffcc 	andi	r16,r16,2047
 800e5d0:	800a953a 	slli	r5,r16,20
 800e5d4:	40c03fcc 	andi	r3,r8,255
 800e5d8:	04000434 	movhi	r16,16
 800e5dc:	180697fa 	slli	r3,r3,31
 800e5e0:	843fffc4 	addi	r16,r16,-1
 800e5e4:	2420703a 	and	r16,r4,r16
 800e5e8:	8160b03a 	or	r16,r16,r5
 800e5ec:	80c6b03a 	or	r3,r16,r3
 800e5f0:	dfc00417 	ldw	ra,16(sp)
 800e5f4:	dcc00317 	ldw	r19,12(sp)
 800e5f8:	dc800217 	ldw	r18,8(sp)
 800e5fc:	dc400117 	ldw	r17,4(sp)
 800e600:	dc000017 	ldw	r16,0(sp)
 800e604:	dec00504 	addi	sp,sp,20
 800e608:	f800283a 	ret
 800e60c:	0101ffc4 	movi	r4,2047
 800e610:	813fd626 	beq	r16,r4,800e56c <__alt_data_end+0xf800e56c>
 800e614:	18c02034 	orhi	r3,r3,128
 800e618:	01000e04 	movi	r4,56
 800e61c:	2080a416 	blt	r4,r2,800e8b0 <__subdf3+0x3d0>
 800e620:	010007c4 	movi	r4,31
 800e624:	2080c716 	blt	r4,r2,800e944 <__subdf3+0x464>
 800e628:	01000804 	movi	r4,32
 800e62c:	2089c83a 	sub	r4,r4,r2
 800e630:	1910983a 	sll	r8,r3,r4
 800e634:	308ed83a 	srl	r7,r6,r2
 800e638:	3108983a 	sll	r4,r6,r4
 800e63c:	1884d83a 	srl	r2,r3,r2
 800e640:	41ccb03a 	or	r6,r8,r7
 800e644:	2008c03a 	cmpne	r4,r4,zero
 800e648:	310cb03a 	or	r6,r6,r4
 800e64c:	898dc83a 	sub	r6,r17,r6
 800e650:	89a3803a 	cmpltu	r17,r17,r6
 800e654:	288bc83a 	sub	r5,r5,r2
 800e658:	2c4bc83a 	sub	r5,r5,r17
 800e65c:	3023883a 	mov	r17,r6
 800e660:	2880202c 	andhi	r2,r5,128
 800e664:	10006b26 	beq	r2,zero,800e814 <__subdf3+0x334>
 800e668:	04c02034 	movhi	r19,128
 800e66c:	9cffffc4 	addi	r19,r19,-1
 800e670:	2ce6703a 	and	r19,r5,r19
 800e674:	98007c26 	beq	r19,zero,800e868 <__subdf3+0x388>
 800e678:	9809883a 	mov	r4,r19
 800e67c:	800f2540 	call	800f254 <__clzsi2>
 800e680:	10fffe04 	addi	r3,r2,-8
 800e684:	010007c4 	movi	r4,31
 800e688:	20c07d16 	blt	r4,r3,800e880 <__subdf3+0x3a0>
 800e68c:	01400a04 	movi	r5,40
 800e690:	2885c83a 	sub	r2,r5,r2
 800e694:	888ad83a 	srl	r5,r17,r2
 800e698:	98e6983a 	sll	r19,r19,r3
 800e69c:	88e2983a 	sll	r17,r17,r3
 800e6a0:	2ce6b03a 	or	r19,r5,r19
 800e6a4:	1c007a16 	blt	r3,r16,800e890 <__subdf3+0x3b0>
 800e6a8:	1c21c83a 	sub	r16,r3,r16
 800e6ac:	81400044 	addi	r5,r16,1
 800e6b0:	00c007c4 	movi	r3,31
 800e6b4:	19409616 	blt	r3,r5,800e910 <__subdf3+0x430>
 800e6b8:	1c21c83a 	sub	r16,r3,r16
 800e6bc:	8c08983a 	sll	r4,r17,r16
 800e6c0:	8946d83a 	srl	r3,r17,r5
 800e6c4:	9c20983a 	sll	r16,r19,r16
 800e6c8:	2008c03a 	cmpne	r4,r4,zero
 800e6cc:	994ad83a 	srl	r5,r19,r5
 800e6d0:	1c06b03a 	or	r3,r3,r16
 800e6d4:	1922b03a 	or	r17,r3,r4
 800e6d8:	0021883a 	mov	r16,zero
 800e6dc:	003fa306 	br	800e56c <__alt_data_end+0xf800e56c>
 800e6e0:	2880202c 	andhi	r2,r5,128
 800e6e4:	9200004c 	andi	r8,r18,1
 800e6e8:	103fac1e 	bne	r2,zero,800e59c <__alt_data_end+0xf800e59c>
 800e6ec:	2804977a 	slli	r2,r5,29
 800e6f0:	8822d0fa 	srli	r17,r17,3
 800e6f4:	00c1ffc4 	movi	r3,2047
 800e6f8:	280ad0fa 	srli	r5,r5,3
 800e6fc:	1444b03a 	or	r2,r2,r17
 800e700:	80c02726 	beq	r16,r3,800e7a0 <__subdf3+0x2c0>
 800e704:	01000434 	movhi	r4,16
 800e708:	213fffc4 	addi	r4,r4,-1
 800e70c:	80e0703a 	and	r16,r16,r3
 800e710:	2908703a 	and	r4,r5,r4
 800e714:	003fad06 	br	800e5cc <__alt_data_end+0xf800e5cc>
 800e718:	0080690e 	bge	zero,r2,800e8c0 <__subdf3+0x3e0>
 800e71c:	50002f26 	beq	r10,zero,800e7dc <__subdf3+0x2fc>
 800e720:	0101ffc4 	movi	r4,2047
 800e724:	813f9126 	beq	r16,r4,800e56c <__alt_data_end+0xf800e56c>
 800e728:	18c02034 	orhi	r3,r3,128
 800e72c:	01000e04 	movi	r4,56
 800e730:	2080b00e 	bge	r4,r2,800e9f4 <__subdf3+0x514>
 800e734:	198cb03a 	or	r6,r3,r6
 800e738:	300ec03a 	cmpne	r7,r6,zero
 800e73c:	0005883a 	mov	r2,zero
 800e740:	3c4f883a 	add	r7,r7,r17
 800e744:	3c63803a 	cmpltu	r17,r7,r17
 800e748:	114b883a 	add	r5,r2,r5
 800e74c:	2c4b883a 	add	r5,r5,r17
 800e750:	3823883a 	mov	r17,r7
 800e754:	2880202c 	andhi	r2,r5,128
 800e758:	10002e26 	beq	r2,zero,800e814 <__subdf3+0x334>
 800e75c:	84000044 	addi	r16,r16,1
 800e760:	0081ffc4 	movi	r2,2047
 800e764:	8080de26 	beq	r16,r2,800eae0 <__subdf3+0x600>
 800e768:	00bfe034 	movhi	r2,65408
 800e76c:	10bfffc4 	addi	r2,r2,-1
 800e770:	288a703a 	and	r5,r5,r2
 800e774:	880cd07a 	srli	r6,r17,1
 800e778:	280897fa 	slli	r4,r5,31
 800e77c:	88c0004c 	andi	r3,r17,1
 800e780:	30e2b03a 	or	r17,r6,r3
 800e784:	280ad07a 	srli	r5,r5,1
 800e788:	8922b03a 	or	r17,r17,r4
 800e78c:	003f7706 	br	800e56c <__alt_data_end+0xf800e56c>
 800e790:	1984b03a 	or	r2,r3,r6
 800e794:	103f6e26 	beq	r2,zero,800e550 <__alt_data_end+0xf800e550>
 800e798:	39c03fcc 	andi	r7,r7,255
 800e79c:	003f6d06 	br	800e554 <__alt_data_end+0xf800e554>
 800e7a0:	1146b03a 	or	r3,r2,r5
 800e7a4:	18003f26 	beq	r3,zero,800e8a4 <__subdf3+0x3c4>
 800e7a8:	00c00434 	movhi	r3,16
 800e7ac:	29000234 	orhi	r4,r5,8
 800e7b0:	18ffffc4 	addi	r3,r3,-1
 800e7b4:	20c8703a 	and	r4,r4,r3
 800e7b8:	003f8406 	br	800e5cc <__alt_data_end+0xf800e5cc>
 800e7bc:	10bfffc4 	addi	r2,r2,-1
 800e7c0:	1000501e 	bne	r2,zero,800e904 <__subdf3+0x424>
 800e7c4:	898fc83a 	sub	r7,r17,r6
 800e7c8:	89e3803a 	cmpltu	r17,r17,r7
 800e7cc:	28cbc83a 	sub	r5,r5,r3
 800e7d0:	2c4bc83a 	sub	r5,r5,r17
 800e7d4:	3823883a 	mov	r17,r7
 800e7d8:	003fa106 	br	800e660 <__alt_data_end+0xf800e660>
 800e7dc:	1988b03a 	or	r4,r3,r6
 800e7e0:	203f6226 	beq	r4,zero,800e56c <__alt_data_end+0xf800e56c>
 800e7e4:	10bfffc4 	addi	r2,r2,-1
 800e7e8:	10009b1e 	bne	r2,zero,800ea58 <__subdf3+0x578>
 800e7ec:	344d883a 	add	r6,r6,r17
 800e7f0:	3463803a 	cmpltu	r17,r6,r17
 800e7f4:	194b883a 	add	r5,r3,r5
 800e7f8:	2c4b883a 	add	r5,r5,r17
 800e7fc:	3023883a 	mov	r17,r6
 800e800:	003fd406 	br	800e754 <__alt_data_end+0xf800e754>
 800e804:	1106b03a 	or	r3,r2,r4
 800e808:	1800b426 	beq	r3,zero,800eadc <__subdf3+0x5fc>
 800e80c:	100b883a 	mov	r5,r2
 800e810:	2023883a 	mov	r17,r4
 800e814:	888001cc 	andi	r2,r17,7
 800e818:	103f561e 	bne	r2,zero,800e574 <__alt_data_end+0xf800e574>
 800e81c:	9200004c 	andi	r8,r18,1
 800e820:	003fb206 	br	800e6ec <__alt_data_end+0xf800e6ec>
 800e824:	1000531e 	bne	r2,zero,800e974 <__subdf3+0x494>
 800e828:	80800044 	addi	r2,r16,1
 800e82c:	1081ffcc 	andi	r2,r2,2047
 800e830:	01000044 	movi	r4,1
 800e834:	2080a00e 	bge	r4,r2,800eab8 <__subdf3+0x5d8>
 800e838:	8985c83a 	sub	r2,r17,r6
 800e83c:	8889803a 	cmpltu	r4,r17,r2
 800e840:	28e7c83a 	sub	r19,r5,r3
 800e844:	9927c83a 	sub	r19,r19,r4
 800e848:	9900202c 	andhi	r4,r19,128
 800e84c:	20006226 	beq	r4,zero,800e9d8 <__subdf3+0x4f8>
 800e850:	3463c83a 	sub	r17,r6,r17
 800e854:	194bc83a 	sub	r5,r3,r5
 800e858:	344d803a 	cmpltu	r6,r6,r17
 800e85c:	29a7c83a 	sub	r19,r5,r6
 800e860:	3825883a 	mov	r18,r7
 800e864:	983f841e 	bne	r19,zero,800e678 <__alt_data_end+0xf800e678>
 800e868:	8809883a 	mov	r4,r17
 800e86c:	800f2540 	call	800f254 <__clzsi2>
 800e870:	10800804 	addi	r2,r2,32
 800e874:	10fffe04 	addi	r3,r2,-8
 800e878:	010007c4 	movi	r4,31
 800e87c:	20ff830e 	bge	r4,r3,800e68c <__alt_data_end+0xf800e68c>
 800e880:	14fff604 	addi	r19,r2,-40
 800e884:	8ce6983a 	sll	r19,r17,r19
 800e888:	0023883a 	mov	r17,zero
 800e88c:	1c3f860e 	bge	r3,r16,800e6a8 <__alt_data_end+0xf800e6a8>
 800e890:	017fe034 	movhi	r5,65408
 800e894:	297fffc4 	addi	r5,r5,-1
 800e898:	80e1c83a 	sub	r16,r16,r3
 800e89c:	994a703a 	and	r5,r19,r5
 800e8a0:	003f3206 	br	800e56c <__alt_data_end+0xf800e56c>
 800e8a4:	0009883a 	mov	r4,zero
 800e8a8:	0005883a 	mov	r2,zero
 800e8ac:	003f4706 	br	800e5cc <__alt_data_end+0xf800e5cc>
 800e8b0:	198cb03a 	or	r6,r3,r6
 800e8b4:	300cc03a 	cmpne	r6,r6,zero
 800e8b8:	0005883a 	mov	r2,zero
 800e8bc:	003f6306 	br	800e64c <__alt_data_end+0xf800e64c>
 800e8c0:	10009d1e 	bne	r2,zero,800eb38 <__subdf3+0x658>
 800e8c4:	81c00044 	addi	r7,r16,1
 800e8c8:	3881ffcc 	andi	r2,r7,2047
 800e8cc:	02400044 	movi	r9,1
 800e8d0:	4880680e 	bge	r9,r2,800ea74 <__subdf3+0x594>
 800e8d4:	0081ffc4 	movi	r2,2047
 800e8d8:	3880ae26 	beq	r7,r2,800eb94 <__subdf3+0x6b4>
 800e8dc:	344d883a 	add	r6,r6,r17
 800e8e0:	3463803a 	cmpltu	r17,r6,r17
 800e8e4:	194b883a 	add	r5,r3,r5
 800e8e8:	2c4b883a 	add	r5,r5,r17
 800e8ec:	282297fa 	slli	r17,r5,31
 800e8f0:	300cd07a 	srli	r6,r6,1
 800e8f4:	280ad07a 	srli	r5,r5,1
 800e8f8:	3821883a 	mov	r16,r7
 800e8fc:	89a2b03a 	or	r17,r17,r6
 800e900:	003f1a06 	br	800e56c <__alt_data_end+0xf800e56c>
 800e904:	0101ffc4 	movi	r4,2047
 800e908:	813f431e 	bne	r16,r4,800e618 <__alt_data_end+0xf800e618>
 800e90c:	003f1706 	br	800e56c <__alt_data_end+0xf800e56c>
 800e910:	80bff844 	addi	r2,r16,-31
 800e914:	00c00804 	movi	r3,32
 800e918:	9884d83a 	srl	r2,r19,r2
 800e91c:	28c05126 	beq	r5,r3,800ea64 <__subdf3+0x584>
 800e920:	00c00fc4 	movi	r3,63
 800e924:	1c21c83a 	sub	r16,r3,r16
 800e928:	9c26983a 	sll	r19,r19,r16
 800e92c:	9c62b03a 	or	r17,r19,r17
 800e930:	8822c03a 	cmpne	r17,r17,zero
 800e934:	88a2b03a 	or	r17,r17,r2
 800e938:	000b883a 	mov	r5,zero
 800e93c:	0021883a 	mov	r16,zero
 800e940:	003fb406 	br	800e814 <__alt_data_end+0xf800e814>
 800e944:	113ff804 	addi	r4,r2,-32
 800e948:	01c00804 	movi	r7,32
 800e94c:	1908d83a 	srl	r4,r3,r4
 800e950:	11c04626 	beq	r2,r7,800ea6c <__subdf3+0x58c>
 800e954:	01c01004 	movi	r7,64
 800e958:	3885c83a 	sub	r2,r7,r2
 800e95c:	1884983a 	sll	r2,r3,r2
 800e960:	118cb03a 	or	r6,r2,r6
 800e964:	300cc03a 	cmpne	r6,r6,zero
 800e968:	310cb03a 	or	r6,r6,r4
 800e96c:	0005883a 	mov	r2,zero
 800e970:	003f3606 	br	800e64c <__alt_data_end+0xf800e64c>
 800e974:	80002b26 	beq	r16,zero,800ea24 <__subdf3+0x544>
 800e978:	0101ffc4 	movi	r4,2047
 800e97c:	51006926 	beq	r10,r4,800eb24 <__subdf3+0x644>
 800e980:	0085c83a 	sub	r2,zero,r2
 800e984:	29402034 	orhi	r5,r5,128
 800e988:	01000e04 	movi	r4,56
 800e98c:	20807d16 	blt	r4,r2,800eb84 <__subdf3+0x6a4>
 800e990:	010007c4 	movi	r4,31
 800e994:	2080d916 	blt	r4,r2,800ecfc <__subdf3+0x81c>
 800e998:	01000804 	movi	r4,32
 800e99c:	2089c83a 	sub	r4,r4,r2
 800e9a0:	2912983a 	sll	r9,r5,r4
 800e9a4:	8890d83a 	srl	r8,r17,r2
 800e9a8:	8908983a 	sll	r4,r17,r4
 800e9ac:	2884d83a 	srl	r2,r5,r2
 800e9b0:	4a22b03a 	or	r17,r9,r8
 800e9b4:	2008c03a 	cmpne	r4,r4,zero
 800e9b8:	8922b03a 	or	r17,r17,r4
 800e9bc:	3463c83a 	sub	r17,r6,r17
 800e9c0:	1885c83a 	sub	r2,r3,r2
 800e9c4:	344d803a 	cmpltu	r6,r6,r17
 800e9c8:	118bc83a 	sub	r5,r2,r6
 800e9cc:	5021883a 	mov	r16,r10
 800e9d0:	3825883a 	mov	r18,r7
 800e9d4:	003f2206 	br	800e660 <__alt_data_end+0xf800e660>
 800e9d8:	9886b03a 	or	r3,r19,r2
 800e9dc:	18001c1e 	bne	r3,zero,800ea50 <__subdf3+0x570>
 800e9e0:	0011883a 	mov	r8,zero
 800e9e4:	000b883a 	mov	r5,zero
 800e9e8:	0023883a 	mov	r17,zero
 800e9ec:	0021883a 	mov	r16,zero
 800e9f0:	003f3e06 	br	800e6ec <__alt_data_end+0xf800e6ec>
 800e9f4:	010007c4 	movi	r4,31
 800e9f8:	20803c16 	blt	r4,r2,800eaec <__subdf3+0x60c>
 800e9fc:	01000804 	movi	r4,32
 800ea00:	2089c83a 	sub	r4,r4,r2
 800ea04:	1912983a 	sll	r9,r3,r4
 800ea08:	308ed83a 	srl	r7,r6,r2
 800ea0c:	3108983a 	sll	r4,r6,r4
 800ea10:	1884d83a 	srl	r2,r3,r2
 800ea14:	49ceb03a 	or	r7,r9,r7
 800ea18:	2008c03a 	cmpne	r4,r4,zero
 800ea1c:	390eb03a 	or	r7,r7,r4
 800ea20:	003f4706 	br	800e740 <__alt_data_end+0xf800e740>
 800ea24:	2c48b03a 	or	r4,r5,r17
 800ea28:	20003e26 	beq	r4,zero,800eb24 <__subdf3+0x644>
 800ea2c:	0084303a 	nor	r2,zero,r2
 800ea30:	10003a1e 	bne	r2,zero,800eb1c <__subdf3+0x63c>
 800ea34:	3463c83a 	sub	r17,r6,r17
 800ea38:	194bc83a 	sub	r5,r3,r5
 800ea3c:	344d803a 	cmpltu	r6,r6,r17
 800ea40:	298bc83a 	sub	r5,r5,r6
 800ea44:	5021883a 	mov	r16,r10
 800ea48:	3825883a 	mov	r18,r7
 800ea4c:	003f0406 	br	800e660 <__alt_data_end+0xf800e660>
 800ea50:	1023883a 	mov	r17,r2
 800ea54:	003f0706 	br	800e674 <__alt_data_end+0xf800e674>
 800ea58:	0101ffc4 	movi	r4,2047
 800ea5c:	813f331e 	bne	r16,r4,800e72c <__alt_data_end+0xf800e72c>
 800ea60:	003ec206 	br	800e56c <__alt_data_end+0xf800e56c>
 800ea64:	0027883a 	mov	r19,zero
 800ea68:	003fb006 	br	800e92c <__alt_data_end+0xf800e92c>
 800ea6c:	0005883a 	mov	r2,zero
 800ea70:	003fbb06 	br	800e960 <__alt_data_end+0xf800e960>
 800ea74:	2c44b03a 	or	r2,r5,r17
 800ea78:	80008b1e 	bne	r16,zero,800eca8 <__subdf3+0x7c8>
 800ea7c:	1000b526 	beq	r2,zero,800ed54 <__subdf3+0x874>
 800ea80:	1984b03a 	or	r2,r3,r6
 800ea84:	103eb926 	beq	r2,zero,800e56c <__alt_data_end+0xf800e56c>
 800ea88:	3449883a 	add	r4,r6,r17
 800ea8c:	2463803a 	cmpltu	r17,r4,r17
 800ea90:	194b883a 	add	r5,r3,r5
 800ea94:	2c4b883a 	add	r5,r5,r17
 800ea98:	2880202c 	andhi	r2,r5,128
 800ea9c:	2023883a 	mov	r17,r4
 800eaa0:	103f5c26 	beq	r2,zero,800e814 <__alt_data_end+0xf800e814>
 800eaa4:	00bfe034 	movhi	r2,65408
 800eaa8:	10bfffc4 	addi	r2,r2,-1
 800eaac:	4821883a 	mov	r16,r9
 800eab0:	288a703a 	and	r5,r5,r2
 800eab4:	003ead06 	br	800e56c <__alt_data_end+0xf800e56c>
 800eab8:	2c44b03a 	or	r2,r5,r17
 800eabc:	8000291e 	bne	r16,zero,800eb64 <__subdf3+0x684>
 800eac0:	10004f1e 	bne	r2,zero,800ec00 <__subdf3+0x720>
 800eac4:	1984b03a 	or	r2,r3,r6
 800eac8:	10000426 	beq	r2,zero,800eadc <__subdf3+0x5fc>
 800eacc:	180b883a 	mov	r5,r3
 800ead0:	3023883a 	mov	r17,r6
 800ead4:	3825883a 	mov	r18,r7
 800ead8:	003ea406 	br	800e56c <__alt_data_end+0xf800e56c>
 800eadc:	0011883a 	mov	r8,zero
 800eae0:	000b883a 	mov	r5,zero
 800eae4:	0023883a 	mov	r17,zero
 800eae8:	003f0006 	br	800e6ec <__alt_data_end+0xf800e6ec>
 800eaec:	11fff804 	addi	r7,r2,-32
 800eaf0:	19c8d83a 	srl	r4,r3,r7
 800eaf4:	01c00804 	movi	r7,32
 800eaf8:	11c07e26 	beq	r2,r7,800ecf4 <__subdf3+0x814>
 800eafc:	01c01004 	movi	r7,64
 800eb00:	3885c83a 	sub	r2,r7,r2
 800eb04:	1884983a 	sll	r2,r3,r2
 800eb08:	118cb03a 	or	r6,r2,r6
 800eb0c:	300ec03a 	cmpne	r7,r6,zero
 800eb10:	390eb03a 	or	r7,r7,r4
 800eb14:	0005883a 	mov	r2,zero
 800eb18:	003f0906 	br	800e740 <__alt_data_end+0xf800e740>
 800eb1c:	0101ffc4 	movi	r4,2047
 800eb20:	513f991e 	bne	r10,r4,800e988 <__alt_data_end+0xf800e988>
 800eb24:	180b883a 	mov	r5,r3
 800eb28:	3023883a 	mov	r17,r6
 800eb2c:	5021883a 	mov	r16,r10
 800eb30:	3825883a 	mov	r18,r7
 800eb34:	003e8d06 	br	800e56c <__alt_data_end+0xf800e56c>
 800eb38:	80001a1e 	bne	r16,zero,800eba4 <__subdf3+0x6c4>
 800eb3c:	2c48b03a 	or	r4,r5,r17
 800eb40:	20005526 	beq	r4,zero,800ec98 <__subdf3+0x7b8>
 800eb44:	0084303a 	nor	r2,zero,r2
 800eb48:	1000511e 	bne	r2,zero,800ec90 <__subdf3+0x7b0>
 800eb4c:	89a3883a 	add	r17,r17,r6
 800eb50:	194b883a 	add	r5,r3,r5
 800eb54:	898d803a 	cmpltu	r6,r17,r6
 800eb58:	298b883a 	add	r5,r5,r6
 800eb5c:	5021883a 	mov	r16,r10
 800eb60:	003efc06 	br	800e754 <__alt_data_end+0xf800e754>
 800eb64:	1000341e 	bne	r2,zero,800ec38 <__subdf3+0x758>
 800eb68:	1984b03a 	or	r2,r3,r6
 800eb6c:	10006f26 	beq	r2,zero,800ed2c <__subdf3+0x84c>
 800eb70:	180b883a 	mov	r5,r3
 800eb74:	3023883a 	mov	r17,r6
 800eb78:	3825883a 	mov	r18,r7
 800eb7c:	0401ffc4 	movi	r16,2047
 800eb80:	003e7a06 	br	800e56c <__alt_data_end+0xf800e56c>
 800eb84:	2c62b03a 	or	r17,r5,r17
 800eb88:	8822c03a 	cmpne	r17,r17,zero
 800eb8c:	0005883a 	mov	r2,zero
 800eb90:	003f8a06 	br	800e9bc <__alt_data_end+0xf800e9bc>
 800eb94:	3821883a 	mov	r16,r7
 800eb98:	000b883a 	mov	r5,zero
 800eb9c:	0023883a 	mov	r17,zero
 800eba0:	003ed206 	br	800e6ec <__alt_data_end+0xf800e6ec>
 800eba4:	0101ffc4 	movi	r4,2047
 800eba8:	51003b26 	beq	r10,r4,800ec98 <__subdf3+0x7b8>
 800ebac:	0085c83a 	sub	r2,zero,r2
 800ebb0:	29402034 	orhi	r5,r5,128
 800ebb4:	01000e04 	movi	r4,56
 800ebb8:	20806216 	blt	r4,r2,800ed44 <__subdf3+0x864>
 800ebbc:	010007c4 	movi	r4,31
 800ebc0:	20806b16 	blt	r4,r2,800ed70 <__subdf3+0x890>
 800ebc4:	01000804 	movi	r4,32
 800ebc8:	2089c83a 	sub	r4,r4,r2
 800ebcc:	2912983a 	sll	r9,r5,r4
 800ebd0:	888ed83a 	srl	r7,r17,r2
 800ebd4:	8908983a 	sll	r4,r17,r4
 800ebd8:	2884d83a 	srl	r2,r5,r2
 800ebdc:	49e2b03a 	or	r17,r9,r7
 800ebe0:	2008c03a 	cmpne	r4,r4,zero
 800ebe4:	8922b03a 	or	r17,r17,r4
 800ebe8:	89a3883a 	add	r17,r17,r6
 800ebec:	10c5883a 	add	r2,r2,r3
 800ebf0:	898d803a 	cmpltu	r6,r17,r6
 800ebf4:	118b883a 	add	r5,r2,r6
 800ebf8:	5021883a 	mov	r16,r10
 800ebfc:	003ed506 	br	800e754 <__alt_data_end+0xf800e754>
 800ec00:	1984b03a 	or	r2,r3,r6
 800ec04:	103e5926 	beq	r2,zero,800e56c <__alt_data_end+0xf800e56c>
 800ec08:	8989c83a 	sub	r4,r17,r6
 800ec0c:	8911803a 	cmpltu	r8,r17,r4
 800ec10:	28c5c83a 	sub	r2,r5,r3
 800ec14:	1205c83a 	sub	r2,r2,r8
 800ec18:	1200202c 	andhi	r8,r2,128
 800ec1c:	403ef926 	beq	r8,zero,800e804 <__alt_data_end+0xf800e804>
 800ec20:	3463c83a 	sub	r17,r6,r17
 800ec24:	194bc83a 	sub	r5,r3,r5
 800ec28:	344d803a 	cmpltu	r6,r6,r17
 800ec2c:	298bc83a 	sub	r5,r5,r6
 800ec30:	3825883a 	mov	r18,r7
 800ec34:	003e4d06 	br	800e56c <__alt_data_end+0xf800e56c>
 800ec38:	1984b03a 	or	r2,r3,r6
 800ec3c:	10002b26 	beq	r2,zero,800ecec <__subdf3+0x80c>
 800ec40:	2808d0fa 	srli	r4,r5,3
 800ec44:	8822d0fa 	srli	r17,r17,3
 800ec48:	280a977a 	slli	r5,r5,29
 800ec4c:	2080022c 	andhi	r2,r4,8
 800ec50:	2c62b03a 	or	r17,r5,r17
 800ec54:	10000826 	beq	r2,zero,800ec78 <__subdf3+0x798>
 800ec58:	1810d0fa 	srli	r8,r3,3
 800ec5c:	4080022c 	andhi	r2,r8,8
 800ec60:	1000051e 	bne	r2,zero,800ec78 <__subdf3+0x798>
 800ec64:	300cd0fa 	srli	r6,r6,3
 800ec68:	1804977a 	slli	r2,r3,29
 800ec6c:	4009883a 	mov	r4,r8
 800ec70:	3825883a 	mov	r18,r7
 800ec74:	11a2b03a 	or	r17,r2,r6
 800ec78:	880ad77a 	srli	r5,r17,29
 800ec7c:	200890fa 	slli	r4,r4,3
 800ec80:	882290fa 	slli	r17,r17,3
 800ec84:	0401ffc4 	movi	r16,2047
 800ec88:	290ab03a 	or	r5,r5,r4
 800ec8c:	003e3706 	br	800e56c <__alt_data_end+0xf800e56c>
 800ec90:	0101ffc4 	movi	r4,2047
 800ec94:	513fc71e 	bne	r10,r4,800ebb4 <__alt_data_end+0xf800ebb4>
 800ec98:	180b883a 	mov	r5,r3
 800ec9c:	3023883a 	mov	r17,r6
 800eca0:	5021883a 	mov	r16,r10
 800eca4:	003e3106 	br	800e56c <__alt_data_end+0xf800e56c>
 800eca8:	10002d26 	beq	r2,zero,800ed60 <__subdf3+0x880>
 800ecac:	1984b03a 	or	r2,r3,r6
 800ecb0:	10000e26 	beq	r2,zero,800ecec <__subdf3+0x80c>
 800ecb4:	2808d0fa 	srli	r4,r5,3
 800ecb8:	8822d0fa 	srli	r17,r17,3
 800ecbc:	280a977a 	slli	r5,r5,29
 800ecc0:	2080022c 	andhi	r2,r4,8
 800ecc4:	2c62b03a 	or	r17,r5,r17
 800ecc8:	103feb26 	beq	r2,zero,800ec78 <__alt_data_end+0xf800ec78>
 800eccc:	180ed0fa 	srli	r7,r3,3
 800ecd0:	3880022c 	andhi	r2,r7,8
 800ecd4:	103fe81e 	bne	r2,zero,800ec78 <__alt_data_end+0xf800ec78>
 800ecd8:	300cd0fa 	srli	r6,r6,3
 800ecdc:	1804977a 	slli	r2,r3,29
 800ece0:	3809883a 	mov	r4,r7
 800ece4:	11a2b03a 	or	r17,r2,r6
 800ece8:	003fe306 	br	800ec78 <__alt_data_end+0xf800ec78>
 800ecec:	0401ffc4 	movi	r16,2047
 800ecf0:	003e1e06 	br	800e56c <__alt_data_end+0xf800e56c>
 800ecf4:	0005883a 	mov	r2,zero
 800ecf8:	003f8306 	br	800eb08 <__alt_data_end+0xf800eb08>
 800ecfc:	113ff804 	addi	r4,r2,-32
 800ed00:	02000804 	movi	r8,32
 800ed04:	2908d83a 	srl	r4,r5,r4
 800ed08:	12002526 	beq	r2,r8,800eda0 <__subdf3+0x8c0>
 800ed0c:	02001004 	movi	r8,64
 800ed10:	4085c83a 	sub	r2,r8,r2
 800ed14:	288a983a 	sll	r5,r5,r2
 800ed18:	2c62b03a 	or	r17,r5,r17
 800ed1c:	8822c03a 	cmpne	r17,r17,zero
 800ed20:	8922b03a 	or	r17,r17,r4
 800ed24:	0005883a 	mov	r2,zero
 800ed28:	003f2406 	br	800e9bc <__alt_data_end+0xf800e9bc>
 800ed2c:	01402034 	movhi	r5,128
 800ed30:	0011883a 	mov	r8,zero
 800ed34:	297fffc4 	addi	r5,r5,-1
 800ed38:	047ffe04 	movi	r17,-8
 800ed3c:	0401ffc4 	movi	r16,2047
 800ed40:	003e6a06 	br	800e6ec <__alt_data_end+0xf800e6ec>
 800ed44:	2c62b03a 	or	r17,r5,r17
 800ed48:	8822c03a 	cmpne	r17,r17,zero
 800ed4c:	0005883a 	mov	r2,zero
 800ed50:	003fa506 	br	800ebe8 <__alt_data_end+0xf800ebe8>
 800ed54:	180b883a 	mov	r5,r3
 800ed58:	3023883a 	mov	r17,r6
 800ed5c:	003e0306 	br	800e56c <__alt_data_end+0xf800e56c>
 800ed60:	180b883a 	mov	r5,r3
 800ed64:	3023883a 	mov	r17,r6
 800ed68:	0401ffc4 	movi	r16,2047
 800ed6c:	003dff06 	br	800e56c <__alt_data_end+0xf800e56c>
 800ed70:	113ff804 	addi	r4,r2,-32
 800ed74:	01c00804 	movi	r7,32
 800ed78:	2908d83a 	srl	r4,r5,r4
 800ed7c:	11c00a26 	beq	r2,r7,800eda8 <__subdf3+0x8c8>
 800ed80:	01c01004 	movi	r7,64
 800ed84:	3885c83a 	sub	r2,r7,r2
 800ed88:	288a983a 	sll	r5,r5,r2
 800ed8c:	2c62b03a 	or	r17,r5,r17
 800ed90:	8822c03a 	cmpne	r17,r17,zero
 800ed94:	8922b03a 	or	r17,r17,r4
 800ed98:	0005883a 	mov	r2,zero
 800ed9c:	003f9206 	br	800ebe8 <__alt_data_end+0xf800ebe8>
 800eda0:	000b883a 	mov	r5,zero
 800eda4:	003fdc06 	br	800ed18 <__alt_data_end+0xf800ed18>
 800eda8:	000b883a 	mov	r5,zero
 800edac:	003ff706 	br	800ed8c <__alt_data_end+0xf800ed8c>

0800edb0 <__fixdfsi>:
 800edb0:	2806d53a 	srli	r3,r5,20
 800edb4:	00800434 	movhi	r2,16
 800edb8:	10bfffc4 	addi	r2,r2,-1
 800edbc:	18c1ffcc 	andi	r3,r3,2047
 800edc0:	0180ff84 	movi	r6,1022
 800edc4:	2884703a 	and	r2,r5,r2
 800edc8:	280ad7fa 	srli	r5,r5,31
 800edcc:	30c0130e 	bge	r6,r3,800ee1c <__fixdfsi+0x6c>
 800edd0:	01810744 	movi	r6,1053
 800edd4:	30c00d16 	blt	r6,r3,800ee0c <__fixdfsi+0x5c>
 800edd8:	01810cc4 	movi	r6,1075
 800eddc:	30cdc83a 	sub	r6,r6,r3
 800ede0:	01c007c4 	movi	r7,31
 800ede4:	10800434 	orhi	r2,r2,16
 800ede8:	39800e0e 	bge	r7,r6,800ee24 <__fixdfsi+0x74>
 800edec:	010104c4 	movi	r4,1043
 800edf0:	20c7c83a 	sub	r3,r4,r3
 800edf4:	10c6d83a 	srl	r3,r2,r3
 800edf8:	29403fcc 	andi	r5,r5,255
 800edfc:	0145c83a 	sub	r2,zero,r5
 800ee00:	1884f03a 	xor	r2,r3,r2
 800ee04:	1145883a 	add	r2,r2,r5
 800ee08:	f800283a 	ret
 800ee0c:	00a00034 	movhi	r2,32768
 800ee10:	10bfffc4 	addi	r2,r2,-1
 800ee14:	2885883a 	add	r2,r5,r2
 800ee18:	f800283a 	ret
 800ee1c:	0005883a 	mov	r2,zero
 800ee20:	f800283a 	ret
 800ee24:	18fefb44 	addi	r3,r3,-1043
 800ee28:	2188d83a 	srl	r4,r4,r6
 800ee2c:	10c6983a 	sll	r3,r2,r3
 800ee30:	20c6b03a 	or	r3,r4,r3
 800ee34:	003ff006 	br	800edf8 <__alt_data_end+0xf800edf8>

0800ee38 <__floatsidf>:
 800ee38:	defffd04 	addi	sp,sp,-12
 800ee3c:	dc400115 	stw	r17,4(sp)
 800ee40:	dfc00215 	stw	ra,8(sp)
 800ee44:	dc000015 	stw	r16,0(sp)
 800ee48:	2023883a 	mov	r17,r4
 800ee4c:	20001426 	beq	r4,zero,800eea0 <__floatsidf+0x68>
 800ee50:	2020d7fa 	srli	r16,r4,31
 800ee54:	80000126 	beq	r16,zero,800ee5c <__floatsidf+0x24>
 800ee58:	0123c83a 	sub	r17,zero,r4
 800ee5c:	8809883a 	mov	r4,r17
 800ee60:	800f2540 	call	800f254 <__clzsi2>
 800ee64:	01410784 	movi	r5,1054
 800ee68:	00c00284 	movi	r3,10
 800ee6c:	288bc83a 	sub	r5,r5,r2
 800ee70:	18801c16 	blt	r3,r2,800eee4 <__floatsidf+0xac>
 800ee74:	00c002c4 	movi	r3,11
 800ee78:	1887c83a 	sub	r3,r3,r2
 800ee7c:	88c8d83a 	srl	r4,r17,r3
 800ee80:	00c00434 	movhi	r3,16
 800ee84:	18ffffc4 	addi	r3,r3,-1
 800ee88:	10800544 	addi	r2,r2,21
 800ee8c:	20c8703a 	and	r4,r4,r3
 800ee90:	8884983a 	sll	r2,r17,r2
 800ee94:	28c1ffcc 	andi	r3,r5,2047
 800ee98:	800d883a 	mov	r6,r16
 800ee9c:	00000406 	br	800eeb0 <__floatsidf+0x78>
 800eea0:	000d883a 	mov	r6,zero
 800eea4:	0007883a 	mov	r3,zero
 800eea8:	0009883a 	mov	r4,zero
 800eeac:	0005883a 	mov	r2,zero
 800eeb0:	180a953a 	slli	r5,r3,20
 800eeb4:	31803fcc 	andi	r6,r6,255
 800eeb8:	00c00434 	movhi	r3,16
 800eebc:	300c97fa 	slli	r6,r6,31
 800eec0:	18ffffc4 	addi	r3,r3,-1
 800eec4:	20c6703a 	and	r3,r4,r3
 800eec8:	1946b03a 	or	r3,r3,r5
 800eecc:	1986b03a 	or	r3,r3,r6
 800eed0:	dfc00217 	ldw	ra,8(sp)
 800eed4:	dc400117 	ldw	r17,4(sp)
 800eed8:	dc000017 	ldw	r16,0(sp)
 800eedc:	dec00304 	addi	sp,sp,12
 800eee0:	f800283a 	ret
 800eee4:	10fffd44 	addi	r3,r2,-11
 800eee8:	88c8983a 	sll	r4,r17,r3
 800eeec:	00800434 	movhi	r2,16
 800eef0:	10bfffc4 	addi	r2,r2,-1
 800eef4:	2088703a 	and	r4,r4,r2
 800eef8:	28c1ffcc 	andi	r3,r5,2047
 800eefc:	800d883a 	mov	r6,r16
 800ef00:	0005883a 	mov	r2,zero
 800ef04:	003fea06 	br	800eeb0 <__alt_data_end+0xf800eeb0>

0800ef08 <__floatunsidf>:
 800ef08:	defffe04 	addi	sp,sp,-8
 800ef0c:	dc000015 	stw	r16,0(sp)
 800ef10:	dfc00115 	stw	ra,4(sp)
 800ef14:	2021883a 	mov	r16,r4
 800ef18:	20001026 	beq	r4,zero,800ef5c <__floatunsidf+0x54>
 800ef1c:	800f2540 	call	800f254 <__clzsi2>
 800ef20:	01410784 	movi	r5,1054
 800ef24:	100d883a 	mov	r6,r2
 800ef28:	288bc83a 	sub	r5,r5,r2
 800ef2c:	00800284 	movi	r2,10
 800ef30:	11801616 	blt	r2,r6,800ef8c <__floatunsidf+0x84>
 800ef34:	008002c4 	movi	r2,11
 800ef38:	1185c83a 	sub	r2,r2,r6
 800ef3c:	8084d83a 	srl	r2,r16,r2
 800ef40:	00c00434 	movhi	r3,16
 800ef44:	31c00544 	addi	r7,r6,21
 800ef48:	18ffffc4 	addi	r3,r3,-1
 800ef4c:	81e0983a 	sll	r16,r16,r7
 800ef50:	10cc703a 	and	r6,r2,r3
 800ef54:	2941ffcc 	andi	r5,r5,2047
 800ef58:	00000206 	br	800ef64 <__floatunsidf+0x5c>
 800ef5c:	000b883a 	mov	r5,zero
 800ef60:	000d883a 	mov	r6,zero
 800ef64:	280a953a 	slli	r5,r5,20
 800ef68:	00c00434 	movhi	r3,16
 800ef6c:	18ffffc4 	addi	r3,r3,-1
 800ef70:	30c6703a 	and	r3,r6,r3
 800ef74:	8005883a 	mov	r2,r16
 800ef78:	1946b03a 	or	r3,r3,r5
 800ef7c:	dfc00117 	ldw	ra,4(sp)
 800ef80:	dc000017 	ldw	r16,0(sp)
 800ef84:	dec00204 	addi	sp,sp,8
 800ef88:	f800283a 	ret
 800ef8c:	31bffd44 	addi	r6,r6,-11
 800ef90:	818c983a 	sll	r6,r16,r6
 800ef94:	00800434 	movhi	r2,16
 800ef98:	10bfffc4 	addi	r2,r2,-1
 800ef9c:	2941ffcc 	andi	r5,r5,2047
 800efa0:	0021883a 	mov	r16,zero
 800efa4:	308c703a 	and	r6,r6,r2
 800efa8:	003fee06 	br	800ef64 <__alt_data_end+0xf800ef64>

0800efac <__extendsfdf2>:
 800efac:	200ad5fa 	srli	r5,r4,23
 800efb0:	defffd04 	addi	sp,sp,-12
 800efb4:	dc400115 	stw	r17,4(sp)
 800efb8:	29403fcc 	andi	r5,r5,255
 800efbc:	29800044 	addi	r6,r5,1
 800efc0:	04402034 	movhi	r17,128
 800efc4:	dc000015 	stw	r16,0(sp)
 800efc8:	8c7fffc4 	addi	r17,r17,-1
 800efcc:	dfc00215 	stw	ra,8(sp)
 800efd0:	31803fcc 	andi	r6,r6,255
 800efd4:	00800044 	movi	r2,1
 800efd8:	8922703a 	and	r17,r17,r4
 800efdc:	2020d7fa 	srli	r16,r4,31
 800efe0:	1180110e 	bge	r2,r6,800f028 <__extendsfdf2+0x7c>
 800efe4:	880ed0fa 	srli	r7,r17,3
 800efe8:	8822977a 	slli	r17,r17,29
 800efec:	2940e004 	addi	r5,r5,896
 800eff0:	2941ffcc 	andi	r5,r5,2047
 800eff4:	280c953a 	slli	r6,r5,20
 800eff8:	01400434 	movhi	r5,16
 800effc:	800697fa 	slli	r3,r16,31
 800f000:	297fffc4 	addi	r5,r5,-1
 800f004:	394a703a 	and	r5,r7,r5
 800f008:	298ab03a 	or	r5,r5,r6
 800f00c:	8805883a 	mov	r2,r17
 800f010:	28c6b03a 	or	r3,r5,r3
 800f014:	dfc00217 	ldw	ra,8(sp)
 800f018:	dc400117 	ldw	r17,4(sp)
 800f01c:	dc000017 	ldw	r16,0(sp)
 800f020:	dec00304 	addi	sp,sp,12
 800f024:	f800283a 	ret
 800f028:	2800111e 	bne	r5,zero,800f070 <__extendsfdf2+0xc4>
 800f02c:	88001c26 	beq	r17,zero,800f0a0 <__extendsfdf2+0xf4>
 800f030:	8809883a 	mov	r4,r17
 800f034:	800f2540 	call	800f254 <__clzsi2>
 800f038:	00c00284 	movi	r3,10
 800f03c:	18801b16 	blt	r3,r2,800f0ac <__extendsfdf2+0x100>
 800f040:	01c002c4 	movi	r7,11
 800f044:	388fc83a 	sub	r7,r7,r2
 800f048:	10c00544 	addi	r3,r2,21
 800f04c:	89ced83a 	srl	r7,r17,r7
 800f050:	88e2983a 	sll	r17,r17,r3
 800f054:	0180e244 	movi	r6,905
 800f058:	308bc83a 	sub	r5,r6,r2
 800f05c:	01800434 	movhi	r6,16
 800f060:	31bfffc4 	addi	r6,r6,-1
 800f064:	398e703a 	and	r7,r7,r6
 800f068:	2941ffcc 	andi	r5,r5,2047
 800f06c:	003fe006 	br	800eff0 <__alt_data_end+0xf800eff0>
 800f070:	88000826 	beq	r17,zero,800f094 <__extendsfdf2+0xe8>
 800f074:	880ed0fa 	srli	r7,r17,3
 800f078:	00800434 	movhi	r2,16
 800f07c:	10bfffc4 	addi	r2,r2,-1
 800f080:	39c00234 	orhi	r7,r7,8
 800f084:	8822977a 	slli	r17,r17,29
 800f088:	388e703a 	and	r7,r7,r2
 800f08c:	0141ffc4 	movi	r5,2047
 800f090:	003fd706 	br	800eff0 <__alt_data_end+0xf800eff0>
 800f094:	0141ffc4 	movi	r5,2047
 800f098:	000f883a 	mov	r7,zero
 800f09c:	003fd406 	br	800eff0 <__alt_data_end+0xf800eff0>
 800f0a0:	000b883a 	mov	r5,zero
 800f0a4:	000f883a 	mov	r7,zero
 800f0a8:	003fd106 	br	800eff0 <__alt_data_end+0xf800eff0>
 800f0ac:	11fffd44 	addi	r7,r2,-11
 800f0b0:	89ce983a 	sll	r7,r17,r7
 800f0b4:	0023883a 	mov	r17,zero
 800f0b8:	003fe606 	br	800f054 <__alt_data_end+0xf800f054>

0800f0bc <__truncdfsf2>:
 800f0bc:	2810d53a 	srli	r8,r5,20
 800f0c0:	01c00434 	movhi	r7,16
 800f0c4:	39ffffc4 	addi	r7,r7,-1
 800f0c8:	29ce703a 	and	r7,r5,r7
 800f0cc:	380e90fa 	slli	r7,r7,3
 800f0d0:	4201ffcc 	andi	r8,r8,2047
 800f0d4:	200cd77a 	srli	r6,r4,29
 800f0d8:	42400044 	addi	r9,r8,1
 800f0dc:	4a41ffcc 	andi	r9,r9,2047
 800f0e0:	00800044 	movi	r2,1
 800f0e4:	398cb03a 	or	r6,r7,r6
 800f0e8:	280ad7fa 	srli	r5,r5,31
 800f0ec:	200e90fa 	slli	r7,r4,3
 800f0f0:	1240230e 	bge	r2,r9,800f180 <__truncdfsf2+0xc4>
 800f0f4:	40ff2004 	addi	r3,r8,-896
 800f0f8:	00803f84 	movi	r2,254
 800f0fc:	10c01516 	blt	r2,r3,800f154 <__truncdfsf2+0x98>
 800f100:	00c02d0e 	bge	zero,r3,800f1b8 <__truncdfsf2+0xfc>
 800f104:	200891ba 	slli	r4,r4,6
 800f108:	300c90fa 	slli	r6,r6,3
 800f10c:	380ed77a 	srli	r7,r7,29
 800f110:	2008c03a 	cmpne	r4,r4,zero
 800f114:	310cb03a 	or	r6,r6,r4
 800f118:	31ccb03a 	or	r6,r6,r7
 800f11c:	308001cc 	andi	r2,r6,7
 800f120:	10000426 	beq	r2,zero,800f134 <__truncdfsf2+0x78>
 800f124:	310003cc 	andi	r4,r6,15
 800f128:	00800104 	movi	r2,4
 800f12c:	20800126 	beq	r4,r2,800f134 <__truncdfsf2+0x78>
 800f130:	31800104 	addi	r6,r6,4
 800f134:	3081002c 	andhi	r2,r6,1024
 800f138:	10002326 	beq	r2,zero,800f1c8 <__truncdfsf2+0x10c>
 800f13c:	18c00044 	addi	r3,r3,1
 800f140:	00803fc4 	movi	r2,255
 800f144:	18800326 	beq	r3,r2,800f154 <__truncdfsf2+0x98>
 800f148:	300c91ba 	slli	r6,r6,6
 800f14c:	300cd27a 	srli	r6,r6,9
 800f150:	00000206 	br	800f15c <__truncdfsf2+0xa0>
 800f154:	00ffffc4 	movi	r3,-1
 800f158:	000d883a 	mov	r6,zero
 800f15c:	18c03fcc 	andi	r3,r3,255
 800f160:	180895fa 	slli	r4,r3,23
 800f164:	00c02034 	movhi	r3,128
 800f168:	280a97fa 	slli	r5,r5,31
 800f16c:	18ffffc4 	addi	r3,r3,-1
 800f170:	30c6703a 	and	r3,r6,r3
 800f174:	1906b03a 	or	r3,r3,r4
 800f178:	1944b03a 	or	r2,r3,r5
 800f17c:	f800283a 	ret
 800f180:	4000071e 	bne	r8,zero,800f1a0 <__truncdfsf2+0xe4>
 800f184:	31ccb03a 	or	r6,r6,r7
 800f188:	30000d1e 	bne	r6,zero,800f1c0 <__truncdfsf2+0x104>
 800f18c:	0007883a 	mov	r3,zero
 800f190:	00802034 	movhi	r2,128
 800f194:	10bfffc4 	addi	r2,r2,-1
 800f198:	308c703a 	and	r6,r6,r2
 800f19c:	003fef06 	br	800f15c <__alt_data_end+0xf800f15c>
 800f1a0:	31c8b03a 	or	r4,r6,r7
 800f1a4:	203feb26 	beq	r4,zero,800f154 <__alt_data_end+0xf800f154>
 800f1a8:	300c90fa 	slli	r6,r6,3
 800f1ac:	00c03fc4 	movi	r3,255
 800f1b0:	31808034 	orhi	r6,r6,512
 800f1b4:	003fd906 	br	800f11c <__alt_data_end+0xf800f11c>
 800f1b8:	00bffa44 	movi	r2,-23
 800f1bc:	1880090e 	bge	r3,r2,800f1e4 <__truncdfsf2+0x128>
 800f1c0:	01800144 	movi	r6,5
 800f1c4:	0007883a 	mov	r3,zero
 800f1c8:	00803fc4 	movi	r2,255
 800f1cc:	300cd0fa 	srli	r6,r6,3
 800f1d0:	18bfef1e 	bne	r3,r2,800f190 <__alt_data_end+0xf800f190>
 800f1d4:	303fdf26 	beq	r6,zero,800f154 <__alt_data_end+0xf800f154>
 800f1d8:	31801034 	orhi	r6,r6,64
 800f1dc:	00ffffc4 	movi	r3,-1
 800f1e0:	003feb06 	br	800f190 <__alt_data_end+0xf800f190>
 800f1e4:	0080e784 	movi	r2,926
 800f1e8:	1205c83a 	sub	r2,r2,r8
 800f1ec:	00c007c4 	movi	r3,31
 800f1f0:	31802034 	orhi	r6,r6,128
 800f1f4:	18800916 	blt	r3,r2,800f21c <__truncdfsf2+0x160>
 800f1f8:	423f2084 	addi	r8,r8,-894
 800f1fc:	3a06983a 	sll	r3,r7,r8
 800f200:	3210983a 	sll	r8,r6,r8
 800f204:	388ed83a 	srl	r7,r7,r2
 800f208:	180cc03a 	cmpne	r6,r3,zero
 800f20c:	418cb03a 	or	r6,r8,r6
 800f210:	31ccb03a 	or	r6,r6,r7
 800f214:	0007883a 	mov	r3,zero
 800f218:	003fc006 	br	800f11c <__alt_data_end+0xf800f11c>
 800f21c:	00c0df84 	movi	r3,894
 800f220:	1a07c83a 	sub	r3,r3,r8
 800f224:	01000804 	movi	r4,32
 800f228:	30c6d83a 	srl	r3,r6,r3
 800f22c:	11000726 	beq	r2,r4,800f24c <__truncdfsf2+0x190>
 800f230:	423f2884 	addi	r8,r8,-862
 800f234:	3210983a 	sll	r8,r6,r8
 800f238:	41ceb03a 	or	r7,r8,r7
 800f23c:	380ec03a 	cmpne	r7,r7,zero
 800f240:	38ccb03a 	or	r6,r7,r3
 800f244:	0007883a 	mov	r3,zero
 800f248:	003fb406 	br	800f11c <__alt_data_end+0xf800f11c>
 800f24c:	0011883a 	mov	r8,zero
 800f250:	003ff906 	br	800f238 <__alt_data_end+0xf800f238>

0800f254 <__clzsi2>:
 800f254:	00bfffd4 	movui	r2,65535
 800f258:	11000b36 	bltu	r2,r4,800f288 <__clzsi2+0x34>
 800f25c:	00803fc4 	movi	r2,255
 800f260:	1100122e 	bgeu	r2,r4,800f2ac <__clzsi2+0x58>
 800f264:	00c00204 	movi	r3,8
 800f268:	01400604 	movi	r5,24
 800f26c:	20c8d83a 	srl	r4,r4,r3
 800f270:	008205b4 	movhi	r2,2070
 800f274:	10977904 	addi	r2,r2,24036
 800f278:	1109883a 	add	r4,r2,r4
 800f27c:	20800003 	ldbu	r2,0(r4)
 800f280:	2885c83a 	sub	r2,r5,r2
 800f284:	f800283a 	ret
 800f288:	00804034 	movhi	r2,256
 800f28c:	10bfffc4 	addi	r2,r2,-1
 800f290:	11000336 	bltu	r2,r4,800f2a0 <__clzsi2+0x4c>
 800f294:	00c00404 	movi	r3,16
 800f298:	180b883a 	mov	r5,r3
 800f29c:	003ff306 	br	800f26c <__alt_data_end+0xf800f26c>
 800f2a0:	00c00604 	movi	r3,24
 800f2a4:	01400204 	movi	r5,8
 800f2a8:	003ff006 	br	800f26c <__alt_data_end+0xf800f26c>
 800f2ac:	0007883a 	mov	r3,zero
 800f2b0:	01400804 	movi	r5,32
 800f2b4:	003fed06 	br	800f26c <__alt_data_end+0xf800f26c>

0800f2b8 <memalign>:
 800f2b8:	00c205f4 	movhi	r3,2071
 800f2bc:	18e34604 	addi	r3,r3,-29416
 800f2c0:	2005883a 	mov	r2,r4
 800f2c4:	19000017 	ldw	r4,0(r3)
 800f2c8:	280d883a 	mov	r6,r5
 800f2cc:	100b883a 	mov	r5,r2
 800f2d0:	800f2d41 	jmpi	800f2d4 <_memalign_r>

0800f2d4 <_memalign_r>:
 800f2d4:	defffa04 	addi	sp,sp,-24
 800f2d8:	dc400115 	stw	r17,4(sp)
 800f2dc:	dfc00515 	stw	ra,20(sp)
 800f2e0:	dd000415 	stw	r20,16(sp)
 800f2e4:	dcc00315 	stw	r19,12(sp)
 800f2e8:	dc800215 	stw	r18,8(sp)
 800f2ec:	dc000015 	stw	r16,0(sp)
 800f2f0:	00800204 	movi	r2,8
 800f2f4:	2823883a 	mov	r17,r5
 800f2f8:	11404b2e 	bgeu	r2,r5,800f428 <_memalign_r+0x154>
 800f2fc:	008003c4 	movi	r2,15
 800f300:	2029883a 	mov	r20,r4
 800f304:	11400136 	bltu	r2,r5,800f30c <_memalign_r+0x38>
 800f308:	04400404 	movi	r17,16
 800f30c:	308002c4 	addi	r2,r6,11
 800f310:	00c00584 	movi	r3,22
 800f314:	18803e2e 	bgeu	r3,r2,800f410 <_memalign_r+0x13c>
 800f318:	04bffe04 	movi	r18,-8
 800f31c:	14a4703a 	and	r18,r2,r18
 800f320:	90003d16 	blt	r18,zero,800f418 <_memalign_r+0x144>
 800f324:	91803c36 	bltu	r18,r6,800f418 <_memalign_r+0x144>
 800f328:	89400404 	addi	r5,r17,16
 800f32c:	a009883a 	mov	r4,r20
 800f330:	2c8b883a 	add	r5,r5,r18
 800f334:	800f4b00 	call	800f4b0 <_malloc_r>
 800f338:	1027883a 	mov	r19,r2
 800f33c:	10005026 	beq	r2,zero,800f480 <_memalign_r+0x1ac>
 800f340:	a009883a 	mov	r4,r20
 800f344:	801ce800 	call	801ce80 <__malloc_lock>
 800f348:	9809883a 	mov	r4,r19
 800f34c:	880b883a 	mov	r5,r17
 800f350:	9c3ffe04 	addi	r16,r19,-8
 800f354:	800ca080 	call	800ca08 <__umodsi3>
 800f358:	10001c26 	beq	r2,zero,800f3cc <_memalign_r+0xf8>
 800f35c:	88bfffc4 	addi	r2,r17,-1
 800f360:	9887883a 	add	r3,r19,r2
 800f364:	0445c83a 	sub	r2,zero,r17
 800f368:	1884703a 	and	r2,r3,r2
 800f36c:	10bffe04 	addi	r2,r2,-8
 800f370:	1409c83a 	sub	r4,r2,r16
 800f374:	014003c4 	movi	r5,15
 800f378:	8007883a 	mov	r3,r16
 800f37c:	2900330e 	bge	r5,r4,800f44c <_memalign_r+0x178>
 800f380:	1021883a 	mov	r16,r2
 800f384:	993fff17 	ldw	r4,-4(r19)
 800f388:	00bfff04 	movi	r2,-4
 800f38c:	80c7c83a 	sub	r3,r16,r3
 800f390:	2084703a 	and	r2,r4,r2
 800f394:	10c5c83a 	sub	r2,r2,r3
 800f398:	11000054 	ori	r4,r2,1
 800f39c:	81000115 	stw	r4,4(r16)
 800f3a0:	8085883a 	add	r2,r16,r2
 800f3a4:	11800117 	ldw	r6,4(r2)
 800f3a8:	a009883a 	mov	r4,r20
 800f3ac:	980b883a 	mov	r5,r19
 800f3b0:	31800054 	ori	r6,r6,1
 800f3b4:	11800115 	stw	r6,4(r2)
 800f3b8:	98bfff17 	ldw	r2,-4(r19)
 800f3bc:	1080004c 	andi	r2,r2,1
 800f3c0:	1884b03a 	or	r2,r3,r2
 800f3c4:	98bfff15 	stw	r2,-4(r19)
 800f3c8:	80165680 	call	8016568 <_free_r>
 800f3cc:	80c00117 	ldw	r3,4(r16)
 800f3d0:	00bfff04 	movi	r2,-4
 800f3d4:	1884703a 	and	r2,r3,r2
 800f3d8:	1485c83a 	sub	r2,r2,r18
 800f3dc:	00c003c4 	movi	r3,15
 800f3e0:	18801c16 	blt	r3,r2,800f454 <_memalign_r+0x180>
 800f3e4:	a009883a 	mov	r4,r20
 800f3e8:	801cea40 	call	801cea4 <__malloc_unlock>
 800f3ec:	80800204 	addi	r2,r16,8
 800f3f0:	dfc00517 	ldw	ra,20(sp)
 800f3f4:	dd000417 	ldw	r20,16(sp)
 800f3f8:	dcc00317 	ldw	r19,12(sp)
 800f3fc:	dc800217 	ldw	r18,8(sp)
 800f400:	dc400117 	ldw	r17,4(sp)
 800f404:	dc000017 	ldw	r16,0(sp)
 800f408:	dec00604 	addi	sp,sp,24
 800f40c:	f800283a 	ret
 800f410:	04800404 	movi	r18,16
 800f414:	91bfc42e 	bgeu	r18,r6,800f328 <__alt_data_end+0xf800f328>
 800f418:	00800304 	movi	r2,12
 800f41c:	a0800015 	stw	r2,0(r20)
 800f420:	0005883a 	mov	r2,zero
 800f424:	003ff206 	br	800f3f0 <__alt_data_end+0xf800f3f0>
 800f428:	300b883a 	mov	r5,r6
 800f42c:	dfc00517 	ldw	ra,20(sp)
 800f430:	dd000417 	ldw	r20,16(sp)
 800f434:	dcc00317 	ldw	r19,12(sp)
 800f438:	dc800217 	ldw	r18,8(sp)
 800f43c:	dc400117 	ldw	r17,4(sp)
 800f440:	dc000017 	ldw	r16,0(sp)
 800f444:	dec00604 	addi	sp,sp,24
 800f448:	800f4b01 	jmpi	800f4b0 <_malloc_r>
 800f44c:	1461883a 	add	r16,r2,r17
 800f450:	003fcc06 	br	800f384 <__alt_data_end+0xf800f384>
 800f454:	848b883a 	add	r5,r16,r18
 800f458:	10800054 	ori	r2,r2,1
 800f45c:	28800115 	stw	r2,4(r5)
 800f460:	80800117 	ldw	r2,4(r16)
 800f464:	a009883a 	mov	r4,r20
 800f468:	29400204 	addi	r5,r5,8
 800f46c:	1080004c 	andi	r2,r2,1
 800f470:	90a4b03a 	or	r18,r18,r2
 800f474:	84800115 	stw	r18,4(r16)
 800f478:	80165680 	call	8016568 <_free_r>
 800f47c:	003fd906 	br	800f3e4 <__alt_data_end+0xf800f3e4>
 800f480:	0005883a 	mov	r2,zero
 800f484:	003fda06 	br	800f3f0 <__alt_data_end+0xf800f3f0>

0800f488 <malloc>:
 800f488:	008205f4 	movhi	r2,2071
 800f48c:	10a34604 	addi	r2,r2,-29416
 800f490:	200b883a 	mov	r5,r4
 800f494:	11000017 	ldw	r4,0(r2)
 800f498:	800f4b01 	jmpi	800f4b0 <_malloc_r>

0800f49c <free>:
 800f49c:	008205f4 	movhi	r2,2071
 800f4a0:	10a34604 	addi	r2,r2,-29416
 800f4a4:	200b883a 	mov	r5,r4
 800f4a8:	11000017 	ldw	r4,0(r2)
 800f4ac:	80165681 	jmpi	8016568 <_free_r>

0800f4b0 <_malloc_r>:
 800f4b0:	defff504 	addi	sp,sp,-44
 800f4b4:	dc800315 	stw	r18,12(sp)
 800f4b8:	dfc00a15 	stw	ra,40(sp)
 800f4bc:	df000915 	stw	fp,36(sp)
 800f4c0:	ddc00815 	stw	r23,32(sp)
 800f4c4:	dd800715 	stw	r22,28(sp)
 800f4c8:	dd400615 	stw	r21,24(sp)
 800f4cc:	dd000515 	stw	r20,20(sp)
 800f4d0:	dcc00415 	stw	r19,16(sp)
 800f4d4:	dc400215 	stw	r17,8(sp)
 800f4d8:	dc000115 	stw	r16,4(sp)
 800f4dc:	288002c4 	addi	r2,r5,11
 800f4e0:	00c00584 	movi	r3,22
 800f4e4:	2025883a 	mov	r18,r4
 800f4e8:	18802a2e 	bgeu	r3,r2,800f594 <_malloc_r+0xe4>
 800f4ec:	047ffe04 	movi	r17,-8
 800f4f0:	1462703a 	and	r17,r2,r17
 800f4f4:	88009e16 	blt	r17,zero,800f770 <_malloc_r+0x2c0>
 800f4f8:	89409d36 	bltu	r17,r5,800f770 <_malloc_r+0x2c0>
 800f4fc:	801ce800 	call	801ce80 <__malloc_lock>
 800f500:	00807dc4 	movi	r2,503
 800f504:	14402736 	bltu	r2,r17,800f5a4 <_malloc_r+0xf4>
 800f508:	8806d0fa 	srli	r3,r17,3
 800f50c:	04c205b4 	movhi	r19,2070
 800f510:	9cdc8b04 	addi	r19,r19,29228
 800f514:	18c5883a 	add	r2,r3,r3
 800f518:	1085883a 	add	r2,r2,r2
 800f51c:	1085883a 	add	r2,r2,r2
 800f520:	9885883a 	add	r2,r19,r2
 800f524:	14000317 	ldw	r16,12(r2)
 800f528:	80814a26 	beq	r16,r2,800fa54 <_malloc_r+0x5a4>
 800f52c:	80c00117 	ldw	r3,4(r16)
 800f530:	81000317 	ldw	r4,12(r16)
 800f534:	00bfff04 	movi	r2,-4
 800f538:	1884703a 	and	r2,r3,r2
 800f53c:	81400217 	ldw	r5,8(r16)
 800f540:	8085883a 	add	r2,r16,r2
 800f544:	10c00117 	ldw	r3,4(r2)
 800f548:	29000315 	stw	r4,12(r5)
 800f54c:	21400215 	stw	r5,8(r4)
 800f550:	18c00054 	ori	r3,r3,1
 800f554:	10c00115 	stw	r3,4(r2)
 800f558:	9009883a 	mov	r4,r18
 800f55c:	801cea40 	call	801cea4 <__malloc_unlock>
 800f560:	80800204 	addi	r2,r16,8
 800f564:	dfc00a17 	ldw	ra,40(sp)
 800f568:	df000917 	ldw	fp,36(sp)
 800f56c:	ddc00817 	ldw	r23,32(sp)
 800f570:	dd800717 	ldw	r22,28(sp)
 800f574:	dd400617 	ldw	r21,24(sp)
 800f578:	dd000517 	ldw	r20,20(sp)
 800f57c:	dcc00417 	ldw	r19,16(sp)
 800f580:	dc800317 	ldw	r18,12(sp)
 800f584:	dc400217 	ldw	r17,8(sp)
 800f588:	dc000117 	ldw	r16,4(sp)
 800f58c:	dec00b04 	addi	sp,sp,44
 800f590:	f800283a 	ret
 800f594:	04400404 	movi	r17,16
 800f598:	89407536 	bltu	r17,r5,800f770 <_malloc_r+0x2c0>
 800f59c:	801ce800 	call	801ce80 <__malloc_lock>
 800f5a0:	003fd906 	br	800f508 <__alt_data_end+0xf800f508>
 800f5a4:	8806d27a 	srli	r3,r17,9
 800f5a8:	18007526 	beq	r3,zero,800f780 <_malloc_r+0x2d0>
 800f5ac:	00800104 	movi	r2,4
 800f5b0:	10c0ef36 	bltu	r2,r3,800f970 <_malloc_r+0x4c0>
 800f5b4:	8806d1ba 	srli	r3,r17,6
 800f5b8:	19c00e04 	addi	r7,r3,56
 800f5bc:	39cb883a 	add	r5,r7,r7
 800f5c0:	04c205b4 	movhi	r19,2070
 800f5c4:	294b883a 	add	r5,r5,r5
 800f5c8:	9cdc8b04 	addi	r19,r19,29228
 800f5cc:	294b883a 	add	r5,r5,r5
 800f5d0:	994b883a 	add	r5,r19,r5
 800f5d4:	2c000317 	ldw	r16,12(r5)
 800f5d8:	2c000e26 	beq	r5,r16,800f614 <_malloc_r+0x164>
 800f5dc:	80800117 	ldw	r2,4(r16)
 800f5e0:	01bfff04 	movi	r6,-4
 800f5e4:	010003c4 	movi	r4,15
 800f5e8:	1184703a 	and	r2,r2,r6
 800f5ec:	1447c83a 	sub	r3,r2,r17
 800f5f0:	20c00716 	blt	r4,r3,800f610 <_malloc_r+0x160>
 800f5f4:	1800650e 	bge	r3,zero,800f78c <_malloc_r+0x2dc>
 800f5f8:	84000317 	ldw	r16,12(r16)
 800f5fc:	2c000526 	beq	r5,r16,800f614 <_malloc_r+0x164>
 800f600:	80800117 	ldw	r2,4(r16)
 800f604:	1184703a 	and	r2,r2,r6
 800f608:	1447c83a 	sub	r3,r2,r17
 800f60c:	20fff90e 	bge	r4,r3,800f5f4 <__alt_data_end+0xf800f5f4>
 800f610:	39ffffc4 	addi	r7,r7,-1
 800f614:	38c00044 	addi	r3,r7,1
 800f618:	018205b4 	movhi	r6,2070
 800f61c:	9c000417 	ldw	r16,16(r19)
 800f620:	319c8b04 	addi	r6,r6,29228
 800f624:	32400204 	addi	r9,r6,8
 800f628:	82410326 	beq	r16,r9,800fa38 <_malloc_r+0x588>
 800f62c:	81000117 	ldw	r4,4(r16)
 800f630:	00bfff04 	movi	r2,-4
 800f634:	208e703a 	and	r7,r4,r2
 800f638:	3c45c83a 	sub	r2,r7,r17
 800f63c:	010003c4 	movi	r4,15
 800f640:	2080ee16 	blt	r4,r2,800f9fc <_malloc_r+0x54c>
 800f644:	32400515 	stw	r9,20(r6)
 800f648:	32400415 	stw	r9,16(r6)
 800f64c:	1000510e 	bge	r2,zero,800f794 <_malloc_r+0x2e4>
 800f650:	00807fc4 	movi	r2,511
 800f654:	11c0ce36 	bltu	r2,r7,800f990 <_malloc_r+0x4e0>
 800f658:	3808d0fa 	srli	r4,r7,3
 800f65c:	01c00044 	movi	r7,1
 800f660:	30800117 	ldw	r2,4(r6)
 800f664:	210b883a 	add	r5,r4,r4
 800f668:	294b883a 	add	r5,r5,r5
 800f66c:	2009d0ba 	srai	r4,r4,2
 800f670:	294b883a 	add	r5,r5,r5
 800f674:	298b883a 	add	r5,r5,r6
 800f678:	2a000217 	ldw	r8,8(r5)
 800f67c:	3908983a 	sll	r4,r7,r4
 800f680:	81400315 	stw	r5,12(r16)
 800f684:	82000215 	stw	r8,8(r16)
 800f688:	2088b03a 	or	r4,r4,r2
 800f68c:	2c000215 	stw	r16,8(r5)
 800f690:	31000115 	stw	r4,4(r6)
 800f694:	44000315 	stw	r16,12(r8)
 800f698:	1805d0ba 	srai	r2,r3,2
 800f69c:	01400044 	movi	r5,1
 800f6a0:	288a983a 	sll	r5,r5,r2
 800f6a4:	21404336 	bltu	r4,r5,800f7b4 <_malloc_r+0x304>
 800f6a8:	2144703a 	and	r2,r4,r5
 800f6ac:	10000a1e 	bne	r2,zero,800f6d8 <_malloc_r+0x228>
 800f6b0:	00bfff04 	movi	r2,-4
 800f6b4:	294b883a 	add	r5,r5,r5
 800f6b8:	1886703a 	and	r3,r3,r2
 800f6bc:	2144703a 	and	r2,r4,r5
 800f6c0:	18c00104 	addi	r3,r3,4
 800f6c4:	1000041e 	bne	r2,zero,800f6d8 <_malloc_r+0x228>
 800f6c8:	294b883a 	add	r5,r5,r5
 800f6cc:	2144703a 	and	r2,r4,r5
 800f6d0:	18c00104 	addi	r3,r3,4
 800f6d4:	103ffc26 	beq	r2,zero,800f6c8 <__alt_data_end+0xf800f6c8>
 800f6d8:	023fff04 	movi	r8,-4
 800f6dc:	01c003c4 	movi	r7,15
 800f6e0:	18c5883a 	add	r2,r3,r3
 800f6e4:	1085883a 	add	r2,r2,r2
 800f6e8:	1085883a 	add	r2,r2,r2
 800f6ec:	9895883a 	add	r10,r19,r2
 800f6f0:	52c00304 	addi	r11,r10,12
 800f6f4:	1819883a 	mov	r12,r3
 800f6f8:	5c000017 	ldw	r16,0(r11)
 800f6fc:	59bffd04 	addi	r6,r11,-12
 800f700:	8180041e 	bne	r16,r6,800f714 <_malloc_r+0x264>
 800f704:	0000ce06 	br	800fa40 <_malloc_r+0x590>
 800f708:	2000d70e 	bge	r4,zero,800fa68 <_malloc_r+0x5b8>
 800f70c:	84000317 	ldw	r16,12(r16)
 800f710:	8180cb26 	beq	r16,r6,800fa40 <_malloc_r+0x590>
 800f714:	80800117 	ldw	r2,4(r16)
 800f718:	1204703a 	and	r2,r2,r8
 800f71c:	1449c83a 	sub	r4,r2,r17
 800f720:	393ff90e 	bge	r7,r4,800f708 <__alt_data_end+0xf800f708>
 800f724:	80800317 	ldw	r2,12(r16)
 800f728:	80c00217 	ldw	r3,8(r16)
 800f72c:	89400054 	ori	r5,r17,1
 800f730:	81400115 	stw	r5,4(r16)
 800f734:	18800315 	stw	r2,12(r3)
 800f738:	10c00215 	stw	r3,8(r2)
 800f73c:	8463883a 	add	r17,r16,r17
 800f740:	9c400515 	stw	r17,20(r19)
 800f744:	9c400415 	stw	r17,16(r19)
 800f748:	20800054 	ori	r2,r4,1
 800f74c:	88800115 	stw	r2,4(r17)
 800f750:	8a400315 	stw	r9,12(r17)
 800f754:	8a400215 	stw	r9,8(r17)
 800f758:	8923883a 	add	r17,r17,r4
 800f75c:	89000015 	stw	r4,0(r17)
 800f760:	9009883a 	mov	r4,r18
 800f764:	801cea40 	call	801cea4 <__malloc_unlock>
 800f768:	80800204 	addi	r2,r16,8
 800f76c:	003f7d06 	br	800f564 <__alt_data_end+0xf800f564>
 800f770:	00800304 	movi	r2,12
 800f774:	90800015 	stw	r2,0(r18)
 800f778:	0005883a 	mov	r2,zero
 800f77c:	003f7906 	br	800f564 <__alt_data_end+0xf800f564>
 800f780:	01401f84 	movi	r5,126
 800f784:	01c00fc4 	movi	r7,63
 800f788:	003f8d06 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800f78c:	81000317 	ldw	r4,12(r16)
 800f790:	003f6a06 	br	800f53c <__alt_data_end+0xf800f53c>
 800f794:	81c5883a 	add	r2,r16,r7
 800f798:	10c00117 	ldw	r3,4(r2)
 800f79c:	9009883a 	mov	r4,r18
 800f7a0:	18c00054 	ori	r3,r3,1
 800f7a4:	10c00115 	stw	r3,4(r2)
 800f7a8:	801cea40 	call	801cea4 <__malloc_unlock>
 800f7ac:	80800204 	addi	r2,r16,8
 800f7b0:	003f6c06 	br	800f564 <__alt_data_end+0xf800f564>
 800f7b4:	9c000217 	ldw	r16,8(r19)
 800f7b8:	00bfff04 	movi	r2,-4
 800f7bc:	85800117 	ldw	r22,4(r16)
 800f7c0:	b0ac703a 	and	r22,r22,r2
 800f7c4:	b4400336 	bltu	r22,r17,800f7d4 <_malloc_r+0x324>
 800f7c8:	b445c83a 	sub	r2,r22,r17
 800f7cc:	00c003c4 	movi	r3,15
 800f7d0:	18805d16 	blt	r3,r2,800f948 <_malloc_r+0x498>
 800f7d4:	05c205f4 	movhi	r23,2071
 800f7d8:	008205f4 	movhi	r2,2071
 800f7dc:	bde34304 	addi	r23,r23,-29428
 800f7e0:	10ae6804 	addi	r2,r2,-18016
 800f7e4:	15400017 	ldw	r21,0(r2)
 800f7e8:	b9000017 	ldw	r4,0(r23)
 800f7ec:	00ffffc4 	movi	r3,-1
 800f7f0:	858d883a 	add	r6,r16,r22
 800f7f4:	8d6b883a 	add	r21,r17,r21
 800f7f8:	20c0e426 	beq	r4,r3,800fb8c <_malloc_r+0x6dc>
 800f7fc:	ad4403c4 	addi	r21,r21,4111
 800f800:	00fc0004 	movi	r3,-4096
 800f804:	a8ea703a 	and	r21,r21,r3
 800f808:	9009883a 	mov	r4,r18
 800f80c:	a80b883a 	mov	r5,r21
 800f810:	d9800015 	stw	r6,0(sp)
 800f814:	800ffd80 	call	800ffd8 <_sbrk_r>
 800f818:	00ffffc4 	movi	r3,-1
 800f81c:	1029883a 	mov	r20,r2
 800f820:	d9800017 	ldw	r6,0(sp)
 800f824:	10c0a426 	beq	r2,r3,800fab8 <_malloc_r+0x608>
 800f828:	1180a236 	bltu	r2,r6,800fab4 <_malloc_r+0x604>
 800f82c:	070205f4 	movhi	fp,2071
 800f830:	e72e7404 	addi	fp,fp,-17968
 800f834:	e0c00017 	ldw	r3,0(fp)
 800f838:	a8c7883a 	add	r3,r21,r3
 800f83c:	e0c00015 	stw	r3,0(fp)
 800f840:	3500da26 	beq	r6,r20,800fbac <_malloc_r+0x6fc>
 800f844:	b9000017 	ldw	r4,0(r23)
 800f848:	00bfffc4 	movi	r2,-1
 800f84c:	2080e426 	beq	r4,r2,800fbe0 <_malloc_r+0x730>
 800f850:	a185c83a 	sub	r2,r20,r6
 800f854:	1885883a 	add	r2,r3,r2
 800f858:	e0800015 	stw	r2,0(fp)
 800f85c:	a0c001cc 	andi	r3,r20,7
 800f860:	1800b526 	beq	r3,zero,800fb38 <_malloc_r+0x688>
 800f864:	a0e9c83a 	sub	r20,r20,r3
 800f868:	00840204 	movi	r2,4104
 800f86c:	a5000204 	addi	r20,r20,8
 800f870:	10c7c83a 	sub	r3,r2,r3
 800f874:	a545883a 	add	r2,r20,r21
 800f878:	1083ffcc 	andi	r2,r2,4095
 800f87c:	18abc83a 	sub	r21,r3,r2
 800f880:	9009883a 	mov	r4,r18
 800f884:	a80b883a 	mov	r5,r21
 800f888:	800ffd80 	call	800ffd8 <_sbrk_r>
 800f88c:	00ffffc4 	movi	r3,-1
 800f890:	10c0d026 	beq	r2,r3,800fbd4 <_malloc_r+0x724>
 800f894:	1507c83a 	sub	r3,r2,r20
 800f898:	a8c7883a 	add	r3,r21,r3
 800f89c:	18c00054 	ori	r3,r3,1
 800f8a0:	e0800017 	ldw	r2,0(fp)
 800f8a4:	9d000215 	stw	r20,8(r19)
 800f8a8:	a0c00115 	stw	r3,4(r20)
 800f8ac:	a887883a 	add	r3,r21,r2
 800f8b0:	e0c00015 	stw	r3,0(fp)
 800f8b4:	84c00e26 	beq	r16,r19,800f8f0 <_malloc_r+0x440>
 800f8b8:	018003c4 	movi	r6,15
 800f8bc:	3580a02e 	bgeu	r6,r22,800fb40 <_malloc_r+0x690>
 800f8c0:	81400117 	ldw	r5,4(r16)
 800f8c4:	013ffe04 	movi	r4,-8
 800f8c8:	b0bffd04 	addi	r2,r22,-12
 800f8cc:	1104703a 	and	r2,r2,r4
 800f8d0:	2900004c 	andi	r4,r5,1
 800f8d4:	1108b03a 	or	r4,r2,r4
 800f8d8:	81000115 	stw	r4,4(r16)
 800f8dc:	01400144 	movi	r5,5
 800f8e0:	8089883a 	add	r4,r16,r2
 800f8e4:	21400115 	stw	r5,4(r4)
 800f8e8:	21400215 	stw	r5,8(r4)
 800f8ec:	3080c036 	bltu	r6,r2,800fbf0 <_malloc_r+0x740>
 800f8f0:	008205f4 	movhi	r2,2071
 800f8f4:	10ae6704 	addi	r2,r2,-18020
 800f8f8:	11000017 	ldw	r4,0(r2)
 800f8fc:	20c0012e 	bgeu	r4,r3,800f904 <_malloc_r+0x454>
 800f900:	10c00015 	stw	r3,0(r2)
 800f904:	008205f4 	movhi	r2,2071
 800f908:	10ae6604 	addi	r2,r2,-18024
 800f90c:	11000017 	ldw	r4,0(r2)
 800f910:	9c000217 	ldw	r16,8(r19)
 800f914:	20c0012e 	bgeu	r4,r3,800f91c <_malloc_r+0x46c>
 800f918:	10c00015 	stw	r3,0(r2)
 800f91c:	80c00117 	ldw	r3,4(r16)
 800f920:	00bfff04 	movi	r2,-4
 800f924:	1886703a 	and	r3,r3,r2
 800f928:	1c45c83a 	sub	r2,r3,r17
 800f92c:	1c400236 	bltu	r3,r17,800f938 <_malloc_r+0x488>
 800f930:	00c003c4 	movi	r3,15
 800f934:	18800416 	blt	r3,r2,800f948 <_malloc_r+0x498>
 800f938:	9009883a 	mov	r4,r18
 800f93c:	801cea40 	call	801cea4 <__malloc_unlock>
 800f940:	0005883a 	mov	r2,zero
 800f944:	003f0706 	br	800f564 <__alt_data_end+0xf800f564>
 800f948:	88c00054 	ori	r3,r17,1
 800f94c:	80c00115 	stw	r3,4(r16)
 800f950:	8463883a 	add	r17,r16,r17
 800f954:	10800054 	ori	r2,r2,1
 800f958:	9c400215 	stw	r17,8(r19)
 800f95c:	88800115 	stw	r2,4(r17)
 800f960:	9009883a 	mov	r4,r18
 800f964:	801cea40 	call	801cea4 <__malloc_unlock>
 800f968:	80800204 	addi	r2,r16,8
 800f96c:	003efd06 	br	800f564 <__alt_data_end+0xf800f564>
 800f970:	00800504 	movi	r2,20
 800f974:	10c0482e 	bgeu	r2,r3,800fa98 <_malloc_r+0x5e8>
 800f978:	00801504 	movi	r2,84
 800f97c:	10c06836 	bltu	r2,r3,800fb20 <_malloc_r+0x670>
 800f980:	8806d33a 	srli	r3,r17,12
 800f984:	19c01b84 	addi	r7,r3,110
 800f988:	39cb883a 	add	r5,r7,r7
 800f98c:	003f0c06 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800f990:	3804d27a 	srli	r2,r7,9
 800f994:	01000104 	movi	r4,4
 800f998:	2080422e 	bgeu	r4,r2,800faa4 <_malloc_r+0x5f4>
 800f99c:	01000504 	movi	r4,20
 800f9a0:	20807c36 	bltu	r4,r2,800fb94 <_malloc_r+0x6e4>
 800f9a4:	110016c4 	addi	r4,r2,91
 800f9a8:	210b883a 	add	r5,r4,r4
 800f9ac:	294b883a 	add	r5,r5,r5
 800f9b0:	294b883a 	add	r5,r5,r5
 800f9b4:	994b883a 	add	r5,r19,r5
 800f9b8:	28800217 	ldw	r2,8(r5)
 800f9bc:	020205b4 	movhi	r8,2070
 800f9c0:	421c8b04 	addi	r8,r8,29228
 800f9c4:	11406326 	beq	r2,r5,800fb54 <_malloc_r+0x6a4>
 800f9c8:	01bfff04 	movi	r6,-4
 800f9cc:	11000117 	ldw	r4,4(r2)
 800f9d0:	2188703a 	and	r4,r4,r6
 800f9d4:	3900022e 	bgeu	r7,r4,800f9e0 <_malloc_r+0x530>
 800f9d8:	10800217 	ldw	r2,8(r2)
 800f9dc:	28bffb1e 	bne	r5,r2,800f9cc <__alt_data_end+0xf800f9cc>
 800f9e0:	11800317 	ldw	r6,12(r2)
 800f9e4:	99000117 	ldw	r4,4(r19)
 800f9e8:	81800315 	stw	r6,12(r16)
 800f9ec:	80800215 	stw	r2,8(r16)
 800f9f0:	34000215 	stw	r16,8(r6)
 800f9f4:	14000315 	stw	r16,12(r2)
 800f9f8:	003f2706 	br	800f698 <__alt_data_end+0xf800f698>
 800f9fc:	88c00054 	ori	r3,r17,1
 800fa00:	80c00115 	stw	r3,4(r16)
 800fa04:	8463883a 	add	r17,r16,r17
 800fa08:	34400515 	stw	r17,20(r6)
 800fa0c:	34400415 	stw	r17,16(r6)
 800fa10:	10c00054 	ori	r3,r2,1
 800fa14:	8a400315 	stw	r9,12(r17)
 800fa18:	8a400215 	stw	r9,8(r17)
 800fa1c:	88c00115 	stw	r3,4(r17)
 800fa20:	88a3883a 	add	r17,r17,r2
 800fa24:	88800015 	stw	r2,0(r17)
 800fa28:	9009883a 	mov	r4,r18
 800fa2c:	801cea40 	call	801cea4 <__malloc_unlock>
 800fa30:	80800204 	addi	r2,r16,8
 800fa34:	003ecb06 	br	800f564 <__alt_data_end+0xf800f564>
 800fa38:	31000117 	ldw	r4,4(r6)
 800fa3c:	003f1606 	br	800f698 <__alt_data_end+0xf800f698>
 800fa40:	63000044 	addi	r12,r12,1
 800fa44:	608000cc 	andi	r2,r12,3
 800fa48:	5ac00204 	addi	r11,r11,8
 800fa4c:	103f2a1e 	bne	r2,zero,800f6f8 <__alt_data_end+0xf800f6f8>
 800fa50:	00002106 	br	800fad8 <_malloc_r+0x628>
 800fa54:	80800204 	addi	r2,r16,8
 800fa58:	84000517 	ldw	r16,20(r16)
 800fa5c:	143eb31e 	bne	r2,r16,800f52c <__alt_data_end+0xf800f52c>
 800fa60:	18c00084 	addi	r3,r3,2
 800fa64:	003eec06 	br	800f618 <__alt_data_end+0xf800f618>
 800fa68:	8085883a 	add	r2,r16,r2
 800fa6c:	10c00117 	ldw	r3,4(r2)
 800fa70:	81000317 	ldw	r4,12(r16)
 800fa74:	81400217 	ldw	r5,8(r16)
 800fa78:	18c00054 	ori	r3,r3,1
 800fa7c:	10c00115 	stw	r3,4(r2)
 800fa80:	29000315 	stw	r4,12(r5)
 800fa84:	21400215 	stw	r5,8(r4)
 800fa88:	9009883a 	mov	r4,r18
 800fa8c:	801cea40 	call	801cea4 <__malloc_unlock>
 800fa90:	80800204 	addi	r2,r16,8
 800fa94:	003eb306 	br	800f564 <__alt_data_end+0xf800f564>
 800fa98:	19c016c4 	addi	r7,r3,91
 800fa9c:	39cb883a 	add	r5,r7,r7
 800faa0:	003ec706 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800faa4:	3804d1ba 	srli	r2,r7,6
 800faa8:	11000e04 	addi	r4,r2,56
 800faac:	210b883a 	add	r5,r4,r4
 800fab0:	003fbe06 	br	800f9ac <__alt_data_end+0xf800f9ac>
 800fab4:	84ff5d26 	beq	r16,r19,800f82c <__alt_data_end+0xf800f82c>
 800fab8:	9c000217 	ldw	r16,8(r19)
 800fabc:	00bfff04 	movi	r2,-4
 800fac0:	80c00117 	ldw	r3,4(r16)
 800fac4:	1886703a 	and	r3,r3,r2
 800fac8:	003f9706 	br	800f928 <__alt_data_end+0xf800f928>
 800facc:	52800017 	ldw	r10,0(r10)
 800fad0:	18ffffc4 	addi	r3,r3,-1
 800fad4:	50805c1e 	bne	r10,r2,800fc48 <_malloc_r+0x798>
 800fad8:	190000cc 	andi	r4,r3,3
 800fadc:	50bffe04 	addi	r2,r10,-8
 800fae0:	203ffa1e 	bne	r4,zero,800facc <__alt_data_end+0xf800facc>
 800fae4:	98800117 	ldw	r2,4(r19)
 800fae8:	0146303a 	nor	r3,zero,r5
 800faec:	1884703a 	and	r2,r3,r2
 800faf0:	98800115 	stw	r2,4(r19)
 800faf4:	294b883a 	add	r5,r5,r5
 800faf8:	117f2e36 	bltu	r2,r5,800f7b4 <__alt_data_end+0xf800f7b4>
 800fafc:	283f2d26 	beq	r5,zero,800f7b4 <__alt_data_end+0xf800f7b4>
 800fb00:	1146703a 	and	r3,r2,r5
 800fb04:	1800521e 	bne	r3,zero,800fc50 <_malloc_r+0x7a0>
 800fb08:	6007883a 	mov	r3,r12
 800fb0c:	294b883a 	add	r5,r5,r5
 800fb10:	1148703a 	and	r4,r2,r5
 800fb14:	18c00104 	addi	r3,r3,4
 800fb18:	203ffc26 	beq	r4,zero,800fb0c <__alt_data_end+0xf800fb0c>
 800fb1c:	003ef006 	br	800f6e0 <__alt_data_end+0xf800f6e0>
 800fb20:	00805504 	movi	r2,340
 800fb24:	10c01336 	bltu	r2,r3,800fb74 <_malloc_r+0x6c4>
 800fb28:	8806d3fa 	srli	r3,r17,15
 800fb2c:	19c01dc4 	addi	r7,r3,119
 800fb30:	39cb883a 	add	r5,r7,r7
 800fb34:	003ea206 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800fb38:	00c40004 	movi	r3,4096
 800fb3c:	003f4d06 	br	800f874 <__alt_data_end+0xf800f874>
 800fb40:	00800044 	movi	r2,1
 800fb44:	a0800115 	stw	r2,4(r20)
 800fb48:	a021883a 	mov	r16,r20
 800fb4c:	0007883a 	mov	r3,zero
 800fb50:	003f7506 	br	800f928 <__alt_data_end+0xf800f928>
 800fb54:	200bd0ba 	srai	r5,r4,2
 800fb58:	01800044 	movi	r6,1
 800fb5c:	41000117 	ldw	r4,4(r8)
 800fb60:	314a983a 	sll	r5,r6,r5
 800fb64:	100d883a 	mov	r6,r2
 800fb68:	2908b03a 	or	r4,r5,r4
 800fb6c:	41000115 	stw	r4,4(r8)
 800fb70:	003f9d06 	br	800f9e8 <__alt_data_end+0xf800f9e8>
 800fb74:	00815504 	movi	r2,1364
 800fb78:	10c01336 	bltu	r2,r3,800fbc8 <_malloc_r+0x718>
 800fb7c:	8806d4ba 	srli	r3,r17,18
 800fb80:	19c01f04 	addi	r7,r3,124
 800fb84:	39cb883a 	add	r5,r7,r7
 800fb88:	003e8d06 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800fb8c:	ad400404 	addi	r21,r21,16
 800fb90:	003f1d06 	br	800f808 <__alt_data_end+0xf800f808>
 800fb94:	01001504 	movi	r4,84
 800fb98:	20801c36 	bltu	r4,r2,800fc0c <_malloc_r+0x75c>
 800fb9c:	3804d33a 	srli	r2,r7,12
 800fba0:	11001b84 	addi	r4,r2,110
 800fba4:	210b883a 	add	r5,r4,r4
 800fba8:	003f8006 	br	800f9ac <__alt_data_end+0xf800f9ac>
 800fbac:	3083ffcc 	andi	r2,r6,4095
 800fbb0:	103f241e 	bne	r2,zero,800f844 <__alt_data_end+0xf800f844>
 800fbb4:	99000217 	ldw	r4,8(r19)
 800fbb8:	ad85883a 	add	r2,r21,r22
 800fbbc:	10800054 	ori	r2,r2,1
 800fbc0:	20800115 	stw	r2,4(r4)
 800fbc4:	003f4a06 	br	800f8f0 <__alt_data_end+0xf800f8f0>
 800fbc8:	01403f04 	movi	r5,252
 800fbcc:	01c01f84 	movi	r7,126
 800fbd0:	003e7b06 	br	800f5c0 <__alt_data_end+0xf800f5c0>
 800fbd4:	00c00044 	movi	r3,1
 800fbd8:	002b883a 	mov	r21,zero
 800fbdc:	003f3006 	br	800f8a0 <__alt_data_end+0xf800f8a0>
 800fbe0:	008205f4 	movhi	r2,2071
 800fbe4:	10a34304 	addi	r2,r2,-29428
 800fbe8:	15000015 	stw	r20,0(r2)
 800fbec:	003f1b06 	br	800f85c <__alt_data_end+0xf800f85c>
 800fbf0:	9009883a 	mov	r4,r18
 800fbf4:	81400204 	addi	r5,r16,8
 800fbf8:	80165680 	call	8016568 <_free_r>
 800fbfc:	008205f4 	movhi	r2,2071
 800fc00:	10ae7404 	addi	r2,r2,-17968
 800fc04:	10c00017 	ldw	r3,0(r2)
 800fc08:	003f3906 	br	800f8f0 <__alt_data_end+0xf800f8f0>
 800fc0c:	01005504 	movi	r4,340
 800fc10:	20800436 	bltu	r4,r2,800fc24 <_malloc_r+0x774>
 800fc14:	3804d3fa 	srli	r2,r7,15
 800fc18:	11001dc4 	addi	r4,r2,119
 800fc1c:	210b883a 	add	r5,r4,r4
 800fc20:	003f6206 	br	800f9ac <__alt_data_end+0xf800f9ac>
 800fc24:	01015504 	movi	r4,1364
 800fc28:	20800436 	bltu	r4,r2,800fc3c <_malloc_r+0x78c>
 800fc2c:	3804d4ba 	srli	r2,r7,18
 800fc30:	11001f04 	addi	r4,r2,124
 800fc34:	210b883a 	add	r5,r4,r4
 800fc38:	003f5c06 	br	800f9ac <__alt_data_end+0xf800f9ac>
 800fc3c:	01403f04 	movi	r5,252
 800fc40:	01001f84 	movi	r4,126
 800fc44:	003f5906 	br	800f9ac <__alt_data_end+0xf800f9ac>
 800fc48:	98800117 	ldw	r2,4(r19)
 800fc4c:	003fa906 	br	800faf4 <__alt_data_end+0xf800faf4>
 800fc50:	6007883a 	mov	r3,r12
 800fc54:	003ea206 	br	800f6e0 <__alt_data_end+0xf800f6e0>

0800fc58 <memcpy>:
 800fc58:	deffff04 	addi	sp,sp,-4
 800fc5c:	dc000015 	stw	r16,0(sp)
 800fc60:	00c003c4 	movi	r3,15
 800fc64:	2005883a 	mov	r2,r4
 800fc68:	1980432e 	bgeu	r3,r6,800fd78 <memcpy+0x120>
 800fc6c:	2146b03a 	or	r3,r4,r5
 800fc70:	18c000cc 	andi	r3,r3,3
 800fc74:	1800421e 	bne	r3,zero,800fd80 <memcpy+0x128>
 800fc78:	343ffc04 	addi	r16,r6,-16
 800fc7c:	8020d13a 	srli	r16,r16,4
 800fc80:	28c00104 	addi	r3,r5,4
 800fc84:	23400104 	addi	r13,r4,4
 800fc88:	801e913a 	slli	r15,r16,4
 800fc8c:	2b000204 	addi	r12,r5,8
 800fc90:	22c00204 	addi	r11,r4,8
 800fc94:	7bc00504 	addi	r15,r15,20
 800fc98:	2a800304 	addi	r10,r5,12
 800fc9c:	22400304 	addi	r9,r4,12
 800fca0:	2bdf883a 	add	r15,r5,r15
 800fca4:	2811883a 	mov	r8,r5
 800fca8:	200f883a 	mov	r7,r4
 800fcac:	41000017 	ldw	r4,0(r8)
 800fcb0:	39c00404 	addi	r7,r7,16
 800fcb4:	18c00404 	addi	r3,r3,16
 800fcb8:	393ffc15 	stw	r4,-16(r7)
 800fcbc:	1bbffc17 	ldw	r14,-16(r3)
 800fcc0:	6b400404 	addi	r13,r13,16
 800fcc4:	5ac00404 	addi	r11,r11,16
 800fcc8:	6bbffc15 	stw	r14,-16(r13)
 800fccc:	63800017 	ldw	r14,0(r12)
 800fcd0:	4a400404 	addi	r9,r9,16
 800fcd4:	42000404 	addi	r8,r8,16
 800fcd8:	5bbffc15 	stw	r14,-16(r11)
 800fcdc:	53800017 	ldw	r14,0(r10)
 800fce0:	63000404 	addi	r12,r12,16
 800fce4:	52800404 	addi	r10,r10,16
 800fce8:	4bbffc15 	stw	r14,-16(r9)
 800fcec:	1bffef1e 	bne	r3,r15,800fcac <__alt_data_end+0xf800fcac>
 800fcf0:	81c00044 	addi	r7,r16,1
 800fcf4:	380e913a 	slli	r7,r7,4
 800fcf8:	310003cc 	andi	r4,r6,15
 800fcfc:	02c000c4 	movi	r11,3
 800fd00:	11c7883a 	add	r3,r2,r7
 800fd04:	29cb883a 	add	r5,r5,r7
 800fd08:	59001f2e 	bgeu	r11,r4,800fd88 <memcpy+0x130>
 800fd0c:	1813883a 	mov	r9,r3
 800fd10:	2811883a 	mov	r8,r5
 800fd14:	200f883a 	mov	r7,r4
 800fd18:	42800017 	ldw	r10,0(r8)
 800fd1c:	4a400104 	addi	r9,r9,4
 800fd20:	39ffff04 	addi	r7,r7,-4
 800fd24:	4abfff15 	stw	r10,-4(r9)
 800fd28:	42000104 	addi	r8,r8,4
 800fd2c:	59fffa36 	bltu	r11,r7,800fd18 <__alt_data_end+0xf800fd18>
 800fd30:	213fff04 	addi	r4,r4,-4
 800fd34:	2008d0ba 	srli	r4,r4,2
 800fd38:	318000cc 	andi	r6,r6,3
 800fd3c:	21000044 	addi	r4,r4,1
 800fd40:	2109883a 	add	r4,r4,r4
 800fd44:	2109883a 	add	r4,r4,r4
 800fd48:	1907883a 	add	r3,r3,r4
 800fd4c:	290b883a 	add	r5,r5,r4
 800fd50:	30000626 	beq	r6,zero,800fd6c <memcpy+0x114>
 800fd54:	198d883a 	add	r6,r3,r6
 800fd58:	29c00003 	ldbu	r7,0(r5)
 800fd5c:	18c00044 	addi	r3,r3,1
 800fd60:	29400044 	addi	r5,r5,1
 800fd64:	19ffffc5 	stb	r7,-1(r3)
 800fd68:	19bffb1e 	bne	r3,r6,800fd58 <__alt_data_end+0xf800fd58>
 800fd6c:	dc000017 	ldw	r16,0(sp)
 800fd70:	dec00104 	addi	sp,sp,4
 800fd74:	f800283a 	ret
 800fd78:	2007883a 	mov	r3,r4
 800fd7c:	003ff406 	br	800fd50 <__alt_data_end+0xf800fd50>
 800fd80:	2007883a 	mov	r3,r4
 800fd84:	003ff306 	br	800fd54 <__alt_data_end+0xf800fd54>
 800fd88:	200d883a 	mov	r6,r4
 800fd8c:	003ff006 	br	800fd50 <__alt_data_end+0xf800fd50>

0800fd90 <memset>:
 800fd90:	20c000cc 	andi	r3,r4,3
 800fd94:	2005883a 	mov	r2,r4
 800fd98:	18004326 	beq	r3,zero,800fea8 <memset+0x118>
 800fd9c:	31ffffc4 	addi	r7,r6,-1
 800fda0:	30004026 	beq	r6,zero,800fea4 <memset+0x114>
 800fda4:	2813883a 	mov	r9,r5
 800fda8:	200d883a 	mov	r6,r4
 800fdac:	2007883a 	mov	r3,r4
 800fdb0:	00000406 	br	800fdc4 <memset+0x34>
 800fdb4:	3a3fffc4 	addi	r8,r7,-1
 800fdb8:	31800044 	addi	r6,r6,1
 800fdbc:	38003926 	beq	r7,zero,800fea4 <memset+0x114>
 800fdc0:	400f883a 	mov	r7,r8
 800fdc4:	18c00044 	addi	r3,r3,1
 800fdc8:	32400005 	stb	r9,0(r6)
 800fdcc:	1a0000cc 	andi	r8,r3,3
 800fdd0:	403ff81e 	bne	r8,zero,800fdb4 <__alt_data_end+0xf800fdb4>
 800fdd4:	010000c4 	movi	r4,3
 800fdd8:	21c02d2e 	bgeu	r4,r7,800fe90 <memset+0x100>
 800fddc:	29803fcc 	andi	r6,r5,255
 800fde0:	3008923a 	slli	r4,r6,8
 800fde4:	218cb03a 	or	r6,r4,r6
 800fde8:	3008943a 	slli	r4,r6,16
 800fdec:	218cb03a 	or	r6,r4,r6
 800fdf0:	010003c4 	movi	r4,15
 800fdf4:	21c0182e 	bgeu	r4,r7,800fe58 <memset+0xc8>
 800fdf8:	3b3ffc04 	addi	r12,r7,-16
 800fdfc:	6018d13a 	srli	r12,r12,4
 800fe00:	1a000104 	addi	r8,r3,4
 800fe04:	1ac00204 	addi	r11,r3,8
 800fe08:	6008913a 	slli	r4,r12,4
 800fe0c:	1a800304 	addi	r10,r3,12
 800fe10:	1813883a 	mov	r9,r3
 800fe14:	21000504 	addi	r4,r4,20
 800fe18:	1909883a 	add	r4,r3,r4
 800fe1c:	49800015 	stw	r6,0(r9)
 800fe20:	41800015 	stw	r6,0(r8)
 800fe24:	59800015 	stw	r6,0(r11)
 800fe28:	51800015 	stw	r6,0(r10)
 800fe2c:	42000404 	addi	r8,r8,16
 800fe30:	4a400404 	addi	r9,r9,16
 800fe34:	5ac00404 	addi	r11,r11,16
 800fe38:	52800404 	addi	r10,r10,16
 800fe3c:	413ff71e 	bne	r8,r4,800fe1c <__alt_data_end+0xf800fe1c>
 800fe40:	63000044 	addi	r12,r12,1
 800fe44:	6018913a 	slli	r12,r12,4
 800fe48:	39c003cc 	andi	r7,r7,15
 800fe4c:	010000c4 	movi	r4,3
 800fe50:	1b07883a 	add	r3,r3,r12
 800fe54:	21c00e2e 	bgeu	r4,r7,800fe90 <memset+0x100>
 800fe58:	1813883a 	mov	r9,r3
 800fe5c:	3811883a 	mov	r8,r7
 800fe60:	010000c4 	movi	r4,3
 800fe64:	49800015 	stw	r6,0(r9)
 800fe68:	423fff04 	addi	r8,r8,-4
 800fe6c:	4a400104 	addi	r9,r9,4
 800fe70:	223ffc36 	bltu	r4,r8,800fe64 <__alt_data_end+0xf800fe64>
 800fe74:	393fff04 	addi	r4,r7,-4
 800fe78:	2008d0ba 	srli	r4,r4,2
 800fe7c:	39c000cc 	andi	r7,r7,3
 800fe80:	21000044 	addi	r4,r4,1
 800fe84:	2109883a 	add	r4,r4,r4
 800fe88:	2109883a 	add	r4,r4,r4
 800fe8c:	1907883a 	add	r3,r3,r4
 800fe90:	38000426 	beq	r7,zero,800fea4 <memset+0x114>
 800fe94:	19cf883a 	add	r7,r3,r7
 800fe98:	19400005 	stb	r5,0(r3)
 800fe9c:	18c00044 	addi	r3,r3,1
 800fea0:	19fffd1e 	bne	r3,r7,800fe98 <__alt_data_end+0xf800fe98>
 800fea4:	f800283a 	ret
 800fea8:	2007883a 	mov	r3,r4
 800feac:	300f883a 	mov	r7,r6
 800feb0:	003fc806 	br	800fdd4 <__alt_data_end+0xf800fdd4>

0800feb4 <_printf_r>:
 800feb4:	defffd04 	addi	sp,sp,-12
 800feb8:	dfc00015 	stw	ra,0(sp)
 800febc:	d9800115 	stw	r6,4(sp)
 800fec0:	d9c00215 	stw	r7,8(sp)
 800fec4:	280d883a 	mov	r6,r5
 800fec8:	21400217 	ldw	r5,8(r4)
 800fecc:	d9c00104 	addi	r7,sp,4
 800fed0:	80123640 	call	8012364 <___vfprintf_internal_r>
 800fed4:	dfc00017 	ldw	ra,0(sp)
 800fed8:	dec00304 	addi	sp,sp,12
 800fedc:	f800283a 	ret

0800fee0 <printf>:
 800fee0:	defffc04 	addi	sp,sp,-16
 800fee4:	dfc00015 	stw	ra,0(sp)
 800fee8:	d9400115 	stw	r5,4(sp)
 800feec:	d9800215 	stw	r6,8(sp)
 800fef0:	d9c00315 	stw	r7,12(sp)
 800fef4:	008205f4 	movhi	r2,2071
 800fef8:	10a34604 	addi	r2,r2,-29416
 800fefc:	10800017 	ldw	r2,0(r2)
 800ff00:	200b883a 	mov	r5,r4
 800ff04:	d9800104 	addi	r6,sp,4
 800ff08:	11000217 	ldw	r4,8(r2)
 800ff0c:	80142b40 	call	80142b4 <__vfprintf_internal>
 800ff10:	dfc00017 	ldw	ra,0(sp)
 800ff14:	dec00404 	addi	sp,sp,16
 800ff18:	f800283a 	ret

0800ff1c <_puts_r>:
 800ff1c:	defff604 	addi	sp,sp,-40
 800ff20:	dc000715 	stw	r16,28(sp)
 800ff24:	2021883a 	mov	r16,r4
 800ff28:	2809883a 	mov	r4,r5
 800ff2c:	dc400815 	stw	r17,32(sp)
 800ff30:	dfc00915 	stw	ra,36(sp)
 800ff34:	2823883a 	mov	r17,r5
 800ff38:	801033c0 	call	801033c <strlen>
 800ff3c:	81400217 	ldw	r5,8(r16)
 800ff40:	11000044 	addi	r4,r2,1
 800ff44:	d8800115 	stw	r2,4(sp)
 800ff48:	008205b4 	movhi	r2,2070
 800ff4c:	2980030b 	ldhu	r6,12(r5)
 800ff50:	1097b904 	addi	r2,r2,24292
 800ff54:	d8800215 	stw	r2,8(sp)
 800ff58:	00800044 	movi	r2,1
 800ff5c:	d8800315 	stw	r2,12(sp)
 800ff60:	00800084 	movi	r2,2
 800ff64:	d8800515 	stw	r2,20(sp)
 800ff68:	dc400015 	stw	r17,0(sp)
 800ff6c:	d9000615 	stw	r4,24(sp)
 800ff70:	dec00415 	stw	sp,16(sp)
 800ff74:	3088000c 	andi	r2,r6,8192
 800ff78:	1000061e 	bne	r2,zero,800ff94 <_puts_r+0x78>
 800ff7c:	29001917 	ldw	r4,100(r5)
 800ff80:	00b7ffc4 	movi	r2,-8193
 800ff84:	31880014 	ori	r6,r6,8192
 800ff88:	2084703a 	and	r2,r4,r2
 800ff8c:	2980030d 	sth	r6,12(r5)
 800ff90:	28801915 	stw	r2,100(r5)
 800ff94:	8009883a 	mov	r4,r16
 800ff98:	d9800404 	addi	r6,sp,16
 800ff9c:	80168580 	call	8016858 <__sfvwrite_r>
 800ffa0:	1000061e 	bne	r2,zero,800ffbc <_puts_r+0xa0>
 800ffa4:	00800284 	movi	r2,10
 800ffa8:	dfc00917 	ldw	ra,36(sp)
 800ffac:	dc400817 	ldw	r17,32(sp)
 800ffb0:	dc000717 	ldw	r16,28(sp)
 800ffb4:	dec00a04 	addi	sp,sp,40
 800ffb8:	f800283a 	ret
 800ffbc:	00bfffc4 	movi	r2,-1
 800ffc0:	003ff906 	br	800ffa8 <__alt_data_end+0xf800ffa8>

0800ffc4 <puts>:
 800ffc4:	008205f4 	movhi	r2,2071
 800ffc8:	10a34604 	addi	r2,r2,-29416
 800ffcc:	200b883a 	mov	r5,r4
 800ffd0:	11000017 	ldw	r4,0(r2)
 800ffd4:	800ff1c1 	jmpi	800ff1c <_puts_r>

0800ffd8 <_sbrk_r>:
 800ffd8:	defffd04 	addi	sp,sp,-12
 800ffdc:	dc000015 	stw	r16,0(sp)
 800ffe0:	040205f4 	movhi	r16,2071
 800ffe4:	dc400115 	stw	r17,4(sp)
 800ffe8:	842e6904 	addi	r16,r16,-18012
 800ffec:	2023883a 	mov	r17,r4
 800fff0:	2809883a 	mov	r4,r5
 800fff4:	dfc00215 	stw	ra,8(sp)
 800fff8:	80000015 	stw	zero,0(r16)
 800fffc:	801d0a80 	call	801d0a8 <sbrk>
 8010000:	00ffffc4 	movi	r3,-1
 8010004:	10c00526 	beq	r2,r3,801001c <_sbrk_r+0x44>
 8010008:	dfc00217 	ldw	ra,8(sp)
 801000c:	dc400117 	ldw	r17,4(sp)
 8010010:	dc000017 	ldw	r16,0(sp)
 8010014:	dec00304 	addi	sp,sp,12
 8010018:	f800283a 	ret
 801001c:	80c00017 	ldw	r3,0(r16)
 8010020:	183ff926 	beq	r3,zero,8010008 <__alt_data_end+0xf8010008>
 8010024:	88c00015 	stw	r3,0(r17)
 8010028:	003ff706 	br	8010008 <__alt_data_end+0xf8010008>

0801002c <_snprintf_r>:
 801002c:	3005883a 	mov	r2,r6
 8010030:	30003016 	blt	r6,zero,80100f4 <_snprintf_r+0xc8>
 8010034:	deffe404 	addi	sp,sp,-112
 8010038:	00c08204 	movi	r3,520
 801003c:	dc001a15 	stw	r16,104(sp)
 8010040:	dfc01b15 	stw	ra,108(sp)
 8010044:	d8c0030d 	sth	r3,12(sp)
 8010048:	d9400015 	stw	r5,0(sp)
 801004c:	d9400415 	stw	r5,16(sp)
 8010050:	380d883a 	mov	r6,r7
 8010054:	2021883a 	mov	r16,r4
 8010058:	10001026 	beq	r2,zero,801009c <_snprintf_r+0x70>
 801005c:	10bfffc4 	addi	r2,r2,-1
 8010060:	d8800215 	stw	r2,8(sp)
 8010064:	d8800515 	stw	r2,20(sp)
 8010068:	d80b883a 	mov	r5,sp
 801006c:	00bfffc4 	movi	r2,-1
 8010070:	d9c01c04 	addi	r7,sp,112
 8010074:	d880038d 	sth	r2,14(sp)
 8010078:	80103d40 	call	80103d4 <___svfprintf_internal_r>
 801007c:	00ffffc4 	movi	r3,-1
 8010080:	10c01916 	blt	r2,r3,80100e8 <_snprintf_r+0xbc>
 8010084:	d8c00017 	ldw	r3,0(sp)
 8010088:	18000005 	stb	zero,0(r3)
 801008c:	dfc01b17 	ldw	ra,108(sp)
 8010090:	dc001a17 	ldw	r16,104(sp)
 8010094:	dec01c04 	addi	sp,sp,112
 8010098:	f800283a 	ret
 801009c:	00bfffc4 	movi	r2,-1
 80100a0:	d80b883a 	mov	r5,sp
 80100a4:	d9c01c04 	addi	r7,sp,112
 80100a8:	d8000215 	stw	zero,8(sp)
 80100ac:	d8000515 	stw	zero,20(sp)
 80100b0:	d880038d 	sth	r2,14(sp)
 80100b4:	80103d40 	call	80103d4 <___svfprintf_internal_r>
 80100b8:	00ffffc4 	movi	r3,-1
 80100bc:	10c00416 	blt	r2,r3,80100d0 <_snprintf_r+0xa4>
 80100c0:	dfc01b17 	ldw	ra,108(sp)
 80100c4:	dc001a17 	ldw	r16,104(sp)
 80100c8:	dec01c04 	addi	sp,sp,112
 80100cc:	f800283a 	ret
 80100d0:	00c022c4 	movi	r3,139
 80100d4:	80c00015 	stw	r3,0(r16)
 80100d8:	dfc01b17 	ldw	ra,108(sp)
 80100dc:	dc001a17 	ldw	r16,104(sp)
 80100e0:	dec01c04 	addi	sp,sp,112
 80100e4:	f800283a 	ret
 80100e8:	00c022c4 	movi	r3,139
 80100ec:	80c00015 	stw	r3,0(r16)
 80100f0:	003fe406 	br	8010084 <__alt_data_end+0xf8010084>
 80100f4:	008022c4 	movi	r2,139
 80100f8:	20800015 	stw	r2,0(r4)
 80100fc:	00bfffc4 	movi	r2,-1
 8010100:	f800283a 	ret

08010104 <snprintf>:
 8010104:	deffe304 	addi	sp,sp,-116
 8010108:	dfc01b15 	stw	ra,108(sp)
 801010c:	dc001a15 	stw	r16,104(sp)
 8010110:	d9c01c15 	stw	r7,112(sp)
 8010114:	008205f4 	movhi	r2,2071
 8010118:	10a34604 	addi	r2,r2,-29416
 801011c:	14000017 	ldw	r16,0(r2)
 8010120:	28002d16 	blt	r5,zero,80101d8 <snprintf+0xd4>
 8010124:	00c08204 	movi	r3,520
 8010128:	d8c0030d 	sth	r3,12(sp)
 801012c:	d9000015 	stw	r4,0(sp)
 8010130:	d9000415 	stw	r4,16(sp)
 8010134:	28001126 	beq	r5,zero,801017c <snprintf+0x78>
 8010138:	28bfffc4 	addi	r2,r5,-1
 801013c:	d8800215 	stw	r2,8(sp)
 8010140:	d8800515 	stw	r2,20(sp)
 8010144:	8009883a 	mov	r4,r16
 8010148:	00bfffc4 	movi	r2,-1
 801014c:	d80b883a 	mov	r5,sp
 8010150:	d9c01c04 	addi	r7,sp,112
 8010154:	d880038d 	sth	r2,14(sp)
 8010158:	80103d40 	call	80103d4 <___svfprintf_internal_r>
 801015c:	00ffffc4 	movi	r3,-1
 8010160:	10c01a16 	blt	r2,r3,80101cc <snprintf+0xc8>
 8010164:	d8c00017 	ldw	r3,0(sp)
 8010168:	18000005 	stb	zero,0(r3)
 801016c:	dfc01b17 	ldw	ra,108(sp)
 8010170:	dc001a17 	ldw	r16,104(sp)
 8010174:	dec01d04 	addi	sp,sp,116
 8010178:	f800283a 	ret
 801017c:	00bfffc4 	movi	r2,-1
 8010180:	8009883a 	mov	r4,r16
 8010184:	d80b883a 	mov	r5,sp
 8010188:	d9c01c04 	addi	r7,sp,112
 801018c:	d8000215 	stw	zero,8(sp)
 8010190:	d8000515 	stw	zero,20(sp)
 8010194:	d880038d 	sth	r2,14(sp)
 8010198:	80103d40 	call	80103d4 <___svfprintf_internal_r>
 801019c:	00ffffc4 	movi	r3,-1
 80101a0:	10c00416 	blt	r2,r3,80101b4 <snprintf+0xb0>
 80101a4:	dfc01b17 	ldw	ra,108(sp)
 80101a8:	dc001a17 	ldw	r16,104(sp)
 80101ac:	dec01d04 	addi	sp,sp,116
 80101b0:	f800283a 	ret
 80101b4:	00c022c4 	movi	r3,139
 80101b8:	80c00015 	stw	r3,0(r16)
 80101bc:	dfc01b17 	ldw	ra,108(sp)
 80101c0:	dc001a17 	ldw	r16,104(sp)
 80101c4:	dec01d04 	addi	sp,sp,116
 80101c8:	f800283a 	ret
 80101cc:	00c022c4 	movi	r3,139
 80101d0:	80c00015 	stw	r3,0(r16)
 80101d4:	003fe306 	br	8010164 <__alt_data_end+0xf8010164>
 80101d8:	008022c4 	movi	r2,139
 80101dc:	80800015 	stw	r2,0(r16)
 80101e0:	00bfffc4 	movi	r2,-1
 80101e4:	003fef06 	br	80101a4 <__alt_data_end+0xf80101a4>

080101e8 <_sprintf_r>:
 80101e8:	deffe404 	addi	sp,sp,-112
 80101ec:	2807883a 	mov	r3,r5
 80101f0:	dfc01a15 	stw	ra,104(sp)
 80101f4:	d9c01b15 	stw	r7,108(sp)
 80101f8:	00a00034 	movhi	r2,32768
 80101fc:	10bfffc4 	addi	r2,r2,-1
 8010200:	02008204 	movi	r8,520
 8010204:	d8800215 	stw	r2,8(sp)
 8010208:	d8800515 	stw	r2,20(sp)
 801020c:	d80b883a 	mov	r5,sp
 8010210:	d9c01b04 	addi	r7,sp,108
 8010214:	00bfffc4 	movi	r2,-1
 8010218:	d8c00015 	stw	r3,0(sp)
 801021c:	d8c00415 	stw	r3,16(sp)
 8010220:	da00030d 	sth	r8,12(sp)
 8010224:	d880038d 	sth	r2,14(sp)
 8010228:	80103d40 	call	80103d4 <___svfprintf_internal_r>
 801022c:	d8c00017 	ldw	r3,0(sp)
 8010230:	18000005 	stb	zero,0(r3)
 8010234:	dfc01a17 	ldw	ra,104(sp)
 8010238:	dec01c04 	addi	sp,sp,112
 801023c:	f800283a 	ret

08010240 <sprintf>:
 8010240:	deffe304 	addi	sp,sp,-116
 8010244:	2007883a 	mov	r3,r4
 8010248:	dfc01a15 	stw	ra,104(sp)
 801024c:	d9801b15 	stw	r6,108(sp)
 8010250:	d9c01c15 	stw	r7,112(sp)
 8010254:	010205f4 	movhi	r4,2071
 8010258:	21234604 	addi	r4,r4,-29416
 801025c:	21000017 	ldw	r4,0(r4)
 8010260:	00a00034 	movhi	r2,32768
 8010264:	10bfffc4 	addi	r2,r2,-1
 8010268:	280d883a 	mov	r6,r5
 801026c:	02008204 	movi	r8,520
 8010270:	d8800215 	stw	r2,8(sp)
 8010274:	d8800515 	stw	r2,20(sp)
 8010278:	d80b883a 	mov	r5,sp
 801027c:	d9c01b04 	addi	r7,sp,108
 8010280:	00bfffc4 	movi	r2,-1
 8010284:	d8c00015 	stw	r3,0(sp)
 8010288:	d8c00415 	stw	r3,16(sp)
 801028c:	da00030d 	sth	r8,12(sp)
 8010290:	d880038d 	sth	r2,14(sp)
 8010294:	80103d40 	call	80103d4 <___svfprintf_internal_r>
 8010298:	d8c00017 	ldw	r3,0(sp)
 801029c:	18000005 	stb	zero,0(r3)
 80102a0:	dfc01a17 	ldw	ra,104(sp)
 80102a4:	dec01d04 	addi	sp,sp,116
 80102a8:	f800283a 	ret

080102ac <strcpy>:
 80102ac:	2906b03a 	or	r3,r5,r4
 80102b0:	18c000cc 	andi	r3,r3,3
 80102b4:	2005883a 	mov	r2,r4
 80102b8:	1800161e 	bne	r3,zero,8010314 <strcpy+0x68>
 80102bc:	29c00017 	ldw	r7,0(r5)
 80102c0:	02ffbff4 	movhi	r11,65279
 80102c4:	5affbfc4 	addi	r11,r11,-257
 80102c8:	02a02074 	movhi	r10,32897
 80102cc:	01c8303a 	nor	r4,zero,r7
 80102d0:	3ac7883a 	add	r3,r7,r11
 80102d4:	52a02004 	addi	r10,r10,-32640
 80102d8:	20c6703a 	and	r3,r4,r3
 80102dc:	1a86703a 	and	r3,r3,r10
 80102e0:	18000c1e 	bne	r3,zero,8010314 <strcpy+0x68>
 80102e4:	1011883a 	mov	r8,r2
 80102e8:	41c00015 	stw	r7,0(r8)
 80102ec:	29400104 	addi	r5,r5,4
 80102f0:	29c00017 	ldw	r7,0(r5)
 80102f4:	41800104 	addi	r6,r8,4
 80102f8:	3011883a 	mov	r8,r6
 80102fc:	01d2303a 	nor	r9,zero,r7
 8010300:	3ac7883a 	add	r3,r7,r11
 8010304:	48c6703a 	and	r3,r9,r3
 8010308:	1a86703a 	and	r3,r3,r10
 801030c:	183ff626 	beq	r3,zero,80102e8 <__alt_data_end+0xf80102e8>
 8010310:	00000106 	br	8010318 <strcpy+0x6c>
 8010314:	100d883a 	mov	r6,r2
 8010318:	28c00003 	ldbu	r3,0(r5)
 801031c:	31800044 	addi	r6,r6,1
 8010320:	29400044 	addi	r5,r5,1
 8010324:	30ffffc5 	stb	r3,-1(r6)
 8010328:	18c03fcc 	andi	r3,r3,255
 801032c:	18c0201c 	xori	r3,r3,128
 8010330:	18ffe004 	addi	r3,r3,-128
 8010334:	183ff81e 	bne	r3,zero,8010318 <__alt_data_end+0xf8010318>
 8010338:	f800283a 	ret

0801033c <strlen>:
 801033c:	208000cc 	andi	r2,r4,3
 8010340:	10002026 	beq	r2,zero,80103c4 <strlen+0x88>
 8010344:	20800007 	ldb	r2,0(r4)
 8010348:	10002026 	beq	r2,zero,80103cc <strlen+0x90>
 801034c:	2005883a 	mov	r2,r4
 8010350:	00000206 	br	801035c <strlen+0x20>
 8010354:	10c00007 	ldb	r3,0(r2)
 8010358:	18001826 	beq	r3,zero,80103bc <strlen+0x80>
 801035c:	10800044 	addi	r2,r2,1
 8010360:	10c000cc 	andi	r3,r2,3
 8010364:	183ffb1e 	bne	r3,zero,8010354 <__alt_data_end+0xf8010354>
 8010368:	10c00017 	ldw	r3,0(r2)
 801036c:	01ffbff4 	movhi	r7,65279
 8010370:	39ffbfc4 	addi	r7,r7,-257
 8010374:	00ca303a 	nor	r5,zero,r3
 8010378:	01a02074 	movhi	r6,32897
 801037c:	19c7883a 	add	r3,r3,r7
 8010380:	31a02004 	addi	r6,r6,-32640
 8010384:	1946703a 	and	r3,r3,r5
 8010388:	1986703a 	and	r3,r3,r6
 801038c:	1800091e 	bne	r3,zero,80103b4 <strlen+0x78>
 8010390:	10800104 	addi	r2,r2,4
 8010394:	10c00017 	ldw	r3,0(r2)
 8010398:	19cb883a 	add	r5,r3,r7
 801039c:	00c6303a 	nor	r3,zero,r3
 80103a0:	28c6703a 	and	r3,r5,r3
 80103a4:	1986703a 	and	r3,r3,r6
 80103a8:	183ff926 	beq	r3,zero,8010390 <__alt_data_end+0xf8010390>
 80103ac:	00000106 	br	80103b4 <strlen+0x78>
 80103b0:	10800044 	addi	r2,r2,1
 80103b4:	10c00007 	ldb	r3,0(r2)
 80103b8:	183ffd1e 	bne	r3,zero,80103b0 <__alt_data_end+0xf80103b0>
 80103bc:	1105c83a 	sub	r2,r2,r4
 80103c0:	f800283a 	ret
 80103c4:	2005883a 	mov	r2,r4
 80103c8:	003fe706 	br	8010368 <__alt_data_end+0xf8010368>
 80103cc:	0005883a 	mov	r2,zero
 80103d0:	f800283a 	ret

080103d4 <___svfprintf_internal_r>:
 80103d4:	deffb504 	addi	sp,sp,-300
 80103d8:	dfc04a15 	stw	ra,296(sp)
 80103dc:	ddc04815 	stw	r23,288(sp)
 80103e0:	d9002f15 	stw	r4,188(sp)
 80103e4:	282f883a 	mov	r23,r5
 80103e8:	d9802915 	stw	r6,164(sp)
 80103ec:	d9c02d15 	stw	r7,180(sp)
 80103f0:	df004915 	stw	fp,292(sp)
 80103f4:	dd804715 	stw	r22,284(sp)
 80103f8:	dd404615 	stw	r21,280(sp)
 80103fc:	dd004515 	stw	r20,276(sp)
 8010400:	dcc04415 	stw	r19,272(sp)
 8010404:	dc804315 	stw	r18,268(sp)
 8010408:	dc404215 	stw	r17,264(sp)
 801040c:	dc004115 	stw	r16,260(sp)
 8010410:	8016f4c0 	call	8016f4c <_localeconv_r>
 8010414:	10800017 	ldw	r2,0(r2)
 8010418:	1009883a 	mov	r4,r2
 801041c:	d8803515 	stw	r2,212(sp)
 8010420:	801033c0 	call	801033c <strlen>
 8010424:	d8803915 	stw	r2,228(sp)
 8010428:	b880030b 	ldhu	r2,12(r23)
 801042c:	1080200c 	andi	r2,r2,128
 8010430:	10000226 	beq	r2,zero,801043c <___svfprintf_internal_r+0x68>
 8010434:	b8800417 	ldw	r2,16(r23)
 8010438:	10065f26 	beq	r2,zero,8011db8 <___svfprintf_internal_r+0x19e4>
 801043c:	db001dc4 	addi	r12,sp,119
 8010440:	dd801e04 	addi	r22,sp,120
 8010444:	d8800404 	addi	r2,sp,16
 8010448:	050205b4 	movhi	r20,2070
 801044c:	b317c83a 	sub	r11,r22,r12
 8010450:	a517ca84 	addi	r20,r20,24362
 8010454:	db002815 	stw	r12,160(sp)
 8010458:	d8801e15 	stw	r2,120(sp)
 801045c:	d8002015 	stw	zero,128(sp)
 8010460:	d8001f15 	stw	zero,124(sp)
 8010464:	d8003315 	stw	zero,204(sp)
 8010468:	d8003715 	stw	zero,220(sp)
 801046c:	d8003815 	stw	zero,224(sp)
 8010470:	1011883a 	mov	r8,r2
 8010474:	d8003b15 	stw	zero,236(sp)
 8010478:	d8003a15 	stw	zero,232(sp)
 801047c:	d8003015 	stw	zero,192(sp)
 8010480:	dac03d15 	stw	r11,244(sp)
 8010484:	db002917 	ldw	r12,164(sp)
 8010488:	60800007 	ldb	r2,0(r12)
 801048c:	1000ab26 	beq	r2,zero,801073c <___svfprintf_internal_r+0x368>
 8010490:	00c00944 	movi	r3,37
 8010494:	10c0a926 	beq	r2,r3,801073c <___svfprintf_internal_r+0x368>
 8010498:	6021883a 	mov	r16,r12
 801049c:	00000106 	br	80104a4 <___svfprintf_internal_r+0xd0>
 80104a0:	10c08426 	beq	r2,r3,80106b4 <___svfprintf_internal_r+0x2e0>
 80104a4:	84000044 	addi	r16,r16,1
 80104a8:	80800007 	ldb	r2,0(r16)
 80104ac:	103ffc1e 	bne	r2,zero,80104a0 <__alt_data_end+0xf80104a0>
 80104b0:	dac02917 	ldw	r11,164(sp)
 80104b4:	82e3c83a 	sub	r17,r16,r11
 80104b8:	88000f26 	beq	r17,zero,80104f8 <___svfprintf_internal_r+0x124>
 80104bc:	d8c02017 	ldw	r3,128(sp)
 80104c0:	d8801f17 	ldw	r2,124(sp)
 80104c4:	dac02917 	ldw	r11,164(sp)
 80104c8:	1c47883a 	add	r3,r3,r17
 80104cc:	10800044 	addi	r2,r2,1
 80104d0:	d8c02015 	stw	r3,128(sp)
 80104d4:	42c00015 	stw	r11,0(r8)
 80104d8:	44400115 	stw	r17,4(r8)
 80104dc:	d8801f15 	stw	r2,124(sp)
 80104e0:	00c001c4 	movi	r3,7
 80104e4:	18807616 	blt	r3,r2,80106c0 <___svfprintf_internal_r+0x2ec>
 80104e8:	42000204 	addi	r8,r8,8
 80104ec:	db003017 	ldw	r12,192(sp)
 80104f0:	6459883a 	add	r12,r12,r17
 80104f4:	db003015 	stw	r12,192(sp)
 80104f8:	80800007 	ldb	r2,0(r16)
 80104fc:	10007726 	beq	r2,zero,80106dc <___svfprintf_internal_r+0x308>
 8010500:	80800044 	addi	r2,r16,1
 8010504:	84000047 	ldb	r16,1(r16)
 8010508:	d8002785 	stb	zero,158(sp)
 801050c:	000d883a 	mov	r6,zero
 8010510:	027fffc4 	movi	r9,-1
 8010514:	d8002e15 	stw	zero,184(sp)
 8010518:	0023883a 	mov	r17,zero
 801051c:	01001604 	movi	r4,88
 8010520:	01400244 	movi	r5,9
 8010524:	02800a84 	movi	r10,42
 8010528:	01c01b04 	movi	r7,108
 801052c:	10c00044 	addi	r3,r2,1
 8010530:	80bff804 	addi	r2,r16,-32
 8010534:	2082e636 	bltu	r4,r2,80110d0 <___svfprintf_internal_r+0xcfc>
 8010538:	100490ba 	slli	r2,r2,2
 801053c:	02c20074 	movhi	r11,2049
 8010540:	5ac15404 	addi	r11,r11,1360
 8010544:	12c5883a 	add	r2,r2,r11
 8010548:	10800017 	ldw	r2,0(r2)
 801054c:	1000683a 	jmp	r2
 8010550:	08010eb0 	cmpltui	zero,at,1082
 8010554:	080110d0 	cmplti	zero,at,1091
 8010558:	080110d0 	cmplti	zero,at,1091
 801055c:	08010ed0 	cmplti	zero,at,1083
 8010560:	080110d0 	cmplti	zero,at,1091
 8010564:	080110d0 	cmplti	zero,at,1091
 8010568:	080110d0 	cmplti	zero,at,1091
 801056c:	080110d0 	cmplti	zero,at,1091
 8010570:	080110d0 	cmplti	zero,at,1091
 8010574:	080110d0 	cmplti	zero,at,1091
 8010578:	08010ee0 	cmpeqi	zero,at,1083
 801057c:	08010f0c 	andi	zero,at,1084
 8010580:	080110d0 	cmplti	zero,at,1091
 8010584:	08010744 	addi	zero,at,1053
 8010588:	08010754 	ori	zero,at,1053
 801058c:	080110d0 	cmplti	zero,at,1091
 8010590:	08010794 	ori	zero,at,1054
 8010594:	08010d74 	orhi	zero,at,1077
 8010598:	08010d74 	orhi	zero,at,1077
 801059c:	08010d74 	orhi	zero,at,1077
 80105a0:	08010d74 	orhi	zero,at,1077
 80105a4:	08010d74 	orhi	zero,at,1077
 80105a8:	08010d74 	orhi	zero,at,1077
 80105ac:	08010d74 	orhi	zero,at,1077
 80105b0:	08010d74 	orhi	zero,at,1077
 80105b4:	08010d74 	orhi	zero,at,1077
 80105b8:	080110d0 	cmplti	zero,at,1091
 80105bc:	080110d0 	cmplti	zero,at,1091
 80105c0:	080110d0 	cmplti	zero,at,1091
 80105c4:	080110d0 	cmplti	zero,at,1091
 80105c8:	080110d0 	cmplti	zero,at,1091
 80105cc:	080110d0 	cmplti	zero,at,1091
 80105d0:	080110d0 	cmplti	zero,at,1091
 80105d4:	080110d0 	cmplti	zero,at,1091
 80105d8:	080110d0 	cmplti	zero,at,1091
 80105dc:	080110d0 	cmplti	zero,at,1091
 80105e0:	080107a4 	muli	zero,at,1054
 80105e4:	08010c24 	muli	zero,at,1072
 80105e8:	080110d0 	cmplti	zero,at,1091
 80105ec:	08010c24 	muli	zero,at,1072
 80105f0:	080110d0 	cmplti	zero,at,1091
 80105f4:	080110d0 	cmplti	zero,at,1091
 80105f8:	080110d0 	cmplti	zero,at,1091
 80105fc:	080110d0 	cmplti	zero,at,1091
 8010600:	08010cc8 	cmpgei	zero,at,1075
 8010604:	080110d0 	cmplti	zero,at,1091
 8010608:	080110d0 	cmplti	zero,at,1091
 801060c:	08011064 	muli	zero,at,1089
 8010610:	080110d0 	cmplti	zero,at,1091
 8010614:	080110d0 	cmplti	zero,at,1091
 8010618:	080110d0 	cmplti	zero,at,1091
 801061c:	080110d0 	cmplti	zero,at,1091
 8010620:	080110d0 	cmplti	zero,at,1091
 8010624:	08010cd8 	cmpnei	zero,at,1075
 8010628:	080110d0 	cmplti	zero,at,1091
 801062c:	080110d0 	cmplti	zero,at,1091
 8010630:	08010d18 	cmpnei	zero,at,1076
 8010634:	080110d0 	cmplti	zero,at,1091
 8010638:	080110d0 	cmplti	zero,at,1091
 801063c:	080110d0 	cmplti	zero,at,1091
 8010640:	080110d0 	cmplti	zero,at,1091
 8010644:	080110d0 	cmplti	zero,at,1091
 8010648:	080110d0 	cmplti	zero,at,1091
 801064c:	080110d0 	cmplti	zero,at,1091
 8010650:	080110d0 	cmplti	zero,at,1091
 8010654:	080110d0 	cmplti	zero,at,1091
 8010658:	080110d0 	cmplti	zero,at,1091
 801065c:	08010fbc 	xorhi	zero,at,1086
 8010660:	08010ffc 	xorhi	zero,at,1087
 8010664:	08010c24 	muli	zero,at,1072
 8010668:	08010c24 	muli	zero,at,1072
 801066c:	08010c24 	muli	zero,at,1072
 8010670:	08010f1c 	xori	zero,at,1084
 8010674:	08010ffc 	xorhi	zero,at,1087
 8010678:	080110d0 	cmplti	zero,at,1091
 801067c:	080110d0 	cmplti	zero,at,1091
 8010680:	08010f2c 	andhi	zero,at,1084
 8010684:	080110d0 	cmplti	zero,at,1091
 8010688:	08010f40 	call	8010f4 <__reset-0x77fef0c>
 801068c:	08011094 	ori	zero,at,1090
 8010690:	08010f74 	orhi	zero,at,1085
 8010694:	08010da8 	cmpgeui	zero,at,1078
 8010698:	080110d0 	cmplti	zero,at,1091
 801069c:	08010db8 	rdprs	zero,at,1078
 80106a0:	080110d0 	cmplti	zero,at,1091
 80106a4:	08010e30 	cmpltui	zero,at,1080
 80106a8:	080110d0 	cmplti	zero,at,1091
 80106ac:	080110d0 	cmplti	zero,at,1091
 80106b0:	08010e70 	cmpltui	zero,at,1081
 80106b4:	db002917 	ldw	r12,164(sp)
 80106b8:	8323c83a 	sub	r17,r16,r12
 80106bc:	003f7e06 	br	80104b8 <__alt_data_end+0xf80104b8>
 80106c0:	d9002f17 	ldw	r4,188(sp)
 80106c4:	b80b883a 	mov	r5,r23
 80106c8:	b00d883a 	mov	r6,r22
 80106cc:	8018ad80 	call	8018ad8 <__ssprint_r>
 80106d0:	1000081e 	bne	r2,zero,80106f4 <___svfprintf_internal_r+0x320>
 80106d4:	da000404 	addi	r8,sp,16
 80106d8:	003f8406 	br	80104ec <__alt_data_end+0xf80104ec>
 80106dc:	d8802017 	ldw	r2,128(sp)
 80106e0:	10000426 	beq	r2,zero,80106f4 <___svfprintf_internal_r+0x320>
 80106e4:	d9002f17 	ldw	r4,188(sp)
 80106e8:	b80b883a 	mov	r5,r23
 80106ec:	d9801e04 	addi	r6,sp,120
 80106f0:	8018ad80 	call	8018ad8 <__ssprint_r>
 80106f4:	b880030b 	ldhu	r2,12(r23)
 80106f8:	1080100c 	andi	r2,r2,64
 80106fc:	10000d1e 	bne	r2,zero,8010734 <___svfprintf_internal_r+0x360>
 8010700:	d8803017 	ldw	r2,192(sp)
 8010704:	dfc04a17 	ldw	ra,296(sp)
 8010708:	df004917 	ldw	fp,292(sp)
 801070c:	ddc04817 	ldw	r23,288(sp)
 8010710:	dd804717 	ldw	r22,284(sp)
 8010714:	dd404617 	ldw	r21,280(sp)
 8010718:	dd004517 	ldw	r20,276(sp)
 801071c:	dcc04417 	ldw	r19,272(sp)
 8010720:	dc804317 	ldw	r18,268(sp)
 8010724:	dc404217 	ldw	r17,264(sp)
 8010728:	dc004117 	ldw	r16,260(sp)
 801072c:	dec04b04 	addi	sp,sp,300
 8010730:	f800283a 	ret
 8010734:	00bfffc4 	movi	r2,-1
 8010738:	003ff206 	br	8010704 <__alt_data_end+0xf8010704>
 801073c:	dc002917 	ldw	r16,164(sp)
 8010740:	003f6d06 	br	80104f8 <__alt_data_end+0xf80104f8>
 8010744:	1805883a 	mov	r2,r3
 8010748:	8c400114 	ori	r17,r17,4
 801074c:	1c000007 	ldb	r16,0(r3)
 8010750:	003f7606 	br	801052c <__alt_data_end+0xf801052c>
 8010754:	1c000007 	ldb	r16,0(r3)
 8010758:	18800044 	addi	r2,r3,1
 801075c:	8286e726 	beq	r16,r10,80122fc <___svfprintf_internal_r+0x1f28>
 8010760:	82fff404 	addi	r11,r16,-48
 8010764:	1007883a 	mov	r3,r2
 8010768:	0013883a 	mov	r9,zero
 801076c:	2aff7036 	bltu	r5,r11,8010530 <__alt_data_end+0xf8010530>
 8010770:	1c000007 	ldb	r16,0(r3)
 8010774:	4a4002a4 	muli	r9,r9,10
 8010778:	18c00044 	addi	r3,r3,1
 801077c:	5a53883a 	add	r9,r11,r9
 8010780:	82fff404 	addi	r11,r16,-48
 8010784:	2afffa2e 	bgeu	r5,r11,8010770 <__alt_data_end+0xf8010770>
 8010788:	483f690e 	bge	r9,zero,8010530 <__alt_data_end+0xf8010530>
 801078c:	027fffc4 	movi	r9,-1
 8010790:	003f6706 	br	8010530 <__alt_data_end+0xf8010530>
 8010794:	8c402014 	ori	r17,r17,128
 8010798:	1805883a 	mov	r2,r3
 801079c:	1c000007 	ldb	r16,0(r3)
 80107a0:	003f6206 	br	801052c <__alt_data_end+0xf801052c>
 80107a4:	8c400414 	ori	r17,r17,16
 80107a8:	d8c02915 	stw	r3,164(sp)
 80107ac:	d9802785 	stb	r6,158(sp)
 80107b0:	8880080c 	andi	r2,r17,32
 80107b4:	d8c02d17 	ldw	r3,180(sp)
 80107b8:	10021526 	beq	r2,zero,8011010 <___svfprintf_internal_r+0xc3c>
 80107bc:	db002d17 	ldw	r12,180(sp)
 80107c0:	18800117 	ldw	r2,4(r3)
 80107c4:	1cc00017 	ldw	r19,0(r3)
 80107c8:	63000204 	addi	r12,r12,8
 80107cc:	db002d15 	stw	r12,180(sp)
 80107d0:	1039883a 	mov	fp,r2
 80107d4:	10021916 	blt	r2,zero,801103c <___svfprintf_internal_r+0xc68>
 80107d8:	dd402783 	ldbu	r21,158(sp)
 80107dc:	da403215 	stw	r9,200(sp)
 80107e0:	00800044 	movi	r2,1
 80107e4:	9f06b03a 	or	r3,r19,fp
 80107e8:	48000216 	blt	r9,zero,80107f4 <___svfprintf_internal_r+0x420>
 80107ec:	013fdfc4 	movi	r4,-129
 80107f0:	8922703a 	and	r17,r17,r4
 80107f4:	1802461e 	bne	r3,zero,8011110 <___svfprintf_internal_r+0xd3c>
 80107f8:	48035426 	beq	r9,zero,801154c <___svfprintf_internal_r+0x1178>
 80107fc:	10803fcc 	andi	r2,r2,255
 8010800:	00c00044 	movi	r3,1
 8010804:	10c26726 	beq	r2,r3,80111a4 <___svfprintf_internal_r+0xdd0>
 8010808:	00c00084 	movi	r3,2
 801080c:	10c2ea26 	beq	r2,r3,80113b8 <___svfprintf_internal_r+0xfe4>
 8010810:	b007883a 	mov	r3,r22
 8010814:	9808d0fa 	srli	r4,r19,3
 8010818:	e00a977a 	slli	r5,fp,29
 801081c:	e038d0fa 	srli	fp,fp,3
 8010820:	9cc001cc 	andi	r19,r19,7
 8010824:	98800c04 	addi	r2,r19,48
 8010828:	18ffffc4 	addi	r3,r3,-1
 801082c:	2926b03a 	or	r19,r5,r4
 8010830:	18800005 	stb	r2,0(r3)
 8010834:	9f08b03a 	or	r4,r19,fp
 8010838:	203ff61e 	bne	r4,zero,8010814 <__alt_data_end+0xf8010814>
 801083c:	8900004c 	andi	r4,r17,1
 8010840:	d8c03115 	stw	r3,196(sp)
 8010844:	2002ea26 	beq	r4,zero,80113f0 <___svfprintf_internal_r+0x101c>
 8010848:	10803fcc 	andi	r2,r2,255
 801084c:	1080201c 	xori	r2,r2,128
 8010850:	10bfe004 	addi	r2,r2,-128
 8010854:	01000c04 	movi	r4,48
 8010858:	11057526 	beq	r2,r4,8011e30 <___svfprintf_internal_r+0x1a5c>
 801085c:	dac03117 	ldw	r11,196(sp)
 8010860:	193fffc5 	stb	r4,-1(r3)
 8010864:	5affffc4 	addi	r11,r11,-1
 8010868:	dac03115 	stw	r11,196(sp)
 801086c:	b2e5c83a 	sub	r18,r22,r11
 8010870:	9005883a 	mov	r2,r18
 8010874:	9240010e 	bge	r18,r9,801087c <___svfprintf_internal_r+0x4a8>
 8010878:	4805883a 	mov	r2,r9
 801087c:	d8802a15 	stw	r2,168(sp)
 8010880:	d8003415 	stw	zero,208(sp)
 8010884:	a8803fcc 	andi	r2,r21,255
 8010888:	1080201c 	xori	r2,r2,128
 801088c:	10bfe004 	addi	r2,r2,-128
 8010890:	10000326 	beq	r2,zero,80108a0 <___svfprintf_internal_r+0x4cc>
 8010894:	d8c02a17 	ldw	r3,168(sp)
 8010898:	18c00044 	addi	r3,r3,1
 801089c:	d8c02a15 	stw	r3,168(sp)
 80108a0:	8ac0008c 	andi	r11,r17,2
 80108a4:	dac02b15 	stw	r11,172(sp)
 80108a8:	58000326 	beq	r11,zero,80108b8 <___svfprintf_internal_r+0x4e4>
 80108ac:	db002a17 	ldw	r12,168(sp)
 80108b0:	63000084 	addi	r12,r12,2
 80108b4:	db002a15 	stw	r12,168(sp)
 80108b8:	88c0210c 	andi	r3,r17,132
 80108bc:	d8c02c15 	stw	r3,176(sp)
 80108c0:	1802111e 	bne	r3,zero,8011108 <___svfprintf_internal_r+0xd34>
 80108c4:	dac02e17 	ldw	r11,184(sp)
 80108c8:	db002a17 	ldw	r12,168(sp)
 80108cc:	5b39c83a 	sub	fp,r11,r12
 80108d0:	07020d0e 	bge	zero,fp,8011108 <___svfprintf_internal_r+0xd34>
 80108d4:	02400404 	movi	r9,16
 80108d8:	d8c02017 	ldw	r3,128(sp)
 80108dc:	d8801f17 	ldw	r2,124(sp)
 80108e0:	4f058c0e 	bge	r9,fp,8011f14 <___svfprintf_internal_r+0x1b40>
 80108e4:	014205b4 	movhi	r5,2070
 80108e8:	e009883a 	mov	r4,fp
 80108ec:	2957ce84 	addi	r5,r5,24378
 80108f0:	dc003c15 	stw	r16,240(sp)
 80108f4:	9039883a 	mov	fp,r18
 80108f8:	d9403615 	stw	r5,216(sp)
 80108fc:	8825883a 	mov	r18,r17
 8010900:	482b883a 	mov	r21,r9
 8010904:	04c001c4 	movi	r19,7
 8010908:	dc002f17 	ldw	r16,188(sp)
 801090c:	2023883a 	mov	r17,r4
 8010910:	00000306 	br	8010920 <___svfprintf_internal_r+0x54c>
 8010914:	8c7ffc04 	addi	r17,r17,-16
 8010918:	42000204 	addi	r8,r8,8
 801091c:	ac40130e 	bge	r21,r17,801096c <___svfprintf_internal_r+0x598>
 8010920:	02c205b4 	movhi	r11,2070
 8010924:	18c00404 	addi	r3,r3,16
 8010928:	10800044 	addi	r2,r2,1
 801092c:	5ad7ce84 	addi	r11,r11,24378
 8010930:	42c00015 	stw	r11,0(r8)
 8010934:	45400115 	stw	r21,4(r8)
 8010938:	d8c02015 	stw	r3,128(sp)
 801093c:	d8801f15 	stw	r2,124(sp)
 8010940:	98bff40e 	bge	r19,r2,8010914 <__alt_data_end+0xf8010914>
 8010944:	8009883a 	mov	r4,r16
 8010948:	b80b883a 	mov	r5,r23
 801094c:	b00d883a 	mov	r6,r22
 8010950:	8018ad80 	call	8018ad8 <__ssprint_r>
 8010954:	103f671e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8010958:	8c7ffc04 	addi	r17,r17,-16
 801095c:	d8c02017 	ldw	r3,128(sp)
 8010960:	d8801f17 	ldw	r2,124(sp)
 8010964:	da000404 	addi	r8,sp,16
 8010968:	ac7fed16 	blt	r21,r17,8010920 <__alt_data_end+0xf8010920>
 801096c:	dc003c17 	ldw	r16,240(sp)
 8010970:	8809883a 	mov	r4,r17
 8010974:	9023883a 	mov	r17,r18
 8010978:	e025883a 	mov	r18,fp
 801097c:	2039883a 	mov	fp,r4
 8010980:	db003617 	ldw	r12,216(sp)
 8010984:	e0c7883a 	add	r3,fp,r3
 8010988:	10800044 	addi	r2,r2,1
 801098c:	43000015 	stw	r12,0(r8)
 8010990:	47000115 	stw	fp,4(r8)
 8010994:	d8c02015 	stw	r3,128(sp)
 8010998:	d8801f15 	stw	r2,124(sp)
 801099c:	010001c4 	movi	r4,7
 80109a0:	20834416 	blt	r4,r2,80116b4 <___svfprintf_internal_r+0x12e0>
 80109a4:	d8802787 	ldb	r2,158(sp)
 80109a8:	42000204 	addi	r8,r8,8
 80109ac:	10000c26 	beq	r2,zero,80109e0 <___svfprintf_internal_r+0x60c>
 80109b0:	d8801f17 	ldw	r2,124(sp)
 80109b4:	d9002784 	addi	r4,sp,158
 80109b8:	18c00044 	addi	r3,r3,1
 80109bc:	10800044 	addi	r2,r2,1
 80109c0:	41000015 	stw	r4,0(r8)
 80109c4:	01000044 	movi	r4,1
 80109c8:	41000115 	stw	r4,4(r8)
 80109cc:	d8c02015 	stw	r3,128(sp)
 80109d0:	d8801f15 	stw	r2,124(sp)
 80109d4:	010001c4 	movi	r4,7
 80109d8:	2082f616 	blt	r4,r2,80115b4 <___svfprintf_internal_r+0x11e0>
 80109dc:	42000204 	addi	r8,r8,8
 80109e0:	dac02b17 	ldw	r11,172(sp)
 80109e4:	58000c26 	beq	r11,zero,8010a18 <___svfprintf_internal_r+0x644>
 80109e8:	d8801f17 	ldw	r2,124(sp)
 80109ec:	d9002704 	addi	r4,sp,156
 80109f0:	18c00084 	addi	r3,r3,2
 80109f4:	10800044 	addi	r2,r2,1
 80109f8:	41000015 	stw	r4,0(r8)
 80109fc:	01000084 	movi	r4,2
 8010a00:	41000115 	stw	r4,4(r8)
 8010a04:	d8c02015 	stw	r3,128(sp)
 8010a08:	d8801f15 	stw	r2,124(sp)
 8010a0c:	010001c4 	movi	r4,7
 8010a10:	2082e016 	blt	r4,r2,8011594 <___svfprintf_internal_r+0x11c0>
 8010a14:	42000204 	addi	r8,r8,8
 8010a18:	db002c17 	ldw	r12,176(sp)
 8010a1c:	00802004 	movi	r2,128
 8010a20:	60822f26 	beq	r12,r2,80112e0 <___svfprintf_internal_r+0xf0c>
 8010a24:	db003217 	ldw	r12,200(sp)
 8010a28:	64abc83a 	sub	r21,r12,r18
 8010a2c:	0540310e 	bge	zero,r21,8010af4 <___svfprintf_internal_r+0x720>
 8010a30:	07000404 	movi	fp,16
 8010a34:	d8801f17 	ldw	r2,124(sp)
 8010a38:	e544270e 	bge	fp,r21,8011ad8 <___svfprintf_internal_r+0x1704>
 8010a3c:	014205b4 	movhi	r5,2070
 8010a40:	a809883a 	mov	r4,r21
 8010a44:	2957ca84 	addi	r5,r5,24362
 8010a48:	dc002c15 	stw	r16,176(sp)
 8010a4c:	902b883a 	mov	r21,r18
 8010a50:	d9402b15 	stw	r5,172(sp)
 8010a54:	8825883a 	mov	r18,r17
 8010a58:	04c001c4 	movi	r19,7
 8010a5c:	dc002f17 	ldw	r16,188(sp)
 8010a60:	2023883a 	mov	r17,r4
 8010a64:	00000306 	br	8010a74 <___svfprintf_internal_r+0x6a0>
 8010a68:	8c7ffc04 	addi	r17,r17,-16
 8010a6c:	42000204 	addi	r8,r8,8
 8010a70:	e440110e 	bge	fp,r17,8010ab8 <___svfprintf_internal_r+0x6e4>
 8010a74:	18c00404 	addi	r3,r3,16
 8010a78:	10800044 	addi	r2,r2,1
 8010a7c:	45000015 	stw	r20,0(r8)
 8010a80:	47000115 	stw	fp,4(r8)
 8010a84:	d8c02015 	stw	r3,128(sp)
 8010a88:	d8801f15 	stw	r2,124(sp)
 8010a8c:	98bff60e 	bge	r19,r2,8010a68 <__alt_data_end+0xf8010a68>
 8010a90:	8009883a 	mov	r4,r16
 8010a94:	b80b883a 	mov	r5,r23
 8010a98:	b00d883a 	mov	r6,r22
 8010a9c:	8018ad80 	call	8018ad8 <__ssprint_r>
 8010aa0:	103f141e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8010aa4:	8c7ffc04 	addi	r17,r17,-16
 8010aa8:	d8c02017 	ldw	r3,128(sp)
 8010aac:	d8801f17 	ldw	r2,124(sp)
 8010ab0:	da000404 	addi	r8,sp,16
 8010ab4:	e47fef16 	blt	fp,r17,8010a74 <__alt_data_end+0xf8010a74>
 8010ab8:	dc002c17 	ldw	r16,176(sp)
 8010abc:	8809883a 	mov	r4,r17
 8010ac0:	9023883a 	mov	r17,r18
 8010ac4:	a825883a 	mov	r18,r21
 8010ac8:	202b883a 	mov	r21,r4
 8010acc:	dac02b17 	ldw	r11,172(sp)
 8010ad0:	1d47883a 	add	r3,r3,r21
 8010ad4:	10800044 	addi	r2,r2,1
 8010ad8:	42c00015 	stw	r11,0(r8)
 8010adc:	45400115 	stw	r21,4(r8)
 8010ae0:	d8c02015 	stw	r3,128(sp)
 8010ae4:	d8801f15 	stw	r2,124(sp)
 8010ae8:	010001c4 	movi	r4,7
 8010aec:	2082a116 	blt	r4,r2,8011574 <___svfprintf_internal_r+0x11a0>
 8010af0:	42000204 	addi	r8,r8,8
 8010af4:	8880400c 	andi	r2,r17,256
 8010af8:	1001b01e 	bne	r2,zero,80111bc <___svfprintf_internal_r+0xde8>
 8010afc:	d8801f17 	ldw	r2,124(sp)
 8010b00:	db003117 	ldw	r12,196(sp)
 8010b04:	1c87883a 	add	r3,r3,r18
 8010b08:	10800044 	addi	r2,r2,1
 8010b0c:	43000015 	stw	r12,0(r8)
 8010b10:	44800115 	stw	r18,4(r8)
 8010b14:	d8c02015 	stw	r3,128(sp)
 8010b18:	d8801f15 	stw	r2,124(sp)
 8010b1c:	010001c4 	movi	r4,7
 8010b20:	20828216 	blt	r4,r2,801152c <___svfprintf_internal_r+0x1158>
 8010b24:	42000204 	addi	r8,r8,8
 8010b28:	8c40010c 	andi	r17,r17,4
 8010b2c:	88003226 	beq	r17,zero,8010bf8 <___svfprintf_internal_r+0x824>
 8010b30:	db002e17 	ldw	r12,184(sp)
 8010b34:	dac02a17 	ldw	r11,168(sp)
 8010b38:	62e1c83a 	sub	r16,r12,r11
 8010b3c:	04002e0e 	bge	zero,r16,8010bf8 <___svfprintf_internal_r+0x824>
 8010b40:	04400404 	movi	r17,16
 8010b44:	d8801f17 	ldw	r2,124(sp)
 8010b48:	8c05330e 	bge	r17,r16,8012018 <___svfprintf_internal_r+0x1c44>
 8010b4c:	010205b4 	movhi	r4,2070
 8010b50:	2117ce84 	addi	r4,r4,24378
 8010b54:	d9003615 	stw	r4,216(sp)
 8010b58:	048001c4 	movi	r18,7
 8010b5c:	dcc02f17 	ldw	r19,188(sp)
 8010b60:	00000306 	br	8010b70 <___svfprintf_internal_r+0x79c>
 8010b64:	843ffc04 	addi	r16,r16,-16
 8010b68:	42000204 	addi	r8,r8,8
 8010b6c:	8c00130e 	bge	r17,r16,8010bbc <___svfprintf_internal_r+0x7e8>
 8010b70:	014205b4 	movhi	r5,2070
 8010b74:	18c00404 	addi	r3,r3,16
 8010b78:	10800044 	addi	r2,r2,1
 8010b7c:	2957ce84 	addi	r5,r5,24378
 8010b80:	41400015 	stw	r5,0(r8)
 8010b84:	44400115 	stw	r17,4(r8)
 8010b88:	d8c02015 	stw	r3,128(sp)
 8010b8c:	d8801f15 	stw	r2,124(sp)
 8010b90:	90bff40e 	bge	r18,r2,8010b64 <__alt_data_end+0xf8010b64>
 8010b94:	9809883a 	mov	r4,r19
 8010b98:	b80b883a 	mov	r5,r23
 8010b9c:	b00d883a 	mov	r6,r22
 8010ba0:	8018ad80 	call	8018ad8 <__ssprint_r>
 8010ba4:	103ed31e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8010ba8:	843ffc04 	addi	r16,r16,-16
 8010bac:	d8c02017 	ldw	r3,128(sp)
 8010bb0:	d8801f17 	ldw	r2,124(sp)
 8010bb4:	da000404 	addi	r8,sp,16
 8010bb8:	8c3fed16 	blt	r17,r16,8010b70 <__alt_data_end+0xf8010b70>
 8010bbc:	dac03617 	ldw	r11,216(sp)
 8010bc0:	1c07883a 	add	r3,r3,r16
 8010bc4:	10800044 	addi	r2,r2,1
 8010bc8:	42c00015 	stw	r11,0(r8)
 8010bcc:	44000115 	stw	r16,4(r8)
 8010bd0:	d8c02015 	stw	r3,128(sp)
 8010bd4:	d8801f15 	stw	r2,124(sp)
 8010bd8:	010001c4 	movi	r4,7
 8010bdc:	2080060e 	bge	r4,r2,8010bf8 <___svfprintf_internal_r+0x824>
 8010be0:	d9002f17 	ldw	r4,188(sp)
 8010be4:	b80b883a 	mov	r5,r23
 8010be8:	b00d883a 	mov	r6,r22
 8010bec:	8018ad80 	call	8018ad8 <__ssprint_r>
 8010bf0:	103ec01e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8010bf4:	d8c02017 	ldw	r3,128(sp)
 8010bf8:	d8802a17 	ldw	r2,168(sp)
 8010bfc:	db002e17 	ldw	r12,184(sp)
 8010c00:	1300010e 	bge	r2,r12,8010c08 <___svfprintf_internal_r+0x834>
 8010c04:	6005883a 	mov	r2,r12
 8010c08:	dac03017 	ldw	r11,192(sp)
 8010c0c:	5897883a 	add	r11,r11,r2
 8010c10:	dac03015 	stw	r11,192(sp)
 8010c14:	1802331e 	bne	r3,zero,80114e4 <___svfprintf_internal_r+0x1110>
 8010c18:	d8001f15 	stw	zero,124(sp)
 8010c1c:	da000404 	addi	r8,sp,16
 8010c20:	003e1806 	br	8010484 <__alt_data_end+0xf8010484>
 8010c24:	db002d17 	ldw	r12,180(sp)
 8010c28:	dac02d17 	ldw	r11,180(sp)
 8010c2c:	d8c02915 	stw	r3,164(sp)
 8010c30:	63000017 	ldw	r12,0(r12)
 8010c34:	5ac00117 	ldw	r11,4(r11)
 8010c38:	d9802785 	stb	r6,158(sp)
 8010c3c:	6009883a 	mov	r4,r12
 8010c40:	580b883a 	mov	r5,r11
 8010c44:	db003715 	stw	r12,220(sp)
 8010c48:	da004015 	stw	r8,256(sp)
 8010c4c:	da403f15 	stw	r9,252(sp)
 8010c50:	dac03815 	stw	r11,224(sp)
 8010c54:	80188840 	call	8018884 <__fpclassifyd>
 8010c58:	db002d17 	ldw	r12,180(sp)
 8010c5c:	04800044 	movi	r18,1
 8010c60:	da004017 	ldw	r8,256(sp)
 8010c64:	64c00204 	addi	r19,r12,8
 8010c68:	da403f17 	ldw	r9,252(sp)
 8010c6c:	d9003717 	ldw	r4,220(sp)
 8010c70:	d9403817 	ldw	r5,224(sp)
 8010c74:	1483561e 	bne	r2,r18,80119d0 <___svfprintf_internal_r+0x15fc>
 8010c78:	000d883a 	mov	r6,zero
 8010c7c:	000f883a 	mov	r7,zero
 8010c80:	800dcdc0 	call	800dcdc <__ledf2>
 8010c84:	da004017 	ldw	r8,256(sp)
 8010c88:	1004ee16 	blt	r2,zero,8012044 <___svfprintf_internal_r+0x1c70>
 8010c8c:	dd402783 	ldbu	r21,158(sp)
 8010c90:	008011c4 	movi	r2,71
 8010c94:	1404440e 	bge	r2,r16,8011da8 <___svfprintf_internal_r+0x19d4>
 8010c98:	00c205b4 	movhi	r3,2070
 8010c9c:	18d7bb04 	addi	r3,r3,24300
 8010ca0:	d8c03115 	stw	r3,196(sp)
 8010ca4:	02c000c4 	movi	r11,3
 8010ca8:	00bfdfc4 	movi	r2,-129
 8010cac:	dac02a15 	stw	r11,168(sp)
 8010cb0:	88a2703a 	and	r17,r17,r2
 8010cb4:	dcc02d15 	stw	r19,180(sp)
 8010cb8:	5825883a 	mov	r18,r11
 8010cbc:	d8003215 	stw	zero,200(sp)
 8010cc0:	d8003415 	stw	zero,208(sp)
 8010cc4:	003eef06 	br	8010884 <__alt_data_end+0xf8010884>
 8010cc8:	8c400214 	ori	r17,r17,8
 8010ccc:	1805883a 	mov	r2,r3
 8010cd0:	1c000007 	ldb	r16,0(r3)
 8010cd4:	003e1506 	br	801052c <__alt_data_end+0xf801052c>
 8010cd8:	8c400414 	ori	r17,r17,16
 8010cdc:	d8c02915 	stw	r3,164(sp)
 8010ce0:	88c0080c 	andi	r3,r17,32
 8010ce4:	d8802d17 	ldw	r2,180(sp)
 8010ce8:	18005526 	beq	r3,zero,8010e40 <___svfprintf_internal_r+0xa6c>
 8010cec:	dac02d17 	ldw	r11,180(sp)
 8010cf0:	14c00017 	ldw	r19,0(r2)
 8010cf4:	17000117 	ldw	fp,4(r2)
 8010cf8:	5ac00204 	addi	r11,r11,8
 8010cfc:	dac02d15 	stw	r11,180(sp)
 8010d00:	00800044 	movi	r2,1
 8010d04:	9f06b03a 	or	r3,r19,fp
 8010d08:	d8002785 	stb	zero,158(sp)
 8010d0c:	da403215 	stw	r9,200(sp)
 8010d10:	002b883a 	mov	r21,zero
 8010d14:	003eb406 	br	80107e8 <__alt_data_end+0xf80107e8>
 8010d18:	030205b4 	movhi	r12,2070
 8010d1c:	6317be04 	addi	r12,r12,24312
 8010d20:	d8c02915 	stw	r3,164(sp)
 8010d24:	d9802785 	stb	r6,158(sp)
 8010d28:	db003b15 	stw	r12,236(sp)
 8010d2c:	88c0080c 	andi	r3,r17,32
 8010d30:	d8802d17 	ldw	r2,180(sp)
 8010d34:	18005626 	beq	r3,zero,8010e90 <___svfprintf_internal_r+0xabc>
 8010d38:	dac02d17 	ldw	r11,180(sp)
 8010d3c:	14c00017 	ldw	r19,0(r2)
 8010d40:	17000117 	ldw	fp,4(r2)
 8010d44:	5ac00204 	addi	r11,r11,8
 8010d48:	dac02d15 	stw	r11,180(sp)
 8010d4c:	8880004c 	andi	r2,r17,1
 8010d50:	10029326 	beq	r2,zero,80117a0 <___svfprintf_internal_r+0x13cc>
 8010d54:	9f06b03a 	or	r3,r19,fp
 8010d58:	18033526 	beq	r3,zero,8011a30 <___svfprintf_internal_r+0x165c>
 8010d5c:	00800c04 	movi	r2,48
 8010d60:	d8802705 	stb	r2,156(sp)
 8010d64:	dc002745 	stb	r16,157(sp)
 8010d68:	8c400094 	ori	r17,r17,2
 8010d6c:	00800084 	movi	r2,2
 8010d70:	003fe506 	br	8010d08 <__alt_data_end+0xf8010d08>
 8010d74:	1805883a 	mov	r2,r3
 8010d78:	d8002e15 	stw	zero,184(sp)
 8010d7c:	82fff404 	addi	r11,r16,-48
 8010d80:	0019883a 	mov	r12,zero
 8010d84:	14000007 	ldb	r16,0(r2)
 8010d88:	630002a4 	muli	r12,r12,10
 8010d8c:	18c00044 	addi	r3,r3,1
 8010d90:	1805883a 	mov	r2,r3
 8010d94:	62d9883a 	add	r12,r12,r11
 8010d98:	82fff404 	addi	r11,r16,-48
 8010d9c:	2afff92e 	bgeu	r5,r11,8010d84 <__alt_data_end+0xf8010d84>
 8010da0:	db002e15 	stw	r12,184(sp)
 8010da4:	003de206 	br	8010530 <__alt_data_end+0xf8010530>
 8010da8:	8c400814 	ori	r17,r17,32
 8010dac:	1805883a 	mov	r2,r3
 8010db0:	1c000007 	ldb	r16,0(r3)
 8010db4:	003ddd06 	br	801052c <__alt_data_end+0xf801052c>
 8010db8:	dac02d17 	ldw	r11,180(sp)
 8010dbc:	db002d17 	ldw	r12,180(sp)
 8010dc0:	d8c02915 	stw	r3,164(sp)
 8010dc4:	5ac00017 	ldw	r11,0(r11)
 8010dc8:	d8002785 	stb	zero,158(sp)
 8010dcc:	64c00104 	addi	r19,r12,4
 8010dd0:	dac03115 	stw	r11,196(sp)
 8010dd4:	58048126 	beq	r11,zero,8011fdc <___svfprintf_internal_r+0x1c08>
 8010dd8:	d9003117 	ldw	r4,196(sp)
 8010ddc:	48041716 	blt	r9,zero,8011e3c <___svfprintf_internal_r+0x1a68>
 8010de0:	480d883a 	mov	r6,r9
 8010de4:	000b883a 	mov	r5,zero
 8010de8:	da004015 	stw	r8,256(sp)
 8010dec:	da403f15 	stw	r9,252(sp)
 8010df0:	80171380 	call	8017138 <memchr>
 8010df4:	da004017 	ldw	r8,256(sp)
 8010df8:	da403f17 	ldw	r9,252(sp)
 8010dfc:	1004db26 	beq	r2,zero,801216c <___svfprintf_internal_r+0x1d98>
 8010e00:	d8c03117 	ldw	r3,196(sp)
 8010e04:	10e5c83a 	sub	r18,r2,r3
 8010e08:	4c80010e 	bge	r9,r18,8010e10 <___svfprintf_internal_r+0xa3c>
 8010e0c:	4825883a 	mov	r18,r9
 8010e10:	9005883a 	mov	r2,r18
 8010e14:	90040e16 	blt	r18,zero,8011e50 <___svfprintf_internal_r+0x1a7c>
 8010e18:	dd402783 	ldbu	r21,158(sp)
 8010e1c:	d8802a15 	stw	r2,168(sp)
 8010e20:	dcc02d15 	stw	r19,180(sp)
 8010e24:	d8003215 	stw	zero,200(sp)
 8010e28:	d8003415 	stw	zero,208(sp)
 8010e2c:	003e9506 	br	8010884 <__alt_data_end+0xf8010884>
 8010e30:	d8c02915 	stw	r3,164(sp)
 8010e34:	88c0080c 	andi	r3,r17,32
 8010e38:	d8802d17 	ldw	r2,180(sp)
 8010e3c:	183fab1e 	bne	r3,zero,8010cec <__alt_data_end+0xf8010cec>
 8010e40:	88c0040c 	andi	r3,r17,16
 8010e44:	1802681e 	bne	r3,zero,80117e8 <___svfprintf_internal_r+0x1414>
 8010e48:	88c0100c 	andi	r3,r17,64
 8010e4c:	18026626 	beq	r3,zero,80117e8 <___svfprintf_internal_r+0x1414>
 8010e50:	dac02d17 	ldw	r11,180(sp)
 8010e54:	14c0000b 	ldhu	r19,0(r2)
 8010e58:	0039883a 	mov	fp,zero
 8010e5c:	5ac00104 	addi	r11,r11,4
 8010e60:	dac02d15 	stw	r11,180(sp)
 8010e64:	00800044 	movi	r2,1
 8010e68:	9807883a 	mov	r3,r19
 8010e6c:	003fa606 	br	8010d08 <__alt_data_end+0xf8010d08>
 8010e70:	008205b4 	movhi	r2,2070
 8010e74:	1097c304 	addi	r2,r2,24332
 8010e78:	d8c02915 	stw	r3,164(sp)
 8010e7c:	d8803b15 	stw	r2,236(sp)
 8010e80:	d9802785 	stb	r6,158(sp)
 8010e84:	88c0080c 	andi	r3,r17,32
 8010e88:	d8802d17 	ldw	r2,180(sp)
 8010e8c:	183faa1e 	bne	r3,zero,8010d38 <__alt_data_end+0xf8010d38>
 8010e90:	88c0040c 	andi	r3,r17,16
 8010e94:	1802e826 	beq	r3,zero,8011a38 <___svfprintf_internal_r+0x1664>
 8010e98:	db002d17 	ldw	r12,180(sp)
 8010e9c:	14c00017 	ldw	r19,0(r2)
 8010ea0:	0039883a 	mov	fp,zero
 8010ea4:	63000104 	addi	r12,r12,4
 8010ea8:	db002d15 	stw	r12,180(sp)
 8010eac:	003fa706 	br	8010d4c <__alt_data_end+0xf8010d4c>
 8010eb0:	30803fcc 	andi	r2,r6,255
 8010eb4:	1080201c 	xori	r2,r2,128
 8010eb8:	10bfe004 	addi	r2,r2,-128
 8010ebc:	1002d91e 	bne	r2,zero,8011a24 <___svfprintf_internal_r+0x1650>
 8010ec0:	1805883a 	mov	r2,r3
 8010ec4:	01800804 	movi	r6,32
 8010ec8:	1c000007 	ldb	r16,0(r3)
 8010ecc:	003d9706 	br	801052c <__alt_data_end+0xf801052c>
 8010ed0:	8c400054 	ori	r17,r17,1
 8010ed4:	1805883a 	mov	r2,r3
 8010ed8:	1c000007 	ldb	r16,0(r3)
 8010edc:	003d9306 	br	801052c <__alt_data_end+0xf801052c>
 8010ee0:	dac02d17 	ldw	r11,180(sp)
 8010ee4:	db002d17 	ldw	r12,180(sp)
 8010ee8:	5ac00017 	ldw	r11,0(r11)
 8010eec:	dac02e15 	stw	r11,184(sp)
 8010ef0:	62c00104 	addi	r11,r12,4
 8010ef4:	db002e17 	ldw	r12,184(sp)
 8010ef8:	60033e16 	blt	r12,zero,8011bf4 <___svfprintf_internal_r+0x1820>
 8010efc:	dac02d15 	stw	r11,180(sp)
 8010f00:	1805883a 	mov	r2,r3
 8010f04:	1c000007 	ldb	r16,0(r3)
 8010f08:	003d8806 	br	801052c <__alt_data_end+0xf801052c>
 8010f0c:	1805883a 	mov	r2,r3
 8010f10:	01800ac4 	movi	r6,43
 8010f14:	1c000007 	ldb	r16,0(r3)
 8010f18:	003d8406 	br	801052c <__alt_data_end+0xf801052c>
 8010f1c:	8c401014 	ori	r17,r17,64
 8010f20:	1805883a 	mov	r2,r3
 8010f24:	1c000007 	ldb	r16,0(r3)
 8010f28:	003d8006 	br	801052c <__alt_data_end+0xf801052c>
 8010f2c:	1c000007 	ldb	r16,0(r3)
 8010f30:	81c33626 	beq	r16,r7,8011c0c <___svfprintf_internal_r+0x1838>
 8010f34:	8c400414 	ori	r17,r17,16
 8010f38:	1805883a 	mov	r2,r3
 8010f3c:	003d7b06 	br	801052c <__alt_data_end+0xf801052c>
 8010f40:	d8c02915 	stw	r3,164(sp)
 8010f44:	d9802785 	stb	r6,158(sp)
 8010f48:	8880080c 	andi	r2,r17,32
 8010f4c:	1002c226 	beq	r2,zero,8011a58 <___svfprintf_internal_r+0x1684>
 8010f50:	db002d17 	ldw	r12,180(sp)
 8010f54:	dac03017 	ldw	r11,192(sp)
 8010f58:	60800017 	ldw	r2,0(r12)
 8010f5c:	5807d7fa 	srai	r3,r11,31
 8010f60:	63000104 	addi	r12,r12,4
 8010f64:	db002d15 	stw	r12,180(sp)
 8010f68:	12c00015 	stw	r11,0(r2)
 8010f6c:	10c00115 	stw	r3,4(r2)
 8010f70:	003d4406 	br	8010484 <__alt_data_end+0xf8010484>
 8010f74:	db002d17 	ldw	r12,180(sp)
 8010f78:	00800c04 	movi	r2,48
 8010f7c:	d8802705 	stb	r2,156(sp)
 8010f80:	64c00017 	ldw	r19,0(r12)
 8010f84:	00801e04 	movi	r2,120
 8010f88:	d8802745 	stb	r2,157(sp)
 8010f8c:	008205b4 	movhi	r2,2070
 8010f90:	1097c304 	addi	r2,r2,24332
 8010f94:	63000104 	addi	r12,r12,4
 8010f98:	d8c02915 	stw	r3,164(sp)
 8010f9c:	d8803b15 	stw	r2,236(sp)
 8010fa0:	0039883a 	mov	fp,zero
 8010fa4:	8c400094 	ori	r17,r17,2
 8010fa8:	db002d15 	stw	r12,180(sp)
 8010fac:	00800084 	movi	r2,2
 8010fb0:	04001e04 	movi	r16,120
 8010fb4:	9807883a 	mov	r3,r19
 8010fb8:	003f5306 	br	8010d08 <__alt_data_end+0xf8010d08>
 8010fbc:	db002d17 	ldw	r12,180(sp)
 8010fc0:	d8c02915 	stw	r3,164(sp)
 8010fc4:	dac01404 	addi	r11,sp,80
 8010fc8:	60800017 	ldw	r2,0(r12)
 8010fcc:	00c00044 	movi	r3,1
 8010fd0:	63000104 	addi	r12,r12,4
 8010fd4:	d8801405 	stb	r2,80(sp)
 8010fd8:	d8c02a15 	stw	r3,168(sp)
 8010fdc:	d8002785 	stb	zero,158(sp)
 8010fe0:	db002d15 	stw	r12,180(sp)
 8010fe4:	1825883a 	mov	r18,r3
 8010fe8:	d8003215 	stw	zero,200(sp)
 8010fec:	d8003415 	stw	zero,208(sp)
 8010ff0:	dac03115 	stw	r11,196(sp)
 8010ff4:	0005883a 	mov	r2,zero
 8010ff8:	003e2906 	br	80108a0 <__alt_data_end+0xf80108a0>
 8010ffc:	d8c02915 	stw	r3,164(sp)
 8011000:	d9802785 	stb	r6,158(sp)
 8011004:	8880080c 	andi	r2,r17,32
 8011008:	d8c02d17 	ldw	r3,180(sp)
 801100c:	103deb1e 	bne	r2,zero,80107bc <__alt_data_end+0xf80107bc>
 8011010:	8880040c 	andi	r2,r17,16
 8011014:	1001e51e 	bne	r2,zero,80117ac <___svfprintf_internal_r+0x13d8>
 8011018:	8880100c 	andi	r2,r17,64
 801101c:	1001e326 	beq	r2,zero,80117ac <___svfprintf_internal_r+0x13d8>
 8011020:	1cc0000f 	ldh	r19,0(r3)
 8011024:	db002d17 	ldw	r12,180(sp)
 8011028:	9839d7fa 	srai	fp,r19,31
 801102c:	63000104 	addi	r12,r12,4
 8011030:	db002d15 	stw	r12,180(sp)
 8011034:	e005883a 	mov	r2,fp
 8011038:	103de70e 	bge	r2,zero,80107d8 <__alt_data_end+0xf80107d8>
 801103c:	04e7c83a 	sub	r19,zero,r19
 8011040:	9804c03a 	cmpne	r2,r19,zero
 8011044:	0739c83a 	sub	fp,zero,fp
 8011048:	e0b9c83a 	sub	fp,fp,r2
 801104c:	05400b44 	movi	r21,45
 8011050:	dd402785 	stb	r21,158(sp)
 8011054:	da403215 	stw	r9,200(sp)
 8011058:	00800044 	movi	r2,1
 801105c:	9f06b03a 	or	r3,r19,fp
 8011060:	003de106 	br	80107e8 <__alt_data_end+0xf80107e8>
 8011064:	8c400414 	ori	r17,r17,16
 8011068:	d8c02915 	stw	r3,164(sp)
 801106c:	8880080c 	andi	r2,r17,32
 8011070:	10000b26 	beq	r2,zero,80110a0 <___svfprintf_internal_r+0xccc>
 8011074:	db002d17 	ldw	r12,180(sp)
 8011078:	0005883a 	mov	r2,zero
 801107c:	64c00017 	ldw	r19,0(r12)
 8011080:	67000117 	ldw	fp,4(r12)
 8011084:	63000204 	addi	r12,r12,8
 8011088:	db002d15 	stw	r12,180(sp)
 801108c:	9f06b03a 	or	r3,r19,fp
 8011090:	003f1d06 	br	8010d08 <__alt_data_end+0xf8010d08>
 8011094:	d8c02915 	stw	r3,164(sp)
 8011098:	8880080c 	andi	r2,r17,32
 801109c:	103ff51e 	bne	r2,zero,8011074 <__alt_data_end+0xf8011074>
 80110a0:	8880040c 	andi	r2,r17,16
 80110a4:	1001c81e 	bne	r2,zero,80117c8 <___svfprintf_internal_r+0x13f4>
 80110a8:	8880100c 	andi	r2,r17,64
 80110ac:	1001c626 	beq	r2,zero,80117c8 <___svfprintf_internal_r+0x13f4>
 80110b0:	db002d17 	ldw	r12,180(sp)
 80110b4:	0039883a 	mov	fp,zero
 80110b8:	0005883a 	mov	r2,zero
 80110bc:	64c0000b 	ldhu	r19,0(r12)
 80110c0:	63000104 	addi	r12,r12,4
 80110c4:	db002d15 	stw	r12,180(sp)
 80110c8:	9807883a 	mov	r3,r19
 80110cc:	003f0e06 	br	8010d08 <__alt_data_end+0xf8010d08>
 80110d0:	d8c02915 	stw	r3,164(sp)
 80110d4:	d9802785 	stb	r6,158(sp)
 80110d8:	803d8026 	beq	r16,zero,80106dc <__alt_data_end+0xf80106dc>
 80110dc:	02c00044 	movi	r11,1
 80110e0:	db001404 	addi	r12,sp,80
 80110e4:	dac02a15 	stw	r11,168(sp)
 80110e8:	dc001405 	stb	r16,80(sp)
 80110ec:	d8002785 	stb	zero,158(sp)
 80110f0:	5825883a 	mov	r18,r11
 80110f4:	d8003215 	stw	zero,200(sp)
 80110f8:	d8003415 	stw	zero,208(sp)
 80110fc:	db003115 	stw	r12,196(sp)
 8011100:	0005883a 	mov	r2,zero
 8011104:	003de606 	br	80108a0 <__alt_data_end+0xf80108a0>
 8011108:	d8c02017 	ldw	r3,128(sp)
 801110c:	003e2706 	br	80109ac <__alt_data_end+0xf80109ac>
 8011110:	10803fcc 	andi	r2,r2,255
 8011114:	00c00044 	movi	r3,1
 8011118:	10fdbb1e 	bne	r2,r3,8010808 <__alt_data_end+0xf8010808>
 801111c:	e000021e 	bne	fp,zero,8011128 <___svfprintf_internal_r+0xd54>
 8011120:	00800244 	movi	r2,9
 8011124:	14c01f2e 	bgeu	r2,r19,80111a4 <___svfprintf_internal_r+0xdd0>
 8011128:	dc002a15 	stw	r16,168(sp)
 801112c:	dc402b15 	stw	r17,172(sp)
 8011130:	9821883a 	mov	r16,r19
 8011134:	e023883a 	mov	r17,fp
 8011138:	b025883a 	mov	r18,r22
 801113c:	4827883a 	mov	r19,r9
 8011140:	4039883a 	mov	fp,r8
 8011144:	8009883a 	mov	r4,r16
 8011148:	880b883a 	mov	r5,r17
 801114c:	01800284 	movi	r6,10
 8011150:	000f883a 	mov	r7,zero
 8011154:	801c0580 	call	801c058 <__umoddi3>
 8011158:	10800c04 	addi	r2,r2,48
 801115c:	94bfffc4 	addi	r18,r18,-1
 8011160:	8009883a 	mov	r4,r16
 8011164:	880b883a 	mov	r5,r17
 8011168:	01800284 	movi	r6,10
 801116c:	000f883a 	mov	r7,zero
 8011170:	90800005 	stb	r2,0(r18)
 8011174:	801ba980 	call	801ba98 <__udivdi3>
 8011178:	1021883a 	mov	r16,r2
 801117c:	10c4b03a 	or	r2,r2,r3
 8011180:	1823883a 	mov	r17,r3
 8011184:	103fef1e 	bne	r2,zero,8011144 <__alt_data_end+0xf8011144>
 8011188:	dc803115 	stw	r18,196(sp)
 801118c:	dc002a17 	ldw	r16,168(sp)
 8011190:	dc402b17 	ldw	r17,172(sp)
 8011194:	9813883a 	mov	r9,r19
 8011198:	e011883a 	mov	r8,fp
 801119c:	b4a5c83a 	sub	r18,r22,r18
 80111a0:	003db306 	br	8010870 <__alt_data_end+0xf8010870>
 80111a4:	9cc00c04 	addi	r19,r19,48
 80111a8:	db001dc4 	addi	r12,sp,119
 80111ac:	dcc01dc5 	stb	r19,119(sp)
 80111b0:	dc803d17 	ldw	r18,244(sp)
 80111b4:	db003115 	stw	r12,196(sp)
 80111b8:	003dad06 	br	8010870 <__alt_data_end+0xf8010870>
 80111bc:	00801944 	movi	r2,101
 80111c0:	14008d0e 	bge	r2,r16,80113f8 <___svfprintf_internal_r+0x1024>
 80111c4:	d9003717 	ldw	r4,220(sp)
 80111c8:	d9403817 	ldw	r5,224(sp)
 80111cc:	000d883a 	mov	r6,zero
 80111d0:	000f883a 	mov	r7,zero
 80111d4:	d8c03e15 	stw	r3,248(sp)
 80111d8:	da004015 	stw	r8,256(sp)
 80111dc:	800db780 	call	800db78 <__eqdf2>
 80111e0:	d8c03e17 	ldw	r3,248(sp)
 80111e4:	da004017 	ldw	r8,256(sp)
 80111e8:	1000fd1e 	bne	r2,zero,80115e0 <___svfprintf_internal_r+0x120c>
 80111ec:	d8801f17 	ldw	r2,124(sp)
 80111f0:	010205b4 	movhi	r4,2070
 80111f4:	2117ca04 	addi	r4,r4,24360
 80111f8:	18c00044 	addi	r3,r3,1
 80111fc:	10800044 	addi	r2,r2,1
 8011200:	41000015 	stw	r4,0(r8)
 8011204:	01000044 	movi	r4,1
 8011208:	41000115 	stw	r4,4(r8)
 801120c:	d8c02015 	stw	r3,128(sp)
 8011210:	d8801f15 	stw	r2,124(sp)
 8011214:	010001c4 	movi	r4,7
 8011218:	20823316 	blt	r4,r2,8011ae8 <___svfprintf_internal_r+0x1714>
 801121c:	42000204 	addi	r8,r8,8
 8011220:	d8802617 	ldw	r2,152(sp)
 8011224:	dac03317 	ldw	r11,204(sp)
 8011228:	12c00216 	blt	r2,r11,8011234 <___svfprintf_internal_r+0xe60>
 801122c:	8880004c 	andi	r2,r17,1
 8011230:	103e3d26 	beq	r2,zero,8010b28 <__alt_data_end+0xf8010b28>
 8011234:	db003917 	ldw	r12,228(sp)
 8011238:	d8801f17 	ldw	r2,124(sp)
 801123c:	dac03517 	ldw	r11,212(sp)
 8011240:	1b07883a 	add	r3,r3,r12
 8011244:	10800044 	addi	r2,r2,1
 8011248:	42c00015 	stw	r11,0(r8)
 801124c:	43000115 	stw	r12,4(r8)
 8011250:	d8c02015 	stw	r3,128(sp)
 8011254:	d8801f15 	stw	r2,124(sp)
 8011258:	010001c4 	movi	r4,7
 801125c:	20826f16 	blt	r4,r2,8011c1c <___svfprintf_internal_r+0x1848>
 8011260:	42000204 	addi	r8,r8,8
 8011264:	db003317 	ldw	r12,204(sp)
 8011268:	643fffc4 	addi	r16,r12,-1
 801126c:	043e2e0e 	bge	zero,r16,8010b28 <__alt_data_end+0xf8010b28>
 8011270:	04800404 	movi	r18,16
 8011274:	d8801f17 	ldw	r2,124(sp)
 8011278:	9400a00e 	bge	r18,r16,80114fc <___svfprintf_internal_r+0x1128>
 801127c:	014205b4 	movhi	r5,2070
 8011280:	2957ca84 	addi	r5,r5,24362
 8011284:	d9402b15 	stw	r5,172(sp)
 8011288:	054001c4 	movi	r21,7
 801128c:	dcc02f17 	ldw	r19,188(sp)
 8011290:	00000306 	br	80112a0 <___svfprintf_internal_r+0xecc>
 8011294:	42000204 	addi	r8,r8,8
 8011298:	843ffc04 	addi	r16,r16,-16
 801129c:	94009a0e 	bge	r18,r16,8011508 <___svfprintf_internal_r+0x1134>
 80112a0:	18c00404 	addi	r3,r3,16
 80112a4:	10800044 	addi	r2,r2,1
 80112a8:	45000015 	stw	r20,0(r8)
 80112ac:	44800115 	stw	r18,4(r8)
 80112b0:	d8c02015 	stw	r3,128(sp)
 80112b4:	d8801f15 	stw	r2,124(sp)
 80112b8:	a8bff60e 	bge	r21,r2,8011294 <__alt_data_end+0xf8011294>
 80112bc:	9809883a 	mov	r4,r19
 80112c0:	b80b883a 	mov	r5,r23
 80112c4:	b00d883a 	mov	r6,r22
 80112c8:	8018ad80 	call	8018ad8 <__ssprint_r>
 80112cc:	103d091e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80112d0:	d8c02017 	ldw	r3,128(sp)
 80112d4:	d8801f17 	ldw	r2,124(sp)
 80112d8:	da000404 	addi	r8,sp,16
 80112dc:	003fee06 	br	8011298 <__alt_data_end+0xf8011298>
 80112e0:	dac02e17 	ldw	r11,184(sp)
 80112e4:	db002a17 	ldw	r12,168(sp)
 80112e8:	5b2bc83a 	sub	r21,r11,r12
 80112ec:	057dcd0e 	bge	zero,r21,8010a24 <__alt_data_end+0xf8010a24>
 80112f0:	07000404 	movi	fp,16
 80112f4:	d8801f17 	ldw	r2,124(sp)
 80112f8:	e5435d0e 	bge	fp,r21,8012070 <___svfprintf_internal_r+0x1c9c>
 80112fc:	014205b4 	movhi	r5,2070
 8011300:	a809883a 	mov	r4,r21
 8011304:	2957ca84 	addi	r5,r5,24362
 8011308:	dc002c15 	stw	r16,176(sp)
 801130c:	902b883a 	mov	r21,r18
 8011310:	d9402b15 	stw	r5,172(sp)
 8011314:	8825883a 	mov	r18,r17
 8011318:	04c001c4 	movi	r19,7
 801131c:	dc002f17 	ldw	r16,188(sp)
 8011320:	2023883a 	mov	r17,r4
 8011324:	00000306 	br	8011334 <___svfprintf_internal_r+0xf60>
 8011328:	8c7ffc04 	addi	r17,r17,-16
 801132c:	42000204 	addi	r8,r8,8
 8011330:	e440110e 	bge	fp,r17,8011378 <___svfprintf_internal_r+0xfa4>
 8011334:	18c00404 	addi	r3,r3,16
 8011338:	10800044 	addi	r2,r2,1
 801133c:	45000015 	stw	r20,0(r8)
 8011340:	47000115 	stw	fp,4(r8)
 8011344:	d8c02015 	stw	r3,128(sp)
 8011348:	d8801f15 	stw	r2,124(sp)
 801134c:	98bff60e 	bge	r19,r2,8011328 <__alt_data_end+0xf8011328>
 8011350:	8009883a 	mov	r4,r16
 8011354:	b80b883a 	mov	r5,r23
 8011358:	b00d883a 	mov	r6,r22
 801135c:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011360:	103ce41e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011364:	8c7ffc04 	addi	r17,r17,-16
 8011368:	d8c02017 	ldw	r3,128(sp)
 801136c:	d8801f17 	ldw	r2,124(sp)
 8011370:	da000404 	addi	r8,sp,16
 8011374:	e47fef16 	blt	fp,r17,8011334 <__alt_data_end+0xf8011334>
 8011378:	dc002c17 	ldw	r16,176(sp)
 801137c:	8809883a 	mov	r4,r17
 8011380:	9023883a 	mov	r17,r18
 8011384:	a825883a 	mov	r18,r21
 8011388:	202b883a 	mov	r21,r4
 801138c:	dac02b17 	ldw	r11,172(sp)
 8011390:	1d47883a 	add	r3,r3,r21
 8011394:	10800044 	addi	r2,r2,1
 8011398:	42c00015 	stw	r11,0(r8)
 801139c:	45400115 	stw	r21,4(r8)
 80113a0:	d8c02015 	stw	r3,128(sp)
 80113a4:	d8801f15 	stw	r2,124(sp)
 80113a8:	010001c4 	movi	r4,7
 80113ac:	20818016 	blt	r4,r2,80119b0 <___svfprintf_internal_r+0x15dc>
 80113b0:	42000204 	addi	r8,r8,8
 80113b4:	003d9b06 	br	8010a24 <__alt_data_end+0xf8010a24>
 80113b8:	d9403b17 	ldw	r5,236(sp)
 80113bc:	b007883a 	mov	r3,r22
 80113c0:	988003cc 	andi	r2,r19,15
 80113c4:	e008973a 	slli	r4,fp,28
 80113c8:	2885883a 	add	r2,r5,r2
 80113cc:	9826d13a 	srli	r19,r19,4
 80113d0:	10800003 	ldbu	r2,0(r2)
 80113d4:	e038d13a 	srli	fp,fp,4
 80113d8:	18ffffc4 	addi	r3,r3,-1
 80113dc:	24e6b03a 	or	r19,r4,r19
 80113e0:	18800005 	stb	r2,0(r3)
 80113e4:	9f04b03a 	or	r2,r19,fp
 80113e8:	103ff51e 	bne	r2,zero,80113c0 <__alt_data_end+0xf80113c0>
 80113ec:	d8c03115 	stw	r3,196(sp)
 80113f0:	b0e5c83a 	sub	r18,r22,r3
 80113f4:	003d1e06 	br	8010870 <__alt_data_end+0xf8010870>
 80113f8:	db003317 	ldw	r12,204(sp)
 80113fc:	00800044 	movi	r2,1
 8011400:	18c00044 	addi	r3,r3,1
 8011404:	13014b0e 	bge	r2,r12,8011934 <___svfprintf_internal_r+0x1560>
 8011408:	dc001f17 	ldw	r16,124(sp)
 801140c:	dac03117 	ldw	r11,196(sp)
 8011410:	00800044 	movi	r2,1
 8011414:	84000044 	addi	r16,r16,1
 8011418:	40800115 	stw	r2,4(r8)
 801141c:	42c00015 	stw	r11,0(r8)
 8011420:	d8c02015 	stw	r3,128(sp)
 8011424:	dc001f15 	stw	r16,124(sp)
 8011428:	008001c4 	movi	r2,7
 801142c:	14014e16 	blt	r2,r16,8011968 <___svfprintf_internal_r+0x1594>
 8011430:	42000204 	addi	r8,r8,8
 8011434:	db003917 	ldw	r12,228(sp)
 8011438:	dac03517 	ldw	r11,212(sp)
 801143c:	84000044 	addi	r16,r16,1
 8011440:	1b07883a 	add	r3,r3,r12
 8011444:	42c00015 	stw	r11,0(r8)
 8011448:	43000115 	stw	r12,4(r8)
 801144c:	d8c02015 	stw	r3,128(sp)
 8011450:	dc001f15 	stw	r16,124(sp)
 8011454:	008001c4 	movi	r2,7
 8011458:	14014c16 	blt	r2,r16,801198c <___svfprintf_internal_r+0x15b8>
 801145c:	44800204 	addi	r18,r8,8
 8011460:	d9003717 	ldw	r4,220(sp)
 8011464:	d9403817 	ldw	r5,224(sp)
 8011468:	000d883a 	mov	r6,zero
 801146c:	000f883a 	mov	r7,zero
 8011470:	d8c03e15 	stw	r3,248(sp)
 8011474:	800db780 	call	800db78 <__eqdf2>
 8011478:	d8c03e17 	ldw	r3,248(sp)
 801147c:	db003317 	ldw	r12,204(sp)
 8011480:	10009526 	beq	r2,zero,80116d8 <___svfprintf_internal_r+0x1304>
 8011484:	dac03117 	ldw	r11,196(sp)
 8011488:	60bfffc4 	addi	r2,r12,-1
 801148c:	1887883a 	add	r3,r3,r2
 8011490:	59000044 	addi	r4,r11,1
 8011494:	84000044 	addi	r16,r16,1
 8011498:	90800115 	stw	r2,4(r18)
 801149c:	91000015 	stw	r4,0(r18)
 80114a0:	d8c02015 	stw	r3,128(sp)
 80114a4:	dc001f15 	stw	r16,124(sp)
 80114a8:	008001c4 	movi	r2,7
 80114ac:	1400b316 	blt	r2,r16,801177c <___svfprintf_internal_r+0x13a8>
 80114b0:	94800204 	addi	r18,r18,8
 80114b4:	dac03a17 	ldw	r11,232(sp)
 80114b8:	dd4022c4 	addi	r21,sp,139
 80114bc:	84000044 	addi	r16,r16,1
 80114c0:	1ac7883a 	add	r3,r3,r11
 80114c4:	95400015 	stw	r21,0(r18)
 80114c8:	92c00115 	stw	r11,4(r18)
 80114cc:	d8c02015 	stw	r3,128(sp)
 80114d0:	dc001f15 	stw	r16,124(sp)
 80114d4:	008001c4 	movi	r2,7
 80114d8:	14001416 	blt	r2,r16,801152c <___svfprintf_internal_r+0x1158>
 80114dc:	92000204 	addi	r8,r18,8
 80114e0:	003d9106 	br	8010b28 <__alt_data_end+0xf8010b28>
 80114e4:	d9002f17 	ldw	r4,188(sp)
 80114e8:	b80b883a 	mov	r5,r23
 80114ec:	b00d883a 	mov	r6,r22
 80114f0:	8018ad80 	call	8018ad8 <__ssprint_r>
 80114f4:	103dc826 	beq	r2,zero,8010c18 <__alt_data_end+0xf8010c18>
 80114f8:	003c7e06 	br	80106f4 <__alt_data_end+0xf80106f4>
 80114fc:	010205b4 	movhi	r4,2070
 8011500:	2117ca84 	addi	r4,r4,24362
 8011504:	d9002b15 	stw	r4,172(sp)
 8011508:	dac02b17 	ldw	r11,172(sp)
 801150c:	1c07883a 	add	r3,r3,r16
 8011510:	44000115 	stw	r16,4(r8)
 8011514:	42c00015 	stw	r11,0(r8)
 8011518:	10800044 	addi	r2,r2,1
 801151c:	d8c02015 	stw	r3,128(sp)
 8011520:	d8801f15 	stw	r2,124(sp)
 8011524:	010001c4 	movi	r4,7
 8011528:	20bd7e0e 	bge	r4,r2,8010b24 <__alt_data_end+0xf8010b24>
 801152c:	d9002f17 	ldw	r4,188(sp)
 8011530:	b80b883a 	mov	r5,r23
 8011534:	b00d883a 	mov	r6,r22
 8011538:	8018ad80 	call	8018ad8 <__ssprint_r>
 801153c:	103c6d1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011540:	d8c02017 	ldw	r3,128(sp)
 8011544:	da000404 	addi	r8,sp,16
 8011548:	003d7706 	br	8010b28 <__alt_data_end+0xf8010b28>
 801154c:	10803fcc 	andi	r2,r2,255
 8011550:	1000201e 	bne	r2,zero,80115d4 <___svfprintf_internal_r+0x1200>
 8011554:	8880004c 	andi	r2,r17,1
 8011558:	10001e26 	beq	r2,zero,80115d4 <___svfprintf_internal_r+0x1200>
 801155c:	00800c04 	movi	r2,48
 8011560:	d8c01dc4 	addi	r3,sp,119
 8011564:	d8801dc5 	stb	r2,119(sp)
 8011568:	dc803d17 	ldw	r18,244(sp)
 801156c:	d8c03115 	stw	r3,196(sp)
 8011570:	003cbf06 	br	8010870 <__alt_data_end+0xf8010870>
 8011574:	d9002f17 	ldw	r4,188(sp)
 8011578:	b80b883a 	mov	r5,r23
 801157c:	b00d883a 	mov	r6,r22
 8011580:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011584:	103c5b1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011588:	d8c02017 	ldw	r3,128(sp)
 801158c:	da000404 	addi	r8,sp,16
 8011590:	003d5806 	br	8010af4 <__alt_data_end+0xf8010af4>
 8011594:	d9002f17 	ldw	r4,188(sp)
 8011598:	b80b883a 	mov	r5,r23
 801159c:	b00d883a 	mov	r6,r22
 80115a0:	8018ad80 	call	8018ad8 <__ssprint_r>
 80115a4:	103c531e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80115a8:	d8c02017 	ldw	r3,128(sp)
 80115ac:	da000404 	addi	r8,sp,16
 80115b0:	003d1906 	br	8010a18 <__alt_data_end+0xf8010a18>
 80115b4:	d9002f17 	ldw	r4,188(sp)
 80115b8:	b80b883a 	mov	r5,r23
 80115bc:	b00d883a 	mov	r6,r22
 80115c0:	8018ad80 	call	8018ad8 <__ssprint_r>
 80115c4:	103c4b1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80115c8:	d8c02017 	ldw	r3,128(sp)
 80115cc:	da000404 	addi	r8,sp,16
 80115d0:	003d0306 	br	80109e0 <__alt_data_end+0xf80109e0>
 80115d4:	0025883a 	mov	r18,zero
 80115d8:	dd803115 	stw	r22,196(sp)
 80115dc:	003ca406 	br	8010870 <__alt_data_end+0xf8010870>
 80115e0:	dc002617 	ldw	r16,152(sp)
 80115e4:	0401480e 	bge	zero,r16,8011b08 <___svfprintf_internal_r+0x1734>
 80115e8:	db003117 	ldw	r12,196(sp)
 80115ec:	dac03317 	ldw	r11,204(sp)
 80115f0:	62e1883a 	add	r16,r12,r11
 80115f4:	db003417 	ldw	r12,208(sp)
 80115f8:	5825883a 	mov	r18,r11
 80115fc:	62c0010e 	bge	r12,r11,8011604 <___svfprintf_internal_r+0x1230>
 8011600:	6025883a 	mov	r18,r12
 8011604:	04800b0e 	bge	zero,r18,8011634 <___svfprintf_internal_r+0x1260>
 8011608:	d8801f17 	ldw	r2,124(sp)
 801160c:	dac03117 	ldw	r11,196(sp)
 8011610:	1c87883a 	add	r3,r3,r18
 8011614:	10800044 	addi	r2,r2,1
 8011618:	42c00015 	stw	r11,0(r8)
 801161c:	44800115 	stw	r18,4(r8)
 8011620:	d8c02015 	stw	r3,128(sp)
 8011624:	d8801f15 	stw	r2,124(sp)
 8011628:	010001c4 	movi	r4,7
 801162c:	20823f16 	blt	r4,r2,8011f2c <___svfprintf_internal_r+0x1b58>
 8011630:	42000204 	addi	r8,r8,8
 8011634:	90023b16 	blt	r18,zero,8011f24 <___svfprintf_internal_r+0x1b50>
 8011638:	db003417 	ldw	r12,208(sp)
 801163c:	64a5c83a 	sub	r18,r12,r18
 8011640:	0480780e 	bge	zero,r18,8011824 <___svfprintf_internal_r+0x1450>
 8011644:	05400404 	movi	r21,16
 8011648:	d8801f17 	ldw	r2,124(sp)
 801164c:	ac81140e 	bge	r21,r18,8011aa0 <___svfprintf_internal_r+0x16cc>
 8011650:	014205b4 	movhi	r5,2070
 8011654:	2957ca84 	addi	r5,r5,24362
 8011658:	d9402b15 	stw	r5,172(sp)
 801165c:	070001c4 	movi	fp,7
 8011660:	dcc02f17 	ldw	r19,188(sp)
 8011664:	00000306 	br	8011674 <___svfprintf_internal_r+0x12a0>
 8011668:	42000204 	addi	r8,r8,8
 801166c:	94bffc04 	addi	r18,r18,-16
 8011670:	ac810e0e 	bge	r21,r18,8011aac <___svfprintf_internal_r+0x16d8>
 8011674:	18c00404 	addi	r3,r3,16
 8011678:	10800044 	addi	r2,r2,1
 801167c:	45000015 	stw	r20,0(r8)
 8011680:	45400115 	stw	r21,4(r8)
 8011684:	d8c02015 	stw	r3,128(sp)
 8011688:	d8801f15 	stw	r2,124(sp)
 801168c:	e0bff60e 	bge	fp,r2,8011668 <__alt_data_end+0xf8011668>
 8011690:	9809883a 	mov	r4,r19
 8011694:	b80b883a 	mov	r5,r23
 8011698:	b00d883a 	mov	r6,r22
 801169c:	8018ad80 	call	8018ad8 <__ssprint_r>
 80116a0:	103c141e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80116a4:	d8c02017 	ldw	r3,128(sp)
 80116a8:	d8801f17 	ldw	r2,124(sp)
 80116ac:	da000404 	addi	r8,sp,16
 80116b0:	003fee06 	br	801166c <__alt_data_end+0xf801166c>
 80116b4:	d9002f17 	ldw	r4,188(sp)
 80116b8:	b80b883a 	mov	r5,r23
 80116bc:	b00d883a 	mov	r6,r22
 80116c0:	8018ad80 	call	8018ad8 <__ssprint_r>
 80116c4:	103c0b1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80116c8:	d8c02017 	ldw	r3,128(sp)
 80116cc:	d8802787 	ldb	r2,158(sp)
 80116d0:	da000404 	addi	r8,sp,16
 80116d4:	003cb506 	br	80109ac <__alt_data_end+0xf80109ac>
 80116d8:	657fffc4 	addi	r21,r12,-1
 80116dc:	057f750e 	bge	zero,r21,80114b4 <__alt_data_end+0xf80114b4>
 80116e0:	07000404 	movi	fp,16
 80116e4:	e542ed0e 	bge	fp,r21,801229c <___svfprintf_internal_r+0x1ec8>
 80116e8:	010205b4 	movhi	r4,2070
 80116ec:	2117ca84 	addi	r4,r4,24362
 80116f0:	d9002b15 	stw	r4,172(sp)
 80116f4:	01c001c4 	movi	r7,7
 80116f8:	dcc02f17 	ldw	r19,188(sp)
 80116fc:	00000306 	br	801170c <___svfprintf_internal_r+0x1338>
 8011700:	ad7ffc04 	addi	r21,r21,-16
 8011704:	94800204 	addi	r18,r18,8
 8011708:	e540130e 	bge	fp,r21,8011758 <___svfprintf_internal_r+0x1384>
 801170c:	18c00404 	addi	r3,r3,16
 8011710:	84000044 	addi	r16,r16,1
 8011714:	95000015 	stw	r20,0(r18)
 8011718:	97000115 	stw	fp,4(r18)
 801171c:	d8c02015 	stw	r3,128(sp)
 8011720:	dc001f15 	stw	r16,124(sp)
 8011724:	3c3ff60e 	bge	r7,r16,8011700 <__alt_data_end+0xf8011700>
 8011728:	9809883a 	mov	r4,r19
 801172c:	b80b883a 	mov	r5,r23
 8011730:	b00d883a 	mov	r6,r22
 8011734:	d9c03e15 	stw	r7,248(sp)
 8011738:	8018ad80 	call	8018ad8 <__ssprint_r>
 801173c:	d9c03e17 	ldw	r7,248(sp)
 8011740:	103bec1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011744:	ad7ffc04 	addi	r21,r21,-16
 8011748:	d8c02017 	ldw	r3,128(sp)
 801174c:	dc001f17 	ldw	r16,124(sp)
 8011750:	dc800404 	addi	r18,sp,16
 8011754:	e57fed16 	blt	fp,r21,801170c <__alt_data_end+0xf801170c>
 8011758:	dac02b17 	ldw	r11,172(sp)
 801175c:	1d47883a 	add	r3,r3,r21
 8011760:	84000044 	addi	r16,r16,1
 8011764:	92c00015 	stw	r11,0(r18)
 8011768:	95400115 	stw	r21,4(r18)
 801176c:	d8c02015 	stw	r3,128(sp)
 8011770:	dc001f15 	stw	r16,124(sp)
 8011774:	008001c4 	movi	r2,7
 8011778:	143f4d0e 	bge	r2,r16,80114b0 <__alt_data_end+0xf80114b0>
 801177c:	d9002f17 	ldw	r4,188(sp)
 8011780:	b80b883a 	mov	r5,r23
 8011784:	b00d883a 	mov	r6,r22
 8011788:	8018ad80 	call	8018ad8 <__ssprint_r>
 801178c:	103bd91e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011790:	d8c02017 	ldw	r3,128(sp)
 8011794:	dc001f17 	ldw	r16,124(sp)
 8011798:	dc800404 	addi	r18,sp,16
 801179c:	003f4506 	br	80114b4 <__alt_data_end+0xf80114b4>
 80117a0:	00800084 	movi	r2,2
 80117a4:	9f06b03a 	or	r3,r19,fp
 80117a8:	003d5706 	br	8010d08 <__alt_data_end+0xf8010d08>
 80117ac:	1cc00017 	ldw	r19,0(r3)
 80117b0:	dac02d17 	ldw	r11,180(sp)
 80117b4:	9839d7fa 	srai	fp,r19,31
 80117b8:	5ac00104 	addi	r11,r11,4
 80117bc:	dac02d15 	stw	r11,180(sp)
 80117c0:	e005883a 	mov	r2,fp
 80117c4:	003c0306 	br	80107d4 <__alt_data_end+0xf80107d4>
 80117c8:	dac02d17 	ldw	r11,180(sp)
 80117cc:	0039883a 	mov	fp,zero
 80117d0:	0005883a 	mov	r2,zero
 80117d4:	5cc00017 	ldw	r19,0(r11)
 80117d8:	5ac00104 	addi	r11,r11,4
 80117dc:	dac02d15 	stw	r11,180(sp)
 80117e0:	9807883a 	mov	r3,r19
 80117e4:	003d4806 	br	8010d08 <__alt_data_end+0xf8010d08>
 80117e8:	db002d17 	ldw	r12,180(sp)
 80117ec:	14c00017 	ldw	r19,0(r2)
 80117f0:	0039883a 	mov	fp,zero
 80117f4:	63000104 	addi	r12,r12,4
 80117f8:	db002d15 	stw	r12,180(sp)
 80117fc:	00800044 	movi	r2,1
 8011800:	9807883a 	mov	r3,r19
 8011804:	003d4006 	br	8010d08 <__alt_data_end+0xf8010d08>
 8011808:	d9002f17 	ldw	r4,188(sp)
 801180c:	b80b883a 	mov	r5,r23
 8011810:	b00d883a 	mov	r6,r22
 8011814:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011818:	103bb61e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 801181c:	d8c02017 	ldw	r3,128(sp)
 8011820:	da000404 	addi	r8,sp,16
 8011824:	db003117 	ldw	r12,196(sp)
 8011828:	dac03417 	ldw	r11,208(sp)
 801182c:	d8802617 	ldw	r2,152(sp)
 8011830:	62e5883a 	add	r18,r12,r11
 8011834:	db003317 	ldw	r12,204(sp)
 8011838:	13000216 	blt	r2,r12,8011844 <___svfprintf_internal_r+0x1470>
 801183c:	8900004c 	andi	r4,r17,1
 8011840:	20000c26 	beq	r4,zero,8011874 <___svfprintf_internal_r+0x14a0>
 8011844:	dac03917 	ldw	r11,228(sp)
 8011848:	d9001f17 	ldw	r4,124(sp)
 801184c:	db003517 	ldw	r12,212(sp)
 8011850:	1ac7883a 	add	r3,r3,r11
 8011854:	21000044 	addi	r4,r4,1
 8011858:	43000015 	stw	r12,0(r8)
 801185c:	42c00115 	stw	r11,4(r8)
 8011860:	d8c02015 	stw	r3,128(sp)
 8011864:	d9001f15 	stw	r4,124(sp)
 8011868:	014001c4 	movi	r5,7
 801186c:	2901b716 	blt	r5,r4,8011f4c <___svfprintf_internal_r+0x1b78>
 8011870:	42000204 	addi	r8,r8,8
 8011874:	dac03317 	ldw	r11,204(sp)
 8011878:	8489c83a 	sub	r4,r16,r18
 801187c:	5885c83a 	sub	r2,r11,r2
 8011880:	1021883a 	mov	r16,r2
 8011884:	2080010e 	bge	r4,r2,801188c <___svfprintf_internal_r+0x14b8>
 8011888:	2021883a 	mov	r16,r4
 801188c:	04000a0e 	bge	zero,r16,80118b8 <___svfprintf_internal_r+0x14e4>
 8011890:	d9001f17 	ldw	r4,124(sp)
 8011894:	1c07883a 	add	r3,r3,r16
 8011898:	44800015 	stw	r18,0(r8)
 801189c:	21000044 	addi	r4,r4,1
 80118a0:	44000115 	stw	r16,4(r8)
 80118a4:	d8c02015 	stw	r3,128(sp)
 80118a8:	d9001f15 	stw	r4,124(sp)
 80118ac:	014001c4 	movi	r5,7
 80118b0:	2901bf16 	blt	r5,r4,8011fb0 <___svfprintf_internal_r+0x1bdc>
 80118b4:	42000204 	addi	r8,r8,8
 80118b8:	8001bb16 	blt	r16,zero,8011fa8 <___svfprintf_internal_r+0x1bd4>
 80118bc:	1421c83a 	sub	r16,r2,r16
 80118c0:	043c990e 	bge	zero,r16,8010b28 <__alt_data_end+0xf8010b28>
 80118c4:	04800404 	movi	r18,16
 80118c8:	d8801f17 	ldw	r2,124(sp)
 80118cc:	943f0b0e 	bge	r18,r16,80114fc <__alt_data_end+0xf80114fc>
 80118d0:	014205b4 	movhi	r5,2070
 80118d4:	2957ca84 	addi	r5,r5,24362
 80118d8:	d9402b15 	stw	r5,172(sp)
 80118dc:	054001c4 	movi	r21,7
 80118e0:	dcc02f17 	ldw	r19,188(sp)
 80118e4:	00000306 	br	80118f4 <___svfprintf_internal_r+0x1520>
 80118e8:	42000204 	addi	r8,r8,8
 80118ec:	843ffc04 	addi	r16,r16,-16
 80118f0:	943f050e 	bge	r18,r16,8011508 <__alt_data_end+0xf8011508>
 80118f4:	18c00404 	addi	r3,r3,16
 80118f8:	10800044 	addi	r2,r2,1
 80118fc:	45000015 	stw	r20,0(r8)
 8011900:	44800115 	stw	r18,4(r8)
 8011904:	d8c02015 	stw	r3,128(sp)
 8011908:	d8801f15 	stw	r2,124(sp)
 801190c:	a8bff60e 	bge	r21,r2,80118e8 <__alt_data_end+0xf80118e8>
 8011910:	9809883a 	mov	r4,r19
 8011914:	b80b883a 	mov	r5,r23
 8011918:	b00d883a 	mov	r6,r22
 801191c:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011920:	103b741e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011924:	d8c02017 	ldw	r3,128(sp)
 8011928:	d8801f17 	ldw	r2,124(sp)
 801192c:	da000404 	addi	r8,sp,16
 8011930:	003fee06 	br	80118ec <__alt_data_end+0xf80118ec>
 8011934:	8888703a 	and	r4,r17,r2
 8011938:	203eb31e 	bne	r4,zero,8011408 <__alt_data_end+0xf8011408>
 801193c:	dc001f17 	ldw	r16,124(sp)
 8011940:	db003117 	ldw	r12,196(sp)
 8011944:	40800115 	stw	r2,4(r8)
 8011948:	84000044 	addi	r16,r16,1
 801194c:	43000015 	stw	r12,0(r8)
 8011950:	d8c02015 	stw	r3,128(sp)
 8011954:	dc001f15 	stw	r16,124(sp)
 8011958:	008001c4 	movi	r2,7
 801195c:	143f8716 	blt	r2,r16,801177c <__alt_data_end+0xf801177c>
 8011960:	44800204 	addi	r18,r8,8
 8011964:	003ed306 	br	80114b4 <__alt_data_end+0xf80114b4>
 8011968:	d9002f17 	ldw	r4,188(sp)
 801196c:	b80b883a 	mov	r5,r23
 8011970:	b00d883a 	mov	r6,r22
 8011974:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011978:	103b5e1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 801197c:	d8c02017 	ldw	r3,128(sp)
 8011980:	dc001f17 	ldw	r16,124(sp)
 8011984:	da000404 	addi	r8,sp,16
 8011988:	003eaa06 	br	8011434 <__alt_data_end+0xf8011434>
 801198c:	d9002f17 	ldw	r4,188(sp)
 8011990:	b80b883a 	mov	r5,r23
 8011994:	b00d883a 	mov	r6,r22
 8011998:	8018ad80 	call	8018ad8 <__ssprint_r>
 801199c:	103b551e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80119a0:	d8c02017 	ldw	r3,128(sp)
 80119a4:	dc001f17 	ldw	r16,124(sp)
 80119a8:	dc800404 	addi	r18,sp,16
 80119ac:	003eac06 	br	8011460 <__alt_data_end+0xf8011460>
 80119b0:	d9002f17 	ldw	r4,188(sp)
 80119b4:	b80b883a 	mov	r5,r23
 80119b8:	b00d883a 	mov	r6,r22
 80119bc:	8018ad80 	call	8018ad8 <__ssprint_r>
 80119c0:	103b4c1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80119c4:	d8c02017 	ldw	r3,128(sp)
 80119c8:	da000404 	addi	r8,sp,16
 80119cc:	003c1506 	br	8010a24 <__alt_data_end+0xf8010a24>
 80119d0:	da004015 	stw	r8,256(sp)
 80119d4:	da403f15 	stw	r9,252(sp)
 80119d8:	80188840 	call	8018884 <__fpclassifyd>
 80119dc:	da004017 	ldw	r8,256(sp)
 80119e0:	da403f17 	ldw	r9,252(sp)
 80119e4:	1000951e 	bne	r2,zero,8011c3c <___svfprintf_internal_r+0x1868>
 80119e8:	008011c4 	movi	r2,71
 80119ec:	1400fb16 	blt	r2,r16,8011ddc <___svfprintf_internal_r+0x1a08>
 80119f0:	030205b4 	movhi	r12,2070
 80119f4:	6317bc04 	addi	r12,r12,24304
 80119f8:	db003115 	stw	r12,196(sp)
 80119fc:	00c000c4 	movi	r3,3
 8011a00:	00bfdfc4 	movi	r2,-129
 8011a04:	d8c02a15 	stw	r3,168(sp)
 8011a08:	88a2703a 	and	r17,r17,r2
 8011a0c:	dd402783 	ldbu	r21,158(sp)
 8011a10:	dcc02d15 	stw	r19,180(sp)
 8011a14:	1825883a 	mov	r18,r3
 8011a18:	d8003215 	stw	zero,200(sp)
 8011a1c:	d8003415 	stw	zero,208(sp)
 8011a20:	003b9806 	br	8010884 <__alt_data_end+0xf8010884>
 8011a24:	1c000007 	ldb	r16,0(r3)
 8011a28:	1805883a 	mov	r2,r3
 8011a2c:	003abf06 	br	801052c <__alt_data_end+0xf801052c>
 8011a30:	00800084 	movi	r2,2
 8011a34:	003cb406 	br	8010d08 <__alt_data_end+0xf8010d08>
 8011a38:	88c0100c 	andi	r3,r17,64
 8011a3c:	1800f626 	beq	r3,zero,8011e18 <___svfprintf_internal_r+0x1a44>
 8011a40:	dac02d17 	ldw	r11,180(sp)
 8011a44:	14c0000b 	ldhu	r19,0(r2)
 8011a48:	0039883a 	mov	fp,zero
 8011a4c:	5ac00104 	addi	r11,r11,4
 8011a50:	dac02d15 	stw	r11,180(sp)
 8011a54:	003cbd06 	br	8010d4c <__alt_data_end+0xf8010d4c>
 8011a58:	8880040c 	andi	r2,r17,16
 8011a5c:	1000091e 	bne	r2,zero,8011a84 <___svfprintf_internal_r+0x16b0>
 8011a60:	8c40100c 	andi	r17,r17,64
 8011a64:	88000726 	beq	r17,zero,8011a84 <___svfprintf_internal_r+0x16b0>
 8011a68:	db002d17 	ldw	r12,180(sp)
 8011a6c:	dac03017 	ldw	r11,192(sp)
 8011a70:	60800017 	ldw	r2,0(r12)
 8011a74:	63000104 	addi	r12,r12,4
 8011a78:	db002d15 	stw	r12,180(sp)
 8011a7c:	12c0000d 	sth	r11,0(r2)
 8011a80:	003a8006 	br	8010484 <__alt_data_end+0xf8010484>
 8011a84:	db002d17 	ldw	r12,180(sp)
 8011a88:	dac03017 	ldw	r11,192(sp)
 8011a8c:	60800017 	ldw	r2,0(r12)
 8011a90:	63000104 	addi	r12,r12,4
 8011a94:	db002d15 	stw	r12,180(sp)
 8011a98:	12c00015 	stw	r11,0(r2)
 8011a9c:	003a7906 	br	8010484 <__alt_data_end+0xf8010484>
 8011aa0:	010205b4 	movhi	r4,2070
 8011aa4:	2117ca84 	addi	r4,r4,24362
 8011aa8:	d9002b15 	stw	r4,172(sp)
 8011aac:	dac02b17 	ldw	r11,172(sp)
 8011ab0:	1c87883a 	add	r3,r3,r18
 8011ab4:	10800044 	addi	r2,r2,1
 8011ab8:	42c00015 	stw	r11,0(r8)
 8011abc:	44800115 	stw	r18,4(r8)
 8011ac0:	d8c02015 	stw	r3,128(sp)
 8011ac4:	d8801f15 	stw	r2,124(sp)
 8011ac8:	010001c4 	movi	r4,7
 8011acc:	20bf4e16 	blt	r4,r2,8011808 <__alt_data_end+0xf8011808>
 8011ad0:	42000204 	addi	r8,r8,8
 8011ad4:	003f5306 	br	8011824 <__alt_data_end+0xf8011824>
 8011ad8:	010205b4 	movhi	r4,2070
 8011adc:	2117ca84 	addi	r4,r4,24362
 8011ae0:	d9002b15 	stw	r4,172(sp)
 8011ae4:	003bf906 	br	8010acc <__alt_data_end+0xf8010acc>
 8011ae8:	d9002f17 	ldw	r4,188(sp)
 8011aec:	b80b883a 	mov	r5,r23
 8011af0:	b00d883a 	mov	r6,r22
 8011af4:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011af8:	103afe1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011afc:	d8c02017 	ldw	r3,128(sp)
 8011b00:	da000404 	addi	r8,sp,16
 8011b04:	003dc606 	br	8011220 <__alt_data_end+0xf8011220>
 8011b08:	d8801f17 	ldw	r2,124(sp)
 8011b0c:	030205b4 	movhi	r12,2070
 8011b10:	01000044 	movi	r4,1
 8011b14:	18c00044 	addi	r3,r3,1
 8011b18:	10800044 	addi	r2,r2,1
 8011b1c:	6317ca04 	addi	r12,r12,24360
 8011b20:	41000115 	stw	r4,4(r8)
 8011b24:	43000015 	stw	r12,0(r8)
 8011b28:	d8c02015 	stw	r3,128(sp)
 8011b2c:	d8801f15 	stw	r2,124(sp)
 8011b30:	010001c4 	movi	r4,7
 8011b34:	2080ad16 	blt	r4,r2,8011dec <___svfprintf_internal_r+0x1a18>
 8011b38:	42000204 	addi	r8,r8,8
 8011b3c:	8000041e 	bne	r16,zero,8011b50 <___svfprintf_internal_r+0x177c>
 8011b40:	dac03317 	ldw	r11,204(sp)
 8011b44:	5800021e 	bne	r11,zero,8011b50 <___svfprintf_internal_r+0x177c>
 8011b48:	8880004c 	andi	r2,r17,1
 8011b4c:	103bf626 	beq	r2,zero,8010b28 <__alt_data_end+0xf8010b28>
 8011b50:	db003917 	ldw	r12,228(sp)
 8011b54:	d8801f17 	ldw	r2,124(sp)
 8011b58:	dac03517 	ldw	r11,212(sp)
 8011b5c:	1b07883a 	add	r3,r3,r12
 8011b60:	10800044 	addi	r2,r2,1
 8011b64:	42c00015 	stw	r11,0(r8)
 8011b68:	43000115 	stw	r12,4(r8)
 8011b6c:	d8c02015 	stw	r3,128(sp)
 8011b70:	d8801f15 	stw	r2,124(sp)
 8011b74:	010001c4 	movi	r4,7
 8011b78:	20818616 	blt	r4,r2,8012194 <___svfprintf_internal_r+0x1dc0>
 8011b7c:	42000204 	addi	r8,r8,8
 8011b80:	0421c83a 	sub	r16,zero,r16
 8011b84:	0400bc0e 	bge	zero,r16,8011e78 <___svfprintf_internal_r+0x1aa4>
 8011b88:	04800404 	movi	r18,16
 8011b8c:	9400f80e 	bge	r18,r16,8011f70 <___svfprintf_internal_r+0x1b9c>
 8011b90:	010205b4 	movhi	r4,2070
 8011b94:	2117ca84 	addi	r4,r4,24362
 8011b98:	d9002b15 	stw	r4,172(sp)
 8011b9c:	054001c4 	movi	r21,7
 8011ba0:	dcc02f17 	ldw	r19,188(sp)
 8011ba4:	00000306 	br	8011bb4 <___svfprintf_internal_r+0x17e0>
 8011ba8:	42000204 	addi	r8,r8,8
 8011bac:	843ffc04 	addi	r16,r16,-16
 8011bb0:	9400f20e 	bge	r18,r16,8011f7c <___svfprintf_internal_r+0x1ba8>
 8011bb4:	18c00404 	addi	r3,r3,16
 8011bb8:	10800044 	addi	r2,r2,1
 8011bbc:	45000015 	stw	r20,0(r8)
 8011bc0:	44800115 	stw	r18,4(r8)
 8011bc4:	d8c02015 	stw	r3,128(sp)
 8011bc8:	d8801f15 	stw	r2,124(sp)
 8011bcc:	a8bff60e 	bge	r21,r2,8011ba8 <__alt_data_end+0xf8011ba8>
 8011bd0:	9809883a 	mov	r4,r19
 8011bd4:	b80b883a 	mov	r5,r23
 8011bd8:	b00d883a 	mov	r6,r22
 8011bdc:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011be0:	103ac41e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011be4:	d8c02017 	ldw	r3,128(sp)
 8011be8:	d8801f17 	ldw	r2,124(sp)
 8011bec:	da000404 	addi	r8,sp,16
 8011bf0:	003fee06 	br	8011bac <__alt_data_end+0xf8011bac>
 8011bf4:	db002e17 	ldw	r12,184(sp)
 8011bf8:	1805883a 	mov	r2,r3
 8011bfc:	dac02d15 	stw	r11,180(sp)
 8011c00:	0319c83a 	sub	r12,zero,r12
 8011c04:	db002e15 	stw	r12,184(sp)
 8011c08:	003acf06 	br	8010748 <__alt_data_end+0xf8010748>
 8011c0c:	18800044 	addi	r2,r3,1
 8011c10:	8c400814 	ori	r17,r17,32
 8011c14:	1c000047 	ldb	r16,1(r3)
 8011c18:	003a4406 	br	801052c <__alt_data_end+0xf801052c>
 8011c1c:	d9002f17 	ldw	r4,188(sp)
 8011c20:	b80b883a 	mov	r5,r23
 8011c24:	b00d883a 	mov	r6,r22
 8011c28:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011c2c:	103ab11e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011c30:	d8c02017 	ldw	r3,128(sp)
 8011c34:	da000404 	addi	r8,sp,16
 8011c38:	003d8a06 	br	8011264 <__alt_data_end+0xf8011264>
 8011c3c:	057ff7c4 	movi	r21,-33
 8011c40:	00bfffc4 	movi	r2,-1
 8011c44:	856a703a 	and	r21,r16,r21
 8011c48:	48807126 	beq	r9,r2,8011e10 <___svfprintf_internal_r+0x1a3c>
 8011c4c:	008011c4 	movi	r2,71
 8011c50:	a8814d26 	beq	r21,r2,8012188 <___svfprintf_internal_r+0x1db4>
 8011c54:	db003817 	ldw	r12,224(sp)
 8011c58:	8ac04014 	ori	r11,r17,256
 8011c5c:	dac02d15 	stw	r11,180(sp)
 8011c60:	60015616 	blt	r12,zero,80121bc <___svfprintf_internal_r+0x1de8>
 8011c64:	dc803817 	ldw	r18,224(sp)
 8011c68:	d8002a05 	stb	zero,168(sp)
 8011c6c:	00801984 	movi	r2,102
 8011c70:	80808c26 	beq	r16,r2,8011ea4 <___svfprintf_internal_r+0x1ad0>
 8011c74:	00801184 	movi	r2,70
 8011c78:	80808a26 	beq	r16,r2,8011ea4 <___svfprintf_internal_r+0x1ad0>
 8011c7c:	00801144 	movi	r2,69
 8011c80:	a8815226 	beq	r21,r2,80121cc <___svfprintf_internal_r+0x1df8>
 8011c84:	4839883a 	mov	fp,r9
 8011c88:	d8802604 	addi	r2,sp,152
 8011c8c:	d8800115 	stw	r2,4(sp)
 8011c90:	d9002f17 	ldw	r4,188(sp)
 8011c94:	d8802504 	addi	r2,sp,148
 8011c98:	d9403717 	ldw	r5,220(sp)
 8011c9c:	d8800215 	stw	r2,8(sp)
 8011ca0:	d8802104 	addi	r2,sp,132
 8011ca4:	df000015 	stw	fp,0(sp)
 8011ca8:	d8800315 	stw	r2,12(sp)
 8011cac:	900d883a 	mov	r6,r18
 8011cb0:	01c00084 	movi	r7,2
 8011cb4:	da004015 	stw	r8,256(sp)
 8011cb8:	da403f15 	stw	r9,252(sp)
 8011cbc:	80146e80 	call	80146e8 <_dtoa_r>
 8011cc0:	d8803115 	stw	r2,196(sp)
 8011cc4:	008019c4 	movi	r2,103
 8011cc8:	da004017 	ldw	r8,256(sp)
 8011ccc:	da403f17 	ldw	r9,252(sp)
 8011cd0:	80800226 	beq	r16,r2,8011cdc <___svfprintf_internal_r+0x1908>
 8011cd4:	008011c4 	movi	r2,71
 8011cd8:	8080841e 	bne	r16,r2,8011eec <___svfprintf_internal_r+0x1b18>
 8011cdc:	8880004c 	andi	r2,r17,1
 8011ce0:	10014f26 	beq	r2,zero,8012220 <___svfprintf_internal_r+0x1e4c>
 8011ce4:	db003117 	ldw	r12,196(sp)
 8011ce8:	6715883a 	add	r10,r12,fp
 8011cec:	d9003717 	ldw	r4,220(sp)
 8011cf0:	900b883a 	mov	r5,r18
 8011cf4:	000d883a 	mov	r6,zero
 8011cf8:	000f883a 	mov	r7,zero
 8011cfc:	da004015 	stw	r8,256(sp)
 8011d00:	da403f15 	stw	r9,252(sp)
 8011d04:	da803e15 	stw	r10,248(sp)
 8011d08:	800db780 	call	800db78 <__eqdf2>
 8011d0c:	da004017 	ldw	r8,256(sp)
 8011d10:	da403f17 	ldw	r9,252(sp)
 8011d14:	da803e17 	ldw	r10,248(sp)
 8011d18:	1000d926 	beq	r2,zero,8012080 <___svfprintf_internal_r+0x1cac>
 8011d1c:	d8802117 	ldw	r2,132(sp)
 8011d20:	1280062e 	bgeu	r2,r10,8011d3c <___svfprintf_internal_r+0x1968>
 8011d24:	01000c04 	movi	r4,48
 8011d28:	10c00044 	addi	r3,r2,1
 8011d2c:	d8c02115 	stw	r3,132(sp)
 8011d30:	11000005 	stb	r4,0(r2)
 8011d34:	d8802117 	ldw	r2,132(sp)
 8011d38:	12bffb36 	bltu	r2,r10,8011d28 <__alt_data_end+0xf8011d28>
 8011d3c:	db003117 	ldw	r12,196(sp)
 8011d40:	1305c83a 	sub	r2,r2,r12
 8011d44:	d8803315 	stw	r2,204(sp)
 8011d48:	008011c4 	movi	r2,71
 8011d4c:	a880b626 	beq	r21,r2,8012028 <___svfprintf_internal_r+0x1c54>
 8011d50:	00801944 	movi	r2,101
 8011d54:	14017c0e 	bge	r2,r16,8012348 <___svfprintf_internal_r+0x1f74>
 8011d58:	00801984 	movi	r2,102
 8011d5c:	80812626 	beq	r16,r2,80121f8 <___svfprintf_internal_r+0x1e24>
 8011d60:	db002617 	ldw	r12,152(sp)
 8011d64:	db003415 	stw	r12,208(sp)
 8011d68:	db003417 	ldw	r12,208(sp)
 8011d6c:	dac03317 	ldw	r11,204(sp)
 8011d70:	62c11816 	blt	r12,r11,80121d4 <___svfprintf_internal_r+0x1e00>
 8011d74:	8c40004c 	andi	r17,r17,1
 8011d78:	88013b1e 	bne	r17,zero,8012268 <___svfprintf_internal_r+0x1e94>
 8011d7c:	6005883a 	mov	r2,r12
 8011d80:	60012516 	blt	r12,zero,8012218 <___svfprintf_internal_r+0x1e44>
 8011d84:	dc803417 	ldw	r18,208(sp)
 8011d88:	df002a07 	ldb	fp,168(sp)
 8011d8c:	e000b01e 	bne	fp,zero,8012050 <___svfprintf_internal_r+0x1c7c>
 8011d90:	dc402d17 	ldw	r17,180(sp)
 8011d94:	dd402783 	ldbu	r21,158(sp)
 8011d98:	d8802a15 	stw	r2,168(sp)
 8011d9c:	dcc02d15 	stw	r19,180(sp)
 8011da0:	d8003215 	stw	zero,200(sp)
 8011da4:	003ab706 	br	8010884 <__alt_data_end+0xf8010884>
 8011da8:	008205b4 	movhi	r2,2070
 8011dac:	1097ba04 	addi	r2,r2,24296
 8011db0:	d8803115 	stw	r2,196(sp)
 8011db4:	003bbb06 	br	8010ca4 <__alt_data_end+0xf8010ca4>
 8011db8:	d9002f17 	ldw	r4,188(sp)
 8011dbc:	04001004 	movi	r16,64
 8011dc0:	800b883a 	mov	r5,r16
 8011dc4:	800f4b00 	call	800f4b0 <_malloc_r>
 8011dc8:	b8800015 	stw	r2,0(r23)
 8011dcc:	b8800415 	stw	r2,16(r23)
 8011dd0:	10015f26 	beq	r2,zero,8012350 <___svfprintf_internal_r+0x1f7c>
 8011dd4:	bc000515 	stw	r16,20(r23)
 8011dd8:	00399806 	br	801043c <__alt_data_end+0xf801043c>
 8011ddc:	008205b4 	movhi	r2,2070
 8011de0:	1097bd04 	addi	r2,r2,24308
 8011de4:	d8803115 	stw	r2,196(sp)
 8011de8:	003f0406 	br	80119fc <__alt_data_end+0xf80119fc>
 8011dec:	d9002f17 	ldw	r4,188(sp)
 8011df0:	b80b883a 	mov	r5,r23
 8011df4:	b00d883a 	mov	r6,r22
 8011df8:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011dfc:	103a3d1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011e00:	dc002617 	ldw	r16,152(sp)
 8011e04:	d8c02017 	ldw	r3,128(sp)
 8011e08:	da000404 	addi	r8,sp,16
 8011e0c:	003f4b06 	br	8011b3c <__alt_data_end+0xf8011b3c>
 8011e10:	02400184 	movi	r9,6
 8011e14:	003f8f06 	br	8011c54 <__alt_data_end+0xf8011c54>
 8011e18:	db002d17 	ldw	r12,180(sp)
 8011e1c:	14c00017 	ldw	r19,0(r2)
 8011e20:	0039883a 	mov	fp,zero
 8011e24:	63000104 	addi	r12,r12,4
 8011e28:	db002d15 	stw	r12,180(sp)
 8011e2c:	003bc706 	br	8010d4c <__alt_data_end+0xf8010d4c>
 8011e30:	d8c03117 	ldw	r3,196(sp)
 8011e34:	b0e5c83a 	sub	r18,r22,r3
 8011e38:	003a8d06 	br	8010870 <__alt_data_end+0xf8010870>
 8011e3c:	da004015 	stw	r8,256(sp)
 8011e40:	801033c0 	call	801033c <strlen>
 8011e44:	1025883a 	mov	r18,r2
 8011e48:	da004017 	ldw	r8,256(sp)
 8011e4c:	903bf20e 	bge	r18,zero,8010e18 <__alt_data_end+0xf8010e18>
 8011e50:	0005883a 	mov	r2,zero
 8011e54:	003bf006 	br	8010e18 <__alt_data_end+0xf8010e18>
 8011e58:	d9002f17 	ldw	r4,188(sp)
 8011e5c:	b80b883a 	mov	r5,r23
 8011e60:	b00d883a 	mov	r6,r22
 8011e64:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011e68:	103a221e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011e6c:	d8c02017 	ldw	r3,128(sp)
 8011e70:	d8801f17 	ldw	r2,124(sp)
 8011e74:	da000404 	addi	r8,sp,16
 8011e78:	db003317 	ldw	r12,204(sp)
 8011e7c:	dac03117 	ldw	r11,196(sp)
 8011e80:	10800044 	addi	r2,r2,1
 8011e84:	1b07883a 	add	r3,r3,r12
 8011e88:	42c00015 	stw	r11,0(r8)
 8011e8c:	43000115 	stw	r12,4(r8)
 8011e90:	d8c02015 	stw	r3,128(sp)
 8011e94:	d8801f15 	stw	r2,124(sp)
 8011e98:	010001c4 	movi	r4,7
 8011e9c:	20bb210e 	bge	r4,r2,8010b24 <__alt_data_end+0xf8010b24>
 8011ea0:	003da206 	br	801152c <__alt_data_end+0xf801152c>
 8011ea4:	d8802604 	addi	r2,sp,152
 8011ea8:	d8800115 	stw	r2,4(sp)
 8011eac:	d9002f17 	ldw	r4,188(sp)
 8011eb0:	d8802504 	addi	r2,sp,148
 8011eb4:	d9403717 	ldw	r5,220(sp)
 8011eb8:	d8800215 	stw	r2,8(sp)
 8011ebc:	d8802104 	addi	r2,sp,132
 8011ec0:	da400015 	stw	r9,0(sp)
 8011ec4:	d8800315 	stw	r2,12(sp)
 8011ec8:	900d883a 	mov	r6,r18
 8011ecc:	01c000c4 	movi	r7,3
 8011ed0:	da004015 	stw	r8,256(sp)
 8011ed4:	da403f15 	stw	r9,252(sp)
 8011ed8:	80146e80 	call	80146e8 <_dtoa_r>
 8011edc:	da403f17 	ldw	r9,252(sp)
 8011ee0:	da004017 	ldw	r8,256(sp)
 8011ee4:	d8803115 	stw	r2,196(sp)
 8011ee8:	4839883a 	mov	fp,r9
 8011eec:	dac03117 	ldw	r11,196(sp)
 8011ef0:	00801184 	movi	r2,70
 8011ef4:	5f15883a 	add	r10,r11,fp
 8011ef8:	a8bf7c1e 	bne	r21,r2,8011cec <__alt_data_end+0xf8011cec>
 8011efc:	59000007 	ldb	r4,0(r11)
 8011f00:	00800c04 	movi	r2,48
 8011f04:	2080c826 	beq	r4,r2,8012228 <___svfprintf_internal_r+0x1e54>
 8011f08:	d8c02617 	ldw	r3,152(sp)
 8011f0c:	50d5883a 	add	r10,r10,r3
 8011f10:	003f7606 	br	8011cec <__alt_data_end+0xf8011cec>
 8011f14:	010205b4 	movhi	r4,2070
 8011f18:	2117ce84 	addi	r4,r4,24378
 8011f1c:	d9003615 	stw	r4,216(sp)
 8011f20:	003a9706 	br	8010980 <__alt_data_end+0xf8010980>
 8011f24:	0025883a 	mov	r18,zero
 8011f28:	003dc306 	br	8011638 <__alt_data_end+0xf8011638>
 8011f2c:	d9002f17 	ldw	r4,188(sp)
 8011f30:	b80b883a 	mov	r5,r23
 8011f34:	b00d883a 	mov	r6,r22
 8011f38:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011f3c:	1039ed1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011f40:	d8c02017 	ldw	r3,128(sp)
 8011f44:	da000404 	addi	r8,sp,16
 8011f48:	003dba06 	br	8011634 <__alt_data_end+0xf8011634>
 8011f4c:	d9002f17 	ldw	r4,188(sp)
 8011f50:	b80b883a 	mov	r5,r23
 8011f54:	b00d883a 	mov	r6,r22
 8011f58:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011f5c:	1039e51e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011f60:	d8802617 	ldw	r2,152(sp)
 8011f64:	d8c02017 	ldw	r3,128(sp)
 8011f68:	da000404 	addi	r8,sp,16
 8011f6c:	003e4106 	br	8011874 <__alt_data_end+0xf8011874>
 8011f70:	030205b4 	movhi	r12,2070
 8011f74:	6317ca84 	addi	r12,r12,24362
 8011f78:	db002b15 	stw	r12,172(sp)
 8011f7c:	dac02b17 	ldw	r11,172(sp)
 8011f80:	1c07883a 	add	r3,r3,r16
 8011f84:	10800044 	addi	r2,r2,1
 8011f88:	42c00015 	stw	r11,0(r8)
 8011f8c:	44000115 	stw	r16,4(r8)
 8011f90:	d8c02015 	stw	r3,128(sp)
 8011f94:	d8801f15 	stw	r2,124(sp)
 8011f98:	010001c4 	movi	r4,7
 8011f9c:	20bfae16 	blt	r4,r2,8011e58 <__alt_data_end+0xf8011e58>
 8011fa0:	42000204 	addi	r8,r8,8
 8011fa4:	003fb406 	br	8011e78 <__alt_data_end+0xf8011e78>
 8011fa8:	0021883a 	mov	r16,zero
 8011fac:	003e4306 	br	80118bc <__alt_data_end+0xf80118bc>
 8011fb0:	d9002f17 	ldw	r4,188(sp)
 8011fb4:	b80b883a 	mov	r5,r23
 8011fb8:	b00d883a 	mov	r6,r22
 8011fbc:	8018ad80 	call	8018ad8 <__ssprint_r>
 8011fc0:	1039cc1e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 8011fc4:	d8802617 	ldw	r2,152(sp)
 8011fc8:	db003317 	ldw	r12,204(sp)
 8011fcc:	d8c02017 	ldw	r3,128(sp)
 8011fd0:	da000404 	addi	r8,sp,16
 8011fd4:	6085c83a 	sub	r2,r12,r2
 8011fd8:	003e3706 	br	80118b8 <__alt_data_end+0xf80118b8>
 8011fdc:	00800184 	movi	r2,6
 8011fe0:	1240012e 	bgeu	r2,r9,8011fe8 <___svfprintf_internal_r+0x1c14>
 8011fe4:	1013883a 	mov	r9,r2
 8011fe8:	4825883a 	mov	r18,r9
 8011fec:	4805883a 	mov	r2,r9
 8011ff0:	4800a216 	blt	r9,zero,801227c <___svfprintf_internal_r+0x1ea8>
 8011ff4:	d8802a15 	stw	r2,168(sp)
 8011ff8:	008205b4 	movhi	r2,2070
 8011ffc:	1097c804 	addi	r2,r2,24352
 8012000:	d8803115 	stw	r2,196(sp)
 8012004:	dcc02d15 	stw	r19,180(sp)
 8012008:	d8003215 	stw	zero,200(sp)
 801200c:	d8003415 	stw	zero,208(sp)
 8012010:	0005883a 	mov	r2,zero
 8012014:	003a2206 	br	80108a0 <__alt_data_end+0xf80108a0>
 8012018:	030205b4 	movhi	r12,2070
 801201c:	6317ce84 	addi	r12,r12,24378
 8012020:	db003615 	stw	r12,216(sp)
 8012024:	003ae506 	br	8010bbc <__alt_data_end+0xf8010bbc>
 8012028:	d8c02617 	ldw	r3,152(sp)
 801202c:	00bfff44 	movi	r2,-3
 8012030:	18801516 	blt	r3,r2,8012088 <___svfprintf_internal_r+0x1cb4>
 8012034:	48c01416 	blt	r9,r3,8012088 <___svfprintf_internal_r+0x1cb4>
 8012038:	d8c03415 	stw	r3,208(sp)
 801203c:	040019c4 	movi	r16,103
 8012040:	003f4906 	br	8011d68 <__alt_data_end+0xf8011d68>
 8012044:	05400b44 	movi	r21,45
 8012048:	dd402785 	stb	r21,158(sp)
 801204c:	003b1006 	br	8010c90 <__alt_data_end+0xf8010c90>
 8012050:	00c00b44 	movi	r3,45
 8012054:	d8802a15 	stw	r2,168(sp)
 8012058:	dc402d17 	ldw	r17,180(sp)
 801205c:	d8c02785 	stb	r3,158(sp)
 8012060:	dcc02d15 	stw	r19,180(sp)
 8012064:	d8003215 	stw	zero,200(sp)
 8012068:	00800b44 	movi	r2,45
 801206c:	003a0906 	br	8010894 <__alt_data_end+0xf8010894>
 8012070:	010205b4 	movhi	r4,2070
 8012074:	2117ca84 	addi	r4,r4,24362
 8012078:	d9002b15 	stw	r4,172(sp)
 801207c:	003cc306 	br	801138c <__alt_data_end+0xf801138c>
 8012080:	5005883a 	mov	r2,r10
 8012084:	003f2d06 	br	8011d3c <__alt_data_end+0xf8011d3c>
 8012088:	843fff84 	addi	r16,r16,-2
 801208c:	1f3fffc4 	addi	fp,r3,-1
 8012090:	df002615 	stw	fp,152(sp)
 8012094:	dc0022c5 	stb	r16,139(sp)
 8012098:	e000a016 	blt	fp,zero,801231c <___svfprintf_internal_r+0x1f48>
 801209c:	00800ac4 	movi	r2,43
 80120a0:	d8802305 	stb	r2,140(sp)
 80120a4:	00800244 	movi	r2,9
 80120a8:	1700800e 	bge	r2,fp,80122ac <___svfprintf_internal_r+0x1ed8>
 80120ac:	dd4022c4 	addi	r21,sp,139
 80120b0:	dc002b15 	stw	r16,172(sp)
 80120b4:	4025883a 	mov	r18,r8
 80120b8:	a821883a 	mov	r16,r21
 80120bc:	e009883a 	mov	r4,fp
 80120c0:	01400284 	movi	r5,10
 80120c4:	800c9a40 	call	800c9a4 <__modsi3>
 80120c8:	10800c04 	addi	r2,r2,48
 80120cc:	843fffc4 	addi	r16,r16,-1
 80120d0:	e009883a 	mov	r4,fp
 80120d4:	01400284 	movi	r5,10
 80120d8:	80800005 	stb	r2,0(r16)
 80120dc:	800c9500 	call	800c950 <__divsi3>
 80120e0:	1039883a 	mov	fp,r2
 80120e4:	00800244 	movi	r2,9
 80120e8:	173ff416 	blt	r2,fp,80120bc <__alt_data_end+0xf80120bc>
 80120ec:	9011883a 	mov	r8,r18
 80120f0:	e0800c04 	addi	r2,fp,48
 80120f4:	8025883a 	mov	r18,r16
 80120f8:	913fffc4 	addi	r4,r18,-1
 80120fc:	90bfffc5 	stb	r2,-1(r18)
 8012100:	dc002b17 	ldw	r16,172(sp)
 8012104:	25408e2e 	bgeu	r4,r21,8012340 <___svfprintf_internal_r+0x1f6c>
 8012108:	d9402384 	addi	r5,sp,142
 801210c:	2c8bc83a 	sub	r5,r5,r18
 8012110:	d8c02344 	addi	r3,sp,141
 8012114:	a94b883a 	add	r5,r21,r5
 8012118:	00000106 	br	8012120 <___svfprintf_internal_r+0x1d4c>
 801211c:	20800003 	ldbu	r2,0(r4)
 8012120:	18800005 	stb	r2,0(r3)
 8012124:	18c00044 	addi	r3,r3,1
 8012128:	21000044 	addi	r4,r4,1
 801212c:	197ffb1e 	bne	r3,r5,801211c <__alt_data_end+0xf801211c>
 8012130:	d8802304 	addi	r2,sp,140
 8012134:	1485c83a 	sub	r2,r2,r18
 8012138:	d8c02344 	addi	r3,sp,141
 801213c:	1885883a 	add	r2,r3,r2
 8012140:	dac03317 	ldw	r11,204(sp)
 8012144:	156bc83a 	sub	r21,r2,r21
 8012148:	dd403a15 	stw	r21,232(sp)
 801214c:	00800044 	movi	r2,1
 8012150:	5d65883a 	add	r18,r11,r21
 8012154:	12c0770e 	bge	r2,r11,8012334 <___svfprintf_internal_r+0x1f60>
 8012158:	94800044 	addi	r18,r18,1
 801215c:	9005883a 	mov	r2,r18
 8012160:	90007216 	blt	r18,zero,801232c <___svfprintf_internal_r+0x1f58>
 8012164:	d8003415 	stw	zero,208(sp)
 8012168:	003f0706 	br	8011d88 <__alt_data_end+0xf8011d88>
 801216c:	da402a15 	stw	r9,168(sp)
 8012170:	dd402783 	ldbu	r21,158(sp)
 8012174:	4825883a 	mov	r18,r9
 8012178:	dcc02d15 	stw	r19,180(sp)
 801217c:	d8003215 	stw	zero,200(sp)
 8012180:	d8003415 	stw	zero,208(sp)
 8012184:	0039bf06 	br	8010884 <__alt_data_end+0xf8010884>
 8012188:	483eb21e 	bne	r9,zero,8011c54 <__alt_data_end+0xf8011c54>
 801218c:	9013883a 	mov	r9,r18
 8012190:	003eb006 	br	8011c54 <__alt_data_end+0xf8011c54>
 8012194:	d9002f17 	ldw	r4,188(sp)
 8012198:	b80b883a 	mov	r5,r23
 801219c:	b00d883a 	mov	r6,r22
 80121a0:	8018ad80 	call	8018ad8 <__ssprint_r>
 80121a4:	1039531e 	bne	r2,zero,80106f4 <__alt_data_end+0xf80106f4>
 80121a8:	dc002617 	ldw	r16,152(sp)
 80121ac:	d8c02017 	ldw	r3,128(sp)
 80121b0:	d8801f17 	ldw	r2,124(sp)
 80121b4:	da000404 	addi	r8,sp,16
 80121b8:	003e7106 	br	8011b80 <__alt_data_end+0xf8011b80>
 80121bc:	00c00b44 	movi	r3,45
 80121c0:	64a0003c 	xorhi	r18,r12,32768
 80121c4:	d8c02a05 	stb	r3,168(sp)
 80121c8:	003ea806 	br	8011c6c <__alt_data_end+0xf8011c6c>
 80121cc:	4f000044 	addi	fp,r9,1
 80121d0:	003ead06 	br	8011c88 <__alt_data_end+0xf8011c88>
 80121d4:	d8c03417 	ldw	r3,208(sp)
 80121d8:	00c0410e 	bge	zero,r3,80122e0 <___svfprintf_internal_r+0x1f0c>
 80121dc:	04800044 	movi	r18,1
 80121e0:	dac03317 	ldw	r11,204(sp)
 80121e4:	92e5883a 	add	r18,r18,r11
 80121e8:	9005883a 	mov	r2,r18
 80121ec:	903ee60e 	bge	r18,zero,8011d88 <__alt_data_end+0xf8011d88>
 80121f0:	0005883a 	mov	r2,zero
 80121f4:	003ee406 	br	8011d88 <__alt_data_end+0xf8011d88>
 80121f8:	d8c02617 	ldw	r3,152(sp)
 80121fc:	d8c03415 	stw	r3,208(sp)
 8012200:	00c0310e 	bge	zero,r3,80122c8 <___svfprintf_internal_r+0x1ef4>
 8012204:	48001f1e 	bne	r9,zero,8012284 <___svfprintf_internal_r+0x1eb0>
 8012208:	8c40004c 	andi	r17,r17,1
 801220c:	88001d1e 	bne	r17,zero,8012284 <___svfprintf_internal_r+0x1eb0>
 8012210:	1805883a 	mov	r2,r3
 8012214:	183edb0e 	bge	r3,zero,8011d84 <__alt_data_end+0xf8011d84>
 8012218:	0005883a 	mov	r2,zero
 801221c:	003ed906 	br	8011d84 <__alt_data_end+0xf8011d84>
 8012220:	d8802117 	ldw	r2,132(sp)
 8012224:	003ec506 	br	8011d3c <__alt_data_end+0xf8011d3c>
 8012228:	d9003717 	ldw	r4,220(sp)
 801222c:	900b883a 	mov	r5,r18
 8012230:	000d883a 	mov	r6,zero
 8012234:	000f883a 	mov	r7,zero
 8012238:	da004015 	stw	r8,256(sp)
 801223c:	da403f15 	stw	r9,252(sp)
 8012240:	da803e15 	stw	r10,248(sp)
 8012244:	800db780 	call	800db78 <__eqdf2>
 8012248:	da004017 	ldw	r8,256(sp)
 801224c:	da403f17 	ldw	r9,252(sp)
 8012250:	da803e17 	ldw	r10,248(sp)
 8012254:	103f2c26 	beq	r2,zero,8011f08 <__alt_data_end+0xf8011f08>
 8012258:	00800044 	movi	r2,1
 801225c:	1707c83a 	sub	r3,r2,fp
 8012260:	d8c02615 	stw	r3,152(sp)
 8012264:	003f2906 	br	8011f0c <__alt_data_end+0xf8011f0c>
 8012268:	db003417 	ldw	r12,208(sp)
 801226c:	64800044 	addi	r18,r12,1
 8012270:	9005883a 	mov	r2,r18
 8012274:	903ec40e 	bge	r18,zero,8011d88 <__alt_data_end+0xf8011d88>
 8012278:	003fdd06 	br	80121f0 <__alt_data_end+0xf80121f0>
 801227c:	0005883a 	mov	r2,zero
 8012280:	003f5c06 	br	8011ff4 <__alt_data_end+0xf8011ff4>
 8012284:	dac03417 	ldw	r11,208(sp)
 8012288:	4a400044 	addi	r9,r9,1
 801228c:	5a65883a 	add	r18,r11,r9
 8012290:	9005883a 	mov	r2,r18
 8012294:	903ebc0e 	bge	r18,zero,8011d88 <__alt_data_end+0xf8011d88>
 8012298:	003fd506 	br	80121f0 <__alt_data_end+0xf80121f0>
 801229c:	008205b4 	movhi	r2,2070
 80122a0:	1097ca84 	addi	r2,r2,24362
 80122a4:	d8802b15 	stw	r2,172(sp)
 80122a8:	003d2b06 	br	8011758 <__alt_data_end+0xf8011758>
 80122ac:	00800c04 	movi	r2,48
 80122b0:	e0c00c04 	addi	r3,fp,48
 80122b4:	d8802345 	stb	r2,141(sp)
 80122b8:	d8c02385 	stb	r3,142(sp)
 80122bc:	d88023c4 	addi	r2,sp,143
 80122c0:	dd4022c4 	addi	r21,sp,139
 80122c4:	003f9e06 	br	8012140 <__alt_data_end+0xf8012140>
 80122c8:	4800081e 	bne	r9,zero,80122ec <___svfprintf_internal_r+0x1f18>
 80122cc:	8c40004c 	andi	r17,r17,1
 80122d0:	8800061e 	bne	r17,zero,80122ec <___svfprintf_internal_r+0x1f18>
 80122d4:	00800044 	movi	r2,1
 80122d8:	1025883a 	mov	r18,r2
 80122dc:	003eaa06 	br	8011d88 <__alt_data_end+0xf8011d88>
 80122e0:	04800084 	movi	r18,2
 80122e4:	90e5c83a 	sub	r18,r18,r3
 80122e8:	003fbd06 	br	80121e0 <__alt_data_end+0xf80121e0>
 80122ec:	4c800084 	addi	r18,r9,2
 80122f0:	9005883a 	mov	r2,r18
 80122f4:	903ea40e 	bge	r18,zero,8011d88 <__alt_data_end+0xf8011d88>
 80122f8:	003fbd06 	br	80121f0 <__alt_data_end+0xf80121f0>
 80122fc:	dac02d17 	ldw	r11,180(sp)
 8012300:	5a400017 	ldw	r9,0(r11)
 8012304:	5ac00104 	addi	r11,r11,4
 8012308:	dac02d15 	stw	r11,180(sp)
 801230c:	483e410e 	bge	r9,zero,8011c14 <__alt_data_end+0xf8011c14>
 8012310:	027fffc4 	movi	r9,-1
 8012314:	1c000047 	ldb	r16,1(r3)
 8012318:	00388406 	br	801052c <__alt_data_end+0xf801052c>
 801231c:	00800b44 	movi	r2,45
 8012320:	0739c83a 	sub	fp,zero,fp
 8012324:	d8802305 	stb	r2,140(sp)
 8012328:	003f5e06 	br	80120a4 <__alt_data_end+0xf80120a4>
 801232c:	0005883a 	mov	r2,zero
 8012330:	003f8c06 	br	8012164 <__alt_data_end+0xf8012164>
 8012334:	88a2703a 	and	r17,r17,r2
 8012338:	883f8826 	beq	r17,zero,801215c <__alt_data_end+0xf801215c>
 801233c:	003f8606 	br	8012158 <__alt_data_end+0xf8012158>
 8012340:	d8802344 	addi	r2,sp,141
 8012344:	003f7e06 	br	8012140 <__alt_data_end+0xf8012140>
 8012348:	d8c02617 	ldw	r3,152(sp)
 801234c:	003f4f06 	br	801208c <__alt_data_end+0xf801208c>
 8012350:	dac02f17 	ldw	r11,188(sp)
 8012354:	00800304 	movi	r2,12
 8012358:	58800015 	stw	r2,0(r11)
 801235c:	00bfffc4 	movi	r2,-1
 8012360:	0038e806 	br	8010704 <__alt_data_end+0xf8010704>

08012364 <___vfprintf_internal_r>:
 8012364:	deffb604 	addi	sp,sp,-296
 8012368:	dfc04915 	stw	ra,292(sp)
 801236c:	ddc04715 	stw	r23,284(sp)
 8012370:	dd804615 	stw	r22,280(sp)
 8012374:	282f883a 	mov	r23,r5
 8012378:	202d883a 	mov	r22,r4
 801237c:	d9802a15 	stw	r6,168(sp)
 8012380:	d9c02d15 	stw	r7,180(sp)
 8012384:	df004815 	stw	fp,288(sp)
 8012388:	dd404515 	stw	r21,276(sp)
 801238c:	dd004415 	stw	r20,272(sp)
 8012390:	dcc04315 	stw	r19,268(sp)
 8012394:	dc804215 	stw	r18,264(sp)
 8012398:	dc404115 	stw	r17,260(sp)
 801239c:	dc004015 	stw	r16,256(sp)
 80123a0:	8016f4c0 	call	8016f4c <_localeconv_r>
 80123a4:	10800017 	ldw	r2,0(r2)
 80123a8:	1009883a 	mov	r4,r2
 80123ac:	d8803515 	stw	r2,212(sp)
 80123b0:	801033c0 	call	801033c <strlen>
 80123b4:	d8803815 	stw	r2,224(sp)
 80123b8:	b0000226 	beq	r22,zero,80123c4 <___vfprintf_internal_r+0x60>
 80123bc:	b0800e17 	ldw	r2,56(r22)
 80123c0:	1000e126 	beq	r2,zero,8012748 <___vfprintf_internal_r+0x3e4>
 80123c4:	b880030b 	ldhu	r2,12(r23)
 80123c8:	10c8000c 	andi	r3,r2,8192
 80123cc:	1800061e 	bne	r3,zero,80123e8 <___vfprintf_internal_r+0x84>
 80123d0:	b9001917 	ldw	r4,100(r23)
 80123d4:	00f7ffc4 	movi	r3,-8193
 80123d8:	10880014 	ori	r2,r2,8192
 80123dc:	20c6703a 	and	r3,r4,r3
 80123e0:	b880030d 	sth	r2,12(r23)
 80123e4:	b8c01915 	stw	r3,100(r23)
 80123e8:	10c0020c 	andi	r3,r2,8
 80123ec:	1800a726 	beq	r3,zero,801268c <___vfprintf_internal_r+0x328>
 80123f0:	b8c00417 	ldw	r3,16(r23)
 80123f4:	1800a526 	beq	r3,zero,801268c <___vfprintf_internal_r+0x328>
 80123f8:	1080068c 	andi	r2,r2,26
 80123fc:	00c00284 	movi	r3,10
 8012400:	10c0aa26 	beq	r2,r3,80126ac <___vfprintf_internal_r+0x348>
 8012404:	dac01e04 	addi	r11,sp,120
 8012408:	db001dc4 	addi	r12,sp,119
 801240c:	d8800404 	addi	r2,sp,16
 8012410:	050205b4 	movhi	r20,2070
 8012414:	dac02815 	stw	r11,160(sp)
 8012418:	5b17c83a 	sub	r11,r11,r12
 801241c:	a517d284 	addi	r20,r20,24394
 8012420:	db002915 	stw	r12,164(sp)
 8012424:	d8801e15 	stw	r2,120(sp)
 8012428:	d8002015 	stw	zero,128(sp)
 801242c:	d8001f15 	stw	zero,124(sp)
 8012430:	d8003315 	stw	zero,204(sp)
 8012434:	d8003715 	stw	zero,220(sp)
 8012438:	d8003915 	stw	zero,228(sp)
 801243c:	1011883a 	mov	r8,r2
 8012440:	d8003b15 	stw	zero,236(sp)
 8012444:	d8003a15 	stw	zero,232(sp)
 8012448:	d8002f15 	stw	zero,188(sp)
 801244c:	dac03c15 	stw	r11,240(sp)
 8012450:	db002a17 	ldw	r12,168(sp)
 8012454:	60800007 	ldb	r2,0(r12)
 8012458:	1000be26 	beq	r2,zero,8012754 <___vfprintf_internal_r+0x3f0>
 801245c:	00c00944 	movi	r3,37
 8012460:	10c0bc26 	beq	r2,r3,8012754 <___vfprintf_internal_r+0x3f0>
 8012464:	6021883a 	mov	r16,r12
 8012468:	00000106 	br	8012470 <___vfprintf_internal_r+0x10c>
 801246c:	10c08426 	beq	r2,r3,8012680 <___vfprintf_internal_r+0x31c>
 8012470:	84000044 	addi	r16,r16,1
 8012474:	80800007 	ldb	r2,0(r16)
 8012478:	103ffc1e 	bne	r2,zero,801246c <__alt_data_end+0xf801246c>
 801247c:	dac02a17 	ldw	r11,168(sp)
 8012480:	82e3c83a 	sub	r17,r16,r11
 8012484:	88000f26 	beq	r17,zero,80124c4 <___vfprintf_internal_r+0x160>
 8012488:	d8c02017 	ldw	r3,128(sp)
 801248c:	d8801f17 	ldw	r2,124(sp)
 8012490:	dac02a17 	ldw	r11,168(sp)
 8012494:	1c47883a 	add	r3,r3,r17
 8012498:	10800044 	addi	r2,r2,1
 801249c:	d8c02015 	stw	r3,128(sp)
 80124a0:	42c00015 	stw	r11,0(r8)
 80124a4:	44400115 	stw	r17,4(r8)
 80124a8:	d8801f15 	stw	r2,124(sp)
 80124ac:	00c001c4 	movi	r3,7
 80124b0:	18809316 	blt	r3,r2,8012700 <___vfprintf_internal_r+0x39c>
 80124b4:	42000204 	addi	r8,r8,8
 80124b8:	db002f17 	ldw	r12,188(sp)
 80124bc:	6459883a 	add	r12,r12,r17
 80124c0:	db002f15 	stw	r12,188(sp)
 80124c4:	80800007 	ldb	r2,0(r16)
 80124c8:	10009426 	beq	r2,zero,801271c <___vfprintf_internal_r+0x3b8>
 80124cc:	80800044 	addi	r2,r16,1
 80124d0:	84000047 	ldb	r16,1(r16)
 80124d4:	d8002785 	stb	zero,158(sp)
 80124d8:	000d883a 	mov	r6,zero
 80124dc:	027fffc4 	movi	r9,-1
 80124e0:	d8002e15 	stw	zero,184(sp)
 80124e4:	0023883a 	mov	r17,zero
 80124e8:	01001604 	movi	r4,88
 80124ec:	01400244 	movi	r5,9
 80124f0:	02800a84 	movi	r10,42
 80124f4:	01c01b04 	movi	r7,108
 80124f8:	10c00044 	addi	r3,r2,1
 80124fc:	80bff804 	addi	r2,r16,-32
 8012500:	2082cd36 	bltu	r4,r2,8013038 <___vfprintf_internal_r+0xcd4>
 8012504:	100490ba 	slli	r2,r2,2
 8012508:	02c20074 	movhi	r11,2049
 801250c:	5ac94704 	addi	r11,r11,9500
 8012510:	12c5883a 	add	r2,r2,r11
 8012514:	10800017 	ldw	r2,0(r2)
 8012518:	1000683a 	jmp	r2
 801251c:	08012e50 	cmplti	zero,at,1209
 8012520:	08013038 	rdprs	zero,at,1216
 8012524:	08013038 	rdprs	zero,at,1216
 8012528:	08012fa0 	cmpeqi	zero,at,1214
 801252c:	08013038 	rdprs	zero,at,1216
 8012530:	08013038 	rdprs	zero,at,1216
 8012534:	08013038 	rdprs	zero,at,1216
 8012538:	08013038 	rdprs	zero,at,1216
 801253c:	08013038 	rdprs	zero,at,1216
 8012540:	08013038 	rdprs	zero,at,1216
 8012544:	08012e70 	cmpltui	zero,at,1209
 8012548:	08012e9c 	xori	zero,at,1210
 801254c:	08013038 	rdprs	zero,at,1216
 8012550:	0801275c 	xori	zero,at,1181
 8012554:	0801276c 	andhi	zero,at,1181
 8012558:	08013038 	rdprs	zero,at,1216
 801255c:	080127ac 	andhi	zero,at,1182
 8012560:	080127bc 	xorhi	zero,at,1182
 8012564:	080127bc 	xorhi	zero,at,1182
 8012568:	080127bc 	xorhi	zero,at,1182
 801256c:	080127bc 	xorhi	zero,at,1182
 8012570:	080127bc 	xorhi	zero,at,1182
 8012574:	080127bc 	xorhi	zero,at,1182
 8012578:	080127bc 	xorhi	zero,at,1182
 801257c:	080127bc 	xorhi	zero,at,1182
 8012580:	080127bc 	xorhi	zero,at,1182
 8012584:	08013038 	rdprs	zero,at,1216
 8012588:	08013038 	rdprs	zero,at,1216
 801258c:	08013038 	rdprs	zero,at,1216
 8012590:	08013038 	rdprs	zero,at,1216
 8012594:	08013038 	rdprs	zero,at,1216
 8012598:	08013038 	rdprs	zero,at,1216
 801259c:	08013038 	rdprs	zero,at,1216
 80125a0:	08013038 	rdprs	zero,at,1216
 80125a4:	08013038 	rdprs	zero,at,1216
 80125a8:	08013038 	rdprs	zero,at,1216
 80125ac:	080127f0 	cmpltui	zero,at,1183
 80125b0:	08012c60 	cmpeqi	zero,at,1201
 80125b4:	08013038 	rdprs	zero,at,1216
 80125b8:	08012c60 	cmpeqi	zero,at,1201
 80125bc:	08013038 	rdprs	zero,at,1216
 80125c0:	08013038 	rdprs	zero,at,1216
 80125c4:	08013038 	rdprs	zero,at,1216
 80125c8:	08013038 	rdprs	zero,at,1216
 80125cc:	08012d4c 	andi	zero,at,1205
 80125d0:	08013038 	rdprs	zero,at,1216
 80125d4:	08013038 	rdprs	zero,at,1216
 80125d8:	08012bf4 	orhi	zero,at,1199
 80125dc:	08013038 	rdprs	zero,at,1216
 80125e0:	08013038 	rdprs	zero,at,1216
 80125e4:	08013038 	rdprs	zero,at,1216
 80125e8:	08013038 	rdprs	zero,at,1216
 80125ec:	08013038 	rdprs	zero,at,1216
 80125f0:	08012c30 	cmpltui	zero,at,1200
 80125f4:	08013038 	rdprs	zero,at,1216
 80125f8:	08013038 	rdprs	zero,at,1216
 80125fc:	08012df4 	orhi	zero,at,1207
 8012600:	08013038 	rdprs	zero,at,1216
 8012604:	08013038 	rdprs	zero,at,1216
 8012608:	08013038 	rdprs	zero,at,1216
 801260c:	08013038 	rdprs	zero,at,1216
 8012610:	08013038 	rdprs	zero,at,1216
 8012614:	08013038 	rdprs	zero,at,1216
 8012618:	08013038 	rdprs	zero,at,1216
 801261c:	08013038 	rdprs	zero,at,1216
 8012620:	08013038 	rdprs	zero,at,1216
 8012624:	08013038 	rdprs	zero,at,1216
 8012628:	08012eac 	andhi	zero,at,1210
 801262c:	08012d5c 	xori	zero,at,1205
 8012630:	08012c60 	cmpeqi	zero,at,1201
 8012634:	08012c60 	cmpeqi	zero,at,1201
 8012638:	08012c60 	cmpeqi	zero,at,1201
 801263c:	08012d9c 	xori	zero,at,1206
 8012640:	08012d5c 	xori	zero,at,1205
 8012644:	08013038 	rdprs	zero,at,1216
 8012648:	08013038 	rdprs	zero,at,1216
 801264c:	08012dac 	andhi	zero,at,1206
 8012650:	08013038 	rdprs	zero,at,1216
 8012654:	08012dc0 	call	8012dc <__reset-0x77fed24>
 8012658:	08012ffc 	xorhi	zero,at,1215
 801265c:	08012d04 	addi	zero,at,1204
 8012660:	08012fb0 	cmpltui	zero,at,1214
 8012664:	08013038 	rdprs	zero,at,1216
 8012668:	08012eec 	andhi	zero,at,1211
 801266c:	08013038 	rdprs	zero,at,1216
 8012670:	08012fc0 	call	8012fc <__reset-0x77fed04>
 8012674:	08013038 	rdprs	zero,at,1216
 8012678:	08013038 	rdprs	zero,at,1216
 801267c:	08012f60 	cmpeqi	zero,at,1213
 8012680:	db002a17 	ldw	r12,168(sp)
 8012684:	8323c83a 	sub	r17,r16,r12
 8012688:	003f7e06 	br	8012484 <__alt_data_end+0xf8012484>
 801268c:	b009883a 	mov	r4,r22
 8012690:	b80b883a 	mov	r5,r23
 8012694:	80143940 	call	8014394 <__swsetup_r>
 8012698:	10000c1e 	bne	r2,zero,80126cc <___vfprintf_internal_r+0x368>
 801269c:	b880030b 	ldhu	r2,12(r23)
 80126a0:	00c00284 	movi	r3,10
 80126a4:	1080068c 	andi	r2,r2,26
 80126a8:	10ff561e 	bne	r2,r3,8012404 <__alt_data_end+0xf8012404>
 80126ac:	b880038f 	ldh	r2,14(r23)
 80126b0:	103f5416 	blt	r2,zero,8012404 <__alt_data_end+0xf8012404>
 80126b4:	d9802a17 	ldw	r6,168(sp)
 80126b8:	d9c02d17 	ldw	r7,180(sp)
 80126bc:	b009883a 	mov	r4,r22
 80126c0:	b80b883a 	mov	r5,r23
 80126c4:	80142d80 	call	80142d8 <__sbprintf>
 80126c8:	00000106 	br	80126d0 <___vfprintf_internal_r+0x36c>
 80126cc:	00bfffc4 	movi	r2,-1
 80126d0:	dfc04917 	ldw	ra,292(sp)
 80126d4:	df004817 	ldw	fp,288(sp)
 80126d8:	ddc04717 	ldw	r23,284(sp)
 80126dc:	dd804617 	ldw	r22,280(sp)
 80126e0:	dd404517 	ldw	r21,276(sp)
 80126e4:	dd004417 	ldw	r20,272(sp)
 80126e8:	dcc04317 	ldw	r19,268(sp)
 80126ec:	dc804217 	ldw	r18,264(sp)
 80126f0:	dc404117 	ldw	r17,260(sp)
 80126f4:	dc004017 	ldw	r16,256(sp)
 80126f8:	dec04a04 	addi	sp,sp,296
 80126fc:	f800283a 	ret
 8012700:	b009883a 	mov	r4,r22
 8012704:	b80b883a 	mov	r5,r23
 8012708:	d9801e04 	addi	r6,sp,120
 801270c:	8019dd80 	call	8019dd8 <__sprint_r>
 8012710:	1000081e 	bne	r2,zero,8012734 <___vfprintf_internal_r+0x3d0>
 8012714:	da000404 	addi	r8,sp,16
 8012718:	003f6706 	br	80124b8 <__alt_data_end+0xf80124b8>
 801271c:	d8802017 	ldw	r2,128(sp)
 8012720:	10000426 	beq	r2,zero,8012734 <___vfprintf_internal_r+0x3d0>
 8012724:	b009883a 	mov	r4,r22
 8012728:	b80b883a 	mov	r5,r23
 801272c:	d9801e04 	addi	r6,sp,120
 8012730:	8019dd80 	call	8019dd8 <__sprint_r>
 8012734:	b880030b 	ldhu	r2,12(r23)
 8012738:	1080100c 	andi	r2,r2,64
 801273c:	103fe31e 	bne	r2,zero,80126cc <__alt_data_end+0xf80126cc>
 8012740:	d8802f17 	ldw	r2,188(sp)
 8012744:	003fe206 	br	80126d0 <__alt_data_end+0xf80126d0>
 8012748:	b009883a 	mov	r4,r22
 801274c:	80163f40 	call	80163f4 <__sinit>
 8012750:	003f1c06 	br	80123c4 <__alt_data_end+0xf80123c4>
 8012754:	dc002a17 	ldw	r16,168(sp)
 8012758:	003f5a06 	br	80124c4 <__alt_data_end+0xf80124c4>
 801275c:	1805883a 	mov	r2,r3
 8012760:	8c400114 	ori	r17,r17,4
 8012764:	1c000007 	ldb	r16,0(r3)
 8012768:	003f6306 	br	80124f8 <__alt_data_end+0xf80124f8>
 801276c:	1c000007 	ldb	r16,0(r3)
 8012770:	18800044 	addi	r2,r3,1
 8012774:	8286ad26 	beq	r16,r10,801422c <___vfprintf_internal_r+0x1ec8>
 8012778:	82fff404 	addi	r11,r16,-48
 801277c:	1007883a 	mov	r3,r2
 8012780:	0013883a 	mov	r9,zero
 8012784:	2aff5d36 	bltu	r5,r11,80124fc <__alt_data_end+0xf80124fc>
 8012788:	1c000007 	ldb	r16,0(r3)
 801278c:	4a4002a4 	muli	r9,r9,10
 8012790:	18c00044 	addi	r3,r3,1
 8012794:	5a53883a 	add	r9,r11,r9
 8012798:	82fff404 	addi	r11,r16,-48
 801279c:	2afffa2e 	bgeu	r5,r11,8012788 <__alt_data_end+0xf8012788>
 80127a0:	483f560e 	bge	r9,zero,80124fc <__alt_data_end+0xf80124fc>
 80127a4:	027fffc4 	movi	r9,-1
 80127a8:	003f5406 	br	80124fc <__alt_data_end+0xf80124fc>
 80127ac:	8c402014 	ori	r17,r17,128
 80127b0:	1805883a 	mov	r2,r3
 80127b4:	1c000007 	ldb	r16,0(r3)
 80127b8:	003f4f06 	br	80124f8 <__alt_data_end+0xf80124f8>
 80127bc:	1805883a 	mov	r2,r3
 80127c0:	d8002e15 	stw	zero,184(sp)
 80127c4:	82fff404 	addi	r11,r16,-48
 80127c8:	0019883a 	mov	r12,zero
 80127cc:	14000007 	ldb	r16,0(r2)
 80127d0:	630002a4 	muli	r12,r12,10
 80127d4:	18c00044 	addi	r3,r3,1
 80127d8:	1805883a 	mov	r2,r3
 80127dc:	62d9883a 	add	r12,r12,r11
 80127e0:	82fff404 	addi	r11,r16,-48
 80127e4:	2afff92e 	bgeu	r5,r11,80127cc <__alt_data_end+0xf80127cc>
 80127e8:	db002e15 	stw	r12,184(sp)
 80127ec:	003f4306 	br	80124fc <__alt_data_end+0xf80124fc>
 80127f0:	8c400414 	ori	r17,r17,16
 80127f4:	d8c02a15 	stw	r3,168(sp)
 80127f8:	d9802785 	stb	r6,158(sp)
 80127fc:	8880080c 	andi	r2,r17,32
 8012800:	d8c02d17 	ldw	r3,180(sp)
 8012804:	10015a26 	beq	r2,zero,8012d70 <___vfprintf_internal_r+0xa0c>
 8012808:	db002d17 	ldw	r12,180(sp)
 801280c:	18800117 	ldw	r2,4(r3)
 8012810:	1cc00017 	ldw	r19,0(r3)
 8012814:	63000204 	addi	r12,r12,8
 8012818:	db002d15 	stw	r12,180(sp)
 801281c:	1039883a 	mov	fp,r2
 8012820:	10044516 	blt	r2,zero,8013938 <___vfprintf_internal_r+0x15d4>
 8012824:	dd402783 	ldbu	r21,158(sp)
 8012828:	da403215 	stw	r9,200(sp)
 801282c:	00800044 	movi	r2,1
 8012830:	9f06b03a 	or	r3,r19,fp
 8012834:	48000216 	blt	r9,zero,8012840 <___vfprintf_internal_r+0x4dc>
 8012838:	013fdfc4 	movi	r4,-129
 801283c:	8922703a 	and	r17,r17,r4
 8012840:	1802071e 	bne	r3,zero,8013060 <___vfprintf_internal_r+0xcfc>
 8012844:	4802fa26 	beq	r9,zero,8013430 <___vfprintf_internal_r+0x10cc>
 8012848:	10803fcc 	andi	r2,r2,255
 801284c:	00c00044 	movi	r3,1
 8012850:	10c22926 	beq	r2,r3,80130f8 <___vfprintf_internal_r+0xd94>
 8012854:	00c00084 	movi	r3,2
 8012858:	10c31726 	beq	r2,r3,80134b8 <___vfprintf_internal_r+0x1154>
 801285c:	d8c01e04 	addi	r3,sp,120
 8012860:	9808d0fa 	srli	r4,r19,3
 8012864:	e00a977a 	slli	r5,fp,29
 8012868:	e038d0fa 	srli	fp,fp,3
 801286c:	9cc001cc 	andi	r19,r19,7
 8012870:	98800c04 	addi	r2,r19,48
 8012874:	18ffffc4 	addi	r3,r3,-1
 8012878:	2926b03a 	or	r19,r5,r4
 801287c:	18800005 	stb	r2,0(r3)
 8012880:	9f08b03a 	or	r4,r19,fp
 8012884:	203ff61e 	bne	r4,zero,8012860 <__alt_data_end+0xf8012860>
 8012888:	8900004c 	andi	r4,r17,1
 801288c:	d8c03115 	stw	r3,196(sp)
 8012890:	2003931e 	bne	r4,zero,80136e0 <___vfprintf_internal_r+0x137c>
 8012894:	dac02817 	ldw	r11,160(sp)
 8012898:	58e5c83a 	sub	r18,r11,r3
 801289c:	9005883a 	mov	r2,r18
 80128a0:	9240010e 	bge	r18,r9,80128a8 <___vfprintf_internal_r+0x544>
 80128a4:	4805883a 	mov	r2,r9
 80128a8:	d8802b15 	stw	r2,172(sp)
 80128ac:	d8003415 	stw	zero,208(sp)
 80128b0:	a8803fcc 	andi	r2,r21,255
 80128b4:	1080201c 	xori	r2,r2,128
 80128b8:	10bfe004 	addi	r2,r2,-128
 80128bc:	10000326 	beq	r2,zero,80128cc <___vfprintf_internal_r+0x568>
 80128c0:	db002b17 	ldw	r12,172(sp)
 80128c4:	63000044 	addi	r12,r12,1
 80128c8:	db002b15 	stw	r12,172(sp)
 80128cc:	88c0008c 	andi	r3,r17,2
 80128d0:	d8c02c15 	stw	r3,176(sp)
 80128d4:	18000326 	beq	r3,zero,80128e4 <___vfprintf_internal_r+0x580>
 80128d8:	dac02b17 	ldw	r11,172(sp)
 80128dc:	5ac00084 	addi	r11,r11,2
 80128e0:	dac02b15 	stw	r11,172(sp)
 80128e4:	8b00210c 	andi	r12,r17,132
 80128e8:	db003015 	stw	r12,192(sp)
 80128ec:	6001da1e 	bne	r12,zero,8013058 <___vfprintf_internal_r+0xcf4>
 80128f0:	dac02e17 	ldw	r11,184(sp)
 80128f4:	db002b17 	ldw	r12,172(sp)
 80128f8:	5b39c83a 	sub	fp,r11,r12
 80128fc:	0701d60e 	bge	zero,fp,8013058 <___vfprintf_internal_r+0xcf4>
 8012900:	02400404 	movi	r9,16
 8012904:	d8c02017 	ldw	r3,128(sp)
 8012908:	d8801f17 	ldw	r2,124(sp)
 801290c:	4f053c0e 	bge	r9,fp,8013e00 <___vfprintf_internal_r+0x1a9c>
 8012910:	014205b4 	movhi	r5,2070
 8012914:	2957d684 	addi	r5,r5,24410
 8012918:	d9403615 	stw	r5,216(sp)
 801291c:	482b883a 	mov	r21,r9
 8012920:	04c001c4 	movi	r19,7
 8012924:	00000306 	br	8012934 <___vfprintf_internal_r+0x5d0>
 8012928:	e73ffc04 	addi	fp,fp,-16
 801292c:	42000204 	addi	r8,r8,8
 8012930:	af00130e 	bge	r21,fp,8012980 <___vfprintf_internal_r+0x61c>
 8012934:	02c205b4 	movhi	r11,2070
 8012938:	18c00404 	addi	r3,r3,16
 801293c:	10800044 	addi	r2,r2,1
 8012940:	5ad7d684 	addi	r11,r11,24410
 8012944:	42c00015 	stw	r11,0(r8)
 8012948:	45400115 	stw	r21,4(r8)
 801294c:	d8c02015 	stw	r3,128(sp)
 8012950:	d8801f15 	stw	r2,124(sp)
 8012954:	98bff40e 	bge	r19,r2,8012928 <__alt_data_end+0xf8012928>
 8012958:	b009883a 	mov	r4,r22
 801295c:	b80b883a 	mov	r5,r23
 8012960:	d9801e04 	addi	r6,sp,120
 8012964:	8019dd80 	call	8019dd8 <__sprint_r>
 8012968:	103f721e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 801296c:	e73ffc04 	addi	fp,fp,-16
 8012970:	d8c02017 	ldw	r3,128(sp)
 8012974:	d8801f17 	ldw	r2,124(sp)
 8012978:	da000404 	addi	r8,sp,16
 801297c:	af3fed16 	blt	r21,fp,8012934 <__alt_data_end+0xf8012934>
 8012980:	db003617 	ldw	r12,216(sp)
 8012984:	e0c7883a 	add	r3,fp,r3
 8012988:	10800044 	addi	r2,r2,1
 801298c:	43000015 	stw	r12,0(r8)
 8012990:	47000115 	stw	fp,4(r8)
 8012994:	d8c02015 	stw	r3,128(sp)
 8012998:	d8801f15 	stw	r2,124(sp)
 801299c:	010001c4 	movi	r4,7
 80129a0:	20830e16 	blt	r4,r2,80135dc <___vfprintf_internal_r+0x1278>
 80129a4:	d8802787 	ldb	r2,158(sp)
 80129a8:	42000204 	addi	r8,r8,8
 80129ac:	10000c26 	beq	r2,zero,80129e0 <___vfprintf_internal_r+0x67c>
 80129b0:	d8801f17 	ldw	r2,124(sp)
 80129b4:	d9002784 	addi	r4,sp,158
 80129b8:	18c00044 	addi	r3,r3,1
 80129bc:	10800044 	addi	r2,r2,1
 80129c0:	41000015 	stw	r4,0(r8)
 80129c4:	01000044 	movi	r4,1
 80129c8:	41000115 	stw	r4,4(r8)
 80129cc:	d8c02015 	stw	r3,128(sp)
 80129d0:	d8801f15 	stw	r2,124(sp)
 80129d4:	010001c4 	movi	r4,7
 80129d8:	2082a716 	blt	r4,r2,8013478 <___vfprintf_internal_r+0x1114>
 80129dc:	42000204 	addi	r8,r8,8
 80129e0:	dac02c17 	ldw	r11,176(sp)
 80129e4:	58000c26 	beq	r11,zero,8012a18 <___vfprintf_internal_r+0x6b4>
 80129e8:	d8801f17 	ldw	r2,124(sp)
 80129ec:	d9002704 	addi	r4,sp,156
 80129f0:	18c00084 	addi	r3,r3,2
 80129f4:	10800044 	addi	r2,r2,1
 80129f8:	41000015 	stw	r4,0(r8)
 80129fc:	01000084 	movi	r4,2
 8012a00:	41000115 	stw	r4,4(r8)
 8012a04:	d8c02015 	stw	r3,128(sp)
 8012a08:	d8801f15 	stw	r2,124(sp)
 8012a0c:	010001c4 	movi	r4,7
 8012a10:	2082a116 	blt	r4,r2,8013498 <___vfprintf_internal_r+0x1134>
 8012a14:	42000204 	addi	r8,r8,8
 8012a18:	db003017 	ldw	r12,192(sp)
 8012a1c:	00802004 	movi	r2,128
 8012a20:	60820326 	beq	r12,r2,8013230 <___vfprintf_internal_r+0xecc>
 8012a24:	db003217 	ldw	r12,200(sp)
 8012a28:	64abc83a 	sub	r21,r12,r18
 8012a2c:	0540260e 	bge	zero,r21,8012ac8 <___vfprintf_internal_r+0x764>
 8012a30:	07000404 	movi	fp,16
 8012a34:	d8801f17 	ldw	r2,124(sp)
 8012a38:	e544570e 	bge	fp,r21,8013b98 <___vfprintf_internal_r+0x1834>
 8012a3c:	014205b4 	movhi	r5,2070
 8012a40:	2957d284 	addi	r5,r5,24394
 8012a44:	d9402c15 	stw	r5,176(sp)
 8012a48:	04c001c4 	movi	r19,7
 8012a4c:	00000306 	br	8012a5c <___vfprintf_internal_r+0x6f8>
 8012a50:	ad7ffc04 	addi	r21,r21,-16
 8012a54:	42000204 	addi	r8,r8,8
 8012a58:	e540110e 	bge	fp,r21,8012aa0 <___vfprintf_internal_r+0x73c>
 8012a5c:	18c00404 	addi	r3,r3,16
 8012a60:	10800044 	addi	r2,r2,1
 8012a64:	45000015 	stw	r20,0(r8)
 8012a68:	47000115 	stw	fp,4(r8)
 8012a6c:	d8c02015 	stw	r3,128(sp)
 8012a70:	d8801f15 	stw	r2,124(sp)
 8012a74:	98bff60e 	bge	r19,r2,8012a50 <__alt_data_end+0xf8012a50>
 8012a78:	b009883a 	mov	r4,r22
 8012a7c:	b80b883a 	mov	r5,r23
 8012a80:	d9801e04 	addi	r6,sp,120
 8012a84:	8019dd80 	call	8019dd8 <__sprint_r>
 8012a88:	103f2a1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8012a8c:	ad7ffc04 	addi	r21,r21,-16
 8012a90:	d8c02017 	ldw	r3,128(sp)
 8012a94:	d8801f17 	ldw	r2,124(sp)
 8012a98:	da000404 	addi	r8,sp,16
 8012a9c:	e57fef16 	blt	fp,r21,8012a5c <__alt_data_end+0xf8012a5c>
 8012aa0:	dac02c17 	ldw	r11,176(sp)
 8012aa4:	1d47883a 	add	r3,r3,r21
 8012aa8:	10800044 	addi	r2,r2,1
 8012aac:	42c00015 	stw	r11,0(r8)
 8012ab0:	45400115 	stw	r21,4(r8)
 8012ab4:	d8c02015 	stw	r3,128(sp)
 8012ab8:	d8801f15 	stw	r2,124(sp)
 8012abc:	010001c4 	movi	r4,7
 8012ac0:	20826516 	blt	r4,r2,8013458 <___vfprintf_internal_r+0x10f4>
 8012ac4:	42000204 	addi	r8,r8,8
 8012ac8:	8880400c 	andi	r2,r17,256
 8012acc:	1001901e 	bne	r2,zero,8013110 <___vfprintf_internal_r+0xdac>
 8012ad0:	d8801f17 	ldw	r2,124(sp)
 8012ad4:	db003117 	ldw	r12,196(sp)
 8012ad8:	1c87883a 	add	r3,r3,r18
 8012adc:	10800044 	addi	r2,r2,1
 8012ae0:	43000015 	stw	r12,0(r8)
 8012ae4:	44800115 	stw	r18,4(r8)
 8012ae8:	d8c02015 	stw	r3,128(sp)
 8012aec:	d8801f15 	stw	r2,124(sp)
 8012af0:	010001c4 	movi	r4,7
 8012af4:	20824016 	blt	r4,r2,80133f8 <___vfprintf_internal_r+0x1094>
 8012af8:	42000204 	addi	r8,r8,8
 8012afc:	8c40010c 	andi	r17,r17,4
 8012b00:	88003126 	beq	r17,zero,8012bc8 <___vfprintf_internal_r+0x864>
 8012b04:	db002e17 	ldw	r12,184(sp)
 8012b08:	dac02b17 	ldw	r11,172(sp)
 8012b0c:	62e1c83a 	sub	r16,r12,r11
 8012b10:	04002d0e 	bge	zero,r16,8012bc8 <___vfprintf_internal_r+0x864>
 8012b14:	04400404 	movi	r17,16
 8012b18:	d8801f17 	ldw	r2,124(sp)
 8012b1c:	8c05150e 	bge	r17,r16,8013f74 <___vfprintf_internal_r+0x1c10>
 8012b20:	010205b4 	movhi	r4,2070
 8012b24:	2117d684 	addi	r4,r4,24410
 8012b28:	d9003615 	stw	r4,216(sp)
 8012b2c:	048001c4 	movi	r18,7
 8012b30:	00000306 	br	8012b40 <___vfprintf_internal_r+0x7dc>
 8012b34:	843ffc04 	addi	r16,r16,-16
 8012b38:	42000204 	addi	r8,r8,8
 8012b3c:	8c00130e 	bge	r17,r16,8012b8c <___vfprintf_internal_r+0x828>
 8012b40:	014205b4 	movhi	r5,2070
 8012b44:	18c00404 	addi	r3,r3,16
 8012b48:	10800044 	addi	r2,r2,1
 8012b4c:	2957d684 	addi	r5,r5,24410
 8012b50:	41400015 	stw	r5,0(r8)
 8012b54:	44400115 	stw	r17,4(r8)
 8012b58:	d8c02015 	stw	r3,128(sp)
 8012b5c:	d8801f15 	stw	r2,124(sp)
 8012b60:	90bff40e 	bge	r18,r2,8012b34 <__alt_data_end+0xf8012b34>
 8012b64:	b009883a 	mov	r4,r22
 8012b68:	b80b883a 	mov	r5,r23
 8012b6c:	d9801e04 	addi	r6,sp,120
 8012b70:	8019dd80 	call	8019dd8 <__sprint_r>
 8012b74:	103eef1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8012b78:	843ffc04 	addi	r16,r16,-16
 8012b7c:	d8c02017 	ldw	r3,128(sp)
 8012b80:	d8801f17 	ldw	r2,124(sp)
 8012b84:	da000404 	addi	r8,sp,16
 8012b88:	8c3fed16 	blt	r17,r16,8012b40 <__alt_data_end+0xf8012b40>
 8012b8c:	dac03617 	ldw	r11,216(sp)
 8012b90:	1c07883a 	add	r3,r3,r16
 8012b94:	10800044 	addi	r2,r2,1
 8012b98:	42c00015 	stw	r11,0(r8)
 8012b9c:	44000115 	stw	r16,4(r8)
 8012ba0:	d8c02015 	stw	r3,128(sp)
 8012ba4:	d8801f15 	stw	r2,124(sp)
 8012ba8:	010001c4 	movi	r4,7
 8012bac:	2080060e 	bge	r4,r2,8012bc8 <___vfprintf_internal_r+0x864>
 8012bb0:	b009883a 	mov	r4,r22
 8012bb4:	b80b883a 	mov	r5,r23
 8012bb8:	d9801e04 	addi	r6,sp,120
 8012bbc:	8019dd80 	call	8019dd8 <__sprint_r>
 8012bc0:	103edc1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8012bc4:	d8c02017 	ldw	r3,128(sp)
 8012bc8:	d8802b17 	ldw	r2,172(sp)
 8012bcc:	db002e17 	ldw	r12,184(sp)
 8012bd0:	1300010e 	bge	r2,r12,8012bd8 <___vfprintf_internal_r+0x874>
 8012bd4:	6005883a 	mov	r2,r12
 8012bd8:	dac02f17 	ldw	r11,188(sp)
 8012bdc:	5897883a 	add	r11,r11,r2
 8012be0:	dac02f15 	stw	r11,188(sp)
 8012be4:	18020c1e 	bne	r3,zero,8013418 <___vfprintf_internal_r+0x10b4>
 8012be8:	d8001f15 	stw	zero,124(sp)
 8012bec:	da000404 	addi	r8,sp,16
 8012bf0:	003e1706 	br	8012450 <__alt_data_end+0xf8012450>
 8012bf4:	8c400414 	ori	r17,r17,16
 8012bf8:	d8c02a15 	stw	r3,168(sp)
 8012bfc:	8880080c 	andi	r2,r17,32
 8012c00:	10010126 	beq	r2,zero,8013008 <___vfprintf_internal_r+0xca4>
 8012c04:	db002d17 	ldw	r12,180(sp)
 8012c08:	0005883a 	mov	r2,zero
 8012c0c:	64c00017 	ldw	r19,0(r12)
 8012c10:	67000117 	ldw	fp,4(r12)
 8012c14:	63000204 	addi	r12,r12,8
 8012c18:	db002d15 	stw	r12,180(sp)
 8012c1c:	9f06b03a 	or	r3,r19,fp
 8012c20:	d8002785 	stb	zero,158(sp)
 8012c24:	da403215 	stw	r9,200(sp)
 8012c28:	002b883a 	mov	r21,zero
 8012c2c:	003f0106 	br	8012834 <__alt_data_end+0xf8012834>
 8012c30:	8c400414 	ori	r17,r17,16
 8012c34:	d8c02a15 	stw	r3,168(sp)
 8012c38:	8880080c 	andi	r2,r17,32
 8012c3c:	1000e326 	beq	r2,zero,8012fcc <___vfprintf_internal_r+0xc68>
 8012c40:	dac02d17 	ldw	r11,180(sp)
 8012c44:	00800044 	movi	r2,1
 8012c48:	5cc00017 	ldw	r19,0(r11)
 8012c4c:	5f000117 	ldw	fp,4(r11)
 8012c50:	5ac00204 	addi	r11,r11,8
 8012c54:	dac02d15 	stw	r11,180(sp)
 8012c58:	9f06b03a 	or	r3,r19,fp
 8012c5c:	003ff006 	br	8012c20 <__alt_data_end+0xf8012c20>
 8012c60:	db002d17 	ldw	r12,180(sp)
 8012c64:	dac02d17 	ldw	r11,180(sp)
 8012c68:	d8c02a15 	stw	r3,168(sp)
 8012c6c:	63000017 	ldw	r12,0(r12)
 8012c70:	5ac00117 	ldw	r11,4(r11)
 8012c74:	d9802785 	stb	r6,158(sp)
 8012c78:	6009883a 	mov	r4,r12
 8012c7c:	580b883a 	mov	r5,r11
 8012c80:	db003715 	stw	r12,220(sp)
 8012c84:	da003f15 	stw	r8,252(sp)
 8012c88:	da403e15 	stw	r9,248(sp)
 8012c8c:	dac03915 	stw	r11,228(sp)
 8012c90:	80188840 	call	8018884 <__fpclassifyd>
 8012c94:	db002d17 	ldw	r12,180(sp)
 8012c98:	04800044 	movi	r18,1
 8012c9c:	da003f17 	ldw	r8,252(sp)
 8012ca0:	64c00204 	addi	r19,r12,8
 8012ca4:	da403e17 	ldw	r9,248(sp)
 8012ca8:	d9003717 	ldw	r4,220(sp)
 8012cac:	d9403917 	ldw	r5,228(sp)
 8012cb0:	14832b1e 	bne	r2,r18,8013960 <___vfprintf_internal_r+0x15fc>
 8012cb4:	000d883a 	mov	r6,zero
 8012cb8:	000f883a 	mov	r7,zero
 8012cbc:	800dcdc0 	call	800dcdc <__ledf2>
 8012cc0:	da003f17 	ldw	r8,252(sp)
 8012cc4:	1004b716 	blt	r2,zero,8013fa4 <___vfprintf_internal_r+0x1c40>
 8012cc8:	dd402783 	ldbu	r21,158(sp)
 8012ccc:	008011c4 	movi	r2,71
 8012cd0:	14040e0e 	bge	r2,r16,8013d0c <___vfprintf_internal_r+0x19a8>
 8012cd4:	00c205b4 	movhi	r3,2070
 8012cd8:	18d7bb04 	addi	r3,r3,24300
 8012cdc:	d8c03115 	stw	r3,196(sp)
 8012ce0:	02c000c4 	movi	r11,3
 8012ce4:	00bfdfc4 	movi	r2,-129
 8012ce8:	dac02b15 	stw	r11,172(sp)
 8012cec:	88a2703a 	and	r17,r17,r2
 8012cf0:	dcc02d15 	stw	r19,180(sp)
 8012cf4:	5825883a 	mov	r18,r11
 8012cf8:	d8003215 	stw	zero,200(sp)
 8012cfc:	d8003415 	stw	zero,208(sp)
 8012d00:	003eeb06 	br	80128b0 <__alt_data_end+0xf80128b0>
 8012d04:	db002d17 	ldw	r12,180(sp)
 8012d08:	00800c04 	movi	r2,48
 8012d0c:	d8802705 	stb	r2,156(sp)
 8012d10:	64c00017 	ldw	r19,0(r12)
 8012d14:	00801e04 	movi	r2,120
 8012d18:	d8802745 	stb	r2,157(sp)
 8012d1c:	008205b4 	movhi	r2,2070
 8012d20:	1097c304 	addi	r2,r2,24332
 8012d24:	63000104 	addi	r12,r12,4
 8012d28:	d8c02a15 	stw	r3,168(sp)
 8012d2c:	d8803b15 	stw	r2,236(sp)
 8012d30:	0039883a 	mov	fp,zero
 8012d34:	8c400094 	ori	r17,r17,2
 8012d38:	db002d15 	stw	r12,180(sp)
 8012d3c:	00800084 	movi	r2,2
 8012d40:	04001e04 	movi	r16,120
 8012d44:	9807883a 	mov	r3,r19
 8012d48:	003fb506 	br	8012c20 <__alt_data_end+0xf8012c20>
 8012d4c:	8c400214 	ori	r17,r17,8
 8012d50:	1805883a 	mov	r2,r3
 8012d54:	1c000007 	ldb	r16,0(r3)
 8012d58:	003de706 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012d5c:	d8c02a15 	stw	r3,168(sp)
 8012d60:	d9802785 	stb	r6,158(sp)
 8012d64:	8880080c 	andi	r2,r17,32
 8012d68:	d8c02d17 	ldw	r3,180(sp)
 8012d6c:	103ea61e 	bne	r2,zero,8012808 <__alt_data_end+0xf8012808>
 8012d70:	8880040c 	andi	r2,r17,16
 8012d74:	1002221e 	bne	r2,zero,8013600 <___vfprintf_internal_r+0x129c>
 8012d78:	8880100c 	andi	r2,r17,64
 8012d7c:	10022026 	beq	r2,zero,8013600 <___vfprintf_internal_r+0x129c>
 8012d80:	1cc0000f 	ldh	r19,0(r3)
 8012d84:	db002d17 	ldw	r12,180(sp)
 8012d88:	9839d7fa 	srai	fp,r19,31
 8012d8c:	63000104 	addi	r12,r12,4
 8012d90:	db002d15 	stw	r12,180(sp)
 8012d94:	e005883a 	mov	r2,fp
 8012d98:	003ea106 	br	8012820 <__alt_data_end+0xf8012820>
 8012d9c:	8c401014 	ori	r17,r17,64
 8012da0:	1805883a 	mov	r2,r3
 8012da4:	1c000007 	ldb	r16,0(r3)
 8012da8:	003dd306 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012dac:	1c000007 	ldb	r16,0(r3)
 8012db0:	81c3e926 	beq	r16,r7,8013d58 <___vfprintf_internal_r+0x19f4>
 8012db4:	8c400414 	ori	r17,r17,16
 8012db8:	1805883a 	mov	r2,r3
 8012dbc:	003dce06 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012dc0:	d8c02a15 	stw	r3,168(sp)
 8012dc4:	d9802785 	stb	r6,158(sp)
 8012dc8:	8880080c 	andi	r2,r17,32
 8012dcc:	10034726 	beq	r2,zero,8013aec <___vfprintf_internal_r+0x1788>
 8012dd0:	db002d17 	ldw	r12,180(sp)
 8012dd4:	dac02f17 	ldw	r11,188(sp)
 8012dd8:	60800017 	ldw	r2,0(r12)
 8012ddc:	5807d7fa 	srai	r3,r11,31
 8012de0:	63000104 	addi	r12,r12,4
 8012de4:	db002d15 	stw	r12,180(sp)
 8012de8:	12c00015 	stw	r11,0(r2)
 8012dec:	10c00115 	stw	r3,4(r2)
 8012df0:	003d9706 	br	8012450 <__alt_data_end+0xf8012450>
 8012df4:	030205b4 	movhi	r12,2070
 8012df8:	6317be04 	addi	r12,r12,24312
 8012dfc:	d8c02a15 	stw	r3,168(sp)
 8012e00:	d9802785 	stb	r6,158(sp)
 8012e04:	db003b15 	stw	r12,236(sp)
 8012e08:	88c0080c 	andi	r3,r17,32
 8012e0c:	d8802d17 	ldw	r2,180(sp)
 8012e10:	18005b26 	beq	r3,zero,8012f80 <___vfprintf_internal_r+0xc1c>
 8012e14:	dac02d17 	ldw	r11,180(sp)
 8012e18:	14c00017 	ldw	r19,0(r2)
 8012e1c:	17000117 	ldw	fp,4(r2)
 8012e20:	5ac00204 	addi	r11,r11,8
 8012e24:	dac02d15 	stw	r11,180(sp)
 8012e28:	8880004c 	andi	r2,r17,1
 8012e2c:	10022926 	beq	r2,zero,80136d4 <___vfprintf_internal_r+0x1370>
 8012e30:	9f06b03a 	or	r3,r19,fp
 8012e34:	18032b26 	beq	r3,zero,8013ae4 <___vfprintf_internal_r+0x1780>
 8012e38:	00800c04 	movi	r2,48
 8012e3c:	d8802705 	stb	r2,156(sp)
 8012e40:	dc002745 	stb	r16,157(sp)
 8012e44:	8c400094 	ori	r17,r17,2
 8012e48:	00800084 	movi	r2,2
 8012e4c:	003f7406 	br	8012c20 <__alt_data_end+0xf8012c20>
 8012e50:	30803fcc 	andi	r2,r6,255
 8012e54:	1080201c 	xori	r2,r2,128
 8012e58:	10bfe004 	addi	r2,r2,-128
 8012e5c:	1003351e 	bne	r2,zero,8013b34 <___vfprintf_internal_r+0x17d0>
 8012e60:	1805883a 	mov	r2,r3
 8012e64:	01800804 	movi	r6,32
 8012e68:	1c000007 	ldb	r16,0(r3)
 8012e6c:	003da206 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012e70:	dac02d17 	ldw	r11,180(sp)
 8012e74:	db002d17 	ldw	r12,180(sp)
 8012e78:	5ac00017 	ldw	r11,0(r11)
 8012e7c:	dac02e15 	stw	r11,184(sp)
 8012e80:	62c00104 	addi	r11,r12,4
 8012e84:	db002e17 	ldw	r12,184(sp)
 8012e88:	6003ad16 	blt	r12,zero,8013d40 <___vfprintf_internal_r+0x19dc>
 8012e8c:	dac02d15 	stw	r11,180(sp)
 8012e90:	1805883a 	mov	r2,r3
 8012e94:	1c000007 	ldb	r16,0(r3)
 8012e98:	003d9706 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012e9c:	1805883a 	mov	r2,r3
 8012ea0:	01800ac4 	movi	r6,43
 8012ea4:	1c000007 	ldb	r16,0(r3)
 8012ea8:	003d9306 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012eac:	db002d17 	ldw	r12,180(sp)
 8012eb0:	d8c02a15 	stw	r3,168(sp)
 8012eb4:	00c00044 	movi	r3,1
 8012eb8:	60800017 	ldw	r2,0(r12)
 8012ebc:	63000104 	addi	r12,r12,4
 8012ec0:	d8c02b15 	stw	r3,172(sp)
 8012ec4:	d8002785 	stb	zero,158(sp)
 8012ec8:	d8801405 	stb	r2,80(sp)
 8012ecc:	db002d15 	stw	r12,180(sp)
 8012ed0:	dac01404 	addi	r11,sp,80
 8012ed4:	1825883a 	mov	r18,r3
 8012ed8:	d8003215 	stw	zero,200(sp)
 8012edc:	d8003415 	stw	zero,208(sp)
 8012ee0:	dac03115 	stw	r11,196(sp)
 8012ee4:	0005883a 	mov	r2,zero
 8012ee8:	003e7806 	br	80128cc <__alt_data_end+0xf80128cc>
 8012eec:	dac02d17 	ldw	r11,180(sp)
 8012ef0:	db002d17 	ldw	r12,180(sp)
 8012ef4:	d8c02a15 	stw	r3,168(sp)
 8012ef8:	5ac00017 	ldw	r11,0(r11)
 8012efc:	d8002785 	stb	zero,158(sp)
 8012f00:	64c00104 	addi	r19,r12,4
 8012f04:	dac03115 	stw	r11,196(sp)
 8012f08:	5803fe26 	beq	r11,zero,8013f04 <___vfprintf_internal_r+0x1ba0>
 8012f0c:	d9003117 	ldw	r4,196(sp)
 8012f10:	4803b416 	blt	r9,zero,8013de4 <___vfprintf_internal_r+0x1a80>
 8012f14:	480d883a 	mov	r6,r9
 8012f18:	000b883a 	mov	r5,zero
 8012f1c:	da003f15 	stw	r8,252(sp)
 8012f20:	da403e15 	stw	r9,248(sp)
 8012f24:	80171380 	call	8017138 <memchr>
 8012f28:	da003f17 	ldw	r8,252(sp)
 8012f2c:	da403e17 	ldw	r9,248(sp)
 8012f30:	10043026 	beq	r2,zero,8013ff4 <___vfprintf_internal_r+0x1c90>
 8012f34:	d8c03117 	ldw	r3,196(sp)
 8012f38:	10e5c83a 	sub	r18,r2,r3
 8012f3c:	4c836b16 	blt	r9,r18,8013cec <___vfprintf_internal_r+0x1988>
 8012f40:	9005883a 	mov	r2,r18
 8012f44:	9003ac16 	blt	r18,zero,8013df8 <___vfprintf_internal_r+0x1a94>
 8012f48:	dd402783 	ldbu	r21,158(sp)
 8012f4c:	d8802b15 	stw	r2,172(sp)
 8012f50:	dcc02d15 	stw	r19,180(sp)
 8012f54:	d8003215 	stw	zero,200(sp)
 8012f58:	d8003415 	stw	zero,208(sp)
 8012f5c:	003e5406 	br	80128b0 <__alt_data_end+0xf80128b0>
 8012f60:	008205b4 	movhi	r2,2070
 8012f64:	1097c304 	addi	r2,r2,24332
 8012f68:	d8c02a15 	stw	r3,168(sp)
 8012f6c:	d8803b15 	stw	r2,236(sp)
 8012f70:	d9802785 	stb	r6,158(sp)
 8012f74:	88c0080c 	andi	r3,r17,32
 8012f78:	d8802d17 	ldw	r2,180(sp)
 8012f7c:	183fa51e 	bne	r3,zero,8012e14 <__alt_data_end+0xf8012e14>
 8012f80:	88c0040c 	andi	r3,r17,16
 8012f84:	1802ee26 	beq	r3,zero,8013b40 <___vfprintf_internal_r+0x17dc>
 8012f88:	db002d17 	ldw	r12,180(sp)
 8012f8c:	14c00017 	ldw	r19,0(r2)
 8012f90:	0039883a 	mov	fp,zero
 8012f94:	63000104 	addi	r12,r12,4
 8012f98:	db002d15 	stw	r12,180(sp)
 8012f9c:	003fa206 	br	8012e28 <__alt_data_end+0xf8012e28>
 8012fa0:	8c400054 	ori	r17,r17,1
 8012fa4:	1805883a 	mov	r2,r3
 8012fa8:	1c000007 	ldb	r16,0(r3)
 8012fac:	003d5206 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012fb0:	8c400814 	ori	r17,r17,32
 8012fb4:	1805883a 	mov	r2,r3
 8012fb8:	1c000007 	ldb	r16,0(r3)
 8012fbc:	003d4e06 	br	80124f8 <__alt_data_end+0xf80124f8>
 8012fc0:	d8c02a15 	stw	r3,168(sp)
 8012fc4:	8880080c 	andi	r2,r17,32
 8012fc8:	103f1d1e 	bne	r2,zero,8012c40 <__alt_data_end+0xf8012c40>
 8012fcc:	8880040c 	andi	r2,r17,16
 8012fd0:	1001b81e 	bne	r2,zero,80136b4 <___vfprintf_internal_r+0x1350>
 8012fd4:	8880100c 	andi	r2,r17,64
 8012fd8:	1001b626 	beq	r2,zero,80136b4 <___vfprintf_internal_r+0x1350>
 8012fdc:	dac02d17 	ldw	r11,180(sp)
 8012fe0:	0039883a 	mov	fp,zero
 8012fe4:	00800044 	movi	r2,1
 8012fe8:	5cc0000b 	ldhu	r19,0(r11)
 8012fec:	5ac00104 	addi	r11,r11,4
 8012ff0:	dac02d15 	stw	r11,180(sp)
 8012ff4:	9807883a 	mov	r3,r19
 8012ff8:	003f0906 	br	8012c20 <__alt_data_end+0xf8012c20>
 8012ffc:	d8c02a15 	stw	r3,168(sp)
 8013000:	8880080c 	andi	r2,r17,32
 8013004:	103eff1e 	bne	r2,zero,8012c04 <__alt_data_end+0xf8012c04>
 8013008:	8880040c 	andi	r2,r17,16
 801300c:	1001a11e 	bne	r2,zero,8013694 <___vfprintf_internal_r+0x1330>
 8013010:	8880100c 	andi	r2,r17,64
 8013014:	10019f26 	beq	r2,zero,8013694 <___vfprintf_internal_r+0x1330>
 8013018:	db002d17 	ldw	r12,180(sp)
 801301c:	0039883a 	mov	fp,zero
 8013020:	0005883a 	mov	r2,zero
 8013024:	64c0000b 	ldhu	r19,0(r12)
 8013028:	63000104 	addi	r12,r12,4
 801302c:	db002d15 	stw	r12,180(sp)
 8013030:	9807883a 	mov	r3,r19
 8013034:	003efa06 	br	8012c20 <__alt_data_end+0xf8012c20>
 8013038:	d8c02a15 	stw	r3,168(sp)
 801303c:	d9802785 	stb	r6,158(sp)
 8013040:	803db626 	beq	r16,zero,801271c <__alt_data_end+0xf801271c>
 8013044:	00c00044 	movi	r3,1
 8013048:	d8c02b15 	stw	r3,172(sp)
 801304c:	dc001405 	stb	r16,80(sp)
 8013050:	d8002785 	stb	zero,158(sp)
 8013054:	003f9e06 	br	8012ed0 <__alt_data_end+0xf8012ed0>
 8013058:	d8c02017 	ldw	r3,128(sp)
 801305c:	003e5306 	br	80129ac <__alt_data_end+0xf80129ac>
 8013060:	10803fcc 	andi	r2,r2,255
 8013064:	00c00044 	movi	r3,1
 8013068:	10fdfa1e 	bne	r2,r3,8012854 <__alt_data_end+0xf8012854>
 801306c:	e000021e 	bne	fp,zero,8013078 <___vfprintf_internal_r+0xd14>
 8013070:	00800244 	movi	r2,9
 8013074:	14c0202e 	bgeu	r2,r19,80130f8 <___vfprintf_internal_r+0xd94>
 8013078:	dc002b15 	stw	r16,172(sp)
 801307c:	dc402c15 	stw	r17,176(sp)
 8013080:	9821883a 	mov	r16,r19
 8013084:	e023883a 	mov	r17,fp
 8013088:	dc801e04 	addi	r18,sp,120
 801308c:	4827883a 	mov	r19,r9
 8013090:	4039883a 	mov	fp,r8
 8013094:	8009883a 	mov	r4,r16
 8013098:	880b883a 	mov	r5,r17
 801309c:	01800284 	movi	r6,10
 80130a0:	000f883a 	mov	r7,zero
 80130a4:	801c0580 	call	801c058 <__umoddi3>
 80130a8:	10800c04 	addi	r2,r2,48
 80130ac:	94bfffc4 	addi	r18,r18,-1
 80130b0:	8009883a 	mov	r4,r16
 80130b4:	880b883a 	mov	r5,r17
 80130b8:	01800284 	movi	r6,10
 80130bc:	000f883a 	mov	r7,zero
 80130c0:	90800005 	stb	r2,0(r18)
 80130c4:	801ba980 	call	801ba98 <__udivdi3>
 80130c8:	1021883a 	mov	r16,r2
 80130cc:	10c4b03a 	or	r2,r2,r3
 80130d0:	1823883a 	mov	r17,r3
 80130d4:	103fef1e 	bne	r2,zero,8013094 <__alt_data_end+0xf8013094>
 80130d8:	dac02817 	ldw	r11,160(sp)
 80130dc:	dc803115 	stw	r18,196(sp)
 80130e0:	dc002b17 	ldw	r16,172(sp)
 80130e4:	dc402c17 	ldw	r17,176(sp)
 80130e8:	9813883a 	mov	r9,r19
 80130ec:	e011883a 	mov	r8,fp
 80130f0:	5ca5c83a 	sub	r18,r11,r18
 80130f4:	003de906 	br	801289c <__alt_data_end+0xf801289c>
 80130f8:	9cc00c04 	addi	r19,r19,48
 80130fc:	d8c01dc4 	addi	r3,sp,119
 8013100:	dcc01dc5 	stb	r19,119(sp)
 8013104:	dc803c17 	ldw	r18,240(sp)
 8013108:	d8c03115 	stw	r3,196(sp)
 801310c:	003de306 	br	801289c <__alt_data_end+0xf801289c>
 8013110:	00801944 	movi	r2,101
 8013114:	1400710e 	bge	r2,r16,80132dc <___vfprintf_internal_r+0xf78>
 8013118:	d9003717 	ldw	r4,220(sp)
 801311c:	d9403917 	ldw	r5,228(sp)
 8013120:	000d883a 	mov	r6,zero
 8013124:	000f883a 	mov	r7,zero
 8013128:	d8c03d15 	stw	r3,244(sp)
 801312c:	da003f15 	stw	r8,252(sp)
 8013130:	800db780 	call	800db78 <__eqdf2>
 8013134:	d8c03d17 	ldw	r3,244(sp)
 8013138:	da003f17 	ldw	r8,252(sp)
 801313c:	1000ef1e 	bne	r2,zero,80134fc <___vfprintf_internal_r+0x1198>
 8013140:	d8801f17 	ldw	r2,124(sp)
 8013144:	010205b4 	movhi	r4,2070
 8013148:	2117ca04 	addi	r4,r4,24360
 801314c:	18c00044 	addi	r3,r3,1
 8013150:	10800044 	addi	r2,r2,1
 8013154:	41000015 	stw	r4,0(r8)
 8013158:	01000044 	movi	r4,1
 801315c:	41000115 	stw	r4,4(r8)
 8013160:	d8c02015 	stw	r3,128(sp)
 8013164:	d8801f15 	stw	r2,124(sp)
 8013168:	010001c4 	movi	r4,7
 801316c:	20828e16 	blt	r4,r2,8013ba8 <___vfprintf_internal_r+0x1844>
 8013170:	42000204 	addi	r8,r8,8
 8013174:	d8802617 	ldw	r2,152(sp)
 8013178:	dac03317 	ldw	r11,204(sp)
 801317c:	12c00216 	blt	r2,r11,8013188 <___vfprintf_internal_r+0xe24>
 8013180:	8880004c 	andi	r2,r17,1
 8013184:	103e5d26 	beq	r2,zero,8012afc <__alt_data_end+0xf8012afc>
 8013188:	db003817 	ldw	r12,224(sp)
 801318c:	d8801f17 	ldw	r2,124(sp)
 8013190:	dac03517 	ldw	r11,212(sp)
 8013194:	1b07883a 	add	r3,r3,r12
 8013198:	10800044 	addi	r2,r2,1
 801319c:	42c00015 	stw	r11,0(r8)
 80131a0:	43000115 	stw	r12,4(r8)
 80131a4:	d8c02015 	stw	r3,128(sp)
 80131a8:	d8801f15 	stw	r2,124(sp)
 80131ac:	010001c4 	movi	r4,7
 80131b0:	2082ed16 	blt	r4,r2,8013d68 <___vfprintf_internal_r+0x1a04>
 80131b4:	42000204 	addi	r8,r8,8
 80131b8:	db003317 	ldw	r12,204(sp)
 80131bc:	643fffc4 	addi	r16,r12,-1
 80131c0:	043e4e0e 	bge	zero,r16,8012afc <__alt_data_end+0xf8012afc>
 80131c4:	04800404 	movi	r18,16
 80131c8:	d8801f17 	ldw	r2,124(sp)
 80131cc:	94007e0e 	bge	r18,r16,80133c8 <___vfprintf_internal_r+0x1064>
 80131d0:	014205b4 	movhi	r5,2070
 80131d4:	2957d284 	addi	r5,r5,24394
 80131d8:	d9402c15 	stw	r5,176(sp)
 80131dc:	054001c4 	movi	r21,7
 80131e0:	00000306 	br	80131f0 <___vfprintf_internal_r+0xe8c>
 80131e4:	42000204 	addi	r8,r8,8
 80131e8:	843ffc04 	addi	r16,r16,-16
 80131ec:	9400790e 	bge	r18,r16,80133d4 <___vfprintf_internal_r+0x1070>
 80131f0:	18c00404 	addi	r3,r3,16
 80131f4:	10800044 	addi	r2,r2,1
 80131f8:	45000015 	stw	r20,0(r8)
 80131fc:	44800115 	stw	r18,4(r8)
 8013200:	d8c02015 	stw	r3,128(sp)
 8013204:	d8801f15 	stw	r2,124(sp)
 8013208:	a8bff60e 	bge	r21,r2,80131e4 <__alt_data_end+0xf80131e4>
 801320c:	b009883a 	mov	r4,r22
 8013210:	b80b883a 	mov	r5,r23
 8013214:	d9801e04 	addi	r6,sp,120
 8013218:	8019dd80 	call	8019dd8 <__sprint_r>
 801321c:	103d451e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013220:	d8c02017 	ldw	r3,128(sp)
 8013224:	d8801f17 	ldw	r2,124(sp)
 8013228:	da000404 	addi	r8,sp,16
 801322c:	003fee06 	br	80131e8 <__alt_data_end+0xf80131e8>
 8013230:	dac02e17 	ldw	r11,184(sp)
 8013234:	db002b17 	ldw	r12,172(sp)
 8013238:	5b2bc83a 	sub	r21,r11,r12
 801323c:	057df90e 	bge	zero,r21,8012a24 <__alt_data_end+0xf8012a24>
 8013240:	07000404 	movi	fp,16
 8013244:	d8801f17 	ldw	r2,124(sp)
 8013248:	e543640e 	bge	fp,r21,8013fdc <___vfprintf_internal_r+0x1c78>
 801324c:	014205b4 	movhi	r5,2070
 8013250:	2957d284 	addi	r5,r5,24394
 8013254:	d9402c15 	stw	r5,176(sp)
 8013258:	04c001c4 	movi	r19,7
 801325c:	00000306 	br	801326c <___vfprintf_internal_r+0xf08>
 8013260:	ad7ffc04 	addi	r21,r21,-16
 8013264:	42000204 	addi	r8,r8,8
 8013268:	e540110e 	bge	fp,r21,80132b0 <___vfprintf_internal_r+0xf4c>
 801326c:	18c00404 	addi	r3,r3,16
 8013270:	10800044 	addi	r2,r2,1
 8013274:	45000015 	stw	r20,0(r8)
 8013278:	47000115 	stw	fp,4(r8)
 801327c:	d8c02015 	stw	r3,128(sp)
 8013280:	d8801f15 	stw	r2,124(sp)
 8013284:	98bff60e 	bge	r19,r2,8013260 <__alt_data_end+0xf8013260>
 8013288:	b009883a 	mov	r4,r22
 801328c:	b80b883a 	mov	r5,r23
 8013290:	d9801e04 	addi	r6,sp,120
 8013294:	8019dd80 	call	8019dd8 <__sprint_r>
 8013298:	103d261e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 801329c:	ad7ffc04 	addi	r21,r21,-16
 80132a0:	d8c02017 	ldw	r3,128(sp)
 80132a4:	d8801f17 	ldw	r2,124(sp)
 80132a8:	da000404 	addi	r8,sp,16
 80132ac:	e57fef16 	blt	fp,r21,801326c <__alt_data_end+0xf801326c>
 80132b0:	dac02c17 	ldw	r11,176(sp)
 80132b4:	1d47883a 	add	r3,r3,r21
 80132b8:	10800044 	addi	r2,r2,1
 80132bc:	42c00015 	stw	r11,0(r8)
 80132c0:	45400115 	stw	r21,4(r8)
 80132c4:	d8c02015 	stw	r3,128(sp)
 80132c8:	d8801f15 	stw	r2,124(sp)
 80132cc:	010001c4 	movi	r4,7
 80132d0:	20819116 	blt	r4,r2,8013918 <___vfprintf_internal_r+0x15b4>
 80132d4:	42000204 	addi	r8,r8,8
 80132d8:	003dd206 	br	8012a24 <__alt_data_end+0xf8012a24>
 80132dc:	db003317 	ldw	r12,204(sp)
 80132e0:	00800044 	movi	r2,1
 80132e4:	18c00044 	addi	r3,r3,1
 80132e8:	1301530e 	bge	r2,r12,8013838 <___vfprintf_internal_r+0x14d4>
 80132ec:	dc001f17 	ldw	r16,124(sp)
 80132f0:	dac03117 	ldw	r11,196(sp)
 80132f4:	00800044 	movi	r2,1
 80132f8:	84000044 	addi	r16,r16,1
 80132fc:	40800115 	stw	r2,4(r8)
 8013300:	42c00015 	stw	r11,0(r8)
 8013304:	d8c02015 	stw	r3,128(sp)
 8013308:	dc001f15 	stw	r16,124(sp)
 801330c:	008001c4 	movi	r2,7
 8013310:	14016b16 	blt	r2,r16,80138c0 <___vfprintf_internal_r+0x155c>
 8013314:	42000204 	addi	r8,r8,8
 8013318:	db003817 	ldw	r12,224(sp)
 801331c:	dac03517 	ldw	r11,212(sp)
 8013320:	84000044 	addi	r16,r16,1
 8013324:	1b07883a 	add	r3,r3,r12
 8013328:	42c00015 	stw	r11,0(r8)
 801332c:	43000115 	stw	r12,4(r8)
 8013330:	d8c02015 	stw	r3,128(sp)
 8013334:	dc001f15 	stw	r16,124(sp)
 8013338:	008001c4 	movi	r2,7
 801333c:	14016916 	blt	r2,r16,80138e4 <___vfprintf_internal_r+0x1580>
 8013340:	44800204 	addi	r18,r8,8
 8013344:	d9003717 	ldw	r4,220(sp)
 8013348:	d9403917 	ldw	r5,228(sp)
 801334c:	000d883a 	mov	r6,zero
 8013350:	000f883a 	mov	r7,zero
 8013354:	d8c03d15 	stw	r3,244(sp)
 8013358:	800db780 	call	800db78 <__eqdf2>
 801335c:	d8c03d17 	ldw	r3,244(sp)
 8013360:	db003317 	ldw	r12,204(sp)
 8013364:	1000ad26 	beq	r2,zero,801361c <___vfprintf_internal_r+0x12b8>
 8013368:	dac03117 	ldw	r11,196(sp)
 801336c:	60bfffc4 	addi	r2,r12,-1
 8013370:	1887883a 	add	r3,r3,r2
 8013374:	59000044 	addi	r4,r11,1
 8013378:	84000044 	addi	r16,r16,1
 801337c:	90800115 	stw	r2,4(r18)
 8013380:	91000015 	stw	r4,0(r18)
 8013384:	d8c02015 	stw	r3,128(sp)
 8013388:	dc001f15 	stw	r16,124(sp)
 801338c:	008001c4 	movi	r2,7
 8013390:	14014216 	blt	r2,r16,801389c <___vfprintf_internal_r+0x1538>
 8013394:	94800204 	addi	r18,r18,8
 8013398:	dac03a17 	ldw	r11,232(sp)
 801339c:	dd4022c4 	addi	r21,sp,139
 80133a0:	84000044 	addi	r16,r16,1
 80133a4:	1ac7883a 	add	r3,r3,r11
 80133a8:	95400015 	stw	r21,0(r18)
 80133ac:	92c00115 	stw	r11,4(r18)
 80133b0:	d8c02015 	stw	r3,128(sp)
 80133b4:	dc001f15 	stw	r16,124(sp)
 80133b8:	008001c4 	movi	r2,7
 80133bc:	14000e16 	blt	r2,r16,80133f8 <___vfprintf_internal_r+0x1094>
 80133c0:	92000204 	addi	r8,r18,8
 80133c4:	003dcd06 	br	8012afc <__alt_data_end+0xf8012afc>
 80133c8:	010205b4 	movhi	r4,2070
 80133cc:	2117d284 	addi	r4,r4,24394
 80133d0:	d9002c15 	stw	r4,176(sp)
 80133d4:	dac02c17 	ldw	r11,176(sp)
 80133d8:	1c07883a 	add	r3,r3,r16
 80133dc:	44000115 	stw	r16,4(r8)
 80133e0:	42c00015 	stw	r11,0(r8)
 80133e4:	10800044 	addi	r2,r2,1
 80133e8:	d8c02015 	stw	r3,128(sp)
 80133ec:	d8801f15 	stw	r2,124(sp)
 80133f0:	010001c4 	movi	r4,7
 80133f4:	20bdc00e 	bge	r4,r2,8012af8 <__alt_data_end+0xf8012af8>
 80133f8:	b009883a 	mov	r4,r22
 80133fc:	b80b883a 	mov	r5,r23
 8013400:	d9801e04 	addi	r6,sp,120
 8013404:	8019dd80 	call	8019dd8 <__sprint_r>
 8013408:	103cca1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 801340c:	d8c02017 	ldw	r3,128(sp)
 8013410:	da000404 	addi	r8,sp,16
 8013414:	003db906 	br	8012afc <__alt_data_end+0xf8012afc>
 8013418:	b009883a 	mov	r4,r22
 801341c:	b80b883a 	mov	r5,r23
 8013420:	d9801e04 	addi	r6,sp,120
 8013424:	8019dd80 	call	8019dd8 <__sprint_r>
 8013428:	103def26 	beq	r2,zero,8012be8 <__alt_data_end+0xf8012be8>
 801342c:	003cc106 	br	8012734 <__alt_data_end+0xf8012734>
 8013430:	10803fcc 	andi	r2,r2,255
 8013434:	1000651e 	bne	r2,zero,80135cc <___vfprintf_internal_r+0x1268>
 8013438:	8880004c 	andi	r2,r17,1
 801343c:	10013226 	beq	r2,zero,8013908 <___vfprintf_internal_r+0x15a4>
 8013440:	00800c04 	movi	r2,48
 8013444:	d8c01dc4 	addi	r3,sp,119
 8013448:	d8801dc5 	stb	r2,119(sp)
 801344c:	dc803c17 	ldw	r18,240(sp)
 8013450:	d8c03115 	stw	r3,196(sp)
 8013454:	003d1106 	br	801289c <__alt_data_end+0xf801289c>
 8013458:	b009883a 	mov	r4,r22
 801345c:	b80b883a 	mov	r5,r23
 8013460:	d9801e04 	addi	r6,sp,120
 8013464:	8019dd80 	call	8019dd8 <__sprint_r>
 8013468:	103cb21e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 801346c:	d8c02017 	ldw	r3,128(sp)
 8013470:	da000404 	addi	r8,sp,16
 8013474:	003d9406 	br	8012ac8 <__alt_data_end+0xf8012ac8>
 8013478:	b009883a 	mov	r4,r22
 801347c:	b80b883a 	mov	r5,r23
 8013480:	d9801e04 	addi	r6,sp,120
 8013484:	8019dd80 	call	8019dd8 <__sprint_r>
 8013488:	103caa1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 801348c:	d8c02017 	ldw	r3,128(sp)
 8013490:	da000404 	addi	r8,sp,16
 8013494:	003d5206 	br	80129e0 <__alt_data_end+0xf80129e0>
 8013498:	b009883a 	mov	r4,r22
 801349c:	b80b883a 	mov	r5,r23
 80134a0:	d9801e04 	addi	r6,sp,120
 80134a4:	8019dd80 	call	8019dd8 <__sprint_r>
 80134a8:	103ca21e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 80134ac:	d8c02017 	ldw	r3,128(sp)
 80134b0:	da000404 	addi	r8,sp,16
 80134b4:	003d5806 	br	8012a18 <__alt_data_end+0xf8012a18>
 80134b8:	d9403b17 	ldw	r5,236(sp)
 80134bc:	d8c01e04 	addi	r3,sp,120
 80134c0:	988003cc 	andi	r2,r19,15
 80134c4:	e008973a 	slli	r4,fp,28
 80134c8:	2885883a 	add	r2,r5,r2
 80134cc:	9826d13a 	srli	r19,r19,4
 80134d0:	10800003 	ldbu	r2,0(r2)
 80134d4:	e038d13a 	srli	fp,fp,4
 80134d8:	18ffffc4 	addi	r3,r3,-1
 80134dc:	24e6b03a 	or	r19,r4,r19
 80134e0:	18800005 	stb	r2,0(r3)
 80134e4:	9f04b03a 	or	r2,r19,fp
 80134e8:	103ff51e 	bne	r2,zero,80134c0 <__alt_data_end+0xf80134c0>
 80134ec:	db002817 	ldw	r12,160(sp)
 80134f0:	d8c03115 	stw	r3,196(sp)
 80134f4:	60e5c83a 	sub	r18,r12,r3
 80134f8:	003ce806 	br	801289c <__alt_data_end+0xf801289c>
 80134fc:	dc002617 	ldw	r16,152(sp)
 8013500:	0401b10e 	bge	zero,r16,8013bc8 <___vfprintf_internal_r+0x1864>
 8013504:	db003117 	ldw	r12,196(sp)
 8013508:	dac03317 	ldw	r11,204(sp)
 801350c:	62e1883a 	add	r16,r12,r11
 8013510:	db003417 	ldw	r12,208(sp)
 8013514:	5825883a 	mov	r18,r11
 8013518:	62c0010e 	bge	r12,r11,8013520 <___vfprintf_internal_r+0x11bc>
 801351c:	6025883a 	mov	r18,r12
 8013520:	04800b0e 	bge	zero,r18,8013550 <___vfprintf_internal_r+0x11ec>
 8013524:	d8801f17 	ldw	r2,124(sp)
 8013528:	dac03117 	ldw	r11,196(sp)
 801352c:	1c87883a 	add	r3,r3,r18
 8013530:	10800044 	addi	r2,r2,1
 8013534:	42c00015 	stw	r11,0(r8)
 8013538:	44800115 	stw	r18,4(r8)
 801353c:	d8c02015 	stw	r3,128(sp)
 8013540:	d8801f15 	stw	r2,124(sp)
 8013544:	010001c4 	movi	r4,7
 8013548:	20824f16 	blt	r4,r2,8013e88 <___vfprintf_internal_r+0x1b24>
 801354c:	42000204 	addi	r8,r8,8
 8013550:	90024b16 	blt	r18,zero,8013e80 <___vfprintf_internal_r+0x1b1c>
 8013554:	db003417 	ldw	r12,208(sp)
 8013558:	64a5c83a 	sub	r18,r12,r18
 801355c:	0480730e 	bge	zero,r18,801372c <___vfprintf_internal_r+0x13c8>
 8013560:	05400404 	movi	r21,16
 8013564:	d8801f17 	ldw	r2,124(sp)
 8013568:	ac817d0e 	bge	r21,r18,8013b60 <___vfprintf_internal_r+0x17fc>
 801356c:	014205b4 	movhi	r5,2070
 8013570:	2957d284 	addi	r5,r5,24394
 8013574:	d9402c15 	stw	r5,176(sp)
 8013578:	070001c4 	movi	fp,7
 801357c:	00000306 	br	801358c <___vfprintf_internal_r+0x1228>
 8013580:	42000204 	addi	r8,r8,8
 8013584:	94bffc04 	addi	r18,r18,-16
 8013588:	ac81780e 	bge	r21,r18,8013b6c <___vfprintf_internal_r+0x1808>
 801358c:	18c00404 	addi	r3,r3,16
 8013590:	10800044 	addi	r2,r2,1
 8013594:	45000015 	stw	r20,0(r8)
 8013598:	45400115 	stw	r21,4(r8)
 801359c:	d8c02015 	stw	r3,128(sp)
 80135a0:	d8801f15 	stw	r2,124(sp)
 80135a4:	e0bff60e 	bge	fp,r2,8013580 <__alt_data_end+0xf8013580>
 80135a8:	b009883a 	mov	r4,r22
 80135ac:	b80b883a 	mov	r5,r23
 80135b0:	d9801e04 	addi	r6,sp,120
 80135b4:	8019dd80 	call	8019dd8 <__sprint_r>
 80135b8:	103c5e1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 80135bc:	d8c02017 	ldw	r3,128(sp)
 80135c0:	d8801f17 	ldw	r2,124(sp)
 80135c4:	da000404 	addi	r8,sp,16
 80135c8:	003fee06 	br	8013584 <__alt_data_end+0xf8013584>
 80135cc:	dac01e04 	addi	r11,sp,120
 80135d0:	0025883a 	mov	r18,zero
 80135d4:	dac03115 	stw	r11,196(sp)
 80135d8:	003cb006 	br	801289c <__alt_data_end+0xf801289c>
 80135dc:	b009883a 	mov	r4,r22
 80135e0:	b80b883a 	mov	r5,r23
 80135e4:	d9801e04 	addi	r6,sp,120
 80135e8:	8019dd80 	call	8019dd8 <__sprint_r>
 80135ec:	103c511e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 80135f0:	d8c02017 	ldw	r3,128(sp)
 80135f4:	d8802787 	ldb	r2,158(sp)
 80135f8:	da000404 	addi	r8,sp,16
 80135fc:	003ceb06 	br	80129ac <__alt_data_end+0xf80129ac>
 8013600:	1cc00017 	ldw	r19,0(r3)
 8013604:	dac02d17 	ldw	r11,180(sp)
 8013608:	9839d7fa 	srai	fp,r19,31
 801360c:	5ac00104 	addi	r11,r11,4
 8013610:	dac02d15 	stw	r11,180(sp)
 8013614:	e005883a 	mov	r2,fp
 8013618:	003c8106 	br	8012820 <__alt_data_end+0xf8012820>
 801361c:	657fffc4 	addi	r21,r12,-1
 8013620:	057f5d0e 	bge	zero,r21,8013398 <__alt_data_end+0xf8013398>
 8013624:	07000404 	movi	fp,16
 8013628:	e540900e 	bge	fp,r21,801386c <___vfprintf_internal_r+0x1508>
 801362c:	010205b4 	movhi	r4,2070
 8013630:	2117d284 	addi	r4,r4,24394
 8013634:	d9002c15 	stw	r4,176(sp)
 8013638:	01c001c4 	movi	r7,7
 801363c:	00000306 	br	801364c <___vfprintf_internal_r+0x12e8>
 8013640:	94800204 	addi	r18,r18,8
 8013644:	ad7ffc04 	addi	r21,r21,-16
 8013648:	e5408b0e 	bge	fp,r21,8013878 <___vfprintf_internal_r+0x1514>
 801364c:	18c00404 	addi	r3,r3,16
 8013650:	84000044 	addi	r16,r16,1
 8013654:	95000015 	stw	r20,0(r18)
 8013658:	97000115 	stw	fp,4(r18)
 801365c:	d8c02015 	stw	r3,128(sp)
 8013660:	dc001f15 	stw	r16,124(sp)
 8013664:	3c3ff60e 	bge	r7,r16,8013640 <__alt_data_end+0xf8013640>
 8013668:	b009883a 	mov	r4,r22
 801366c:	b80b883a 	mov	r5,r23
 8013670:	d9801e04 	addi	r6,sp,120
 8013674:	d9c03d15 	stw	r7,244(sp)
 8013678:	8019dd80 	call	8019dd8 <__sprint_r>
 801367c:	d9c03d17 	ldw	r7,244(sp)
 8013680:	103c2c1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013684:	d8c02017 	ldw	r3,128(sp)
 8013688:	dc001f17 	ldw	r16,124(sp)
 801368c:	dc800404 	addi	r18,sp,16
 8013690:	003fec06 	br	8013644 <__alt_data_end+0xf8013644>
 8013694:	dac02d17 	ldw	r11,180(sp)
 8013698:	0039883a 	mov	fp,zero
 801369c:	0005883a 	mov	r2,zero
 80136a0:	5cc00017 	ldw	r19,0(r11)
 80136a4:	5ac00104 	addi	r11,r11,4
 80136a8:	dac02d15 	stw	r11,180(sp)
 80136ac:	9807883a 	mov	r3,r19
 80136b0:	003d5b06 	br	8012c20 <__alt_data_end+0xf8012c20>
 80136b4:	db002d17 	ldw	r12,180(sp)
 80136b8:	0039883a 	mov	fp,zero
 80136bc:	00800044 	movi	r2,1
 80136c0:	64c00017 	ldw	r19,0(r12)
 80136c4:	63000104 	addi	r12,r12,4
 80136c8:	db002d15 	stw	r12,180(sp)
 80136cc:	9807883a 	mov	r3,r19
 80136d0:	003d5306 	br	8012c20 <__alt_data_end+0xf8012c20>
 80136d4:	00800084 	movi	r2,2
 80136d8:	9f06b03a 	or	r3,r19,fp
 80136dc:	003d5006 	br	8012c20 <__alt_data_end+0xf8012c20>
 80136e0:	10803fcc 	andi	r2,r2,255
 80136e4:	1080201c 	xori	r2,r2,128
 80136e8:	10bfe004 	addi	r2,r2,-128
 80136ec:	01000c04 	movi	r4,48
 80136f0:	1101a526 	beq	r2,r4,8013d88 <___vfprintf_internal_r+0x1a24>
 80136f4:	dac03117 	ldw	r11,196(sp)
 80136f8:	db002817 	ldw	r12,160(sp)
 80136fc:	193fffc5 	stb	r4,-1(r3)
 8013700:	5affffc4 	addi	r11,r11,-1
 8013704:	dac03115 	stw	r11,196(sp)
 8013708:	62e5c83a 	sub	r18,r12,r11
 801370c:	003c6306 	br	801289c <__alt_data_end+0xf801289c>
 8013710:	b009883a 	mov	r4,r22
 8013714:	b80b883a 	mov	r5,r23
 8013718:	d9801e04 	addi	r6,sp,120
 801371c:	8019dd80 	call	8019dd8 <__sprint_r>
 8013720:	103c041e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013724:	d8c02017 	ldw	r3,128(sp)
 8013728:	da000404 	addi	r8,sp,16
 801372c:	db003117 	ldw	r12,196(sp)
 8013730:	dac03417 	ldw	r11,208(sp)
 8013734:	d8802617 	ldw	r2,152(sp)
 8013738:	62e5883a 	add	r18,r12,r11
 801373c:	db003317 	ldw	r12,204(sp)
 8013740:	13000216 	blt	r2,r12,801374c <___vfprintf_internal_r+0x13e8>
 8013744:	8900004c 	andi	r4,r17,1
 8013748:	20000c26 	beq	r4,zero,801377c <___vfprintf_internal_r+0x1418>
 801374c:	dac03817 	ldw	r11,224(sp)
 8013750:	d9001f17 	ldw	r4,124(sp)
 8013754:	db003517 	ldw	r12,212(sp)
 8013758:	1ac7883a 	add	r3,r3,r11
 801375c:	21000044 	addi	r4,r4,1
 8013760:	43000015 	stw	r12,0(r8)
 8013764:	42c00115 	stw	r11,4(r8)
 8013768:	d8c02015 	stw	r3,128(sp)
 801376c:	d9001f15 	stw	r4,124(sp)
 8013770:	014001c4 	movi	r5,7
 8013774:	2901cc16 	blt	r5,r4,8013ea8 <___vfprintf_internal_r+0x1b44>
 8013778:	42000204 	addi	r8,r8,8
 801377c:	dac03317 	ldw	r11,204(sp)
 8013780:	8489c83a 	sub	r4,r16,r18
 8013784:	5885c83a 	sub	r2,r11,r2
 8013788:	1021883a 	mov	r16,r2
 801378c:	2080010e 	bge	r4,r2,8013794 <___vfprintf_internal_r+0x1430>
 8013790:	2021883a 	mov	r16,r4
 8013794:	04000a0e 	bge	zero,r16,80137c0 <___vfprintf_internal_r+0x145c>
 8013798:	d9001f17 	ldw	r4,124(sp)
 801379c:	1c07883a 	add	r3,r3,r16
 80137a0:	44800015 	stw	r18,0(r8)
 80137a4:	21000044 	addi	r4,r4,1
 80137a8:	44000115 	stw	r16,4(r8)
 80137ac:	d8c02015 	stw	r3,128(sp)
 80137b0:	d9001f15 	stw	r4,124(sp)
 80137b4:	014001c4 	movi	r5,7
 80137b8:	2901e316 	blt	r5,r4,8013f48 <___vfprintf_internal_r+0x1be4>
 80137bc:	42000204 	addi	r8,r8,8
 80137c0:	8001df16 	blt	r16,zero,8013f40 <___vfprintf_internal_r+0x1bdc>
 80137c4:	1421c83a 	sub	r16,r2,r16
 80137c8:	043ccc0e 	bge	zero,r16,8012afc <__alt_data_end+0xf8012afc>
 80137cc:	04800404 	movi	r18,16
 80137d0:	d8801f17 	ldw	r2,124(sp)
 80137d4:	943efc0e 	bge	r18,r16,80133c8 <__alt_data_end+0xf80133c8>
 80137d8:	014205b4 	movhi	r5,2070
 80137dc:	2957d284 	addi	r5,r5,24394
 80137e0:	d9402c15 	stw	r5,176(sp)
 80137e4:	054001c4 	movi	r21,7
 80137e8:	00000306 	br	80137f8 <___vfprintf_internal_r+0x1494>
 80137ec:	42000204 	addi	r8,r8,8
 80137f0:	843ffc04 	addi	r16,r16,-16
 80137f4:	943ef70e 	bge	r18,r16,80133d4 <__alt_data_end+0xf80133d4>
 80137f8:	18c00404 	addi	r3,r3,16
 80137fc:	10800044 	addi	r2,r2,1
 8013800:	45000015 	stw	r20,0(r8)
 8013804:	44800115 	stw	r18,4(r8)
 8013808:	d8c02015 	stw	r3,128(sp)
 801380c:	d8801f15 	stw	r2,124(sp)
 8013810:	a8bff60e 	bge	r21,r2,80137ec <__alt_data_end+0xf80137ec>
 8013814:	b009883a 	mov	r4,r22
 8013818:	b80b883a 	mov	r5,r23
 801381c:	d9801e04 	addi	r6,sp,120
 8013820:	8019dd80 	call	8019dd8 <__sprint_r>
 8013824:	103bc31e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013828:	d8c02017 	ldw	r3,128(sp)
 801382c:	d8801f17 	ldw	r2,124(sp)
 8013830:	da000404 	addi	r8,sp,16
 8013834:	003fee06 	br	80137f0 <__alt_data_end+0xf80137f0>
 8013838:	8888703a 	and	r4,r17,r2
 801383c:	203eab1e 	bne	r4,zero,80132ec <__alt_data_end+0xf80132ec>
 8013840:	dc001f17 	ldw	r16,124(sp)
 8013844:	db003117 	ldw	r12,196(sp)
 8013848:	40800115 	stw	r2,4(r8)
 801384c:	84000044 	addi	r16,r16,1
 8013850:	43000015 	stw	r12,0(r8)
 8013854:	d8c02015 	stw	r3,128(sp)
 8013858:	dc001f15 	stw	r16,124(sp)
 801385c:	008001c4 	movi	r2,7
 8013860:	14000e16 	blt	r2,r16,801389c <___vfprintf_internal_r+0x1538>
 8013864:	44800204 	addi	r18,r8,8
 8013868:	003ecb06 	br	8013398 <__alt_data_end+0xf8013398>
 801386c:	008205b4 	movhi	r2,2070
 8013870:	1097d284 	addi	r2,r2,24394
 8013874:	d8802c15 	stw	r2,176(sp)
 8013878:	dac02c17 	ldw	r11,176(sp)
 801387c:	1d47883a 	add	r3,r3,r21
 8013880:	84000044 	addi	r16,r16,1
 8013884:	92c00015 	stw	r11,0(r18)
 8013888:	95400115 	stw	r21,4(r18)
 801388c:	d8c02015 	stw	r3,128(sp)
 8013890:	dc001f15 	stw	r16,124(sp)
 8013894:	008001c4 	movi	r2,7
 8013898:	143ebe0e 	bge	r2,r16,8013394 <__alt_data_end+0xf8013394>
 801389c:	b009883a 	mov	r4,r22
 80138a0:	b80b883a 	mov	r5,r23
 80138a4:	d9801e04 	addi	r6,sp,120
 80138a8:	8019dd80 	call	8019dd8 <__sprint_r>
 80138ac:	103ba11e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 80138b0:	d8c02017 	ldw	r3,128(sp)
 80138b4:	dc001f17 	ldw	r16,124(sp)
 80138b8:	dc800404 	addi	r18,sp,16
 80138bc:	003eb606 	br	8013398 <__alt_data_end+0xf8013398>
 80138c0:	b009883a 	mov	r4,r22
 80138c4:	b80b883a 	mov	r5,r23
 80138c8:	d9801e04 	addi	r6,sp,120
 80138cc:	8019dd80 	call	8019dd8 <__sprint_r>
 80138d0:	103b981e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 80138d4:	d8c02017 	ldw	r3,128(sp)
 80138d8:	dc001f17 	ldw	r16,124(sp)
 80138dc:	da000404 	addi	r8,sp,16
 80138e0:	003e8d06 	br	8013318 <__alt_data_end+0xf8013318>
 80138e4:	b009883a 	mov	r4,r22
 80138e8:	b80b883a 	mov	r5,r23
 80138ec:	d9801e04 	addi	r6,sp,120
 80138f0:	8019dd80 	call	8019dd8 <__sprint_r>
 80138f4:	103b8f1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 80138f8:	d8c02017 	ldw	r3,128(sp)
 80138fc:	dc001f17 	ldw	r16,124(sp)
 8013900:	dc800404 	addi	r18,sp,16
 8013904:	003e8f06 	br	8013344 <__alt_data_end+0xf8013344>
 8013908:	db001e04 	addi	r12,sp,120
 801390c:	0025883a 	mov	r18,zero
 8013910:	db003115 	stw	r12,196(sp)
 8013914:	003be106 	br	801289c <__alt_data_end+0xf801289c>
 8013918:	b009883a 	mov	r4,r22
 801391c:	b80b883a 	mov	r5,r23
 8013920:	d9801e04 	addi	r6,sp,120
 8013924:	8019dd80 	call	8019dd8 <__sprint_r>
 8013928:	103b821e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 801392c:	d8c02017 	ldw	r3,128(sp)
 8013930:	da000404 	addi	r8,sp,16
 8013934:	003c3b06 	br	8012a24 <__alt_data_end+0xf8012a24>
 8013938:	04e7c83a 	sub	r19,zero,r19
 801393c:	9804c03a 	cmpne	r2,r19,zero
 8013940:	0739c83a 	sub	fp,zero,fp
 8013944:	e0b9c83a 	sub	fp,fp,r2
 8013948:	05400b44 	movi	r21,45
 801394c:	dd402785 	stb	r21,158(sp)
 8013950:	da403215 	stw	r9,200(sp)
 8013954:	00800044 	movi	r2,1
 8013958:	9f06b03a 	or	r3,r19,fp
 801395c:	003bb506 	br	8012834 <__alt_data_end+0xf8012834>
 8013960:	da003f15 	stw	r8,252(sp)
 8013964:	da403e15 	stw	r9,248(sp)
 8013968:	80188840 	call	8018884 <__fpclassifyd>
 801396c:	da003f17 	ldw	r8,252(sp)
 8013970:	da403e17 	ldw	r9,248(sp)
 8013974:	1000ce26 	beq	r2,zero,8013cb0 <___vfprintf_internal_r+0x194c>
 8013978:	057ff7c4 	movi	r21,-33
 801397c:	00bfffc4 	movi	r2,-1
 8013980:	856a703a 	and	r21,r16,r21
 8013984:	4881e826 	beq	r9,r2,8014128 <___vfprintf_internal_r+0x1dc4>
 8013988:	008011c4 	movi	r2,71
 801398c:	a881e326 	beq	r21,r2,801411c <___vfprintf_internal_r+0x1db8>
 8013990:	db003917 	ldw	r12,228(sp)
 8013994:	8ac04014 	ori	r11,r17,256
 8013998:	dac02d15 	stw	r11,180(sp)
 801399c:	6001ed16 	blt	r12,zero,8014154 <___vfprintf_internal_r+0x1df0>
 80139a0:	dc803917 	ldw	r18,228(sp)
 80139a4:	d8002b05 	stb	zero,172(sp)
 80139a8:	00801984 	movi	r2,102
 80139ac:	80811826 	beq	r16,r2,8013e10 <___vfprintf_internal_r+0x1aac>
 80139b0:	00801184 	movi	r2,70
 80139b4:	80811626 	beq	r16,r2,8013e10 <___vfprintf_internal_r+0x1aac>
 80139b8:	00801144 	movi	r2,69
 80139bc:	a881e926 	beq	r21,r2,8014164 <___vfprintf_internal_r+0x1e00>
 80139c0:	4839883a 	mov	fp,r9
 80139c4:	d8802604 	addi	r2,sp,152
 80139c8:	d8800115 	stw	r2,4(sp)
 80139cc:	d9403717 	ldw	r5,220(sp)
 80139d0:	d8802504 	addi	r2,sp,148
 80139d4:	d8800215 	stw	r2,8(sp)
 80139d8:	d8802104 	addi	r2,sp,132
 80139dc:	df000015 	stw	fp,0(sp)
 80139e0:	d8800315 	stw	r2,12(sp)
 80139e4:	b009883a 	mov	r4,r22
 80139e8:	900d883a 	mov	r6,r18
 80139ec:	01c00084 	movi	r7,2
 80139f0:	da003f15 	stw	r8,252(sp)
 80139f4:	da403e15 	stw	r9,248(sp)
 80139f8:	80146e80 	call	80146e8 <_dtoa_r>
 80139fc:	d8803115 	stw	r2,196(sp)
 8013a00:	008019c4 	movi	r2,103
 8013a04:	da003f17 	ldw	r8,252(sp)
 8013a08:	da403e17 	ldw	r9,248(sp)
 8013a0c:	80800226 	beq	r16,r2,8013a18 <___vfprintf_internal_r+0x16b4>
 8013a10:	008011c4 	movi	r2,71
 8013a14:	8081101e 	bne	r16,r2,8013e58 <___vfprintf_internal_r+0x1af4>
 8013a18:	8880004c 	andi	r2,r17,1
 8013a1c:	1001dd26 	beq	r2,zero,8014194 <___vfprintf_internal_r+0x1e30>
 8013a20:	db003117 	ldw	r12,196(sp)
 8013a24:	6715883a 	add	r10,r12,fp
 8013a28:	d9003717 	ldw	r4,220(sp)
 8013a2c:	900b883a 	mov	r5,r18
 8013a30:	000d883a 	mov	r6,zero
 8013a34:	000f883a 	mov	r7,zero
 8013a38:	da003f15 	stw	r8,252(sp)
 8013a3c:	da403e15 	stw	r9,248(sp)
 8013a40:	da803d15 	stw	r10,244(sp)
 8013a44:	800db780 	call	800db78 <__eqdf2>
 8013a48:	da003f17 	ldw	r8,252(sp)
 8013a4c:	da403e17 	ldw	r9,248(sp)
 8013a50:	da803d17 	ldw	r10,244(sp)
 8013a54:	10016526 	beq	r2,zero,8013fec <___vfprintf_internal_r+0x1c88>
 8013a58:	d8802117 	ldw	r2,132(sp)
 8013a5c:	1280062e 	bgeu	r2,r10,8013a78 <___vfprintf_internal_r+0x1714>
 8013a60:	01000c04 	movi	r4,48
 8013a64:	10c00044 	addi	r3,r2,1
 8013a68:	d8c02115 	stw	r3,132(sp)
 8013a6c:	11000005 	stb	r4,0(r2)
 8013a70:	d8802117 	ldw	r2,132(sp)
 8013a74:	12bffb36 	bltu	r2,r10,8013a64 <__alt_data_end+0xf8013a64>
 8013a78:	db003117 	ldw	r12,196(sp)
 8013a7c:	1305c83a 	sub	r2,r2,r12
 8013a80:	d8803315 	stw	r2,204(sp)
 8013a84:	008011c4 	movi	r2,71
 8013a88:	a8814d26 	beq	r21,r2,8013fc0 <___vfprintf_internal_r+0x1c5c>
 8013a8c:	00801944 	movi	r2,101
 8013a90:	1402060e 	bge	r2,r16,80142ac <___vfprintf_internal_r+0x1f48>
 8013a94:	00801984 	movi	r2,102
 8013a98:	8081b426 	beq	r16,r2,801416c <___vfprintf_internal_r+0x1e08>
 8013a9c:	db002617 	ldw	r12,152(sp)
 8013aa0:	db003415 	stw	r12,208(sp)
 8013aa4:	db003417 	ldw	r12,208(sp)
 8013aa8:	dac03317 	ldw	r11,204(sp)
 8013aac:	62c1a016 	blt	r12,r11,8014130 <___vfprintf_internal_r+0x1dcc>
 8013ab0:	8c40004c 	andi	r17,r17,1
 8013ab4:	8801bf1e 	bne	r17,zero,80141b4 <___vfprintf_internal_r+0x1e50>
 8013ab8:	6005883a 	mov	r2,r12
 8013abc:	6001b316 	blt	r12,zero,801418c <___vfprintf_internal_r+0x1e28>
 8013ac0:	dc803417 	ldw	r18,208(sp)
 8013ac4:	df002b07 	ldb	fp,172(sp)
 8013ac8:	e0012e1e 	bne	fp,zero,8013f84 <___vfprintf_internal_r+0x1c20>
 8013acc:	dc402d17 	ldw	r17,180(sp)
 8013ad0:	dd402783 	ldbu	r21,158(sp)
 8013ad4:	d8802b15 	stw	r2,172(sp)
 8013ad8:	dcc02d15 	stw	r19,180(sp)
 8013adc:	d8003215 	stw	zero,200(sp)
 8013ae0:	003b7306 	br	80128b0 <__alt_data_end+0xf80128b0>
 8013ae4:	00800084 	movi	r2,2
 8013ae8:	003c4d06 	br	8012c20 <__alt_data_end+0xf8012c20>
 8013aec:	8880040c 	andi	r2,r17,16
 8013af0:	1000091e 	bne	r2,zero,8013b18 <___vfprintf_internal_r+0x17b4>
 8013af4:	8c40100c 	andi	r17,r17,64
 8013af8:	88000726 	beq	r17,zero,8013b18 <___vfprintf_internal_r+0x17b4>
 8013afc:	db002d17 	ldw	r12,180(sp)
 8013b00:	dac02f17 	ldw	r11,188(sp)
 8013b04:	60800017 	ldw	r2,0(r12)
 8013b08:	63000104 	addi	r12,r12,4
 8013b0c:	db002d15 	stw	r12,180(sp)
 8013b10:	12c0000d 	sth	r11,0(r2)
 8013b14:	003a4e06 	br	8012450 <__alt_data_end+0xf8012450>
 8013b18:	db002d17 	ldw	r12,180(sp)
 8013b1c:	dac02f17 	ldw	r11,188(sp)
 8013b20:	60800017 	ldw	r2,0(r12)
 8013b24:	63000104 	addi	r12,r12,4
 8013b28:	db002d15 	stw	r12,180(sp)
 8013b2c:	12c00015 	stw	r11,0(r2)
 8013b30:	003a4706 	br	8012450 <__alt_data_end+0xf8012450>
 8013b34:	1c000007 	ldb	r16,0(r3)
 8013b38:	1805883a 	mov	r2,r3
 8013b3c:	003a6e06 	br	80124f8 <__alt_data_end+0xf80124f8>
 8013b40:	88c0100c 	andi	r3,r17,64
 8013b44:	18006b26 	beq	r3,zero,8013cf4 <___vfprintf_internal_r+0x1990>
 8013b48:	dac02d17 	ldw	r11,180(sp)
 8013b4c:	14c0000b 	ldhu	r19,0(r2)
 8013b50:	0039883a 	mov	fp,zero
 8013b54:	5ac00104 	addi	r11,r11,4
 8013b58:	dac02d15 	stw	r11,180(sp)
 8013b5c:	003cb206 	br	8012e28 <__alt_data_end+0xf8012e28>
 8013b60:	010205b4 	movhi	r4,2070
 8013b64:	2117d284 	addi	r4,r4,24394
 8013b68:	d9002c15 	stw	r4,176(sp)
 8013b6c:	dac02c17 	ldw	r11,176(sp)
 8013b70:	1c87883a 	add	r3,r3,r18
 8013b74:	10800044 	addi	r2,r2,1
 8013b78:	42c00015 	stw	r11,0(r8)
 8013b7c:	44800115 	stw	r18,4(r8)
 8013b80:	d8c02015 	stw	r3,128(sp)
 8013b84:	d8801f15 	stw	r2,124(sp)
 8013b88:	010001c4 	movi	r4,7
 8013b8c:	20bee016 	blt	r4,r2,8013710 <__alt_data_end+0xf8013710>
 8013b90:	42000204 	addi	r8,r8,8
 8013b94:	003ee506 	br	801372c <__alt_data_end+0xf801372c>
 8013b98:	010205b4 	movhi	r4,2070
 8013b9c:	2117d284 	addi	r4,r4,24394
 8013ba0:	d9002c15 	stw	r4,176(sp)
 8013ba4:	003bbe06 	br	8012aa0 <__alt_data_end+0xf8012aa0>
 8013ba8:	b009883a 	mov	r4,r22
 8013bac:	b80b883a 	mov	r5,r23
 8013bb0:	d9801e04 	addi	r6,sp,120
 8013bb4:	8019dd80 	call	8019dd8 <__sprint_r>
 8013bb8:	103ade1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013bbc:	d8c02017 	ldw	r3,128(sp)
 8013bc0:	da000404 	addi	r8,sp,16
 8013bc4:	003d6b06 	br	8013174 <__alt_data_end+0xf8013174>
 8013bc8:	d8801f17 	ldw	r2,124(sp)
 8013bcc:	030205b4 	movhi	r12,2070
 8013bd0:	01000044 	movi	r4,1
 8013bd4:	18c00044 	addi	r3,r3,1
 8013bd8:	10800044 	addi	r2,r2,1
 8013bdc:	6317ca04 	addi	r12,r12,24360
 8013be0:	41000115 	stw	r4,4(r8)
 8013be4:	43000015 	stw	r12,0(r8)
 8013be8:	d8c02015 	stw	r3,128(sp)
 8013bec:	d8801f15 	stw	r2,124(sp)
 8013bf0:	010001c4 	movi	r4,7
 8013bf4:	20804916 	blt	r4,r2,8013d1c <___vfprintf_internal_r+0x19b8>
 8013bf8:	42000204 	addi	r8,r8,8
 8013bfc:	8000041e 	bne	r16,zero,8013c10 <___vfprintf_internal_r+0x18ac>
 8013c00:	dac03317 	ldw	r11,204(sp)
 8013c04:	5800021e 	bne	r11,zero,8013c10 <___vfprintf_internal_r+0x18ac>
 8013c08:	8880004c 	andi	r2,r17,1
 8013c0c:	103bbb26 	beq	r2,zero,8012afc <__alt_data_end+0xf8012afc>
 8013c10:	db003817 	ldw	r12,224(sp)
 8013c14:	d8801f17 	ldw	r2,124(sp)
 8013c18:	dac03517 	ldw	r11,212(sp)
 8013c1c:	1b07883a 	add	r3,r3,r12
 8013c20:	10800044 	addi	r2,r2,1
 8013c24:	42c00015 	stw	r11,0(r8)
 8013c28:	43000115 	stw	r12,4(r8)
 8013c2c:	d8c02015 	stw	r3,128(sp)
 8013c30:	d8801f15 	stw	r2,124(sp)
 8013c34:	010001c4 	movi	r4,7
 8013c38:	20812e16 	blt	r4,r2,80140f4 <___vfprintf_internal_r+0x1d90>
 8013c3c:	42000204 	addi	r8,r8,8
 8013c40:	0421c83a 	sub	r16,zero,r16
 8013c44:	04005c0e 	bge	zero,r16,8013db8 <___vfprintf_internal_r+0x1a54>
 8013c48:	04800404 	movi	r18,16
 8013c4c:	94009f0e 	bge	r18,r16,8013ecc <___vfprintf_internal_r+0x1b68>
 8013c50:	010205b4 	movhi	r4,2070
 8013c54:	2117d284 	addi	r4,r4,24394
 8013c58:	d9002c15 	stw	r4,176(sp)
 8013c5c:	054001c4 	movi	r21,7
 8013c60:	00000306 	br	8013c70 <___vfprintf_internal_r+0x190c>
 8013c64:	42000204 	addi	r8,r8,8
 8013c68:	843ffc04 	addi	r16,r16,-16
 8013c6c:	94009a0e 	bge	r18,r16,8013ed8 <___vfprintf_internal_r+0x1b74>
 8013c70:	18c00404 	addi	r3,r3,16
 8013c74:	10800044 	addi	r2,r2,1
 8013c78:	45000015 	stw	r20,0(r8)
 8013c7c:	44800115 	stw	r18,4(r8)
 8013c80:	d8c02015 	stw	r3,128(sp)
 8013c84:	d8801f15 	stw	r2,124(sp)
 8013c88:	a8bff60e 	bge	r21,r2,8013c64 <__alt_data_end+0xf8013c64>
 8013c8c:	b009883a 	mov	r4,r22
 8013c90:	b80b883a 	mov	r5,r23
 8013c94:	d9801e04 	addi	r6,sp,120
 8013c98:	8019dd80 	call	8019dd8 <__sprint_r>
 8013c9c:	103aa51e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013ca0:	d8c02017 	ldw	r3,128(sp)
 8013ca4:	d8801f17 	ldw	r2,124(sp)
 8013ca8:	da000404 	addi	r8,sp,16
 8013cac:	003fee06 	br	8013c68 <__alt_data_end+0xf8013c68>
 8013cb0:	008011c4 	movi	r2,71
 8013cb4:	1400be16 	blt	r2,r16,8013fb0 <___vfprintf_internal_r+0x1c4c>
 8013cb8:	030205b4 	movhi	r12,2070
 8013cbc:	6317bc04 	addi	r12,r12,24304
 8013cc0:	db003115 	stw	r12,196(sp)
 8013cc4:	00c000c4 	movi	r3,3
 8013cc8:	00bfdfc4 	movi	r2,-129
 8013ccc:	d8c02b15 	stw	r3,172(sp)
 8013cd0:	88a2703a 	and	r17,r17,r2
 8013cd4:	dd402783 	ldbu	r21,158(sp)
 8013cd8:	dcc02d15 	stw	r19,180(sp)
 8013cdc:	1825883a 	mov	r18,r3
 8013ce0:	d8003215 	stw	zero,200(sp)
 8013ce4:	d8003415 	stw	zero,208(sp)
 8013ce8:	003af106 	br	80128b0 <__alt_data_end+0xf80128b0>
 8013cec:	4825883a 	mov	r18,r9
 8013cf0:	003c9306 	br	8012f40 <__alt_data_end+0xf8012f40>
 8013cf4:	db002d17 	ldw	r12,180(sp)
 8013cf8:	14c00017 	ldw	r19,0(r2)
 8013cfc:	0039883a 	mov	fp,zero
 8013d00:	63000104 	addi	r12,r12,4
 8013d04:	db002d15 	stw	r12,180(sp)
 8013d08:	003c4706 	br	8012e28 <__alt_data_end+0xf8012e28>
 8013d0c:	008205b4 	movhi	r2,2070
 8013d10:	1097ba04 	addi	r2,r2,24296
 8013d14:	d8803115 	stw	r2,196(sp)
 8013d18:	003bf106 	br	8012ce0 <__alt_data_end+0xf8012ce0>
 8013d1c:	b009883a 	mov	r4,r22
 8013d20:	b80b883a 	mov	r5,r23
 8013d24:	d9801e04 	addi	r6,sp,120
 8013d28:	8019dd80 	call	8019dd8 <__sprint_r>
 8013d2c:	103a811e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013d30:	dc002617 	ldw	r16,152(sp)
 8013d34:	d8c02017 	ldw	r3,128(sp)
 8013d38:	da000404 	addi	r8,sp,16
 8013d3c:	003faf06 	br	8013bfc <__alt_data_end+0xf8013bfc>
 8013d40:	db002e17 	ldw	r12,184(sp)
 8013d44:	1805883a 	mov	r2,r3
 8013d48:	dac02d15 	stw	r11,180(sp)
 8013d4c:	0319c83a 	sub	r12,zero,r12
 8013d50:	db002e15 	stw	r12,184(sp)
 8013d54:	003a8206 	br	8012760 <__alt_data_end+0xf8012760>
 8013d58:	18800044 	addi	r2,r3,1
 8013d5c:	8c400814 	ori	r17,r17,32
 8013d60:	1c000047 	ldb	r16,1(r3)
 8013d64:	0039e406 	br	80124f8 <__alt_data_end+0xf80124f8>
 8013d68:	b009883a 	mov	r4,r22
 8013d6c:	b80b883a 	mov	r5,r23
 8013d70:	d9801e04 	addi	r6,sp,120
 8013d74:	8019dd80 	call	8019dd8 <__sprint_r>
 8013d78:	103a6e1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013d7c:	d8c02017 	ldw	r3,128(sp)
 8013d80:	da000404 	addi	r8,sp,16
 8013d84:	003d0c06 	br	80131b8 <__alt_data_end+0xf80131b8>
 8013d88:	db002817 	ldw	r12,160(sp)
 8013d8c:	d8c03117 	ldw	r3,196(sp)
 8013d90:	60e5c83a 	sub	r18,r12,r3
 8013d94:	003ac106 	br	801289c <__alt_data_end+0xf801289c>
 8013d98:	b009883a 	mov	r4,r22
 8013d9c:	b80b883a 	mov	r5,r23
 8013da0:	d9801e04 	addi	r6,sp,120
 8013da4:	8019dd80 	call	8019dd8 <__sprint_r>
 8013da8:	103a621e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013dac:	d8c02017 	ldw	r3,128(sp)
 8013db0:	d8801f17 	ldw	r2,124(sp)
 8013db4:	da000404 	addi	r8,sp,16
 8013db8:	db003317 	ldw	r12,204(sp)
 8013dbc:	dac03117 	ldw	r11,196(sp)
 8013dc0:	10800044 	addi	r2,r2,1
 8013dc4:	1b07883a 	add	r3,r3,r12
 8013dc8:	42c00015 	stw	r11,0(r8)
 8013dcc:	43000115 	stw	r12,4(r8)
 8013dd0:	d8c02015 	stw	r3,128(sp)
 8013dd4:	d8801f15 	stw	r2,124(sp)
 8013dd8:	010001c4 	movi	r4,7
 8013ddc:	20bb460e 	bge	r4,r2,8012af8 <__alt_data_end+0xf8012af8>
 8013de0:	003d8506 	br	80133f8 <__alt_data_end+0xf80133f8>
 8013de4:	da003f15 	stw	r8,252(sp)
 8013de8:	801033c0 	call	801033c <strlen>
 8013dec:	1025883a 	mov	r18,r2
 8013df0:	da003f17 	ldw	r8,252(sp)
 8013df4:	903c540e 	bge	r18,zero,8012f48 <__alt_data_end+0xf8012f48>
 8013df8:	0005883a 	mov	r2,zero
 8013dfc:	003c5206 	br	8012f48 <__alt_data_end+0xf8012f48>
 8013e00:	010205b4 	movhi	r4,2070
 8013e04:	2117d684 	addi	r4,r4,24410
 8013e08:	d9003615 	stw	r4,216(sp)
 8013e0c:	003adc06 	br	8012980 <__alt_data_end+0xf8012980>
 8013e10:	d8802604 	addi	r2,sp,152
 8013e14:	d8800115 	stw	r2,4(sp)
 8013e18:	d9403717 	ldw	r5,220(sp)
 8013e1c:	d8802504 	addi	r2,sp,148
 8013e20:	d8800215 	stw	r2,8(sp)
 8013e24:	d8802104 	addi	r2,sp,132
 8013e28:	da400015 	stw	r9,0(sp)
 8013e2c:	d8800315 	stw	r2,12(sp)
 8013e30:	b009883a 	mov	r4,r22
 8013e34:	900d883a 	mov	r6,r18
 8013e38:	01c000c4 	movi	r7,3
 8013e3c:	da003f15 	stw	r8,252(sp)
 8013e40:	da403e15 	stw	r9,248(sp)
 8013e44:	80146e80 	call	80146e8 <_dtoa_r>
 8013e48:	da403e17 	ldw	r9,248(sp)
 8013e4c:	da003f17 	ldw	r8,252(sp)
 8013e50:	d8803115 	stw	r2,196(sp)
 8013e54:	4839883a 	mov	fp,r9
 8013e58:	dac03117 	ldw	r11,196(sp)
 8013e5c:	00801184 	movi	r2,70
 8013e60:	5f15883a 	add	r10,r11,fp
 8013e64:	a8bef01e 	bne	r21,r2,8013a28 <__alt_data_end+0xf8013a28>
 8013e68:	59000007 	ldb	r4,0(r11)
 8013e6c:	00800c04 	movi	r2,48
 8013e70:	2080d526 	beq	r4,r2,80141c8 <___vfprintf_internal_r+0x1e64>
 8013e74:	d8c02617 	ldw	r3,152(sp)
 8013e78:	50d5883a 	add	r10,r10,r3
 8013e7c:	003eea06 	br	8013a28 <__alt_data_end+0xf8013a28>
 8013e80:	0025883a 	mov	r18,zero
 8013e84:	003db306 	br	8013554 <__alt_data_end+0xf8013554>
 8013e88:	b009883a 	mov	r4,r22
 8013e8c:	b80b883a 	mov	r5,r23
 8013e90:	d9801e04 	addi	r6,sp,120
 8013e94:	8019dd80 	call	8019dd8 <__sprint_r>
 8013e98:	103a261e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013e9c:	d8c02017 	ldw	r3,128(sp)
 8013ea0:	da000404 	addi	r8,sp,16
 8013ea4:	003daa06 	br	8013550 <__alt_data_end+0xf8013550>
 8013ea8:	b009883a 	mov	r4,r22
 8013eac:	b80b883a 	mov	r5,r23
 8013eb0:	d9801e04 	addi	r6,sp,120
 8013eb4:	8019dd80 	call	8019dd8 <__sprint_r>
 8013eb8:	103a1e1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013ebc:	d8802617 	ldw	r2,152(sp)
 8013ec0:	d8c02017 	ldw	r3,128(sp)
 8013ec4:	da000404 	addi	r8,sp,16
 8013ec8:	003e2c06 	br	801377c <__alt_data_end+0xf801377c>
 8013ecc:	030205b4 	movhi	r12,2070
 8013ed0:	6317d284 	addi	r12,r12,24394
 8013ed4:	db002c15 	stw	r12,176(sp)
 8013ed8:	dac02c17 	ldw	r11,176(sp)
 8013edc:	1c07883a 	add	r3,r3,r16
 8013ee0:	10800044 	addi	r2,r2,1
 8013ee4:	42c00015 	stw	r11,0(r8)
 8013ee8:	44000115 	stw	r16,4(r8)
 8013eec:	d8c02015 	stw	r3,128(sp)
 8013ef0:	d8801f15 	stw	r2,124(sp)
 8013ef4:	010001c4 	movi	r4,7
 8013ef8:	20bfa716 	blt	r4,r2,8013d98 <__alt_data_end+0xf8013d98>
 8013efc:	42000204 	addi	r8,r8,8
 8013f00:	003fad06 	br	8013db8 <__alt_data_end+0xf8013db8>
 8013f04:	00800184 	movi	r2,6
 8013f08:	1240012e 	bgeu	r2,r9,8013f10 <___vfprintf_internal_r+0x1bac>
 8013f0c:	1013883a 	mov	r9,r2
 8013f10:	4825883a 	mov	r18,r9
 8013f14:	4805883a 	mov	r2,r9
 8013f18:	4800c216 	blt	r9,zero,8014224 <___vfprintf_internal_r+0x1ec0>
 8013f1c:	d8802b15 	stw	r2,172(sp)
 8013f20:	008205b4 	movhi	r2,2070
 8013f24:	1097c804 	addi	r2,r2,24352
 8013f28:	d8803115 	stw	r2,196(sp)
 8013f2c:	dcc02d15 	stw	r19,180(sp)
 8013f30:	d8003215 	stw	zero,200(sp)
 8013f34:	d8003415 	stw	zero,208(sp)
 8013f38:	0005883a 	mov	r2,zero
 8013f3c:	003a6306 	br	80128cc <__alt_data_end+0xf80128cc>
 8013f40:	0021883a 	mov	r16,zero
 8013f44:	003e1f06 	br	80137c4 <__alt_data_end+0xf80137c4>
 8013f48:	b009883a 	mov	r4,r22
 8013f4c:	b80b883a 	mov	r5,r23
 8013f50:	d9801e04 	addi	r6,sp,120
 8013f54:	8019dd80 	call	8019dd8 <__sprint_r>
 8013f58:	1039f61e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8013f5c:	d8802617 	ldw	r2,152(sp)
 8013f60:	db003317 	ldw	r12,204(sp)
 8013f64:	d8c02017 	ldw	r3,128(sp)
 8013f68:	da000404 	addi	r8,sp,16
 8013f6c:	6085c83a 	sub	r2,r12,r2
 8013f70:	003e1306 	br	80137c0 <__alt_data_end+0xf80137c0>
 8013f74:	030205b4 	movhi	r12,2070
 8013f78:	6317d684 	addi	r12,r12,24410
 8013f7c:	db003615 	stw	r12,216(sp)
 8013f80:	003b0206 	br	8012b8c <__alt_data_end+0xf8012b8c>
 8013f84:	00c00b44 	movi	r3,45
 8013f88:	d8802b15 	stw	r2,172(sp)
 8013f8c:	dc402d17 	ldw	r17,180(sp)
 8013f90:	d8c02785 	stb	r3,158(sp)
 8013f94:	dcc02d15 	stw	r19,180(sp)
 8013f98:	d8003215 	stw	zero,200(sp)
 8013f9c:	00800b44 	movi	r2,45
 8013fa0:	003a4706 	br	80128c0 <__alt_data_end+0xf80128c0>
 8013fa4:	05400b44 	movi	r21,45
 8013fa8:	dd402785 	stb	r21,158(sp)
 8013fac:	003b4706 	br	8012ccc <__alt_data_end+0xf8012ccc>
 8013fb0:	008205b4 	movhi	r2,2070
 8013fb4:	1097bd04 	addi	r2,r2,24308
 8013fb8:	d8803115 	stw	r2,196(sp)
 8013fbc:	003f4106 	br	8013cc4 <__alt_data_end+0xf8013cc4>
 8013fc0:	d8c02617 	ldw	r3,152(sp)
 8013fc4:	00bfff44 	movi	r2,-3
 8013fc8:	18801116 	blt	r3,r2,8014010 <___vfprintf_internal_r+0x1cac>
 8013fcc:	48c01016 	blt	r9,r3,8014010 <___vfprintf_internal_r+0x1cac>
 8013fd0:	d8c03415 	stw	r3,208(sp)
 8013fd4:	040019c4 	movi	r16,103
 8013fd8:	003eb206 	br	8013aa4 <__alt_data_end+0xf8013aa4>
 8013fdc:	010205b4 	movhi	r4,2070
 8013fe0:	2117d284 	addi	r4,r4,24394
 8013fe4:	d9002c15 	stw	r4,176(sp)
 8013fe8:	003cb106 	br	80132b0 <__alt_data_end+0xf80132b0>
 8013fec:	5005883a 	mov	r2,r10
 8013ff0:	003ea106 	br	8013a78 <__alt_data_end+0xf8013a78>
 8013ff4:	da402b15 	stw	r9,172(sp)
 8013ff8:	dd402783 	ldbu	r21,158(sp)
 8013ffc:	4825883a 	mov	r18,r9
 8014000:	dcc02d15 	stw	r19,180(sp)
 8014004:	d8003215 	stw	zero,200(sp)
 8014008:	d8003415 	stw	zero,208(sp)
 801400c:	003a2806 	br	80128b0 <__alt_data_end+0xf80128b0>
 8014010:	843fff84 	addi	r16,r16,-2
 8014014:	1f3fffc4 	addi	fp,r3,-1
 8014018:	df002615 	stw	fp,152(sp)
 801401c:	dc0022c5 	stb	r16,139(sp)
 8014020:	e0009816 	blt	fp,zero,8014284 <___vfprintf_internal_r+0x1f20>
 8014024:	00800ac4 	movi	r2,43
 8014028:	d8802305 	stb	r2,140(sp)
 801402c:	00800244 	movi	r2,9
 8014030:	1700750e 	bge	r2,fp,8014208 <___vfprintf_internal_r+0x1ea4>
 8014034:	dd4022c4 	addi	r21,sp,139
 8014038:	dc002c15 	stw	r16,176(sp)
 801403c:	4025883a 	mov	r18,r8
 8014040:	a821883a 	mov	r16,r21
 8014044:	e009883a 	mov	r4,fp
 8014048:	01400284 	movi	r5,10
 801404c:	800c9a40 	call	800c9a4 <__modsi3>
 8014050:	10800c04 	addi	r2,r2,48
 8014054:	843fffc4 	addi	r16,r16,-1
 8014058:	e009883a 	mov	r4,fp
 801405c:	01400284 	movi	r5,10
 8014060:	80800005 	stb	r2,0(r16)
 8014064:	800c9500 	call	800c950 <__divsi3>
 8014068:	1039883a 	mov	fp,r2
 801406c:	00800244 	movi	r2,9
 8014070:	173ff416 	blt	r2,fp,8014044 <__alt_data_end+0xf8014044>
 8014074:	9011883a 	mov	r8,r18
 8014078:	e0800c04 	addi	r2,fp,48
 801407c:	8025883a 	mov	r18,r16
 8014080:	913fffc4 	addi	r4,r18,-1
 8014084:	90bfffc5 	stb	r2,-1(r18)
 8014088:	dc002c17 	ldw	r16,176(sp)
 801408c:	2540852e 	bgeu	r4,r21,80142a4 <___vfprintf_internal_r+0x1f40>
 8014090:	d9402384 	addi	r5,sp,142
 8014094:	2c8bc83a 	sub	r5,r5,r18
 8014098:	d8c02344 	addi	r3,sp,141
 801409c:	a94b883a 	add	r5,r21,r5
 80140a0:	00000106 	br	80140a8 <___vfprintf_internal_r+0x1d44>
 80140a4:	20800003 	ldbu	r2,0(r4)
 80140a8:	18800005 	stb	r2,0(r3)
 80140ac:	18c00044 	addi	r3,r3,1
 80140b0:	21000044 	addi	r4,r4,1
 80140b4:	197ffb1e 	bne	r3,r5,80140a4 <__alt_data_end+0xf80140a4>
 80140b8:	d8802304 	addi	r2,sp,140
 80140bc:	1485c83a 	sub	r2,r2,r18
 80140c0:	d8c02344 	addi	r3,sp,141
 80140c4:	1885883a 	add	r2,r3,r2
 80140c8:	dac03317 	ldw	r11,204(sp)
 80140cc:	156bc83a 	sub	r21,r2,r21
 80140d0:	dd403a15 	stw	r21,232(sp)
 80140d4:	00800044 	movi	r2,1
 80140d8:	5d65883a 	add	r18,r11,r21
 80140dc:	12c0660e 	bge	r2,r11,8014278 <___vfprintf_internal_r+0x1f14>
 80140e0:	94800044 	addi	r18,r18,1
 80140e4:	9005883a 	mov	r2,r18
 80140e8:	90006116 	blt	r18,zero,8014270 <___vfprintf_internal_r+0x1f0c>
 80140ec:	d8003415 	stw	zero,208(sp)
 80140f0:	003e7406 	br	8013ac4 <__alt_data_end+0xf8013ac4>
 80140f4:	b009883a 	mov	r4,r22
 80140f8:	b80b883a 	mov	r5,r23
 80140fc:	d9801e04 	addi	r6,sp,120
 8014100:	8019dd80 	call	8019dd8 <__sprint_r>
 8014104:	10398b1e 	bne	r2,zero,8012734 <__alt_data_end+0xf8012734>
 8014108:	dc002617 	ldw	r16,152(sp)
 801410c:	d8c02017 	ldw	r3,128(sp)
 8014110:	d8801f17 	ldw	r2,124(sp)
 8014114:	da000404 	addi	r8,sp,16
 8014118:	003ec906 	br	8013c40 <__alt_data_end+0xf8013c40>
 801411c:	483e1c1e 	bne	r9,zero,8013990 <__alt_data_end+0xf8013990>
 8014120:	9013883a 	mov	r9,r18
 8014124:	003e1a06 	br	8013990 <__alt_data_end+0xf8013990>
 8014128:	02400184 	movi	r9,6
 801412c:	003e1806 	br	8013990 <__alt_data_end+0xf8013990>
 8014130:	d8c03417 	ldw	r3,208(sp)
 8014134:	00c04b0e 	bge	zero,r3,8014264 <___vfprintf_internal_r+0x1f00>
 8014138:	04800044 	movi	r18,1
 801413c:	dac03317 	ldw	r11,204(sp)
 8014140:	92e5883a 	add	r18,r18,r11
 8014144:	9005883a 	mov	r2,r18
 8014148:	903e5e0e 	bge	r18,zero,8013ac4 <__alt_data_end+0xf8013ac4>
 801414c:	0005883a 	mov	r2,zero
 8014150:	003e5c06 	br	8013ac4 <__alt_data_end+0xf8013ac4>
 8014154:	00c00b44 	movi	r3,45
 8014158:	64a0003c 	xorhi	r18,r12,32768
 801415c:	d8c02b05 	stb	r3,172(sp)
 8014160:	003e1106 	br	80139a8 <__alt_data_end+0xf80139a8>
 8014164:	4f000044 	addi	fp,r9,1
 8014168:	003e1606 	br	80139c4 <__alt_data_end+0xf80139c4>
 801416c:	d8c02617 	ldw	r3,152(sp)
 8014170:	d8c03415 	stw	r3,208(sp)
 8014174:	00c0350e 	bge	zero,r3,801424c <___vfprintf_internal_r+0x1ee8>
 8014178:	4800081e 	bne	r9,zero,801419c <___vfprintf_internal_r+0x1e38>
 801417c:	8c40004c 	andi	r17,r17,1
 8014180:	8800061e 	bne	r17,zero,801419c <___vfprintf_internal_r+0x1e38>
 8014184:	1805883a 	mov	r2,r3
 8014188:	183e4d0e 	bge	r3,zero,8013ac0 <__alt_data_end+0xf8013ac0>
 801418c:	0005883a 	mov	r2,zero
 8014190:	003e4b06 	br	8013ac0 <__alt_data_end+0xf8013ac0>
 8014194:	d8802117 	ldw	r2,132(sp)
 8014198:	003e3706 	br	8013a78 <__alt_data_end+0xf8013a78>
 801419c:	dac03417 	ldw	r11,208(sp)
 80141a0:	4a400044 	addi	r9,r9,1
 80141a4:	5a65883a 	add	r18,r11,r9
 80141a8:	9005883a 	mov	r2,r18
 80141ac:	903e450e 	bge	r18,zero,8013ac4 <__alt_data_end+0xf8013ac4>
 80141b0:	003fe606 	br	801414c <__alt_data_end+0xf801414c>
 80141b4:	db003417 	ldw	r12,208(sp)
 80141b8:	64800044 	addi	r18,r12,1
 80141bc:	9005883a 	mov	r2,r18
 80141c0:	903e400e 	bge	r18,zero,8013ac4 <__alt_data_end+0xf8013ac4>
 80141c4:	003fe106 	br	801414c <__alt_data_end+0xf801414c>
 80141c8:	d9003717 	ldw	r4,220(sp)
 80141cc:	900b883a 	mov	r5,r18
 80141d0:	000d883a 	mov	r6,zero
 80141d4:	000f883a 	mov	r7,zero
 80141d8:	da003f15 	stw	r8,252(sp)
 80141dc:	da403e15 	stw	r9,248(sp)
 80141e0:	da803d15 	stw	r10,244(sp)
 80141e4:	800db780 	call	800db78 <__eqdf2>
 80141e8:	da003f17 	ldw	r8,252(sp)
 80141ec:	da403e17 	ldw	r9,248(sp)
 80141f0:	da803d17 	ldw	r10,244(sp)
 80141f4:	103f1f26 	beq	r2,zero,8013e74 <__alt_data_end+0xf8013e74>
 80141f8:	00800044 	movi	r2,1
 80141fc:	1707c83a 	sub	r3,r2,fp
 8014200:	d8c02615 	stw	r3,152(sp)
 8014204:	003f1c06 	br	8013e78 <__alt_data_end+0xf8013e78>
 8014208:	00800c04 	movi	r2,48
 801420c:	e0c00c04 	addi	r3,fp,48
 8014210:	d8802345 	stb	r2,141(sp)
 8014214:	d8c02385 	stb	r3,142(sp)
 8014218:	d88023c4 	addi	r2,sp,143
 801421c:	dd4022c4 	addi	r21,sp,139
 8014220:	003fa906 	br	80140c8 <__alt_data_end+0xf80140c8>
 8014224:	0005883a 	mov	r2,zero
 8014228:	003f3c06 	br	8013f1c <__alt_data_end+0xf8013f1c>
 801422c:	dac02d17 	ldw	r11,180(sp)
 8014230:	5a400017 	ldw	r9,0(r11)
 8014234:	5ac00104 	addi	r11,r11,4
 8014238:	dac02d15 	stw	r11,180(sp)
 801423c:	483ec80e 	bge	r9,zero,8013d60 <__alt_data_end+0xf8013d60>
 8014240:	027fffc4 	movi	r9,-1
 8014244:	1c000047 	ldb	r16,1(r3)
 8014248:	0038ab06 	br	80124f8 <__alt_data_end+0xf80124f8>
 801424c:	4800111e 	bne	r9,zero,8014294 <___vfprintf_internal_r+0x1f30>
 8014250:	8c40004c 	andi	r17,r17,1
 8014254:	88000f1e 	bne	r17,zero,8014294 <___vfprintf_internal_r+0x1f30>
 8014258:	00800044 	movi	r2,1
 801425c:	1025883a 	mov	r18,r2
 8014260:	003e1806 	br	8013ac4 <__alt_data_end+0xf8013ac4>
 8014264:	04800084 	movi	r18,2
 8014268:	90e5c83a 	sub	r18,r18,r3
 801426c:	003fb306 	br	801413c <__alt_data_end+0xf801413c>
 8014270:	0005883a 	mov	r2,zero
 8014274:	003f9d06 	br	80140ec <__alt_data_end+0xf80140ec>
 8014278:	88a2703a 	and	r17,r17,r2
 801427c:	883f9926 	beq	r17,zero,80140e4 <__alt_data_end+0xf80140e4>
 8014280:	003f9706 	br	80140e0 <__alt_data_end+0xf80140e0>
 8014284:	00800b44 	movi	r2,45
 8014288:	0739c83a 	sub	fp,zero,fp
 801428c:	d8802305 	stb	r2,140(sp)
 8014290:	003f6606 	br	801402c <__alt_data_end+0xf801402c>
 8014294:	4c800084 	addi	r18,r9,2
 8014298:	9005883a 	mov	r2,r18
 801429c:	903e090e 	bge	r18,zero,8013ac4 <__alt_data_end+0xf8013ac4>
 80142a0:	003faa06 	br	801414c <__alt_data_end+0xf801414c>
 80142a4:	d8802344 	addi	r2,sp,141
 80142a8:	003f8706 	br	80140c8 <__alt_data_end+0xf80140c8>
 80142ac:	d8c02617 	ldw	r3,152(sp)
 80142b0:	003f5806 	br	8014014 <__alt_data_end+0xf8014014>

080142b4 <__vfprintf_internal>:
 80142b4:	2007883a 	mov	r3,r4
 80142b8:	010205f4 	movhi	r4,2071
 80142bc:	21234604 	addi	r4,r4,-29416
 80142c0:	21000017 	ldw	r4,0(r4)
 80142c4:	2805883a 	mov	r2,r5
 80142c8:	300f883a 	mov	r7,r6
 80142cc:	180b883a 	mov	r5,r3
 80142d0:	100d883a 	mov	r6,r2
 80142d4:	80123641 	jmpi	8012364 <___vfprintf_internal_r>

080142d8 <__sbprintf>:
 80142d8:	2880030b 	ldhu	r2,12(r5)
 80142dc:	2ac01917 	ldw	r11,100(r5)
 80142e0:	2a80038b 	ldhu	r10,14(r5)
 80142e4:	2a400717 	ldw	r9,28(r5)
 80142e8:	2a000917 	ldw	r8,36(r5)
 80142ec:	defee204 	addi	sp,sp,-1144
 80142f0:	00c10004 	movi	r3,1024
 80142f4:	dc011a15 	stw	r16,1128(sp)
 80142f8:	10bfff4c 	andi	r2,r2,65533
 80142fc:	2821883a 	mov	r16,r5
 8014300:	d8cb883a 	add	r5,sp,r3
 8014304:	dc811c15 	stw	r18,1136(sp)
 8014308:	dc411b15 	stw	r17,1132(sp)
 801430c:	dfc11d15 	stw	ra,1140(sp)
 8014310:	2025883a 	mov	r18,r4
 8014314:	d881030d 	sth	r2,1036(sp)
 8014318:	dac11915 	stw	r11,1124(sp)
 801431c:	da81038d 	sth	r10,1038(sp)
 8014320:	da410715 	stw	r9,1052(sp)
 8014324:	da010915 	stw	r8,1060(sp)
 8014328:	dec10015 	stw	sp,1024(sp)
 801432c:	dec10415 	stw	sp,1040(sp)
 8014330:	d8c10215 	stw	r3,1032(sp)
 8014334:	d8c10515 	stw	r3,1044(sp)
 8014338:	d8010615 	stw	zero,1048(sp)
 801433c:	80123640 	call	8012364 <___vfprintf_internal_r>
 8014340:	1023883a 	mov	r17,r2
 8014344:	10000416 	blt	r2,zero,8014358 <__sbprintf+0x80>
 8014348:	9009883a 	mov	r4,r18
 801434c:	d9410004 	addi	r5,sp,1024
 8014350:	80160180 	call	8016018 <_fflush_r>
 8014354:	10000d1e 	bne	r2,zero,801438c <__sbprintf+0xb4>
 8014358:	d8c1030b 	ldhu	r3,1036(sp)
 801435c:	18c0100c 	andi	r3,r3,64
 8014360:	18000326 	beq	r3,zero,8014370 <__sbprintf+0x98>
 8014364:	8080030b 	ldhu	r2,12(r16)
 8014368:	10801014 	ori	r2,r2,64
 801436c:	8080030d 	sth	r2,12(r16)
 8014370:	8805883a 	mov	r2,r17
 8014374:	dfc11d17 	ldw	ra,1140(sp)
 8014378:	dc811c17 	ldw	r18,1136(sp)
 801437c:	dc411b17 	ldw	r17,1132(sp)
 8014380:	dc011a17 	ldw	r16,1128(sp)
 8014384:	dec11e04 	addi	sp,sp,1144
 8014388:	f800283a 	ret
 801438c:	047fffc4 	movi	r17,-1
 8014390:	003ff106 	br	8014358 <__alt_data_end+0xf8014358>

08014394 <__swsetup_r>:
 8014394:	008205f4 	movhi	r2,2071
 8014398:	defffd04 	addi	sp,sp,-12
 801439c:	10a34604 	addi	r2,r2,-29416
 80143a0:	dc400115 	stw	r17,4(sp)
 80143a4:	2023883a 	mov	r17,r4
 80143a8:	11000017 	ldw	r4,0(r2)
 80143ac:	dc000015 	stw	r16,0(sp)
 80143b0:	dfc00215 	stw	ra,8(sp)
 80143b4:	2821883a 	mov	r16,r5
 80143b8:	20000226 	beq	r4,zero,80143c4 <__swsetup_r+0x30>
 80143bc:	20c00e17 	ldw	r3,56(r4)
 80143c0:	18003126 	beq	r3,zero,8014488 <__swsetup_r+0xf4>
 80143c4:	8080030b 	ldhu	r2,12(r16)
 80143c8:	10c0020c 	andi	r3,r2,8
 80143cc:	100d883a 	mov	r6,r2
 80143d0:	18000f26 	beq	r3,zero,8014410 <__swsetup_r+0x7c>
 80143d4:	80c00417 	ldw	r3,16(r16)
 80143d8:	18001526 	beq	r3,zero,8014430 <__swsetup_r+0x9c>
 80143dc:	1100004c 	andi	r4,r2,1
 80143e0:	20001c1e 	bne	r4,zero,8014454 <__swsetup_r+0xc0>
 80143e4:	1080008c 	andi	r2,r2,2
 80143e8:	1000291e 	bne	r2,zero,8014490 <__swsetup_r+0xfc>
 80143ec:	80800517 	ldw	r2,20(r16)
 80143f0:	80800215 	stw	r2,8(r16)
 80143f4:	18001c26 	beq	r3,zero,8014468 <__swsetup_r+0xd4>
 80143f8:	0005883a 	mov	r2,zero
 80143fc:	dfc00217 	ldw	ra,8(sp)
 8014400:	dc400117 	ldw	r17,4(sp)
 8014404:	dc000017 	ldw	r16,0(sp)
 8014408:	dec00304 	addi	sp,sp,12
 801440c:	f800283a 	ret
 8014410:	3080040c 	andi	r2,r6,16
 8014414:	10002e26 	beq	r2,zero,80144d0 <__swsetup_r+0x13c>
 8014418:	3080010c 	andi	r2,r6,4
 801441c:	10001e1e 	bne	r2,zero,8014498 <__swsetup_r+0x104>
 8014420:	80c00417 	ldw	r3,16(r16)
 8014424:	30800214 	ori	r2,r6,8
 8014428:	8080030d 	sth	r2,12(r16)
 801442c:	183feb1e 	bne	r3,zero,80143dc <__alt_data_end+0xf80143dc>
 8014430:	1140a00c 	andi	r5,r2,640
 8014434:	01008004 	movi	r4,512
 8014438:	293fe826 	beq	r5,r4,80143dc <__alt_data_end+0xf80143dc>
 801443c:	8809883a 	mov	r4,r17
 8014440:	800b883a 	mov	r5,r16
 8014444:	8016f800 	call	8016f80 <__smakebuf_r>
 8014448:	8080030b 	ldhu	r2,12(r16)
 801444c:	80c00417 	ldw	r3,16(r16)
 8014450:	003fe206 	br	80143dc <__alt_data_end+0xf80143dc>
 8014454:	80800517 	ldw	r2,20(r16)
 8014458:	80000215 	stw	zero,8(r16)
 801445c:	0085c83a 	sub	r2,zero,r2
 8014460:	80800615 	stw	r2,24(r16)
 8014464:	183fe41e 	bne	r3,zero,80143f8 <__alt_data_end+0xf80143f8>
 8014468:	80c0030b 	ldhu	r3,12(r16)
 801446c:	0005883a 	mov	r2,zero
 8014470:	1900200c 	andi	r4,r3,128
 8014474:	203fe126 	beq	r4,zero,80143fc <__alt_data_end+0xf80143fc>
 8014478:	18c01014 	ori	r3,r3,64
 801447c:	80c0030d 	sth	r3,12(r16)
 8014480:	00bfffc4 	movi	r2,-1
 8014484:	003fdd06 	br	80143fc <__alt_data_end+0xf80143fc>
 8014488:	80163f40 	call	80163f4 <__sinit>
 801448c:	003fcd06 	br	80143c4 <__alt_data_end+0xf80143c4>
 8014490:	0005883a 	mov	r2,zero
 8014494:	003fd606 	br	80143f0 <__alt_data_end+0xf80143f0>
 8014498:	81400c17 	ldw	r5,48(r16)
 801449c:	28000626 	beq	r5,zero,80144b8 <__swsetup_r+0x124>
 80144a0:	80801004 	addi	r2,r16,64
 80144a4:	28800326 	beq	r5,r2,80144b4 <__swsetup_r+0x120>
 80144a8:	8809883a 	mov	r4,r17
 80144ac:	80165680 	call	8016568 <_free_r>
 80144b0:	8180030b 	ldhu	r6,12(r16)
 80144b4:	80000c15 	stw	zero,48(r16)
 80144b8:	80c00417 	ldw	r3,16(r16)
 80144bc:	00bff6c4 	movi	r2,-37
 80144c0:	118c703a 	and	r6,r2,r6
 80144c4:	80000115 	stw	zero,4(r16)
 80144c8:	80c00015 	stw	r3,0(r16)
 80144cc:	003fd506 	br	8014424 <__alt_data_end+0xf8014424>
 80144d0:	00800244 	movi	r2,9
 80144d4:	88800015 	stw	r2,0(r17)
 80144d8:	30801014 	ori	r2,r6,64
 80144dc:	8080030d 	sth	r2,12(r16)
 80144e0:	00bfffc4 	movi	r2,-1
 80144e4:	003fc506 	br	80143fc <__alt_data_end+0xf80143fc>

080144e8 <quorem>:
 80144e8:	defff704 	addi	sp,sp,-36
 80144ec:	dc800215 	stw	r18,8(sp)
 80144f0:	20800417 	ldw	r2,16(r4)
 80144f4:	2c800417 	ldw	r18,16(r5)
 80144f8:	dfc00815 	stw	ra,32(sp)
 80144fc:	ddc00715 	stw	r23,28(sp)
 8014500:	dd800615 	stw	r22,24(sp)
 8014504:	dd400515 	stw	r21,20(sp)
 8014508:	dd000415 	stw	r20,16(sp)
 801450c:	dcc00315 	stw	r19,12(sp)
 8014510:	dc400115 	stw	r17,4(sp)
 8014514:	dc000015 	stw	r16,0(sp)
 8014518:	14807116 	blt	r2,r18,80146e0 <quorem+0x1f8>
 801451c:	94bfffc4 	addi	r18,r18,-1
 8014520:	94ad883a 	add	r22,r18,r18
 8014524:	b5ad883a 	add	r22,r22,r22
 8014528:	2c400504 	addi	r17,r5,20
 801452c:	8da9883a 	add	r20,r17,r22
 8014530:	25400504 	addi	r21,r4,20
 8014534:	282f883a 	mov	r23,r5
 8014538:	adad883a 	add	r22,r21,r22
 801453c:	a1400017 	ldw	r5,0(r20)
 8014540:	2021883a 	mov	r16,r4
 8014544:	b1000017 	ldw	r4,0(r22)
 8014548:	29400044 	addi	r5,r5,1
 801454c:	800ca000 	call	800ca00 <__udivsi3>
 8014550:	1027883a 	mov	r19,r2
 8014554:	10002c26 	beq	r2,zero,8014608 <quorem+0x120>
 8014558:	a813883a 	mov	r9,r21
 801455c:	8811883a 	mov	r8,r17
 8014560:	0009883a 	mov	r4,zero
 8014564:	000d883a 	mov	r6,zero
 8014568:	41c00017 	ldw	r7,0(r8)
 801456c:	49400017 	ldw	r5,0(r9)
 8014570:	42000104 	addi	r8,r8,4
 8014574:	38bfffcc 	andi	r2,r7,65535
 8014578:	14c5383a 	mul	r2,r2,r19
 801457c:	380ed43a 	srli	r7,r7,16
 8014580:	28ffffcc 	andi	r3,r5,65535
 8014584:	2085883a 	add	r2,r4,r2
 8014588:	1008d43a 	srli	r4,r2,16
 801458c:	3ccf383a 	mul	r7,r7,r19
 8014590:	198d883a 	add	r6,r3,r6
 8014594:	10ffffcc 	andi	r3,r2,65535
 8014598:	30c7c83a 	sub	r3,r6,r3
 801459c:	280ad43a 	srli	r5,r5,16
 80145a0:	21c9883a 	add	r4,r4,r7
 80145a4:	180dd43a 	srai	r6,r3,16
 80145a8:	20bfffcc 	andi	r2,r4,65535
 80145ac:	288bc83a 	sub	r5,r5,r2
 80145b0:	298b883a 	add	r5,r5,r6
 80145b4:	280e943a 	slli	r7,r5,16
 80145b8:	18ffffcc 	andi	r3,r3,65535
 80145bc:	2008d43a 	srli	r4,r4,16
 80145c0:	38ceb03a 	or	r7,r7,r3
 80145c4:	49c00015 	stw	r7,0(r9)
 80145c8:	280dd43a 	srai	r6,r5,16
 80145cc:	4a400104 	addi	r9,r9,4
 80145d0:	a23fe52e 	bgeu	r20,r8,8014568 <__alt_data_end+0xf8014568>
 80145d4:	b0800017 	ldw	r2,0(r22)
 80145d8:	10000b1e 	bne	r2,zero,8014608 <quorem+0x120>
 80145dc:	b0bfff04 	addi	r2,r22,-4
 80145e0:	a880082e 	bgeu	r21,r2,8014604 <quorem+0x11c>
 80145e4:	b0ffff17 	ldw	r3,-4(r22)
 80145e8:	18000326 	beq	r3,zero,80145f8 <quorem+0x110>
 80145ec:	00000506 	br	8014604 <quorem+0x11c>
 80145f0:	10c00017 	ldw	r3,0(r2)
 80145f4:	1800031e 	bne	r3,zero,8014604 <quorem+0x11c>
 80145f8:	10bfff04 	addi	r2,r2,-4
 80145fc:	94bfffc4 	addi	r18,r18,-1
 8014600:	a8bffb36 	bltu	r21,r2,80145f0 <__alt_data_end+0xf80145f0>
 8014604:	84800415 	stw	r18,16(r16)
 8014608:	8009883a 	mov	r4,r16
 801460c:	b80b883a 	mov	r5,r23
 8014610:	8017c500 	call	8017c50 <__mcmp>
 8014614:	10002616 	blt	r2,zero,80146b0 <quorem+0x1c8>
 8014618:	9cc00044 	addi	r19,r19,1
 801461c:	a80d883a 	mov	r6,r21
 8014620:	000b883a 	mov	r5,zero
 8014624:	31000017 	ldw	r4,0(r6)
 8014628:	88800017 	ldw	r2,0(r17)
 801462c:	31800104 	addi	r6,r6,4
 8014630:	20ffffcc 	andi	r3,r4,65535
 8014634:	194b883a 	add	r5,r3,r5
 8014638:	10ffffcc 	andi	r3,r2,65535
 801463c:	28c7c83a 	sub	r3,r5,r3
 8014640:	1004d43a 	srli	r2,r2,16
 8014644:	2008d43a 	srli	r4,r4,16
 8014648:	180bd43a 	srai	r5,r3,16
 801464c:	18ffffcc 	andi	r3,r3,65535
 8014650:	2089c83a 	sub	r4,r4,r2
 8014654:	2149883a 	add	r4,r4,r5
 8014658:	2004943a 	slli	r2,r4,16
 801465c:	8c400104 	addi	r17,r17,4
 8014660:	200bd43a 	srai	r5,r4,16
 8014664:	10c6b03a 	or	r3,r2,r3
 8014668:	30ffff15 	stw	r3,-4(r6)
 801466c:	a47fed2e 	bgeu	r20,r17,8014624 <__alt_data_end+0xf8014624>
 8014670:	9485883a 	add	r2,r18,r18
 8014674:	1085883a 	add	r2,r2,r2
 8014678:	a887883a 	add	r3,r21,r2
 801467c:	18800017 	ldw	r2,0(r3)
 8014680:	10000b1e 	bne	r2,zero,80146b0 <quorem+0x1c8>
 8014684:	18bfff04 	addi	r2,r3,-4
 8014688:	a880082e 	bgeu	r21,r2,80146ac <quorem+0x1c4>
 801468c:	18ffff17 	ldw	r3,-4(r3)
 8014690:	18000326 	beq	r3,zero,80146a0 <quorem+0x1b8>
 8014694:	00000506 	br	80146ac <quorem+0x1c4>
 8014698:	10c00017 	ldw	r3,0(r2)
 801469c:	1800031e 	bne	r3,zero,80146ac <quorem+0x1c4>
 80146a0:	10bfff04 	addi	r2,r2,-4
 80146a4:	94bfffc4 	addi	r18,r18,-1
 80146a8:	a8bffb36 	bltu	r21,r2,8014698 <__alt_data_end+0xf8014698>
 80146ac:	84800415 	stw	r18,16(r16)
 80146b0:	9805883a 	mov	r2,r19
 80146b4:	dfc00817 	ldw	ra,32(sp)
 80146b8:	ddc00717 	ldw	r23,28(sp)
 80146bc:	dd800617 	ldw	r22,24(sp)
 80146c0:	dd400517 	ldw	r21,20(sp)
 80146c4:	dd000417 	ldw	r20,16(sp)
 80146c8:	dcc00317 	ldw	r19,12(sp)
 80146cc:	dc800217 	ldw	r18,8(sp)
 80146d0:	dc400117 	ldw	r17,4(sp)
 80146d4:	dc000017 	ldw	r16,0(sp)
 80146d8:	dec00904 	addi	sp,sp,36
 80146dc:	f800283a 	ret
 80146e0:	0005883a 	mov	r2,zero
 80146e4:	003ff306 	br	80146b4 <__alt_data_end+0xf80146b4>

080146e8 <_dtoa_r>:
 80146e8:	20801017 	ldw	r2,64(r4)
 80146ec:	deffde04 	addi	sp,sp,-136
 80146f0:	dd401d15 	stw	r21,116(sp)
 80146f4:	dcc01b15 	stw	r19,108(sp)
 80146f8:	dc801a15 	stw	r18,104(sp)
 80146fc:	dc401915 	stw	r17,100(sp)
 8014700:	dc001815 	stw	r16,96(sp)
 8014704:	dfc02115 	stw	ra,132(sp)
 8014708:	df002015 	stw	fp,128(sp)
 801470c:	ddc01f15 	stw	r23,124(sp)
 8014710:	dd801e15 	stw	r22,120(sp)
 8014714:	dd001c15 	stw	r20,112(sp)
 8014718:	d9c00315 	stw	r7,12(sp)
 801471c:	2021883a 	mov	r16,r4
 8014720:	302b883a 	mov	r21,r6
 8014724:	2825883a 	mov	r18,r5
 8014728:	dc402417 	ldw	r17,144(sp)
 801472c:	3027883a 	mov	r19,r6
 8014730:	10000826 	beq	r2,zero,8014754 <_dtoa_r+0x6c>
 8014734:	21801117 	ldw	r6,68(r4)
 8014738:	00c00044 	movi	r3,1
 801473c:	100b883a 	mov	r5,r2
 8014740:	1986983a 	sll	r3,r3,r6
 8014744:	11800115 	stw	r6,4(r2)
 8014748:	10c00215 	stw	r3,8(r2)
 801474c:	80174240 	call	8017424 <_Bfree>
 8014750:	80001015 	stw	zero,64(r16)
 8014754:	a8002d16 	blt	r21,zero,801480c <_dtoa_r+0x124>
 8014758:	88000015 	stw	zero,0(r17)
 801475c:	a8dffc2c 	andhi	r3,r21,32752
 8014760:	009ffc34 	movhi	r2,32752
 8014764:	18801b26 	beq	r3,r2,80147d4 <_dtoa_r+0xec>
 8014768:	9009883a 	mov	r4,r18
 801476c:	980b883a 	mov	r5,r19
 8014770:	000d883a 	mov	r6,zero
 8014774:	000f883a 	mov	r7,zero
 8014778:	800db780 	call	800db78 <__eqdf2>
 801477c:	10002a1e 	bne	r2,zero,8014828 <_dtoa_r+0x140>
 8014780:	d8c02317 	ldw	r3,140(sp)
 8014784:	d9002517 	ldw	r4,148(sp)
 8014788:	00800044 	movi	r2,1
 801478c:	18800015 	stw	r2,0(r3)
 8014790:	2001a226 	beq	r4,zero,8014e1c <_dtoa_r+0x734>
 8014794:	008205b4 	movhi	r2,2070
 8014798:	1097ca44 	addi	r2,r2,24361
 801479c:	20800015 	stw	r2,0(r4)
 80147a0:	10bfffc4 	addi	r2,r2,-1
 80147a4:	dfc02117 	ldw	ra,132(sp)
 80147a8:	df002017 	ldw	fp,128(sp)
 80147ac:	ddc01f17 	ldw	r23,124(sp)
 80147b0:	dd801e17 	ldw	r22,120(sp)
 80147b4:	dd401d17 	ldw	r21,116(sp)
 80147b8:	dd001c17 	ldw	r20,112(sp)
 80147bc:	dcc01b17 	ldw	r19,108(sp)
 80147c0:	dc801a17 	ldw	r18,104(sp)
 80147c4:	dc401917 	ldw	r17,100(sp)
 80147c8:	dc001817 	ldw	r16,96(sp)
 80147cc:	dec02204 	addi	sp,sp,136
 80147d0:	f800283a 	ret
 80147d4:	d8c02317 	ldw	r3,140(sp)
 80147d8:	0089c3c4 	movi	r2,9999
 80147dc:	18800015 	stw	r2,0(r3)
 80147e0:	90017c26 	beq	r18,zero,8014dd4 <_dtoa_r+0x6ec>
 80147e4:	008205b4 	movhi	r2,2070
 80147e8:	1097de04 	addi	r2,r2,24440
 80147ec:	d9002517 	ldw	r4,148(sp)
 80147f0:	203fec26 	beq	r4,zero,80147a4 <__alt_data_end+0xf80147a4>
 80147f4:	10c000c7 	ldb	r3,3(r2)
 80147f8:	18017d1e 	bne	r3,zero,8014df0 <_dtoa_r+0x708>
 80147fc:	10c000c4 	addi	r3,r2,3
 8014800:	d9802517 	ldw	r6,148(sp)
 8014804:	30c00015 	stw	r3,0(r6)
 8014808:	003fe606 	br	80147a4 <__alt_data_end+0xf80147a4>
 801480c:	04e00034 	movhi	r19,32768
 8014810:	9cffffc4 	addi	r19,r19,-1
 8014814:	00800044 	movi	r2,1
 8014818:	ace6703a 	and	r19,r21,r19
 801481c:	88800015 	stw	r2,0(r17)
 8014820:	982b883a 	mov	r21,r19
 8014824:	003fcd06 	br	801475c <__alt_data_end+0xf801475c>
 8014828:	d8800204 	addi	r2,sp,8
 801482c:	a822d53a 	srli	r17,r21,20
 8014830:	d8800015 	stw	r2,0(sp)
 8014834:	8009883a 	mov	r4,r16
 8014838:	900b883a 	mov	r5,r18
 801483c:	980d883a 	mov	r6,r19
 8014840:	d9c00104 	addi	r7,sp,4
 8014844:	8017fc40 	call	8017fc4 <__d2b>
 8014848:	1039883a 	mov	fp,r2
 801484c:	88016a1e 	bne	r17,zero,8014df8 <_dtoa_r+0x710>
 8014850:	dd000217 	ldw	r20,8(sp)
 8014854:	dc400117 	ldw	r17,4(sp)
 8014858:	00befbc4 	movi	r2,-1041
 801485c:	a463883a 	add	r17,r20,r17
 8014860:	8882ea16 	blt	r17,r2,801540c <_dtoa_r+0xd24>
 8014864:	00bf0384 	movi	r2,-1010
 8014868:	1445c83a 	sub	r2,r2,r17
 801486c:	89010484 	addi	r4,r17,1042
 8014870:	a8aa983a 	sll	r21,r21,r2
 8014874:	9108d83a 	srl	r4,r18,r4
 8014878:	a908b03a 	or	r4,r21,r4
 801487c:	800ef080 	call	800ef08 <__floatunsidf>
 8014880:	017f8434 	movhi	r5,65040
 8014884:	01800044 	movi	r6,1
 8014888:	1009883a 	mov	r4,r2
 801488c:	194b883a 	add	r5,r3,r5
 8014890:	8c7fffc4 	addi	r17,r17,-1
 8014894:	d9800f15 	stw	r6,60(sp)
 8014898:	000d883a 	mov	r6,zero
 801489c:	01cffe34 	movhi	r7,16376
 80148a0:	800e4e00 	call	800e4e0 <__subdf3>
 80148a4:	0198dbf4 	movhi	r6,25455
 80148a8:	01cff4f4 	movhi	r7,16339
 80148ac:	1009883a 	mov	r4,r2
 80148b0:	180b883a 	mov	r5,r3
 80148b4:	3190d844 	addi	r6,r6,17249
 80148b8:	39e1e9c4 	addi	r7,r7,-30809
 80148bc:	800ddbc0 	call	800ddbc <__muldf3>
 80148c0:	01a2d874 	movhi	r6,35681
 80148c4:	01cff1f4 	movhi	r7,16327
 80148c8:	180b883a 	mov	r5,r3
 80148cc:	31b22cc4 	addi	r6,r6,-14157
 80148d0:	39e28a04 	addi	r7,r7,-30168
 80148d4:	1009883a 	mov	r4,r2
 80148d8:	800ca100 	call	800ca10 <__adddf3>
 80148dc:	8809883a 	mov	r4,r17
 80148e0:	102d883a 	mov	r22,r2
 80148e4:	182b883a 	mov	r21,r3
 80148e8:	800ee380 	call	800ee38 <__floatsidf>
 80148ec:	019427f4 	movhi	r6,20639
 80148f0:	01cff4f4 	movhi	r7,16339
 80148f4:	1009883a 	mov	r4,r2
 80148f8:	180b883a 	mov	r5,r3
 80148fc:	319e7ec4 	addi	r6,r6,31227
 8014900:	39d104c4 	addi	r7,r7,17427
 8014904:	800ddbc0 	call	800ddbc <__muldf3>
 8014908:	b009883a 	mov	r4,r22
 801490c:	a80b883a 	mov	r5,r21
 8014910:	100d883a 	mov	r6,r2
 8014914:	180f883a 	mov	r7,r3
 8014918:	800ca100 	call	800ca10 <__adddf3>
 801491c:	1009883a 	mov	r4,r2
 8014920:	180b883a 	mov	r5,r3
 8014924:	102d883a 	mov	r22,r2
 8014928:	182b883a 	mov	r21,r3
 801492c:	800edb00 	call	800edb0 <__fixdfsi>
 8014930:	b009883a 	mov	r4,r22
 8014934:	a80b883a 	mov	r5,r21
 8014938:	000d883a 	mov	r6,zero
 801493c:	000f883a 	mov	r7,zero
 8014940:	d8800515 	stw	r2,20(sp)
 8014944:	800dcdc0 	call	800dcdc <__ledf2>
 8014948:	10023116 	blt	r2,zero,8015210 <_dtoa_r+0xb28>
 801494c:	d8c00517 	ldw	r3,20(sp)
 8014950:	00800584 	movi	r2,22
 8014954:	10c21f36 	bltu	r2,r3,80151d4 <_dtoa_r+0xaec>
 8014958:	180490fa 	slli	r2,r3,3
 801495c:	00c205b4 	movhi	r3,2070
 8014960:	18d7fa04 	addi	r3,r3,24552
 8014964:	1885883a 	add	r2,r3,r2
 8014968:	11000017 	ldw	r4,0(r2)
 801496c:	11400117 	ldw	r5,4(r2)
 8014970:	900d883a 	mov	r6,r18
 8014974:	980f883a 	mov	r7,r19
 8014978:	800dbfc0 	call	800dbfc <__gedf2>
 801497c:	0082a70e 	bge	zero,r2,801541c <_dtoa_r+0xd34>
 8014980:	d9000517 	ldw	r4,20(sp)
 8014984:	d8000d15 	stw	zero,52(sp)
 8014988:	213fffc4 	addi	r4,r4,-1
 801498c:	d9000515 	stw	r4,20(sp)
 8014990:	a463c83a 	sub	r17,r20,r17
 8014994:	8dbfffc4 	addi	r22,r17,-1
 8014998:	b0021916 	blt	r22,zero,8015200 <_dtoa_r+0xb18>
 801499c:	d8000815 	stw	zero,32(sp)
 80149a0:	d8800517 	ldw	r2,20(sp)
 80149a4:	10020e16 	blt	r2,zero,80151e0 <_dtoa_r+0xaf8>
 80149a8:	b0ad883a 	add	r22,r22,r2
 80149ac:	d8800a15 	stw	r2,40(sp)
 80149b0:	d8000915 	stw	zero,36(sp)
 80149b4:	d8c00317 	ldw	r3,12(sp)
 80149b8:	00800244 	movi	r2,9
 80149bc:	10c11a36 	bltu	r2,r3,8014e28 <_dtoa_r+0x740>
 80149c0:	00800144 	movi	r2,5
 80149c4:	10c4fc0e 	bge	r2,r3,8015db8 <_dtoa_r+0x16d0>
 80149c8:	18ffff04 	addi	r3,r3,-4
 80149cc:	d8c00315 	stw	r3,12(sp)
 80149d0:	0029883a 	mov	r20,zero
 80149d4:	d9800317 	ldw	r6,12(sp)
 80149d8:	008000c4 	movi	r2,3
 80149dc:	3083bd26 	beq	r6,r2,80158d4 <_dtoa_r+0x11ec>
 80149e0:	1183670e 	bge	r2,r6,8015780 <_dtoa_r+0x1098>
 80149e4:	d8c00317 	ldw	r3,12(sp)
 80149e8:	00800104 	movi	r2,4
 80149ec:	1882e726 	beq	r3,r2,801558c <_dtoa_r+0xea4>
 80149f0:	00800144 	movi	r2,5
 80149f4:	1884f21e 	bne	r3,r2,8015dc0 <_dtoa_r+0x16d8>
 80149f8:	00800044 	movi	r2,1
 80149fc:	d8800b15 	stw	r2,44(sp)
 8014a00:	d8c02217 	ldw	r3,136(sp)
 8014a04:	d9000517 	ldw	r4,20(sp)
 8014a08:	1907883a 	add	r3,r3,r4
 8014a0c:	19800044 	addi	r6,r3,1
 8014a10:	d8c00c15 	stw	r3,48(sp)
 8014a14:	d9800615 	stw	r6,24(sp)
 8014a18:	0183c30e 	bge	zero,r6,8015928 <_dtoa_r+0x1240>
 8014a1c:	d9800617 	ldw	r6,24(sp)
 8014a20:	3023883a 	mov	r17,r6
 8014a24:	80001115 	stw	zero,68(r16)
 8014a28:	008005c4 	movi	r2,23
 8014a2c:	1184f62e 	bgeu	r2,r6,8015e08 <_dtoa_r+0x1720>
 8014a30:	00c00044 	movi	r3,1
 8014a34:	00800104 	movi	r2,4
 8014a38:	1085883a 	add	r2,r2,r2
 8014a3c:	11000504 	addi	r4,r2,20
 8014a40:	180b883a 	mov	r5,r3
 8014a44:	18c00044 	addi	r3,r3,1
 8014a48:	313ffb2e 	bgeu	r6,r4,8014a38 <__alt_data_end+0xf8014a38>
 8014a4c:	81401115 	stw	r5,68(r16)
 8014a50:	8009883a 	mov	r4,r16
 8014a54:	801737c0 	call	801737c <_Balloc>
 8014a58:	d8800715 	stw	r2,28(sp)
 8014a5c:	80801015 	stw	r2,64(r16)
 8014a60:	00800384 	movi	r2,14
 8014a64:	1440fd36 	bltu	r2,r17,8014e5c <_dtoa_r+0x774>
 8014a68:	a000fc26 	beq	r20,zero,8014e5c <_dtoa_r+0x774>
 8014a6c:	d8800517 	ldw	r2,20(sp)
 8014a70:	0083b90e 	bge	zero,r2,8015958 <_dtoa_r+0x1270>
 8014a74:	d8c00517 	ldw	r3,20(sp)
 8014a78:	108003cc 	andi	r2,r2,15
 8014a7c:	100490fa 	slli	r2,r2,3
 8014a80:	182fd13a 	srai	r23,r3,4
 8014a84:	00c205b4 	movhi	r3,2070
 8014a88:	18d7fa04 	addi	r3,r3,24552
 8014a8c:	1885883a 	add	r2,r3,r2
 8014a90:	b8c0040c 	andi	r3,r23,16
 8014a94:	12c00017 	ldw	r11,0(r2)
 8014a98:	12800117 	ldw	r10,4(r2)
 8014a9c:	18039726 	beq	r3,zero,80158fc <_dtoa_r+0x1214>
 8014aa0:	008205b4 	movhi	r2,2070
 8014aa4:	1097f004 	addi	r2,r2,24512
 8014aa8:	11800817 	ldw	r6,32(r2)
 8014aac:	11c00917 	ldw	r7,36(r2)
 8014ab0:	9009883a 	mov	r4,r18
 8014ab4:	980b883a 	mov	r5,r19
 8014ab8:	da801615 	stw	r10,88(sp)
 8014abc:	dac01515 	stw	r11,84(sp)
 8014ac0:	800d2ac0 	call	800d2ac <__divdf3>
 8014ac4:	da801617 	ldw	r10,88(sp)
 8014ac8:	dac01517 	ldw	r11,84(sp)
 8014acc:	bdc003cc 	andi	r23,r23,15
 8014ad0:	044000c4 	movi	r17,3
 8014ad4:	d8800e15 	stw	r2,56(sp)
 8014ad8:	182b883a 	mov	r21,r3
 8014adc:	b8001126 	beq	r23,zero,8014b24 <_dtoa_r+0x43c>
 8014ae0:	050205b4 	movhi	r20,2070
 8014ae4:	a517f004 	addi	r20,r20,24512
 8014ae8:	5805883a 	mov	r2,r11
 8014aec:	5007883a 	mov	r3,r10
 8014af0:	b980004c 	andi	r6,r23,1
 8014af4:	1009883a 	mov	r4,r2
 8014af8:	b82fd07a 	srai	r23,r23,1
 8014afc:	180b883a 	mov	r5,r3
 8014b00:	30000426 	beq	r6,zero,8014b14 <_dtoa_r+0x42c>
 8014b04:	a1800017 	ldw	r6,0(r20)
 8014b08:	a1c00117 	ldw	r7,4(r20)
 8014b0c:	8c400044 	addi	r17,r17,1
 8014b10:	800ddbc0 	call	800ddbc <__muldf3>
 8014b14:	a5000204 	addi	r20,r20,8
 8014b18:	b83ff51e 	bne	r23,zero,8014af0 <__alt_data_end+0xf8014af0>
 8014b1c:	1017883a 	mov	r11,r2
 8014b20:	1815883a 	mov	r10,r3
 8014b24:	d9000e17 	ldw	r4,56(sp)
 8014b28:	a80b883a 	mov	r5,r21
 8014b2c:	580d883a 	mov	r6,r11
 8014b30:	500f883a 	mov	r7,r10
 8014b34:	800d2ac0 	call	800d2ac <__divdf3>
 8014b38:	1029883a 	mov	r20,r2
 8014b3c:	182b883a 	mov	r21,r3
 8014b40:	d9800d17 	ldw	r6,52(sp)
 8014b44:	30000626 	beq	r6,zero,8014b60 <_dtoa_r+0x478>
 8014b48:	a009883a 	mov	r4,r20
 8014b4c:	a80b883a 	mov	r5,r21
 8014b50:	000d883a 	mov	r6,zero
 8014b54:	01cffc34 	movhi	r7,16368
 8014b58:	800dcdc0 	call	800dcdc <__ledf2>
 8014b5c:	10043216 	blt	r2,zero,8015c28 <_dtoa_r+0x1540>
 8014b60:	8809883a 	mov	r4,r17
 8014b64:	800ee380 	call	800ee38 <__floatsidf>
 8014b68:	1009883a 	mov	r4,r2
 8014b6c:	180b883a 	mov	r5,r3
 8014b70:	a00d883a 	mov	r6,r20
 8014b74:	a80f883a 	mov	r7,r21
 8014b78:	800ddbc0 	call	800ddbc <__muldf3>
 8014b7c:	000d883a 	mov	r6,zero
 8014b80:	1009883a 	mov	r4,r2
 8014b84:	180b883a 	mov	r5,r3
 8014b88:	01d00734 	movhi	r7,16412
 8014b8c:	800ca100 	call	800ca10 <__adddf3>
 8014b90:	1023883a 	mov	r17,r2
 8014b94:	d9800617 	ldw	r6,24(sp)
 8014b98:	00bf3034 	movhi	r2,64704
 8014b9c:	1885883a 	add	r2,r3,r2
 8014ba0:	d8800e15 	stw	r2,56(sp)
 8014ba4:	30032e26 	beq	r6,zero,8015860 <_dtoa_r+0x1178>
 8014ba8:	d8c00517 	ldw	r3,20(sp)
 8014bac:	da800617 	ldw	r10,24(sp)
 8014bb0:	d8c01215 	stw	r3,72(sp)
 8014bb4:	d9000b17 	ldw	r4,44(sp)
 8014bb8:	2003b026 	beq	r4,zero,8015a7c <_dtoa_r+0x1394>
 8014bbc:	50bfffc4 	addi	r2,r10,-1
 8014bc0:	100490fa 	slli	r2,r2,3
 8014bc4:	00c205b4 	movhi	r3,2070
 8014bc8:	18d7fa04 	addi	r3,r3,24552
 8014bcc:	1885883a 	add	r2,r3,r2
 8014bd0:	11800017 	ldw	r6,0(r2)
 8014bd4:	11c00117 	ldw	r7,4(r2)
 8014bd8:	d8800717 	ldw	r2,28(sp)
 8014bdc:	0009883a 	mov	r4,zero
 8014be0:	014ff834 	movhi	r5,16352
 8014be4:	da801615 	stw	r10,88(sp)
 8014be8:	15c00044 	addi	r23,r2,1
 8014bec:	800d2ac0 	call	800d2ac <__divdf3>
 8014bf0:	d9c00e17 	ldw	r7,56(sp)
 8014bf4:	880d883a 	mov	r6,r17
 8014bf8:	1009883a 	mov	r4,r2
 8014bfc:	180b883a 	mov	r5,r3
 8014c00:	800e4e00 	call	800e4e0 <__subdf3>
 8014c04:	a80b883a 	mov	r5,r21
 8014c08:	a009883a 	mov	r4,r20
 8014c0c:	d8c01015 	stw	r3,64(sp)
 8014c10:	d8800e15 	stw	r2,56(sp)
 8014c14:	800edb00 	call	800edb0 <__fixdfsi>
 8014c18:	1009883a 	mov	r4,r2
 8014c1c:	d8801715 	stw	r2,92(sp)
 8014c20:	800ee380 	call	800ee38 <__floatsidf>
 8014c24:	a009883a 	mov	r4,r20
 8014c28:	a80b883a 	mov	r5,r21
 8014c2c:	100d883a 	mov	r6,r2
 8014c30:	180f883a 	mov	r7,r3
 8014c34:	800e4e00 	call	800e4e0 <__subdf3>
 8014c38:	da001717 	ldw	r8,92(sp)
 8014c3c:	1829883a 	mov	r20,r3
 8014c40:	d8c00717 	ldw	r3,28(sp)
 8014c44:	d9000e17 	ldw	r4,56(sp)
 8014c48:	d9401017 	ldw	r5,64(sp)
 8014c4c:	42000c04 	addi	r8,r8,48
 8014c50:	1023883a 	mov	r17,r2
 8014c54:	1a000005 	stb	r8,0(r3)
 8014c58:	880d883a 	mov	r6,r17
 8014c5c:	a00f883a 	mov	r7,r20
 8014c60:	402b883a 	mov	r21,r8
 8014c64:	800dbfc0 	call	800dbfc <__gedf2>
 8014c68:	00844516 	blt	zero,r2,8015d80 <_dtoa_r+0x1698>
 8014c6c:	0009883a 	mov	r4,zero
 8014c70:	014ffc34 	movhi	r5,16368
 8014c74:	880d883a 	mov	r6,r17
 8014c78:	a00f883a 	mov	r7,r20
 8014c7c:	800e4e00 	call	800e4e0 <__subdf3>
 8014c80:	d9000e17 	ldw	r4,56(sp)
 8014c84:	d9401017 	ldw	r5,64(sp)
 8014c88:	100d883a 	mov	r6,r2
 8014c8c:	180f883a 	mov	r7,r3
 8014c90:	800dbfc0 	call	800dbfc <__gedf2>
 8014c94:	da801617 	ldw	r10,88(sp)
 8014c98:	00843616 	blt	zero,r2,8015d74 <_dtoa_r+0x168c>
 8014c9c:	00800044 	movi	r2,1
 8014ca0:	12806e0e 	bge	r2,r10,8014e5c <_dtoa_r+0x774>
 8014ca4:	d9000717 	ldw	r4,28(sp)
 8014ca8:	dd801315 	stw	r22,76(sp)
 8014cac:	dc001115 	stw	r16,68(sp)
 8014cb0:	2295883a 	add	r10,r4,r10
 8014cb4:	dcc01415 	stw	r19,80(sp)
 8014cb8:	502d883a 	mov	r22,r10
 8014cbc:	dcc01017 	ldw	r19,64(sp)
 8014cc0:	b821883a 	mov	r16,r23
 8014cc4:	dc801015 	stw	r18,64(sp)
 8014cc8:	dc800e17 	ldw	r18,56(sp)
 8014ccc:	00000906 	br	8014cf4 <_dtoa_r+0x60c>
 8014cd0:	800e4e00 	call	800e4e0 <__subdf3>
 8014cd4:	1009883a 	mov	r4,r2
 8014cd8:	180b883a 	mov	r5,r3
 8014cdc:	900d883a 	mov	r6,r18
 8014ce0:	980f883a 	mov	r7,r19
 8014ce4:	800dcdc0 	call	800dcdc <__ledf2>
 8014ce8:	10040e16 	blt	r2,zero,8015d24 <_dtoa_r+0x163c>
 8014cec:	b821883a 	mov	r16,r23
 8014cf0:	bd841026 	beq	r23,r22,8015d34 <_dtoa_r+0x164c>
 8014cf4:	9009883a 	mov	r4,r18
 8014cf8:	980b883a 	mov	r5,r19
 8014cfc:	000d883a 	mov	r6,zero
 8014d00:	01d00934 	movhi	r7,16420
 8014d04:	800ddbc0 	call	800ddbc <__muldf3>
 8014d08:	000d883a 	mov	r6,zero
 8014d0c:	01d00934 	movhi	r7,16420
 8014d10:	8809883a 	mov	r4,r17
 8014d14:	a00b883a 	mov	r5,r20
 8014d18:	1025883a 	mov	r18,r2
 8014d1c:	1827883a 	mov	r19,r3
 8014d20:	800ddbc0 	call	800ddbc <__muldf3>
 8014d24:	180b883a 	mov	r5,r3
 8014d28:	1009883a 	mov	r4,r2
 8014d2c:	1823883a 	mov	r17,r3
 8014d30:	1029883a 	mov	r20,r2
 8014d34:	800edb00 	call	800edb0 <__fixdfsi>
 8014d38:	1009883a 	mov	r4,r2
 8014d3c:	102b883a 	mov	r21,r2
 8014d40:	800ee380 	call	800ee38 <__floatsidf>
 8014d44:	a009883a 	mov	r4,r20
 8014d48:	880b883a 	mov	r5,r17
 8014d4c:	100d883a 	mov	r6,r2
 8014d50:	180f883a 	mov	r7,r3
 8014d54:	800e4e00 	call	800e4e0 <__subdf3>
 8014d58:	ad400c04 	addi	r21,r21,48
 8014d5c:	1009883a 	mov	r4,r2
 8014d60:	180b883a 	mov	r5,r3
 8014d64:	900d883a 	mov	r6,r18
 8014d68:	980f883a 	mov	r7,r19
 8014d6c:	85400005 	stb	r21,0(r16)
 8014d70:	1023883a 	mov	r17,r2
 8014d74:	1829883a 	mov	r20,r3
 8014d78:	800dcdc0 	call	800dcdc <__ledf2>
 8014d7c:	bdc00044 	addi	r23,r23,1
 8014d80:	0009883a 	mov	r4,zero
 8014d84:	014ffc34 	movhi	r5,16368
 8014d88:	880d883a 	mov	r6,r17
 8014d8c:	a00f883a 	mov	r7,r20
 8014d90:	103fcf0e 	bge	r2,zero,8014cd0 <__alt_data_end+0xf8014cd0>
 8014d94:	d9801217 	ldw	r6,72(sp)
 8014d98:	dc001117 	ldw	r16,68(sp)
 8014d9c:	d9800515 	stw	r6,20(sp)
 8014da0:	8009883a 	mov	r4,r16
 8014da4:	e00b883a 	mov	r5,fp
 8014da8:	80174240 	call	8017424 <_Bfree>
 8014dac:	d8c00517 	ldw	r3,20(sp)
 8014db0:	d9002317 	ldw	r4,140(sp)
 8014db4:	d9802517 	ldw	r6,148(sp)
 8014db8:	b8000005 	stb	zero,0(r23)
 8014dbc:	18800044 	addi	r2,r3,1
 8014dc0:	20800015 	stw	r2,0(r4)
 8014dc4:	30027226 	beq	r6,zero,8015790 <_dtoa_r+0x10a8>
 8014dc8:	35c00015 	stw	r23,0(r6)
 8014dcc:	d8800717 	ldw	r2,28(sp)
 8014dd0:	003e7406 	br	80147a4 <__alt_data_end+0xf80147a4>
 8014dd4:	00800434 	movhi	r2,16
 8014dd8:	10bfffc4 	addi	r2,r2,-1
 8014ddc:	a8aa703a 	and	r21,r21,r2
 8014de0:	a83e801e 	bne	r21,zero,80147e4 <__alt_data_end+0xf80147e4>
 8014de4:	008205b4 	movhi	r2,2070
 8014de8:	1097db04 	addi	r2,r2,24428
 8014dec:	003e7f06 	br	80147ec <__alt_data_end+0xf80147ec>
 8014df0:	10c00204 	addi	r3,r2,8
 8014df4:	003e8206 	br	8014800 <__alt_data_end+0xf8014800>
 8014df8:	01400434 	movhi	r5,16
 8014dfc:	297fffc4 	addi	r5,r5,-1
 8014e00:	994a703a 	and	r5,r19,r5
 8014e04:	9009883a 	mov	r4,r18
 8014e08:	8c7f0044 	addi	r17,r17,-1023
 8014e0c:	294ffc34 	orhi	r5,r5,16368
 8014e10:	dd000217 	ldw	r20,8(sp)
 8014e14:	d8000f15 	stw	zero,60(sp)
 8014e18:	003e9f06 	br	8014898 <__alt_data_end+0xf8014898>
 8014e1c:	008205b4 	movhi	r2,2070
 8014e20:	1097ca04 	addi	r2,r2,24360
 8014e24:	003e5f06 	br	80147a4 <__alt_data_end+0xf80147a4>
 8014e28:	80001115 	stw	zero,68(r16)
 8014e2c:	8009883a 	mov	r4,r16
 8014e30:	000b883a 	mov	r5,zero
 8014e34:	801737c0 	call	801737c <_Balloc>
 8014e38:	01bfffc4 	movi	r6,-1
 8014e3c:	d8800715 	stw	r2,28(sp)
 8014e40:	80801015 	stw	r2,64(r16)
 8014e44:	00800044 	movi	r2,1
 8014e48:	d9800c15 	stw	r6,48(sp)
 8014e4c:	d8800b15 	stw	r2,44(sp)
 8014e50:	d9800615 	stw	r6,24(sp)
 8014e54:	d8002215 	stw	zero,136(sp)
 8014e58:	d8000315 	stw	zero,12(sp)
 8014e5c:	d8800117 	ldw	r2,4(sp)
 8014e60:	10008e16 	blt	r2,zero,801509c <_dtoa_r+0x9b4>
 8014e64:	d9000517 	ldw	r4,20(sp)
 8014e68:	00c00384 	movi	r3,14
 8014e6c:	19008b16 	blt	r3,r4,801509c <_dtoa_r+0x9b4>
 8014e70:	200490fa 	slli	r2,r4,3
 8014e74:	00c205b4 	movhi	r3,2070
 8014e78:	d9802217 	ldw	r6,136(sp)
 8014e7c:	18d7fa04 	addi	r3,r3,24552
 8014e80:	1885883a 	add	r2,r3,r2
 8014e84:	14400017 	ldw	r17,0(r2)
 8014e88:	15000117 	ldw	r20,4(r2)
 8014e8c:	3001c716 	blt	r6,zero,80155ac <_dtoa_r+0xec4>
 8014e90:	880d883a 	mov	r6,r17
 8014e94:	a00f883a 	mov	r7,r20
 8014e98:	9009883a 	mov	r4,r18
 8014e9c:	980b883a 	mov	r5,r19
 8014ea0:	800d2ac0 	call	800d2ac <__divdf3>
 8014ea4:	180b883a 	mov	r5,r3
 8014ea8:	1009883a 	mov	r4,r2
 8014eac:	800edb00 	call	800edb0 <__fixdfsi>
 8014eb0:	1009883a 	mov	r4,r2
 8014eb4:	102d883a 	mov	r22,r2
 8014eb8:	800ee380 	call	800ee38 <__floatsidf>
 8014ebc:	1009883a 	mov	r4,r2
 8014ec0:	180b883a 	mov	r5,r3
 8014ec4:	880d883a 	mov	r6,r17
 8014ec8:	a00f883a 	mov	r7,r20
 8014ecc:	800ddbc0 	call	800ddbc <__muldf3>
 8014ed0:	9009883a 	mov	r4,r18
 8014ed4:	980b883a 	mov	r5,r19
 8014ed8:	100d883a 	mov	r6,r2
 8014edc:	180f883a 	mov	r7,r3
 8014ee0:	800e4e00 	call	800e4e0 <__subdf3>
 8014ee4:	d9000717 	ldw	r4,28(sp)
 8014ee8:	d9800617 	ldw	r6,24(sp)
 8014eec:	180b883a 	mov	r5,r3
 8014ef0:	b0c00c04 	addi	r3,r22,48
 8014ef4:	20c00005 	stb	r3,0(r4)
 8014ef8:	25c00044 	addi	r23,r4,1
 8014efc:	01000044 	movi	r4,1
 8014f00:	1011883a 	mov	r8,r2
 8014f04:	2807883a 	mov	r3,r5
 8014f08:	31003d26 	beq	r6,r4,8015000 <_dtoa_r+0x918>
 8014f0c:	000d883a 	mov	r6,zero
 8014f10:	01d00934 	movhi	r7,16420
 8014f14:	1009883a 	mov	r4,r2
 8014f18:	800ddbc0 	call	800ddbc <__muldf3>
 8014f1c:	1009883a 	mov	r4,r2
 8014f20:	180b883a 	mov	r5,r3
 8014f24:	000d883a 	mov	r6,zero
 8014f28:	000f883a 	mov	r7,zero
 8014f2c:	1027883a 	mov	r19,r2
 8014f30:	182b883a 	mov	r21,r3
 8014f34:	800db780 	call	800db78 <__eqdf2>
 8014f38:	103f9926 	beq	r2,zero,8014da0 <__alt_data_end+0xf8014da0>
 8014f3c:	d8c00617 	ldw	r3,24(sp)
 8014f40:	d9000717 	ldw	r4,28(sp)
 8014f44:	b825883a 	mov	r18,r23
 8014f48:	18bfffc4 	addi	r2,r3,-1
 8014f4c:	20ad883a 	add	r22,r4,r2
 8014f50:	dc000315 	stw	r16,12(sp)
 8014f54:	00000a06 	br	8014f80 <_dtoa_r+0x898>
 8014f58:	800ddbc0 	call	800ddbc <__muldf3>
 8014f5c:	1009883a 	mov	r4,r2
 8014f60:	180b883a 	mov	r5,r3
 8014f64:	000d883a 	mov	r6,zero
 8014f68:	000f883a 	mov	r7,zero
 8014f6c:	1027883a 	mov	r19,r2
 8014f70:	182b883a 	mov	r21,r3
 8014f74:	b825883a 	mov	r18,r23
 8014f78:	800db780 	call	800db78 <__eqdf2>
 8014f7c:	10022626 	beq	r2,zero,8015818 <_dtoa_r+0x1130>
 8014f80:	880d883a 	mov	r6,r17
 8014f84:	a00f883a 	mov	r7,r20
 8014f88:	9809883a 	mov	r4,r19
 8014f8c:	a80b883a 	mov	r5,r21
 8014f90:	800d2ac0 	call	800d2ac <__divdf3>
 8014f94:	180b883a 	mov	r5,r3
 8014f98:	1009883a 	mov	r4,r2
 8014f9c:	800edb00 	call	800edb0 <__fixdfsi>
 8014fa0:	1009883a 	mov	r4,r2
 8014fa4:	1021883a 	mov	r16,r2
 8014fa8:	800ee380 	call	800ee38 <__floatsidf>
 8014fac:	1009883a 	mov	r4,r2
 8014fb0:	180b883a 	mov	r5,r3
 8014fb4:	880d883a 	mov	r6,r17
 8014fb8:	a00f883a 	mov	r7,r20
 8014fbc:	800ddbc0 	call	800ddbc <__muldf3>
 8014fc0:	9809883a 	mov	r4,r19
 8014fc4:	a80b883a 	mov	r5,r21
 8014fc8:	100d883a 	mov	r6,r2
 8014fcc:	180f883a 	mov	r7,r3
 8014fd0:	800e4e00 	call	800e4e0 <__subdf3>
 8014fd4:	82000c04 	addi	r8,r16,48
 8014fd8:	92000005 	stb	r8,0(r18)
 8014fdc:	1009883a 	mov	r4,r2
 8014fe0:	180b883a 	mov	r5,r3
 8014fe4:	000d883a 	mov	r6,zero
 8014fe8:	01d00934 	movhi	r7,16420
 8014fec:	1011883a 	mov	r8,r2
 8014ff0:	bdc00044 	addi	r23,r23,1
 8014ff4:	95bfd81e 	bne	r18,r22,8014f58 <__alt_data_end+0xf8014f58>
 8014ff8:	802d883a 	mov	r22,r16
 8014ffc:	dc000317 	ldw	r16,12(sp)
 8015000:	4009883a 	mov	r4,r8
 8015004:	180b883a 	mov	r5,r3
 8015008:	400d883a 	mov	r6,r8
 801500c:	180f883a 	mov	r7,r3
 8015010:	800ca100 	call	800ca10 <__adddf3>
 8015014:	8809883a 	mov	r4,r17
 8015018:	a00b883a 	mov	r5,r20
 801501c:	100d883a 	mov	r6,r2
 8015020:	180f883a 	mov	r7,r3
 8015024:	1027883a 	mov	r19,r2
 8015028:	1825883a 	mov	r18,r3
 801502c:	800dcdc0 	call	800dcdc <__ledf2>
 8015030:	10000816 	blt	r2,zero,8015054 <_dtoa_r+0x96c>
 8015034:	8809883a 	mov	r4,r17
 8015038:	a00b883a 	mov	r5,r20
 801503c:	980d883a 	mov	r6,r19
 8015040:	900f883a 	mov	r7,r18
 8015044:	800db780 	call	800db78 <__eqdf2>
 8015048:	103f551e 	bne	r2,zero,8014da0 <__alt_data_end+0xf8014da0>
 801504c:	b580004c 	andi	r22,r22,1
 8015050:	b03f5326 	beq	r22,zero,8014da0 <__alt_data_end+0xf8014da0>
 8015054:	bd7fffc3 	ldbu	r21,-1(r23)
 8015058:	b8bfffc4 	addi	r2,r23,-1
 801505c:	1007883a 	mov	r3,r2
 8015060:	01400e44 	movi	r5,57
 8015064:	d9800717 	ldw	r6,28(sp)
 8015068:	00000506 	br	8015080 <_dtoa_r+0x998>
 801506c:	18ffffc4 	addi	r3,r3,-1
 8015070:	30825e26 	beq	r6,r2,80159ec <_dtoa_r+0x1304>
 8015074:	1d400003 	ldbu	r21,0(r3)
 8015078:	102f883a 	mov	r23,r2
 801507c:	10bfffc4 	addi	r2,r2,-1
 8015080:	a9003fcc 	andi	r4,r21,255
 8015084:	2100201c 	xori	r4,r4,128
 8015088:	213fe004 	addi	r4,r4,-128
 801508c:	217ff726 	beq	r4,r5,801506c <__alt_data_end+0xf801506c>
 8015090:	aa000044 	addi	r8,r21,1
 8015094:	12000005 	stb	r8,0(r2)
 8015098:	003f4106 	br	8014da0 <__alt_data_end+0xf8014da0>
 801509c:	d8c00b17 	ldw	r3,44(sp)
 80150a0:	18006726 	beq	r3,zero,8015240 <_dtoa_r+0xb58>
 80150a4:	d9000317 	ldw	r4,12(sp)
 80150a8:	00c00044 	movi	r3,1
 80150ac:	19016a0e 	bge	r3,r4,8015658 <_dtoa_r+0xf70>
 80150b0:	d8800617 	ldw	r2,24(sp)
 80150b4:	d8c00917 	ldw	r3,36(sp)
 80150b8:	157fffc4 	addi	r21,r2,-1
 80150bc:	1d420716 	blt	r3,r21,80158dc <_dtoa_r+0x11f4>
 80150c0:	1d6bc83a 	sub	r21,r3,r21
 80150c4:	d8800617 	ldw	r2,24(sp)
 80150c8:	1002c716 	blt	r2,zero,8015be8 <_dtoa_r+0x1500>
 80150cc:	dd000817 	ldw	r20,32(sp)
 80150d0:	d8800617 	ldw	r2,24(sp)
 80150d4:	d9800817 	ldw	r6,32(sp)
 80150d8:	8009883a 	mov	r4,r16
 80150dc:	01400044 	movi	r5,1
 80150e0:	308d883a 	add	r6,r6,r2
 80150e4:	d9800815 	stw	r6,32(sp)
 80150e8:	b0ad883a 	add	r22,r22,r2
 80150ec:	80177880 	call	8017788 <__i2b>
 80150f0:	1023883a 	mov	r17,r2
 80150f4:	a0000826 	beq	r20,zero,8015118 <_dtoa_r+0xa30>
 80150f8:	0580070e 	bge	zero,r22,8015118 <_dtoa_r+0xa30>
 80150fc:	b005883a 	mov	r2,r22
 8015100:	a5812016 	blt	r20,r22,8015584 <_dtoa_r+0xe9c>
 8015104:	d8c00817 	ldw	r3,32(sp)
 8015108:	a0a9c83a 	sub	r20,r20,r2
 801510c:	b0adc83a 	sub	r22,r22,r2
 8015110:	1887c83a 	sub	r3,r3,r2
 8015114:	d8c00815 	stw	r3,32(sp)
 8015118:	d9000917 	ldw	r4,36(sp)
 801511c:	0100140e 	bge	zero,r4,8015170 <_dtoa_r+0xa88>
 8015120:	d9800b17 	ldw	r6,44(sp)
 8015124:	3001e526 	beq	r6,zero,80158bc <_dtoa_r+0x11d4>
 8015128:	05400e0e 	bge	zero,r21,8015164 <_dtoa_r+0xa7c>
 801512c:	880b883a 	mov	r5,r17
 8015130:	8009883a 	mov	r4,r16
 8015134:	a80d883a 	mov	r6,r21
 8015138:	80179c00 	call	80179c0 <__pow5mult>
 801513c:	e00d883a 	mov	r6,fp
 8015140:	8009883a 	mov	r4,r16
 8015144:	100b883a 	mov	r5,r2
 8015148:	1023883a 	mov	r17,r2
 801514c:	80177c40 	call	80177c4 <__multiply>
 8015150:	102f883a 	mov	r23,r2
 8015154:	e00b883a 	mov	r5,fp
 8015158:	8009883a 	mov	r4,r16
 801515c:	80174240 	call	8017424 <_Bfree>
 8015160:	b839883a 	mov	fp,r23
 8015164:	d8800917 	ldw	r2,36(sp)
 8015168:	154dc83a 	sub	r6,r2,r21
 801516c:	3001281e 	bne	r6,zero,8015610 <_dtoa_r+0xf28>
 8015170:	05c00044 	movi	r23,1
 8015174:	8009883a 	mov	r4,r16
 8015178:	b80b883a 	mov	r5,r23
 801517c:	80177880 	call	8017788 <__i2b>
 8015180:	d8c00a17 	ldw	r3,40(sp)
 8015184:	102b883a 	mov	r21,r2
 8015188:	00c0310e 	bge	zero,r3,8015250 <_dtoa_r+0xb68>
 801518c:	8009883a 	mov	r4,r16
 8015190:	100b883a 	mov	r5,r2
 8015194:	180d883a 	mov	r6,r3
 8015198:	80179c00 	call	80179c0 <__pow5mult>
 801519c:	d9000317 	ldw	r4,12(sp)
 80151a0:	102b883a 	mov	r21,r2
 80151a4:	b9011f0e 	bge	r23,r4,8015624 <_dtoa_r+0xf3c>
 80151a8:	0027883a 	mov	r19,zero
 80151ac:	a8800417 	ldw	r2,16(r21)
 80151b0:	10800104 	addi	r2,r2,4
 80151b4:	1085883a 	add	r2,r2,r2
 80151b8:	1085883a 	add	r2,r2,r2
 80151bc:	a885883a 	add	r2,r21,r2
 80151c0:	11000017 	ldw	r4,0(r2)
 80151c4:	80176700 	call	8017670 <__hi0bits>
 80151c8:	00c00804 	movi	r3,32
 80151cc:	1885c83a 	sub	r2,r3,r2
 80151d0:	00002506 	br	8015268 <_dtoa_r+0xb80>
 80151d4:	01800044 	movi	r6,1
 80151d8:	d9800d15 	stw	r6,52(sp)
 80151dc:	003dec06 	br	8014990 <__alt_data_end+0xf8014990>
 80151e0:	d8c00817 	ldw	r3,32(sp)
 80151e4:	d9000517 	ldw	r4,20(sp)
 80151e8:	d8000a15 	stw	zero,40(sp)
 80151ec:	1907c83a 	sub	r3,r3,r4
 80151f0:	010dc83a 	sub	r6,zero,r4
 80151f4:	d8c00815 	stw	r3,32(sp)
 80151f8:	d9800915 	stw	r6,36(sp)
 80151fc:	003ded06 	br	80149b4 <__alt_data_end+0xf80149b4>
 8015200:	05adc83a 	sub	r22,zero,r22
 8015204:	dd800815 	stw	r22,32(sp)
 8015208:	002d883a 	mov	r22,zero
 801520c:	003de406 	br	80149a0 <__alt_data_end+0xf80149a0>
 8015210:	d9000517 	ldw	r4,20(sp)
 8015214:	800ee380 	call	800ee38 <__floatsidf>
 8015218:	1009883a 	mov	r4,r2
 801521c:	180b883a 	mov	r5,r3
 8015220:	b00d883a 	mov	r6,r22
 8015224:	a80f883a 	mov	r7,r21
 8015228:	800db780 	call	800db78 <__eqdf2>
 801522c:	103dc726 	beq	r2,zero,801494c <__alt_data_end+0xf801494c>
 8015230:	d8800517 	ldw	r2,20(sp)
 8015234:	10bfffc4 	addi	r2,r2,-1
 8015238:	d8800515 	stw	r2,20(sp)
 801523c:	003dc306 	br	801494c <__alt_data_end+0xf801494c>
 8015240:	dd400917 	ldw	r21,36(sp)
 8015244:	dd000817 	ldw	r20,32(sp)
 8015248:	0023883a 	mov	r17,zero
 801524c:	003fa906 	br	80150f4 <__alt_data_end+0xf80150f4>
 8015250:	d9800317 	ldw	r6,12(sp)
 8015254:	b981670e 	bge	r23,r6,80157f4 <_dtoa_r+0x110c>
 8015258:	0027883a 	mov	r19,zero
 801525c:	d8c00a17 	ldw	r3,40(sp)
 8015260:	183fd21e 	bne	r3,zero,80151ac <__alt_data_end+0xf80151ac>
 8015264:	00800044 	movi	r2,1
 8015268:	1585883a 	add	r2,r2,r22
 801526c:	108007cc 	andi	r2,r2,31
 8015270:	10005f26 	beq	r2,zero,80153f0 <_dtoa_r+0xd08>
 8015274:	00c00804 	movi	r3,32
 8015278:	1887c83a 	sub	r3,r3,r2
 801527c:	01000104 	movi	r4,4
 8015280:	20c2dd0e 	bge	r4,r3,8015df8 <_dtoa_r+0x1710>
 8015284:	d9000817 	ldw	r4,32(sp)
 8015288:	00c00704 	movi	r3,28
 801528c:	1885c83a 	sub	r2,r3,r2
 8015290:	2089883a 	add	r4,r4,r2
 8015294:	d9000815 	stw	r4,32(sp)
 8015298:	a0a9883a 	add	r20,r20,r2
 801529c:	b0ad883a 	add	r22,r22,r2
 80152a0:	d8800817 	ldw	r2,32(sp)
 80152a4:	0080050e 	bge	zero,r2,80152bc <_dtoa_r+0xbd4>
 80152a8:	e00b883a 	mov	r5,fp
 80152ac:	8009883a 	mov	r4,r16
 80152b0:	100d883a 	mov	r6,r2
 80152b4:	8017b000 	call	8017b00 <__lshift>
 80152b8:	1039883a 	mov	fp,r2
 80152bc:	0580050e 	bge	zero,r22,80152d4 <_dtoa_r+0xbec>
 80152c0:	a80b883a 	mov	r5,r21
 80152c4:	8009883a 	mov	r4,r16
 80152c8:	b00d883a 	mov	r6,r22
 80152cc:	8017b000 	call	8017b00 <__lshift>
 80152d0:	102b883a 	mov	r21,r2
 80152d4:	d8c00d17 	ldw	r3,52(sp)
 80152d8:	1801161e 	bne	r3,zero,8015734 <_dtoa_r+0x104c>
 80152dc:	d8c00617 	ldw	r3,24(sp)
 80152e0:	00c12d0e 	bge	zero,r3,8015798 <_dtoa_r+0x10b0>
 80152e4:	d8c00b17 	ldw	r3,44(sp)
 80152e8:	1800571e 	bne	r3,zero,8015448 <_dtoa_r+0xd60>
 80152ec:	dc800717 	ldw	r18,28(sp)
 80152f0:	dcc00617 	ldw	r19,24(sp)
 80152f4:	9029883a 	mov	r20,r18
 80152f8:	00000206 	br	8015304 <_dtoa_r+0xc1c>
 80152fc:	801744c0 	call	801744c <__multadd>
 8015300:	1039883a 	mov	fp,r2
 8015304:	e009883a 	mov	r4,fp
 8015308:	a80b883a 	mov	r5,r21
 801530c:	80144e80 	call	80144e8 <quorem>
 8015310:	10800c04 	addi	r2,r2,48
 8015314:	90800005 	stb	r2,0(r18)
 8015318:	94800044 	addi	r18,r18,1
 801531c:	9507c83a 	sub	r3,r18,r20
 8015320:	8009883a 	mov	r4,r16
 8015324:	e00b883a 	mov	r5,fp
 8015328:	01800284 	movi	r6,10
 801532c:	000f883a 	mov	r7,zero
 8015330:	1cfff216 	blt	r3,r19,80152fc <__alt_data_end+0xf80152fc>
 8015334:	1011883a 	mov	r8,r2
 8015338:	d8800617 	ldw	r2,24(sp)
 801533c:	00822e0e 	bge	zero,r2,8015bf8 <_dtoa_r+0x1510>
 8015340:	d9000717 	ldw	r4,28(sp)
 8015344:	0025883a 	mov	r18,zero
 8015348:	20af883a 	add	r23,r4,r2
 801534c:	e00b883a 	mov	r5,fp
 8015350:	01800044 	movi	r6,1
 8015354:	8009883a 	mov	r4,r16
 8015358:	da001715 	stw	r8,92(sp)
 801535c:	8017b000 	call	8017b00 <__lshift>
 8015360:	1009883a 	mov	r4,r2
 8015364:	a80b883a 	mov	r5,r21
 8015368:	1039883a 	mov	fp,r2
 801536c:	8017c500 	call	8017c50 <__mcmp>
 8015370:	da001717 	ldw	r8,92(sp)
 8015374:	00816e0e 	bge	zero,r2,8015930 <_dtoa_r+0x1248>
 8015378:	b93fffc3 	ldbu	r4,-1(r23)
 801537c:	b8bfffc4 	addi	r2,r23,-1
 8015380:	1007883a 	mov	r3,r2
 8015384:	01800e44 	movi	r6,57
 8015388:	d9c00717 	ldw	r7,28(sp)
 801538c:	00000506 	br	80153a4 <_dtoa_r+0xcbc>
 8015390:	18ffffc4 	addi	r3,r3,-1
 8015394:	38811926 	beq	r7,r2,80157fc <_dtoa_r+0x1114>
 8015398:	19000003 	ldbu	r4,0(r3)
 801539c:	102f883a 	mov	r23,r2
 80153a0:	10bfffc4 	addi	r2,r2,-1
 80153a4:	21403fcc 	andi	r5,r4,255
 80153a8:	2940201c 	xori	r5,r5,128
 80153ac:	297fe004 	addi	r5,r5,-128
 80153b0:	29bff726 	beq	r5,r6,8015390 <__alt_data_end+0xf8015390>
 80153b4:	21000044 	addi	r4,r4,1
 80153b8:	11000005 	stb	r4,0(r2)
 80153bc:	8009883a 	mov	r4,r16
 80153c0:	a80b883a 	mov	r5,r21
 80153c4:	80174240 	call	8017424 <_Bfree>
 80153c8:	883e7526 	beq	r17,zero,8014da0 <__alt_data_end+0xf8014da0>
 80153cc:	90000426 	beq	r18,zero,80153e0 <_dtoa_r+0xcf8>
 80153d0:	94400326 	beq	r18,r17,80153e0 <_dtoa_r+0xcf8>
 80153d4:	8009883a 	mov	r4,r16
 80153d8:	900b883a 	mov	r5,r18
 80153dc:	80174240 	call	8017424 <_Bfree>
 80153e0:	8009883a 	mov	r4,r16
 80153e4:	880b883a 	mov	r5,r17
 80153e8:	80174240 	call	8017424 <_Bfree>
 80153ec:	003e6c06 	br	8014da0 <__alt_data_end+0xf8014da0>
 80153f0:	00800704 	movi	r2,28
 80153f4:	d9800817 	ldw	r6,32(sp)
 80153f8:	a0a9883a 	add	r20,r20,r2
 80153fc:	b0ad883a 	add	r22,r22,r2
 8015400:	308d883a 	add	r6,r6,r2
 8015404:	d9800815 	stw	r6,32(sp)
 8015408:	003fa506 	br	80152a0 <__alt_data_end+0xf80152a0>
 801540c:	013efb84 	movi	r4,-1042
 8015410:	246bc83a 	sub	r21,r4,r17
 8015414:	9548983a 	sll	r4,r18,r21
 8015418:	003d1806 	br	801487c <__alt_data_end+0xf801487c>
 801541c:	d8000d15 	stw	zero,52(sp)
 8015420:	003d5b06 	br	8014990 <__alt_data_end+0xf8014990>
 8015424:	880b883a 	mov	r5,r17
 8015428:	8009883a 	mov	r4,r16
 801542c:	01800284 	movi	r6,10
 8015430:	000f883a 	mov	r7,zero
 8015434:	801744c0 	call	801744c <__multadd>
 8015438:	1023883a 	mov	r17,r2
 801543c:	d8800c17 	ldw	r2,48(sp)
 8015440:	0082550e 	bge	zero,r2,8015d98 <_dtoa_r+0x16b0>
 8015444:	d8800615 	stw	r2,24(sp)
 8015448:	0500050e 	bge	zero,r20,8015460 <_dtoa_r+0xd78>
 801544c:	880b883a 	mov	r5,r17
 8015450:	8009883a 	mov	r4,r16
 8015454:	a00d883a 	mov	r6,r20
 8015458:	8017b000 	call	8017b00 <__lshift>
 801545c:	1023883a 	mov	r17,r2
 8015460:	98016a1e 	bne	r19,zero,8015a0c <_dtoa_r+0x1324>
 8015464:	8829883a 	mov	r20,r17
 8015468:	d9000617 	ldw	r4,24(sp)
 801546c:	dcc00717 	ldw	r19,28(sp)
 8015470:	9480004c 	andi	r18,r18,1
 8015474:	20bfffc4 	addi	r2,r4,-1
 8015478:	9885883a 	add	r2,r19,r2
 801547c:	d8800415 	stw	r2,16(sp)
 8015480:	dc800615 	stw	r18,24(sp)
 8015484:	e009883a 	mov	r4,fp
 8015488:	a80b883a 	mov	r5,r21
 801548c:	80144e80 	call	80144e8 <quorem>
 8015490:	e009883a 	mov	r4,fp
 8015494:	880b883a 	mov	r5,r17
 8015498:	102f883a 	mov	r23,r2
 801549c:	8017c500 	call	8017c50 <__mcmp>
 80154a0:	8009883a 	mov	r4,r16
 80154a4:	a80b883a 	mov	r5,r21
 80154a8:	a00d883a 	mov	r6,r20
 80154ac:	102d883a 	mov	r22,r2
 80154b0:	8017cb00 	call	8017cb0 <__mdiff>
 80154b4:	1007883a 	mov	r3,r2
 80154b8:	10800317 	ldw	r2,12(r2)
 80154bc:	bc800c04 	addi	r18,r23,48
 80154c0:	1000971e 	bne	r2,zero,8015720 <_dtoa_r+0x1038>
 80154c4:	180b883a 	mov	r5,r3
 80154c8:	e009883a 	mov	r4,fp
 80154cc:	d8c01515 	stw	r3,84(sp)
 80154d0:	8017c500 	call	8017c50 <__mcmp>
 80154d4:	d8c01517 	ldw	r3,84(sp)
 80154d8:	8009883a 	mov	r4,r16
 80154dc:	d8801515 	stw	r2,84(sp)
 80154e0:	180b883a 	mov	r5,r3
 80154e4:	80174240 	call	8017424 <_Bfree>
 80154e8:	d8801517 	ldw	r2,84(sp)
 80154ec:	1000041e 	bne	r2,zero,8015500 <_dtoa_r+0xe18>
 80154f0:	d9800317 	ldw	r6,12(sp)
 80154f4:	3000021e 	bne	r6,zero,8015500 <_dtoa_r+0xe18>
 80154f8:	d8c00617 	ldw	r3,24(sp)
 80154fc:	18007626 	beq	r3,zero,80156d8 <_dtoa_r+0xff0>
 8015500:	b0005b16 	blt	r22,zero,8015670 <_dtoa_r+0xf88>
 8015504:	b000041e 	bne	r22,zero,8015518 <_dtoa_r+0xe30>
 8015508:	d9000317 	ldw	r4,12(sp)
 801550c:	2000021e 	bne	r4,zero,8015518 <_dtoa_r+0xe30>
 8015510:	d8c00617 	ldw	r3,24(sp)
 8015514:	18005626 	beq	r3,zero,8015670 <_dtoa_r+0xf88>
 8015518:	00814d16 	blt	zero,r2,8015a50 <_dtoa_r+0x1368>
 801551c:	d8c00417 	ldw	r3,16(sp)
 8015520:	9d800044 	addi	r22,r19,1
 8015524:	9c800005 	stb	r18,0(r19)
 8015528:	b02f883a 	mov	r23,r22
 801552c:	98c14c26 	beq	r19,r3,8015a60 <_dtoa_r+0x1378>
 8015530:	e00b883a 	mov	r5,fp
 8015534:	8009883a 	mov	r4,r16
 8015538:	01800284 	movi	r6,10
 801553c:	000f883a 	mov	r7,zero
 8015540:	801744c0 	call	801744c <__multadd>
 8015544:	1039883a 	mov	fp,r2
 8015548:	8d006d26 	beq	r17,r20,8015700 <_dtoa_r+0x1018>
 801554c:	880b883a 	mov	r5,r17
 8015550:	01800284 	movi	r6,10
 8015554:	000f883a 	mov	r7,zero
 8015558:	8009883a 	mov	r4,r16
 801555c:	801744c0 	call	801744c <__multadd>
 8015560:	a00b883a 	mov	r5,r20
 8015564:	8009883a 	mov	r4,r16
 8015568:	01800284 	movi	r6,10
 801556c:	000f883a 	mov	r7,zero
 8015570:	1023883a 	mov	r17,r2
 8015574:	801744c0 	call	801744c <__multadd>
 8015578:	1029883a 	mov	r20,r2
 801557c:	b027883a 	mov	r19,r22
 8015580:	003fc006 	br	8015484 <__alt_data_end+0xf8015484>
 8015584:	a005883a 	mov	r2,r20
 8015588:	003ede06 	br	8015104 <__alt_data_end+0xf8015104>
 801558c:	01000044 	movi	r4,1
 8015590:	d9000b15 	stw	r4,44(sp)
 8015594:	d9802217 	ldw	r6,136(sp)
 8015598:	0180dc0e 	bge	zero,r6,801590c <_dtoa_r+0x1224>
 801559c:	3023883a 	mov	r17,r6
 80155a0:	d9800c15 	stw	r6,48(sp)
 80155a4:	d9800615 	stw	r6,24(sp)
 80155a8:	003d1e06 	br	8014a24 <__alt_data_end+0xf8014a24>
 80155ac:	d8800617 	ldw	r2,24(sp)
 80155b0:	00be3716 	blt	zero,r2,8014e90 <__alt_data_end+0xf8014e90>
 80155b4:	1000be1e 	bne	r2,zero,80158b0 <_dtoa_r+0x11c8>
 80155b8:	8809883a 	mov	r4,r17
 80155bc:	a00b883a 	mov	r5,r20
 80155c0:	000d883a 	mov	r6,zero
 80155c4:	01d00534 	movhi	r7,16404
 80155c8:	800ddbc0 	call	800ddbc <__muldf3>
 80155cc:	1009883a 	mov	r4,r2
 80155d0:	180b883a 	mov	r5,r3
 80155d4:	900d883a 	mov	r6,r18
 80155d8:	980f883a 	mov	r7,r19
 80155dc:	800dbfc0 	call	800dbfc <__gedf2>
 80155e0:	002b883a 	mov	r21,zero
 80155e4:	0023883a 	mov	r17,zero
 80155e8:	10007a16 	blt	r2,zero,80157d4 <_dtoa_r+0x10ec>
 80155ec:	d9002217 	ldw	r4,136(sp)
 80155f0:	ddc00717 	ldw	r23,28(sp)
 80155f4:	0108303a 	nor	r4,zero,r4
 80155f8:	d9000515 	stw	r4,20(sp)
 80155fc:	8009883a 	mov	r4,r16
 8015600:	a80b883a 	mov	r5,r21
 8015604:	80174240 	call	8017424 <_Bfree>
 8015608:	883f751e 	bne	r17,zero,80153e0 <__alt_data_end+0xf80153e0>
 801560c:	003de406 	br	8014da0 <__alt_data_end+0xf8014da0>
 8015610:	e00b883a 	mov	r5,fp
 8015614:	8009883a 	mov	r4,r16
 8015618:	80179c00 	call	80179c0 <__pow5mult>
 801561c:	1039883a 	mov	fp,r2
 8015620:	003ed306 	br	8015170 <__alt_data_end+0xf8015170>
 8015624:	903ee01e 	bne	r18,zero,80151a8 <__alt_data_end+0xf80151a8>
 8015628:	00800434 	movhi	r2,16
 801562c:	10bfffc4 	addi	r2,r2,-1
 8015630:	9884703a 	and	r2,r19,r2
 8015634:	103f081e 	bne	r2,zero,8015258 <__alt_data_end+0xf8015258>
 8015638:	9cdffc2c 	andhi	r19,r19,32752
 801563c:	983f0626 	beq	r19,zero,8015258 <__alt_data_end+0xf8015258>
 8015640:	d8800817 	ldw	r2,32(sp)
 8015644:	b5800044 	addi	r22,r22,1
 8015648:	04c00044 	movi	r19,1
 801564c:	10800044 	addi	r2,r2,1
 8015650:	d8800815 	stw	r2,32(sp)
 8015654:	003f0106 	br	801525c <__alt_data_end+0xf801525c>
 8015658:	d9800f17 	ldw	r6,60(sp)
 801565c:	30016826 	beq	r6,zero,8015c00 <_dtoa_r+0x1518>
 8015660:	10810cc4 	addi	r2,r2,1075
 8015664:	dd400917 	ldw	r21,36(sp)
 8015668:	dd000817 	ldw	r20,32(sp)
 801566c:	003e9906 	br	80150d4 <__alt_data_end+0xf80150d4>
 8015670:	9011883a 	mov	r8,r18
 8015674:	4007883a 	mov	r3,r8
 8015678:	e02d883a 	mov	r22,fp
 801567c:	0080100e 	bge	zero,r2,80156c0 <_dtoa_r+0xfd8>
 8015680:	01800044 	movi	r6,1
 8015684:	8009883a 	mov	r4,r16
 8015688:	e00b883a 	mov	r5,fp
 801568c:	da001515 	stw	r8,84(sp)
 8015690:	da001715 	stw	r8,92(sp)
 8015694:	8017b000 	call	8017b00 <__lshift>
 8015698:	1009883a 	mov	r4,r2
 801569c:	a80b883a 	mov	r5,r21
 80156a0:	102d883a 	mov	r22,r2
 80156a4:	8017c500 	call	8017c50 <__mcmp>
 80156a8:	d8c01517 	ldw	r3,84(sp)
 80156ac:	da001717 	ldw	r8,92(sp)
 80156b0:	0081a50e 	bge	zero,r2,8015d48 <_dtoa_r+0x1660>
 80156b4:	00800e44 	movi	r2,57
 80156b8:	40817b26 	beq	r8,r2,8015ca8 <_dtoa_r+0x15c0>
 80156bc:	40c00044 	addi	r3,r8,1
 80156c0:	8825883a 	mov	r18,r17
 80156c4:	9dc00044 	addi	r23,r19,1
 80156c8:	98c00005 	stb	r3,0(r19)
 80156cc:	a023883a 	mov	r17,r20
 80156d0:	b039883a 	mov	fp,r22
 80156d4:	003f3906 	br	80153bc <__alt_data_end+0xf80153bc>
 80156d8:	00800e44 	movi	r2,57
 80156dc:	9011883a 	mov	r8,r18
 80156e0:	90817226 	beq	r18,r2,8015cac <_dtoa_r+0x15c4>
 80156e4:	0580010e 	bge	zero,r22,80156ec <_dtoa_r+0x1004>
 80156e8:	ba000c44 	addi	r8,r23,49
 80156ec:	8825883a 	mov	r18,r17
 80156f0:	9dc00044 	addi	r23,r19,1
 80156f4:	9a000005 	stb	r8,0(r19)
 80156f8:	a023883a 	mov	r17,r20
 80156fc:	003f2f06 	br	80153bc <__alt_data_end+0xf80153bc>
 8015700:	880b883a 	mov	r5,r17
 8015704:	8009883a 	mov	r4,r16
 8015708:	01800284 	movi	r6,10
 801570c:	000f883a 	mov	r7,zero
 8015710:	801744c0 	call	801744c <__multadd>
 8015714:	1023883a 	mov	r17,r2
 8015718:	1029883a 	mov	r20,r2
 801571c:	003f9706 	br	801557c <__alt_data_end+0xf801557c>
 8015720:	8009883a 	mov	r4,r16
 8015724:	180b883a 	mov	r5,r3
 8015728:	80174240 	call	8017424 <_Bfree>
 801572c:	00800044 	movi	r2,1
 8015730:	003f7306 	br	8015500 <__alt_data_end+0xf8015500>
 8015734:	e009883a 	mov	r4,fp
 8015738:	a80b883a 	mov	r5,r21
 801573c:	8017c500 	call	8017c50 <__mcmp>
 8015740:	103ee60e 	bge	r2,zero,80152dc <__alt_data_end+0xf80152dc>
 8015744:	8009883a 	mov	r4,r16
 8015748:	e00b883a 	mov	r5,fp
 801574c:	01800284 	movi	r6,10
 8015750:	000f883a 	mov	r7,zero
 8015754:	801744c0 	call	801744c <__multadd>
 8015758:	d9000517 	ldw	r4,20(sp)
 801575c:	d9800b17 	ldw	r6,44(sp)
 8015760:	1039883a 	mov	fp,r2
 8015764:	213fffc4 	addi	r4,r4,-1
 8015768:	d9000515 	stw	r4,20(sp)
 801576c:	303f2d1e 	bne	r6,zero,8015424 <__alt_data_end+0xf8015424>
 8015770:	d9000c17 	ldw	r4,48(sp)
 8015774:	0101780e 	bge	zero,r4,8015d58 <_dtoa_r+0x1670>
 8015778:	d9000615 	stw	r4,24(sp)
 801577c:	003edb06 	br	80152ec <__alt_data_end+0xf80152ec>
 8015780:	00800084 	movi	r2,2
 8015784:	30818e1e 	bne	r6,r2,8015dc0 <_dtoa_r+0x16d8>
 8015788:	d8000b15 	stw	zero,44(sp)
 801578c:	003f8106 	br	8015594 <__alt_data_end+0xf8015594>
 8015790:	d8800717 	ldw	r2,28(sp)
 8015794:	003c0306 	br	80147a4 <__alt_data_end+0xf80147a4>
 8015798:	d9000317 	ldw	r4,12(sp)
 801579c:	00800084 	movi	r2,2
 80157a0:	113ed00e 	bge	r2,r4,80152e4 <__alt_data_end+0xf80152e4>
 80157a4:	d8c00617 	ldw	r3,24(sp)
 80157a8:	183f901e 	bne	r3,zero,80155ec <__alt_data_end+0xf80155ec>
 80157ac:	a80b883a 	mov	r5,r21
 80157b0:	8009883a 	mov	r4,r16
 80157b4:	01800144 	movi	r6,5
 80157b8:	000f883a 	mov	r7,zero
 80157bc:	801744c0 	call	801744c <__multadd>
 80157c0:	e009883a 	mov	r4,fp
 80157c4:	100b883a 	mov	r5,r2
 80157c8:	102b883a 	mov	r21,r2
 80157cc:	8017c500 	call	8017c50 <__mcmp>
 80157d0:	00bf860e 	bge	zero,r2,80155ec <__alt_data_end+0xf80155ec>
 80157d4:	d9800717 	ldw	r6,28(sp)
 80157d8:	00800c44 	movi	r2,49
 80157dc:	30800005 	stb	r2,0(r6)
 80157e0:	d8800517 	ldw	r2,20(sp)
 80157e4:	35c00044 	addi	r23,r6,1
 80157e8:	10800044 	addi	r2,r2,1
 80157ec:	d8800515 	stw	r2,20(sp)
 80157f0:	003f8206 	br	80155fc <__alt_data_end+0xf80155fc>
 80157f4:	903e981e 	bne	r18,zero,8015258 <__alt_data_end+0xf8015258>
 80157f8:	003f8b06 	br	8015628 <__alt_data_end+0xf8015628>
 80157fc:	d9800517 	ldw	r6,20(sp)
 8015800:	d8c00717 	ldw	r3,28(sp)
 8015804:	00800c44 	movi	r2,49
 8015808:	31800044 	addi	r6,r6,1
 801580c:	d9800515 	stw	r6,20(sp)
 8015810:	18800005 	stb	r2,0(r3)
 8015814:	003ee906 	br	80153bc <__alt_data_end+0xf80153bc>
 8015818:	dc000317 	ldw	r16,12(sp)
 801581c:	003d6006 	br	8014da0 <__alt_data_end+0xf8014da0>
 8015820:	8809883a 	mov	r4,r17
 8015824:	800ee380 	call	800ee38 <__floatsidf>
 8015828:	a009883a 	mov	r4,r20
 801582c:	a80b883a 	mov	r5,r21
 8015830:	100d883a 	mov	r6,r2
 8015834:	180f883a 	mov	r7,r3
 8015838:	800ddbc0 	call	800ddbc <__muldf3>
 801583c:	1009883a 	mov	r4,r2
 8015840:	180b883a 	mov	r5,r3
 8015844:	000d883a 	mov	r6,zero
 8015848:	01d00734 	movhi	r7,16412
 801584c:	800ca100 	call	800ca10 <__adddf3>
 8015850:	1023883a 	mov	r17,r2
 8015854:	00bf3034 	movhi	r2,64704
 8015858:	1885883a 	add	r2,r3,r2
 801585c:	d8800e15 	stw	r2,56(sp)
 8015860:	a009883a 	mov	r4,r20
 8015864:	a80b883a 	mov	r5,r21
 8015868:	000d883a 	mov	r6,zero
 801586c:	01d00534 	movhi	r7,16404
 8015870:	800e4e00 	call	800e4e0 <__subdf3>
 8015874:	d9c00e17 	ldw	r7,56(sp)
 8015878:	1009883a 	mov	r4,r2
 801587c:	180b883a 	mov	r5,r3
 8015880:	880d883a 	mov	r6,r17
 8015884:	102b883a 	mov	r21,r2
 8015888:	1829883a 	mov	r20,r3
 801588c:	800dbfc0 	call	800dbfc <__gedf2>
 8015890:	00807716 	blt	zero,r2,8015a70 <_dtoa_r+0x1388>
 8015894:	d8800e17 	ldw	r2,56(sp)
 8015898:	a809883a 	mov	r4,r21
 801589c:	a00b883a 	mov	r5,r20
 80158a0:	11e0003c 	xorhi	r7,r2,32768
 80158a4:	880d883a 	mov	r6,r17
 80158a8:	800dcdc0 	call	800dcdc <__ledf2>
 80158ac:	103d6b0e 	bge	r2,zero,8014e5c <__alt_data_end+0xf8014e5c>
 80158b0:	002b883a 	mov	r21,zero
 80158b4:	0023883a 	mov	r17,zero
 80158b8:	003f4c06 	br	80155ec <__alt_data_end+0xf80155ec>
 80158bc:	d9800917 	ldw	r6,36(sp)
 80158c0:	e00b883a 	mov	r5,fp
 80158c4:	8009883a 	mov	r4,r16
 80158c8:	80179c00 	call	80179c0 <__pow5mult>
 80158cc:	1039883a 	mov	fp,r2
 80158d0:	003e2706 	br	8015170 <__alt_data_end+0xf8015170>
 80158d4:	d8000b15 	stw	zero,44(sp)
 80158d8:	003c4906 	br	8014a00 <__alt_data_end+0xf8014a00>
 80158dc:	d9000917 	ldw	r4,36(sp)
 80158e0:	d9800a17 	ldw	r6,40(sp)
 80158e4:	dd400915 	stw	r21,36(sp)
 80158e8:	a905c83a 	sub	r2,r21,r4
 80158ec:	308d883a 	add	r6,r6,r2
 80158f0:	d9800a15 	stw	r6,40(sp)
 80158f4:	002b883a 	mov	r21,zero
 80158f8:	003df206 	br	80150c4 <__alt_data_end+0xf80150c4>
 80158fc:	dc800e15 	stw	r18,56(sp)
 8015900:	982b883a 	mov	r21,r19
 8015904:	04400084 	movi	r17,2
 8015908:	003c7406 	br	8014adc <__alt_data_end+0xf8014adc>
 801590c:	04400044 	movi	r17,1
 8015910:	dc400c15 	stw	r17,48(sp)
 8015914:	dc400615 	stw	r17,24(sp)
 8015918:	dc402215 	stw	r17,136(sp)
 801591c:	80001115 	stw	zero,68(r16)
 8015920:	000b883a 	mov	r5,zero
 8015924:	003c4a06 	br	8014a50 <__alt_data_end+0xf8014a50>
 8015928:	3023883a 	mov	r17,r6
 801592c:	003ffb06 	br	801591c <__alt_data_end+0xf801591c>
 8015930:	1000021e 	bne	r2,zero,801593c <_dtoa_r+0x1254>
 8015934:	4200004c 	andi	r8,r8,1
 8015938:	403e8f1e 	bne	r8,zero,8015378 <__alt_data_end+0xf8015378>
 801593c:	01000c04 	movi	r4,48
 8015940:	00000106 	br	8015948 <_dtoa_r+0x1260>
 8015944:	102f883a 	mov	r23,r2
 8015948:	b8bfffc4 	addi	r2,r23,-1
 801594c:	10c00007 	ldb	r3,0(r2)
 8015950:	193ffc26 	beq	r3,r4,8015944 <__alt_data_end+0xf8015944>
 8015954:	003e9906 	br	80153bc <__alt_data_end+0xf80153bc>
 8015958:	d9000517 	ldw	r4,20(sp)
 801595c:	012fc83a 	sub	r23,zero,r4
 8015960:	b800ad26 	beq	r23,zero,8015c18 <_dtoa_r+0x1530>
 8015964:	b88003cc 	andi	r2,r23,15
 8015968:	100490fa 	slli	r2,r2,3
 801596c:	00c205b4 	movhi	r3,2070
 8015970:	18d7fa04 	addi	r3,r3,24552
 8015974:	1885883a 	add	r2,r3,r2
 8015978:	11800017 	ldw	r6,0(r2)
 801597c:	11c00117 	ldw	r7,4(r2)
 8015980:	b82fd13a 	srai	r23,r23,4
 8015984:	9009883a 	mov	r4,r18
 8015988:	980b883a 	mov	r5,r19
 801598c:	800ddbc0 	call	800ddbc <__muldf3>
 8015990:	1029883a 	mov	r20,r2
 8015994:	182b883a 	mov	r21,r3
 8015998:	b800f426 	beq	r23,zero,8015d6c <_dtoa_r+0x1684>
 801599c:	020205b4 	movhi	r8,2070
 80159a0:	4217f004 	addi	r8,r8,24512
 80159a4:	8029883a 	mov	r20,r16
 80159a8:	04400084 	movi	r17,2
 80159ac:	4021883a 	mov	r16,r8
 80159b0:	b980004c 	andi	r6,r23,1
 80159b4:	1009883a 	mov	r4,r2
 80159b8:	b82fd07a 	srai	r23,r23,1
 80159bc:	180b883a 	mov	r5,r3
 80159c0:	30000426 	beq	r6,zero,80159d4 <_dtoa_r+0x12ec>
 80159c4:	81800017 	ldw	r6,0(r16)
 80159c8:	81c00117 	ldw	r7,4(r16)
 80159cc:	8c400044 	addi	r17,r17,1
 80159d0:	800ddbc0 	call	800ddbc <__muldf3>
 80159d4:	84000204 	addi	r16,r16,8
 80159d8:	b83ff51e 	bne	r23,zero,80159b0 <__alt_data_end+0xf80159b0>
 80159dc:	a021883a 	mov	r16,r20
 80159e0:	182b883a 	mov	r21,r3
 80159e4:	1029883a 	mov	r20,r2
 80159e8:	003c5506 	br	8014b40 <__alt_data_end+0xf8014b40>
 80159ec:	d9800517 	ldw	r6,20(sp)
 80159f0:	d9000717 	ldw	r4,28(sp)
 80159f4:	00c00c04 	movi	r3,48
 80159f8:	31800044 	addi	r6,r6,1
 80159fc:	d9800515 	stw	r6,20(sp)
 8015a00:	20c00005 	stb	r3,0(r4)
 8015a04:	02000c44 	movi	r8,49
 8015a08:	003da206 	br	8015094 <__alt_data_end+0xf8015094>
 8015a0c:	89400117 	ldw	r5,4(r17)
 8015a10:	8009883a 	mov	r4,r16
 8015a14:	801737c0 	call	801737c <_Balloc>
 8015a18:	89800417 	ldw	r6,16(r17)
 8015a1c:	11000304 	addi	r4,r2,12
 8015a20:	89400304 	addi	r5,r17,12
 8015a24:	31800084 	addi	r6,r6,2
 8015a28:	318d883a 	add	r6,r6,r6
 8015a2c:	318d883a 	add	r6,r6,r6
 8015a30:	1027883a 	mov	r19,r2
 8015a34:	800fc580 	call	800fc58 <memcpy>
 8015a38:	8009883a 	mov	r4,r16
 8015a3c:	980b883a 	mov	r5,r19
 8015a40:	01800044 	movi	r6,1
 8015a44:	8017b000 	call	8017b00 <__lshift>
 8015a48:	1029883a 	mov	r20,r2
 8015a4c:	003e8606 	br	8015468 <__alt_data_end+0xf8015468>
 8015a50:	00800e44 	movi	r2,57
 8015a54:	90809526 	beq	r18,r2,8015cac <_dtoa_r+0x15c4>
 8015a58:	92000044 	addi	r8,r18,1
 8015a5c:	003f2306 	br	80156ec <__alt_data_end+0xf80156ec>
 8015a60:	9011883a 	mov	r8,r18
 8015a64:	8825883a 	mov	r18,r17
 8015a68:	a023883a 	mov	r17,r20
 8015a6c:	003e3706 	br	801534c <__alt_data_end+0xf801534c>
 8015a70:	002b883a 	mov	r21,zero
 8015a74:	0023883a 	mov	r17,zero
 8015a78:	003f5606 	br	80157d4 <__alt_data_end+0xf80157d4>
 8015a7c:	51bfffc4 	addi	r6,r10,-1
 8015a80:	300490fa 	slli	r2,r6,3
 8015a84:	00c205b4 	movhi	r3,2070
 8015a88:	18d7fa04 	addi	r3,r3,24552
 8015a8c:	1885883a 	add	r2,r3,r2
 8015a90:	d9c00e17 	ldw	r7,56(sp)
 8015a94:	11000017 	ldw	r4,0(r2)
 8015a98:	11400117 	ldw	r5,4(r2)
 8015a9c:	d8800717 	ldw	r2,28(sp)
 8015aa0:	d9801015 	stw	r6,64(sp)
 8015aa4:	880d883a 	mov	r6,r17
 8015aa8:	da801615 	stw	r10,88(sp)
 8015aac:	15c00044 	addi	r23,r2,1
 8015ab0:	800ddbc0 	call	800ddbc <__muldf3>
 8015ab4:	a80b883a 	mov	r5,r21
 8015ab8:	a009883a 	mov	r4,r20
 8015abc:	d8c01115 	stw	r3,68(sp)
 8015ac0:	d8800e15 	stw	r2,56(sp)
 8015ac4:	800edb00 	call	800edb0 <__fixdfsi>
 8015ac8:	1009883a 	mov	r4,r2
 8015acc:	1023883a 	mov	r17,r2
 8015ad0:	800ee380 	call	800ee38 <__floatsidf>
 8015ad4:	a009883a 	mov	r4,r20
 8015ad8:	a80b883a 	mov	r5,r21
 8015adc:	100d883a 	mov	r6,r2
 8015ae0:	180f883a 	mov	r7,r3
 8015ae4:	800e4e00 	call	800e4e0 <__subdf3>
 8015ae8:	1813883a 	mov	r9,r3
 8015aec:	d8c00717 	ldw	r3,28(sp)
 8015af0:	8c400c04 	addi	r17,r17,48
 8015af4:	1011883a 	mov	r8,r2
 8015af8:	1c400005 	stb	r17,0(r3)
 8015afc:	da801617 	ldw	r10,88(sp)
 8015b00:	00800044 	movi	r2,1
 8015b04:	50802326 	beq	r10,r2,8015b94 <_dtoa_r+0x14ac>
 8015b08:	d8800717 	ldw	r2,28(sp)
 8015b0c:	b82b883a 	mov	r21,r23
 8015b10:	dc001315 	stw	r16,76(sp)
 8015b14:	12a9883a 	add	r20,r2,r10
 8015b18:	4807883a 	mov	r3,r9
 8015b1c:	4005883a 	mov	r2,r8
 8015b20:	dc801415 	stw	r18,80(sp)
 8015b24:	000d883a 	mov	r6,zero
 8015b28:	01d00934 	movhi	r7,16420
 8015b2c:	1009883a 	mov	r4,r2
 8015b30:	180b883a 	mov	r5,r3
 8015b34:	800ddbc0 	call	800ddbc <__muldf3>
 8015b38:	180b883a 	mov	r5,r3
 8015b3c:	1009883a 	mov	r4,r2
 8015b40:	1821883a 	mov	r16,r3
 8015b44:	1025883a 	mov	r18,r2
 8015b48:	800edb00 	call	800edb0 <__fixdfsi>
 8015b4c:	1009883a 	mov	r4,r2
 8015b50:	1023883a 	mov	r17,r2
 8015b54:	800ee380 	call	800ee38 <__floatsidf>
 8015b58:	9009883a 	mov	r4,r18
 8015b5c:	800b883a 	mov	r5,r16
 8015b60:	100d883a 	mov	r6,r2
 8015b64:	180f883a 	mov	r7,r3
 8015b68:	8c400c04 	addi	r17,r17,48
 8015b6c:	800e4e00 	call	800e4e0 <__subdf3>
 8015b70:	ad400044 	addi	r21,r21,1
 8015b74:	ac7fffc5 	stb	r17,-1(r21)
 8015b78:	ad3fea1e 	bne	r21,r20,8015b24 <__alt_data_end+0xf8015b24>
 8015b7c:	1813883a 	mov	r9,r3
 8015b80:	d8c01017 	ldw	r3,64(sp)
 8015b84:	dc001317 	ldw	r16,76(sp)
 8015b88:	dc801417 	ldw	r18,80(sp)
 8015b8c:	1011883a 	mov	r8,r2
 8015b90:	b8ef883a 	add	r23,r23,r3
 8015b94:	d9000e17 	ldw	r4,56(sp)
 8015b98:	d9401117 	ldw	r5,68(sp)
 8015b9c:	000d883a 	mov	r6,zero
 8015ba0:	01cff834 	movhi	r7,16352
 8015ba4:	da001715 	stw	r8,92(sp)
 8015ba8:	da401515 	stw	r9,84(sp)
 8015bac:	800ca100 	call	800ca10 <__adddf3>
 8015bb0:	da001717 	ldw	r8,92(sp)
 8015bb4:	da401517 	ldw	r9,84(sp)
 8015bb8:	1009883a 	mov	r4,r2
 8015bbc:	400d883a 	mov	r6,r8
 8015bc0:	480f883a 	mov	r7,r9
 8015bc4:	180b883a 	mov	r5,r3
 8015bc8:	800dcdc0 	call	800dcdc <__ledf2>
 8015bcc:	da001717 	ldw	r8,92(sp)
 8015bd0:	da401517 	ldw	r9,84(sp)
 8015bd4:	10003b0e 	bge	r2,zero,8015cc4 <_dtoa_r+0x15dc>
 8015bd8:	d9001217 	ldw	r4,72(sp)
 8015bdc:	bd7fffc3 	ldbu	r21,-1(r23)
 8015be0:	d9000515 	stw	r4,20(sp)
 8015be4:	003d1c06 	br	8015058 <__alt_data_end+0xf8015058>
 8015be8:	d8c00817 	ldw	r3,32(sp)
 8015bec:	18a9c83a 	sub	r20,r3,r2
 8015bf0:	0005883a 	mov	r2,zero
 8015bf4:	003d3706 	br	80150d4 <__alt_data_end+0xf80150d4>
 8015bf8:	00800044 	movi	r2,1
 8015bfc:	003dd006 	br	8015340 <__alt_data_end+0xf8015340>
 8015c00:	d8c00217 	ldw	r3,8(sp)
 8015c04:	00800d84 	movi	r2,54
 8015c08:	dd400917 	ldw	r21,36(sp)
 8015c0c:	10c5c83a 	sub	r2,r2,r3
 8015c10:	dd000817 	ldw	r20,32(sp)
 8015c14:	003d2f06 	br	80150d4 <__alt_data_end+0xf80150d4>
 8015c18:	9029883a 	mov	r20,r18
 8015c1c:	982b883a 	mov	r21,r19
 8015c20:	04400084 	movi	r17,2
 8015c24:	003bc606 	br	8014b40 <__alt_data_end+0xf8014b40>
 8015c28:	d8800617 	ldw	r2,24(sp)
 8015c2c:	103efc26 	beq	r2,zero,8015820 <__alt_data_end+0xf8015820>
 8015c30:	d8c00c17 	ldw	r3,48(sp)
 8015c34:	00fc890e 	bge	zero,r3,8014e5c <__alt_data_end+0xf8014e5c>
 8015c38:	a80b883a 	mov	r5,r21
 8015c3c:	a009883a 	mov	r4,r20
 8015c40:	000d883a 	mov	r6,zero
 8015c44:	01d00934 	movhi	r7,16420
 8015c48:	800ddbc0 	call	800ddbc <__muldf3>
 8015c4c:	89000044 	addi	r4,r17,1
 8015c50:	1029883a 	mov	r20,r2
 8015c54:	182b883a 	mov	r21,r3
 8015c58:	800ee380 	call	800ee38 <__floatsidf>
 8015c5c:	a009883a 	mov	r4,r20
 8015c60:	a80b883a 	mov	r5,r21
 8015c64:	100d883a 	mov	r6,r2
 8015c68:	180f883a 	mov	r7,r3
 8015c6c:	800ddbc0 	call	800ddbc <__muldf3>
 8015c70:	1009883a 	mov	r4,r2
 8015c74:	180b883a 	mov	r5,r3
 8015c78:	000d883a 	mov	r6,zero
 8015c7c:	01d00734 	movhi	r7,16412
 8015c80:	800ca100 	call	800ca10 <__adddf3>
 8015c84:	d9000517 	ldw	r4,20(sp)
 8015c88:	1023883a 	mov	r17,r2
 8015c8c:	00bf3034 	movhi	r2,64704
 8015c90:	213fffc4 	addi	r4,r4,-1
 8015c94:	1885883a 	add	r2,r3,r2
 8015c98:	d9001215 	stw	r4,72(sp)
 8015c9c:	d8800e15 	stw	r2,56(sp)
 8015ca0:	da800c17 	ldw	r10,48(sp)
 8015ca4:	003bc306 	br	8014bb4 <__alt_data_end+0xf8014bb4>
 8015ca8:	b039883a 	mov	fp,r22
 8015cac:	01000e44 	movi	r4,57
 8015cb0:	8825883a 	mov	r18,r17
 8015cb4:	9dc00044 	addi	r23,r19,1
 8015cb8:	99000005 	stb	r4,0(r19)
 8015cbc:	a023883a 	mov	r17,r20
 8015cc0:	003dae06 	br	801537c <__alt_data_end+0xf801537c>
 8015cc4:	d9800e17 	ldw	r6,56(sp)
 8015cc8:	d9c01117 	ldw	r7,68(sp)
 8015ccc:	0009883a 	mov	r4,zero
 8015cd0:	014ff834 	movhi	r5,16352
 8015cd4:	da001715 	stw	r8,92(sp)
 8015cd8:	da401515 	stw	r9,84(sp)
 8015cdc:	800e4e00 	call	800e4e0 <__subdf3>
 8015ce0:	da001717 	ldw	r8,92(sp)
 8015ce4:	da401517 	ldw	r9,84(sp)
 8015ce8:	1009883a 	mov	r4,r2
 8015cec:	180b883a 	mov	r5,r3
 8015cf0:	400d883a 	mov	r6,r8
 8015cf4:	480f883a 	mov	r7,r9
 8015cf8:	800dbfc0 	call	800dbfc <__gedf2>
 8015cfc:	00bc570e 	bge	zero,r2,8014e5c <__alt_data_end+0xf8014e5c>
 8015d00:	01000c04 	movi	r4,48
 8015d04:	00000106 	br	8015d0c <_dtoa_r+0x1624>
 8015d08:	102f883a 	mov	r23,r2
 8015d0c:	b8bfffc4 	addi	r2,r23,-1
 8015d10:	10c00007 	ldb	r3,0(r2)
 8015d14:	193ffc26 	beq	r3,r4,8015d08 <__alt_data_end+0xf8015d08>
 8015d18:	d9801217 	ldw	r6,72(sp)
 8015d1c:	d9800515 	stw	r6,20(sp)
 8015d20:	003c1f06 	br	8014da0 <__alt_data_end+0xf8014da0>
 8015d24:	d8801217 	ldw	r2,72(sp)
 8015d28:	dc001117 	ldw	r16,68(sp)
 8015d2c:	d8800515 	stw	r2,20(sp)
 8015d30:	003cc906 	br	8015058 <__alt_data_end+0xf8015058>
 8015d34:	dd801317 	ldw	r22,76(sp)
 8015d38:	dc001117 	ldw	r16,68(sp)
 8015d3c:	dcc01417 	ldw	r19,80(sp)
 8015d40:	dc801017 	ldw	r18,64(sp)
 8015d44:	003c4506 	br	8014e5c <__alt_data_end+0xf8014e5c>
 8015d48:	103e5d1e 	bne	r2,zero,80156c0 <__alt_data_end+0xf80156c0>
 8015d4c:	4080004c 	andi	r2,r8,1
 8015d50:	103e5b26 	beq	r2,zero,80156c0 <__alt_data_end+0xf80156c0>
 8015d54:	003e5706 	br	80156b4 <__alt_data_end+0xf80156b4>
 8015d58:	d8c00317 	ldw	r3,12(sp)
 8015d5c:	00800084 	movi	r2,2
 8015d60:	10c00a16 	blt	r2,r3,8015d8c <_dtoa_r+0x16a4>
 8015d64:	d9000c17 	ldw	r4,48(sp)
 8015d68:	003e8306 	br	8015778 <__alt_data_end+0xf8015778>
 8015d6c:	04400084 	movi	r17,2
 8015d70:	003b7306 	br	8014b40 <__alt_data_end+0xf8014b40>
 8015d74:	d9801217 	ldw	r6,72(sp)
 8015d78:	d9800515 	stw	r6,20(sp)
 8015d7c:	003cb606 	br	8015058 <__alt_data_end+0xf8015058>
 8015d80:	d9001217 	ldw	r4,72(sp)
 8015d84:	d9000515 	stw	r4,20(sp)
 8015d88:	003c0506 	br	8014da0 <__alt_data_end+0xf8014da0>
 8015d8c:	d9800c17 	ldw	r6,48(sp)
 8015d90:	d9800615 	stw	r6,24(sp)
 8015d94:	003e8306 	br	80157a4 <__alt_data_end+0xf80157a4>
 8015d98:	d9800317 	ldw	r6,12(sp)
 8015d9c:	00800084 	movi	r2,2
 8015da0:	11800216 	blt	r2,r6,8015dac <_dtoa_r+0x16c4>
 8015da4:	d8800c17 	ldw	r2,48(sp)
 8015da8:	003da606 	br	8015444 <__alt_data_end+0xf8015444>
 8015dac:	d8800c17 	ldw	r2,48(sp)
 8015db0:	d8800615 	stw	r2,24(sp)
 8015db4:	003e7b06 	br	80157a4 <__alt_data_end+0xf80157a4>
 8015db8:	05000044 	movi	r20,1
 8015dbc:	003b0506 	br	80149d4 <__alt_data_end+0xf80149d4>
 8015dc0:	8009883a 	mov	r4,r16
 8015dc4:	80001115 	stw	zero,68(r16)
 8015dc8:	000b883a 	mov	r5,zero
 8015dcc:	801737c0 	call	801737c <_Balloc>
 8015dd0:	d8800715 	stw	r2,28(sp)
 8015dd4:	d8c00717 	ldw	r3,28(sp)
 8015dd8:	00bfffc4 	movi	r2,-1
 8015ddc:	01000044 	movi	r4,1
 8015de0:	d8800c15 	stw	r2,48(sp)
 8015de4:	80c01015 	stw	r3,64(r16)
 8015de8:	d9000b15 	stw	r4,44(sp)
 8015dec:	d8800615 	stw	r2,24(sp)
 8015df0:	d8002215 	stw	zero,136(sp)
 8015df4:	003c1906 	br	8014e5c <__alt_data_end+0xf8014e5c>
 8015df8:	193d2926 	beq	r3,r4,80152a0 <__alt_data_end+0xf80152a0>
 8015dfc:	00c00f04 	movi	r3,60
 8015e00:	1885c83a 	sub	r2,r3,r2
 8015e04:	003d7b06 	br	80153f4 <__alt_data_end+0xf80153f4>
 8015e08:	000b883a 	mov	r5,zero
 8015e0c:	003b1006 	br	8014a50 <__alt_data_end+0xf8014a50>

08015e10 <__sflush_r>:
 8015e10:	2880030b 	ldhu	r2,12(r5)
 8015e14:	defffb04 	addi	sp,sp,-20
 8015e18:	dcc00315 	stw	r19,12(sp)
 8015e1c:	dc400115 	stw	r17,4(sp)
 8015e20:	dfc00415 	stw	ra,16(sp)
 8015e24:	dc800215 	stw	r18,8(sp)
 8015e28:	dc000015 	stw	r16,0(sp)
 8015e2c:	10c0020c 	andi	r3,r2,8
 8015e30:	2823883a 	mov	r17,r5
 8015e34:	2027883a 	mov	r19,r4
 8015e38:	1800311e 	bne	r3,zero,8015f00 <__sflush_r+0xf0>
 8015e3c:	28c00117 	ldw	r3,4(r5)
 8015e40:	10820014 	ori	r2,r2,2048
 8015e44:	2880030d 	sth	r2,12(r5)
 8015e48:	00c04b0e 	bge	zero,r3,8015f78 <__sflush_r+0x168>
 8015e4c:	8a000a17 	ldw	r8,40(r17)
 8015e50:	40002326 	beq	r8,zero,8015ee0 <__sflush_r+0xd0>
 8015e54:	9c000017 	ldw	r16,0(r19)
 8015e58:	10c4000c 	andi	r3,r2,4096
 8015e5c:	98000015 	stw	zero,0(r19)
 8015e60:	18004826 	beq	r3,zero,8015f84 <__sflush_r+0x174>
 8015e64:	89801417 	ldw	r6,80(r17)
 8015e68:	10c0010c 	andi	r3,r2,4
 8015e6c:	18000626 	beq	r3,zero,8015e88 <__sflush_r+0x78>
 8015e70:	88c00117 	ldw	r3,4(r17)
 8015e74:	88800c17 	ldw	r2,48(r17)
 8015e78:	30cdc83a 	sub	r6,r6,r3
 8015e7c:	10000226 	beq	r2,zero,8015e88 <__sflush_r+0x78>
 8015e80:	88800f17 	ldw	r2,60(r17)
 8015e84:	308dc83a 	sub	r6,r6,r2
 8015e88:	89400717 	ldw	r5,28(r17)
 8015e8c:	9809883a 	mov	r4,r19
 8015e90:	000f883a 	mov	r7,zero
 8015e94:	403ee83a 	callr	r8
 8015e98:	00ffffc4 	movi	r3,-1
 8015e9c:	10c04426 	beq	r2,r3,8015fb0 <__sflush_r+0x1a0>
 8015ea0:	88c0030b 	ldhu	r3,12(r17)
 8015ea4:	89000417 	ldw	r4,16(r17)
 8015ea8:	88000115 	stw	zero,4(r17)
 8015eac:	197dffcc 	andi	r5,r3,63487
 8015eb0:	8940030d 	sth	r5,12(r17)
 8015eb4:	89000015 	stw	r4,0(r17)
 8015eb8:	18c4000c 	andi	r3,r3,4096
 8015ebc:	18002c1e 	bne	r3,zero,8015f70 <__sflush_r+0x160>
 8015ec0:	89400c17 	ldw	r5,48(r17)
 8015ec4:	9c000015 	stw	r16,0(r19)
 8015ec8:	28000526 	beq	r5,zero,8015ee0 <__sflush_r+0xd0>
 8015ecc:	88801004 	addi	r2,r17,64
 8015ed0:	28800226 	beq	r5,r2,8015edc <__sflush_r+0xcc>
 8015ed4:	9809883a 	mov	r4,r19
 8015ed8:	80165680 	call	8016568 <_free_r>
 8015edc:	88000c15 	stw	zero,48(r17)
 8015ee0:	0005883a 	mov	r2,zero
 8015ee4:	dfc00417 	ldw	ra,16(sp)
 8015ee8:	dcc00317 	ldw	r19,12(sp)
 8015eec:	dc800217 	ldw	r18,8(sp)
 8015ef0:	dc400117 	ldw	r17,4(sp)
 8015ef4:	dc000017 	ldw	r16,0(sp)
 8015ef8:	dec00504 	addi	sp,sp,20
 8015efc:	f800283a 	ret
 8015f00:	2c800417 	ldw	r18,16(r5)
 8015f04:	903ff626 	beq	r18,zero,8015ee0 <__alt_data_end+0xf8015ee0>
 8015f08:	2c000017 	ldw	r16,0(r5)
 8015f0c:	108000cc 	andi	r2,r2,3
 8015f10:	2c800015 	stw	r18,0(r5)
 8015f14:	84a1c83a 	sub	r16,r16,r18
 8015f18:	1000131e 	bne	r2,zero,8015f68 <__sflush_r+0x158>
 8015f1c:	28800517 	ldw	r2,20(r5)
 8015f20:	88800215 	stw	r2,8(r17)
 8015f24:	04000316 	blt	zero,r16,8015f34 <__sflush_r+0x124>
 8015f28:	003fed06 	br	8015ee0 <__alt_data_end+0xf8015ee0>
 8015f2c:	90a5883a 	add	r18,r18,r2
 8015f30:	043feb0e 	bge	zero,r16,8015ee0 <__alt_data_end+0xf8015ee0>
 8015f34:	88800917 	ldw	r2,36(r17)
 8015f38:	89400717 	ldw	r5,28(r17)
 8015f3c:	800f883a 	mov	r7,r16
 8015f40:	900d883a 	mov	r6,r18
 8015f44:	9809883a 	mov	r4,r19
 8015f48:	103ee83a 	callr	r2
 8015f4c:	80a1c83a 	sub	r16,r16,r2
 8015f50:	00bff616 	blt	zero,r2,8015f2c <__alt_data_end+0xf8015f2c>
 8015f54:	88c0030b 	ldhu	r3,12(r17)
 8015f58:	00bfffc4 	movi	r2,-1
 8015f5c:	18c01014 	ori	r3,r3,64
 8015f60:	88c0030d 	sth	r3,12(r17)
 8015f64:	003fdf06 	br	8015ee4 <__alt_data_end+0xf8015ee4>
 8015f68:	0005883a 	mov	r2,zero
 8015f6c:	003fec06 	br	8015f20 <__alt_data_end+0xf8015f20>
 8015f70:	88801415 	stw	r2,80(r17)
 8015f74:	003fd206 	br	8015ec0 <__alt_data_end+0xf8015ec0>
 8015f78:	28c00f17 	ldw	r3,60(r5)
 8015f7c:	00ffb316 	blt	zero,r3,8015e4c <__alt_data_end+0xf8015e4c>
 8015f80:	003fd706 	br	8015ee0 <__alt_data_end+0xf8015ee0>
 8015f84:	89400717 	ldw	r5,28(r17)
 8015f88:	000d883a 	mov	r6,zero
 8015f8c:	9809883a 	mov	r4,r19
 8015f90:	01c00044 	movi	r7,1
 8015f94:	403ee83a 	callr	r8
 8015f98:	100d883a 	mov	r6,r2
 8015f9c:	00bfffc4 	movi	r2,-1
 8015fa0:	30801426 	beq	r6,r2,8015ff4 <__sflush_r+0x1e4>
 8015fa4:	8880030b 	ldhu	r2,12(r17)
 8015fa8:	8a000a17 	ldw	r8,40(r17)
 8015fac:	003fae06 	br	8015e68 <__alt_data_end+0xf8015e68>
 8015fb0:	98c00017 	ldw	r3,0(r19)
 8015fb4:	183fba26 	beq	r3,zero,8015ea0 <__alt_data_end+0xf8015ea0>
 8015fb8:	01000744 	movi	r4,29
 8015fbc:	19000626 	beq	r3,r4,8015fd8 <__sflush_r+0x1c8>
 8015fc0:	01000584 	movi	r4,22
 8015fc4:	19000426 	beq	r3,r4,8015fd8 <__sflush_r+0x1c8>
 8015fc8:	88c0030b 	ldhu	r3,12(r17)
 8015fcc:	18c01014 	ori	r3,r3,64
 8015fd0:	88c0030d 	sth	r3,12(r17)
 8015fd4:	003fc306 	br	8015ee4 <__alt_data_end+0xf8015ee4>
 8015fd8:	8880030b 	ldhu	r2,12(r17)
 8015fdc:	88c00417 	ldw	r3,16(r17)
 8015fe0:	88000115 	stw	zero,4(r17)
 8015fe4:	10bdffcc 	andi	r2,r2,63487
 8015fe8:	8880030d 	sth	r2,12(r17)
 8015fec:	88c00015 	stw	r3,0(r17)
 8015ff0:	003fb306 	br	8015ec0 <__alt_data_end+0xf8015ec0>
 8015ff4:	98800017 	ldw	r2,0(r19)
 8015ff8:	103fea26 	beq	r2,zero,8015fa4 <__alt_data_end+0xf8015fa4>
 8015ffc:	00c00744 	movi	r3,29
 8016000:	10c00226 	beq	r2,r3,801600c <__sflush_r+0x1fc>
 8016004:	00c00584 	movi	r3,22
 8016008:	10ffd21e 	bne	r2,r3,8015f54 <__alt_data_end+0xf8015f54>
 801600c:	9c000015 	stw	r16,0(r19)
 8016010:	0005883a 	mov	r2,zero
 8016014:	003fb306 	br	8015ee4 <__alt_data_end+0xf8015ee4>

08016018 <_fflush_r>:
 8016018:	defffd04 	addi	sp,sp,-12
 801601c:	dc000115 	stw	r16,4(sp)
 8016020:	dfc00215 	stw	ra,8(sp)
 8016024:	2021883a 	mov	r16,r4
 8016028:	20000226 	beq	r4,zero,8016034 <_fflush_r+0x1c>
 801602c:	20800e17 	ldw	r2,56(r4)
 8016030:	10000c26 	beq	r2,zero,8016064 <_fflush_r+0x4c>
 8016034:	2880030f 	ldh	r2,12(r5)
 8016038:	1000051e 	bne	r2,zero,8016050 <_fflush_r+0x38>
 801603c:	0005883a 	mov	r2,zero
 8016040:	dfc00217 	ldw	ra,8(sp)
 8016044:	dc000117 	ldw	r16,4(sp)
 8016048:	dec00304 	addi	sp,sp,12
 801604c:	f800283a 	ret
 8016050:	8009883a 	mov	r4,r16
 8016054:	dfc00217 	ldw	ra,8(sp)
 8016058:	dc000117 	ldw	r16,4(sp)
 801605c:	dec00304 	addi	sp,sp,12
 8016060:	8015e101 	jmpi	8015e10 <__sflush_r>
 8016064:	d9400015 	stw	r5,0(sp)
 8016068:	80163f40 	call	80163f4 <__sinit>
 801606c:	d9400017 	ldw	r5,0(sp)
 8016070:	003ff006 	br	8016034 <__alt_data_end+0xf8016034>

08016074 <fflush>:
 8016074:	20000526 	beq	r4,zero,801608c <fflush+0x18>
 8016078:	008205f4 	movhi	r2,2071
 801607c:	10a34604 	addi	r2,r2,-29416
 8016080:	200b883a 	mov	r5,r4
 8016084:	11000017 	ldw	r4,0(r2)
 8016088:	80160181 	jmpi	8016018 <_fflush_r>
 801608c:	008205f4 	movhi	r2,2071
 8016090:	10a34504 	addi	r2,r2,-29420
 8016094:	11000017 	ldw	r4,0(r2)
 8016098:	01420074 	movhi	r5,2049
 801609c:	29580604 	addi	r5,r5,24600
 80160a0:	8016ddc1 	jmpi	8016ddc <_fwalk_reent>

080160a4 <__fp_lock>:
 80160a4:	0005883a 	mov	r2,zero
 80160a8:	f800283a 	ret

080160ac <__fp_unlock>:
 80160ac:	0005883a 	mov	r2,zero
 80160b0:	f800283a 	ret

080160b4 <_cleanup_r>:
 80160b4:	014200b4 	movhi	r5,2050
 80160b8:	296cc504 	addi	r5,r5,-19692
 80160bc:	8016ddc1 	jmpi	8016ddc <_fwalk_reent>

080160c0 <__sinit.part.1>:
 80160c0:	defff704 	addi	sp,sp,-36
 80160c4:	00c20074 	movhi	r3,2049
 80160c8:	dfc00815 	stw	ra,32(sp)
 80160cc:	ddc00715 	stw	r23,28(sp)
 80160d0:	dd800615 	stw	r22,24(sp)
 80160d4:	dd400515 	stw	r21,20(sp)
 80160d8:	dd000415 	stw	r20,16(sp)
 80160dc:	dcc00315 	stw	r19,12(sp)
 80160e0:	dc800215 	stw	r18,8(sp)
 80160e4:	dc400115 	stw	r17,4(sp)
 80160e8:	dc000015 	stw	r16,0(sp)
 80160ec:	18d82d04 	addi	r3,r3,24756
 80160f0:	24000117 	ldw	r16,4(r4)
 80160f4:	20c00f15 	stw	r3,60(r4)
 80160f8:	2080bb04 	addi	r2,r4,748
 80160fc:	00c000c4 	movi	r3,3
 8016100:	20c0b915 	stw	r3,740(r4)
 8016104:	2080ba15 	stw	r2,744(r4)
 8016108:	2000b815 	stw	zero,736(r4)
 801610c:	05c00204 	movi	r23,8
 8016110:	00800104 	movi	r2,4
 8016114:	2025883a 	mov	r18,r4
 8016118:	b80d883a 	mov	r6,r23
 801611c:	81001704 	addi	r4,r16,92
 8016120:	000b883a 	mov	r5,zero
 8016124:	80000015 	stw	zero,0(r16)
 8016128:	80000115 	stw	zero,4(r16)
 801612c:	80000215 	stw	zero,8(r16)
 8016130:	8080030d 	sth	r2,12(r16)
 8016134:	80001915 	stw	zero,100(r16)
 8016138:	8000038d 	sth	zero,14(r16)
 801613c:	80000415 	stw	zero,16(r16)
 8016140:	80000515 	stw	zero,20(r16)
 8016144:	80000615 	stw	zero,24(r16)
 8016148:	800fd900 	call	800fd90 <memset>
 801614c:	058200b4 	movhi	r22,2050
 8016150:	94400217 	ldw	r17,8(r18)
 8016154:	054200b4 	movhi	r21,2050
 8016158:	050200b4 	movhi	r20,2050
 801615c:	04c200b4 	movhi	r19,2050
 8016160:	b5a23e04 	addi	r22,r22,-30472
 8016164:	ad625504 	addi	r21,r21,-30380
 8016168:	a5227404 	addi	r20,r20,-30256
 801616c:	9ce28b04 	addi	r19,r19,-30164
 8016170:	85800815 	stw	r22,32(r16)
 8016174:	85400915 	stw	r21,36(r16)
 8016178:	85000a15 	stw	r20,40(r16)
 801617c:	84c00b15 	stw	r19,44(r16)
 8016180:	84000715 	stw	r16,28(r16)
 8016184:	00800284 	movi	r2,10
 8016188:	8880030d 	sth	r2,12(r17)
 801618c:	00800044 	movi	r2,1
 8016190:	89001704 	addi	r4,r17,92
 8016194:	b80d883a 	mov	r6,r23
 8016198:	000b883a 	mov	r5,zero
 801619c:	88000015 	stw	zero,0(r17)
 80161a0:	88000115 	stw	zero,4(r17)
 80161a4:	88000215 	stw	zero,8(r17)
 80161a8:	88001915 	stw	zero,100(r17)
 80161ac:	8880038d 	sth	r2,14(r17)
 80161b0:	88000415 	stw	zero,16(r17)
 80161b4:	88000515 	stw	zero,20(r17)
 80161b8:	88000615 	stw	zero,24(r17)
 80161bc:	800fd900 	call	800fd90 <memset>
 80161c0:	94000317 	ldw	r16,12(r18)
 80161c4:	00800484 	movi	r2,18
 80161c8:	8c400715 	stw	r17,28(r17)
 80161cc:	8d800815 	stw	r22,32(r17)
 80161d0:	8d400915 	stw	r21,36(r17)
 80161d4:	8d000a15 	stw	r20,40(r17)
 80161d8:	8cc00b15 	stw	r19,44(r17)
 80161dc:	8080030d 	sth	r2,12(r16)
 80161e0:	00800084 	movi	r2,2
 80161e4:	80000015 	stw	zero,0(r16)
 80161e8:	80000115 	stw	zero,4(r16)
 80161ec:	80000215 	stw	zero,8(r16)
 80161f0:	80001915 	stw	zero,100(r16)
 80161f4:	8080038d 	sth	r2,14(r16)
 80161f8:	80000415 	stw	zero,16(r16)
 80161fc:	80000515 	stw	zero,20(r16)
 8016200:	80000615 	stw	zero,24(r16)
 8016204:	81001704 	addi	r4,r16,92
 8016208:	000b883a 	mov	r5,zero
 801620c:	b80d883a 	mov	r6,r23
 8016210:	800fd900 	call	800fd90 <memset>
 8016214:	00800044 	movi	r2,1
 8016218:	84000715 	stw	r16,28(r16)
 801621c:	85800815 	stw	r22,32(r16)
 8016220:	85400915 	stw	r21,36(r16)
 8016224:	85000a15 	stw	r20,40(r16)
 8016228:	84c00b15 	stw	r19,44(r16)
 801622c:	90800e15 	stw	r2,56(r18)
 8016230:	dfc00817 	ldw	ra,32(sp)
 8016234:	ddc00717 	ldw	r23,28(sp)
 8016238:	dd800617 	ldw	r22,24(sp)
 801623c:	dd400517 	ldw	r21,20(sp)
 8016240:	dd000417 	ldw	r20,16(sp)
 8016244:	dcc00317 	ldw	r19,12(sp)
 8016248:	dc800217 	ldw	r18,8(sp)
 801624c:	dc400117 	ldw	r17,4(sp)
 8016250:	dc000017 	ldw	r16,0(sp)
 8016254:	dec00904 	addi	sp,sp,36
 8016258:	f800283a 	ret

0801625c <__sfmoreglue>:
 801625c:	defffc04 	addi	sp,sp,-16
 8016260:	dc400115 	stw	r17,4(sp)
 8016264:	2c7fffc4 	addi	r17,r5,-1
 8016268:	8c401a24 	muli	r17,r17,104
 801626c:	dc800215 	stw	r18,8(sp)
 8016270:	2825883a 	mov	r18,r5
 8016274:	89401d04 	addi	r5,r17,116
 8016278:	dc000015 	stw	r16,0(sp)
 801627c:	dfc00315 	stw	ra,12(sp)
 8016280:	800f4b00 	call	800f4b0 <_malloc_r>
 8016284:	1021883a 	mov	r16,r2
 8016288:	10000726 	beq	r2,zero,80162a8 <__sfmoreglue+0x4c>
 801628c:	11000304 	addi	r4,r2,12
 8016290:	10000015 	stw	zero,0(r2)
 8016294:	14800115 	stw	r18,4(r2)
 8016298:	11000215 	stw	r4,8(r2)
 801629c:	000b883a 	mov	r5,zero
 80162a0:	89801a04 	addi	r6,r17,104
 80162a4:	800fd900 	call	800fd90 <memset>
 80162a8:	8005883a 	mov	r2,r16
 80162ac:	dfc00317 	ldw	ra,12(sp)
 80162b0:	dc800217 	ldw	r18,8(sp)
 80162b4:	dc400117 	ldw	r17,4(sp)
 80162b8:	dc000017 	ldw	r16,0(sp)
 80162bc:	dec00404 	addi	sp,sp,16
 80162c0:	f800283a 	ret

080162c4 <__sfp>:
 80162c4:	008205f4 	movhi	r2,2071
 80162c8:	defffb04 	addi	sp,sp,-20
 80162cc:	10a34504 	addi	r2,r2,-29420
 80162d0:	dc800215 	stw	r18,8(sp)
 80162d4:	14800017 	ldw	r18,0(r2)
 80162d8:	dcc00315 	stw	r19,12(sp)
 80162dc:	dfc00415 	stw	ra,16(sp)
 80162e0:	90800e17 	ldw	r2,56(r18)
 80162e4:	dc400115 	stw	r17,4(sp)
 80162e8:	dc000015 	stw	r16,0(sp)
 80162ec:	2027883a 	mov	r19,r4
 80162f0:	1000021e 	bne	r2,zero,80162fc <__sfp+0x38>
 80162f4:	9009883a 	mov	r4,r18
 80162f8:	80160c00 	call	80160c0 <__sinit.part.1>
 80162fc:	9480b804 	addi	r18,r18,736
 8016300:	047fffc4 	movi	r17,-1
 8016304:	91400117 	ldw	r5,4(r18)
 8016308:	94000217 	ldw	r16,8(r18)
 801630c:	297fffc4 	addi	r5,r5,-1
 8016310:	28000a16 	blt	r5,zero,801633c <__sfp+0x78>
 8016314:	8080030f 	ldh	r2,12(r16)
 8016318:	10000c26 	beq	r2,zero,801634c <__sfp+0x88>
 801631c:	80c01d04 	addi	r3,r16,116
 8016320:	00000206 	br	801632c <__sfp+0x68>
 8016324:	18bfe60f 	ldh	r2,-104(r3)
 8016328:	10000826 	beq	r2,zero,801634c <__sfp+0x88>
 801632c:	297fffc4 	addi	r5,r5,-1
 8016330:	1c3ffd04 	addi	r16,r3,-12
 8016334:	18c01a04 	addi	r3,r3,104
 8016338:	2c7ffa1e 	bne	r5,r17,8016324 <__alt_data_end+0xf8016324>
 801633c:	90800017 	ldw	r2,0(r18)
 8016340:	10001d26 	beq	r2,zero,80163b8 <__sfp+0xf4>
 8016344:	1025883a 	mov	r18,r2
 8016348:	003fee06 	br	8016304 <__alt_data_end+0xf8016304>
 801634c:	00bfffc4 	movi	r2,-1
 8016350:	8080038d 	sth	r2,14(r16)
 8016354:	00800044 	movi	r2,1
 8016358:	8080030d 	sth	r2,12(r16)
 801635c:	80001915 	stw	zero,100(r16)
 8016360:	80000015 	stw	zero,0(r16)
 8016364:	80000215 	stw	zero,8(r16)
 8016368:	80000115 	stw	zero,4(r16)
 801636c:	80000415 	stw	zero,16(r16)
 8016370:	80000515 	stw	zero,20(r16)
 8016374:	80000615 	stw	zero,24(r16)
 8016378:	81001704 	addi	r4,r16,92
 801637c:	000b883a 	mov	r5,zero
 8016380:	01800204 	movi	r6,8
 8016384:	800fd900 	call	800fd90 <memset>
 8016388:	8005883a 	mov	r2,r16
 801638c:	80000c15 	stw	zero,48(r16)
 8016390:	80000d15 	stw	zero,52(r16)
 8016394:	80001115 	stw	zero,68(r16)
 8016398:	80001215 	stw	zero,72(r16)
 801639c:	dfc00417 	ldw	ra,16(sp)
 80163a0:	dcc00317 	ldw	r19,12(sp)
 80163a4:	dc800217 	ldw	r18,8(sp)
 80163a8:	dc400117 	ldw	r17,4(sp)
 80163ac:	dc000017 	ldw	r16,0(sp)
 80163b0:	dec00504 	addi	sp,sp,20
 80163b4:	f800283a 	ret
 80163b8:	9809883a 	mov	r4,r19
 80163bc:	01400104 	movi	r5,4
 80163c0:	801625c0 	call	801625c <__sfmoreglue>
 80163c4:	90800015 	stw	r2,0(r18)
 80163c8:	103fde1e 	bne	r2,zero,8016344 <__alt_data_end+0xf8016344>
 80163cc:	00800304 	movi	r2,12
 80163d0:	98800015 	stw	r2,0(r19)
 80163d4:	0005883a 	mov	r2,zero
 80163d8:	003ff006 	br	801639c <__alt_data_end+0xf801639c>

080163dc <_cleanup>:
 80163dc:	008205f4 	movhi	r2,2071
 80163e0:	10a34504 	addi	r2,r2,-29420
 80163e4:	11000017 	ldw	r4,0(r2)
 80163e8:	014200b4 	movhi	r5,2050
 80163ec:	296cc504 	addi	r5,r5,-19692
 80163f0:	8016ddc1 	jmpi	8016ddc <_fwalk_reent>

080163f4 <__sinit>:
 80163f4:	20800e17 	ldw	r2,56(r4)
 80163f8:	10000126 	beq	r2,zero,8016400 <__sinit+0xc>
 80163fc:	f800283a 	ret
 8016400:	80160c01 	jmpi	80160c0 <__sinit.part.1>

08016404 <__sfp_lock_acquire>:
 8016404:	f800283a 	ret

08016408 <__sfp_lock_release>:
 8016408:	f800283a 	ret

0801640c <__sinit_lock_acquire>:
 801640c:	f800283a 	ret

08016410 <__sinit_lock_release>:
 8016410:	f800283a 	ret

08016414 <__fp_lock_all>:
 8016414:	008205f4 	movhi	r2,2071
 8016418:	10a34604 	addi	r2,r2,-29416
 801641c:	11000017 	ldw	r4,0(r2)
 8016420:	01420074 	movhi	r5,2049
 8016424:	29582904 	addi	r5,r5,24740
 8016428:	8016d181 	jmpi	8016d18 <_fwalk>

0801642c <__fp_unlock_all>:
 801642c:	008205f4 	movhi	r2,2071
 8016430:	10a34604 	addi	r2,r2,-29416
 8016434:	11000017 	ldw	r4,0(r2)
 8016438:	01420074 	movhi	r5,2049
 801643c:	29582b04 	addi	r5,r5,24748
 8016440:	8016d181 	jmpi	8016d18 <_fwalk>

08016444 <_malloc_trim_r>:
 8016444:	defffb04 	addi	sp,sp,-20
 8016448:	dcc00315 	stw	r19,12(sp)
 801644c:	04c205b4 	movhi	r19,2070
 8016450:	dc800215 	stw	r18,8(sp)
 8016454:	dc400115 	stw	r17,4(sp)
 8016458:	dc000015 	stw	r16,0(sp)
 801645c:	dfc00415 	stw	ra,16(sp)
 8016460:	2821883a 	mov	r16,r5
 8016464:	9cdc8b04 	addi	r19,r19,29228
 8016468:	2025883a 	mov	r18,r4
 801646c:	801ce800 	call	801ce80 <__malloc_lock>
 8016470:	98800217 	ldw	r2,8(r19)
 8016474:	14400117 	ldw	r17,4(r2)
 8016478:	00bfff04 	movi	r2,-4
 801647c:	88a2703a 	and	r17,r17,r2
 8016480:	8c21c83a 	sub	r16,r17,r16
 8016484:	8403fbc4 	addi	r16,r16,4079
 8016488:	8020d33a 	srli	r16,r16,12
 801648c:	0083ffc4 	movi	r2,4095
 8016490:	843fffc4 	addi	r16,r16,-1
 8016494:	8020933a 	slli	r16,r16,12
 8016498:	1400060e 	bge	r2,r16,80164b4 <_malloc_trim_r+0x70>
 801649c:	9009883a 	mov	r4,r18
 80164a0:	000b883a 	mov	r5,zero
 80164a4:	800ffd80 	call	800ffd8 <_sbrk_r>
 80164a8:	98c00217 	ldw	r3,8(r19)
 80164ac:	1c47883a 	add	r3,r3,r17
 80164b0:	10c00a26 	beq	r2,r3,80164dc <_malloc_trim_r+0x98>
 80164b4:	9009883a 	mov	r4,r18
 80164b8:	801cea40 	call	801cea4 <__malloc_unlock>
 80164bc:	0005883a 	mov	r2,zero
 80164c0:	dfc00417 	ldw	ra,16(sp)
 80164c4:	dcc00317 	ldw	r19,12(sp)
 80164c8:	dc800217 	ldw	r18,8(sp)
 80164cc:	dc400117 	ldw	r17,4(sp)
 80164d0:	dc000017 	ldw	r16,0(sp)
 80164d4:	dec00504 	addi	sp,sp,20
 80164d8:	f800283a 	ret
 80164dc:	9009883a 	mov	r4,r18
 80164e0:	040bc83a 	sub	r5,zero,r16
 80164e4:	800ffd80 	call	800ffd8 <_sbrk_r>
 80164e8:	00ffffc4 	movi	r3,-1
 80164ec:	10c00d26 	beq	r2,r3,8016524 <_malloc_trim_r+0xe0>
 80164f0:	00c205f4 	movhi	r3,2071
 80164f4:	18ee7404 	addi	r3,r3,-17968
 80164f8:	18800017 	ldw	r2,0(r3)
 80164fc:	99000217 	ldw	r4,8(r19)
 8016500:	8c23c83a 	sub	r17,r17,r16
 8016504:	8c400054 	ori	r17,r17,1
 8016508:	1421c83a 	sub	r16,r2,r16
 801650c:	24400115 	stw	r17,4(r4)
 8016510:	9009883a 	mov	r4,r18
 8016514:	1c000015 	stw	r16,0(r3)
 8016518:	801cea40 	call	801cea4 <__malloc_unlock>
 801651c:	00800044 	movi	r2,1
 8016520:	003fe706 	br	80164c0 <__alt_data_end+0xf80164c0>
 8016524:	9009883a 	mov	r4,r18
 8016528:	000b883a 	mov	r5,zero
 801652c:	800ffd80 	call	800ffd8 <_sbrk_r>
 8016530:	99000217 	ldw	r4,8(r19)
 8016534:	014003c4 	movi	r5,15
 8016538:	1107c83a 	sub	r3,r2,r4
 801653c:	28ffdd0e 	bge	r5,r3,80164b4 <__alt_data_end+0xf80164b4>
 8016540:	014205f4 	movhi	r5,2071
 8016544:	29634304 	addi	r5,r5,-29428
 8016548:	29400017 	ldw	r5,0(r5)
 801654c:	18c00054 	ori	r3,r3,1
 8016550:	20c00115 	stw	r3,4(r4)
 8016554:	00c205f4 	movhi	r3,2071
 8016558:	1145c83a 	sub	r2,r2,r5
 801655c:	18ee7404 	addi	r3,r3,-17968
 8016560:	18800015 	stw	r2,0(r3)
 8016564:	003fd306 	br	80164b4 <__alt_data_end+0xf80164b4>

08016568 <_free_r>:
 8016568:	28004c26 	beq	r5,zero,801669c <_free_r+0x134>
 801656c:	defffd04 	addi	sp,sp,-12
 8016570:	dc400115 	stw	r17,4(sp)
 8016574:	dc000015 	stw	r16,0(sp)
 8016578:	2023883a 	mov	r17,r4
 801657c:	2821883a 	mov	r16,r5
 8016580:	dfc00215 	stw	ra,8(sp)
 8016584:	801ce800 	call	801ce80 <__malloc_lock>
 8016588:	813fff17 	ldw	r4,-4(r16)
 801658c:	00bfff84 	movi	r2,-2
 8016590:	024205b4 	movhi	r9,2070
 8016594:	81bffe04 	addi	r6,r16,-8
 8016598:	2084703a 	and	r2,r4,r2
 801659c:	4a5c8b04 	addi	r9,r9,29228
 80165a0:	308b883a 	add	r5,r6,r2
 80165a4:	2a000117 	ldw	r8,4(r5)
 80165a8:	49c00217 	ldw	r7,8(r9)
 80165ac:	00ffff04 	movi	r3,-4
 80165b0:	40c6703a 	and	r3,r8,r3
 80165b4:	39405326 	beq	r7,r5,8016704 <_free_r+0x19c>
 80165b8:	28c00115 	stw	r3,4(r5)
 80165bc:	2100004c 	andi	r4,r4,1
 80165c0:	2000091e 	bne	r4,zero,80165e8 <_free_r+0x80>
 80165c4:	81fffe17 	ldw	r7,-8(r16)
 80165c8:	4a000204 	addi	r8,r9,8
 80165cc:	31cdc83a 	sub	r6,r6,r7
 80165d0:	31000217 	ldw	r4,8(r6)
 80165d4:	11c5883a 	add	r2,r2,r7
 80165d8:	22006126 	beq	r4,r8,8016760 <_free_r+0x1f8>
 80165dc:	31c00317 	ldw	r7,12(r6)
 80165e0:	21c00315 	stw	r7,12(r4)
 80165e4:	39000215 	stw	r4,8(r7)
 80165e8:	28c9883a 	add	r4,r5,r3
 80165ec:	21c00117 	ldw	r7,4(r4)
 80165f0:	39c0004c 	andi	r7,r7,1
 80165f4:	38000d1e 	bne	r7,zero,801662c <_free_r+0xc4>
 80165f8:	29000217 	ldw	r4,8(r5)
 80165fc:	10c5883a 	add	r2,r2,r3
 8016600:	00c205b4 	movhi	r3,2070
 8016604:	18dc8d04 	addi	r3,r3,29236
 8016608:	20c07526 	beq	r4,r3,80167e0 <_free_r+0x278>
 801660c:	29c00317 	ldw	r7,12(r5)
 8016610:	11400054 	ori	r5,r2,1
 8016614:	3087883a 	add	r3,r6,r2
 8016618:	21c00315 	stw	r7,12(r4)
 801661c:	39000215 	stw	r4,8(r7)
 8016620:	31400115 	stw	r5,4(r6)
 8016624:	18800015 	stw	r2,0(r3)
 8016628:	00000406 	br	801663c <_free_r+0xd4>
 801662c:	10c00054 	ori	r3,r2,1
 8016630:	30c00115 	stw	r3,4(r6)
 8016634:	3087883a 	add	r3,r6,r2
 8016638:	18800015 	stw	r2,0(r3)
 801663c:	00c07fc4 	movi	r3,511
 8016640:	18801736 	bltu	r3,r2,80166a0 <_free_r+0x138>
 8016644:	1004d0fa 	srli	r2,r2,3
 8016648:	01400044 	movi	r5,1
 801664c:	49000117 	ldw	r4,4(r9)
 8016650:	1087883a 	add	r3,r2,r2
 8016654:	18c7883a 	add	r3,r3,r3
 8016658:	1005d0ba 	srai	r2,r2,2
 801665c:	18c7883a 	add	r3,r3,r3
 8016660:	1a47883a 	add	r3,r3,r9
 8016664:	19c00217 	ldw	r7,8(r3)
 8016668:	2884983a 	sll	r2,r5,r2
 801666c:	30c00315 	stw	r3,12(r6)
 8016670:	31c00215 	stw	r7,8(r6)
 8016674:	1104b03a 	or	r2,r2,r4
 8016678:	19800215 	stw	r6,8(r3)
 801667c:	48800115 	stw	r2,4(r9)
 8016680:	39800315 	stw	r6,12(r7)
 8016684:	8809883a 	mov	r4,r17
 8016688:	dfc00217 	ldw	ra,8(sp)
 801668c:	dc400117 	ldw	r17,4(sp)
 8016690:	dc000017 	ldw	r16,0(sp)
 8016694:	dec00304 	addi	sp,sp,12
 8016698:	801cea41 	jmpi	801cea4 <__malloc_unlock>
 801669c:	f800283a 	ret
 80166a0:	1006d27a 	srli	r3,r2,9
 80166a4:	01000104 	movi	r4,4
 80166a8:	20c04036 	bltu	r4,r3,80167ac <_free_r+0x244>
 80166ac:	1006d1ba 	srli	r3,r2,6
 80166b0:	19400e04 	addi	r5,r3,56
 80166b4:	2947883a 	add	r3,r5,r5
 80166b8:	18c7883a 	add	r3,r3,r3
 80166bc:	18c7883a 	add	r3,r3,r3
 80166c0:	1a49883a 	add	r4,r3,r9
 80166c4:	20c00217 	ldw	r3,8(r4)
 80166c8:	01c205b4 	movhi	r7,2070
 80166cc:	39dc8b04 	addi	r7,r7,29228
 80166d0:	19003b26 	beq	r3,r4,80167c0 <_free_r+0x258>
 80166d4:	01ffff04 	movi	r7,-4
 80166d8:	19400117 	ldw	r5,4(r3)
 80166dc:	29ca703a 	and	r5,r5,r7
 80166e0:	1140022e 	bgeu	r2,r5,80166ec <_free_r+0x184>
 80166e4:	18c00217 	ldw	r3,8(r3)
 80166e8:	20fffb1e 	bne	r4,r3,80166d8 <__alt_data_end+0xf80166d8>
 80166ec:	18800317 	ldw	r2,12(r3)
 80166f0:	30800315 	stw	r2,12(r6)
 80166f4:	30c00215 	stw	r3,8(r6)
 80166f8:	11800215 	stw	r6,8(r2)
 80166fc:	19800315 	stw	r6,12(r3)
 8016700:	003fe006 	br	8016684 <__alt_data_end+0xf8016684>
 8016704:	2100004c 	andi	r4,r4,1
 8016708:	1885883a 	add	r2,r3,r2
 801670c:	2000071e 	bne	r4,zero,801672c <_free_r+0x1c4>
 8016710:	817ffe17 	ldw	r5,-8(r16)
 8016714:	314dc83a 	sub	r6,r6,r5
 8016718:	30c00317 	ldw	r3,12(r6)
 801671c:	31000217 	ldw	r4,8(r6)
 8016720:	1145883a 	add	r2,r2,r5
 8016724:	20c00315 	stw	r3,12(r4)
 8016728:	19000215 	stw	r4,8(r3)
 801672c:	10c00054 	ori	r3,r2,1
 8016730:	30c00115 	stw	r3,4(r6)
 8016734:	00c205f4 	movhi	r3,2071
 8016738:	18e34404 	addi	r3,r3,-29424
 801673c:	18c00017 	ldw	r3,0(r3)
 8016740:	49800215 	stw	r6,8(r9)
 8016744:	10ffcf36 	bltu	r2,r3,8016684 <__alt_data_end+0xf8016684>
 8016748:	008205f4 	movhi	r2,2071
 801674c:	10ae6804 	addi	r2,r2,-18016
 8016750:	11400017 	ldw	r5,0(r2)
 8016754:	8809883a 	mov	r4,r17
 8016758:	80164440 	call	8016444 <_malloc_trim_r>
 801675c:	003fc906 	br	8016684 <__alt_data_end+0xf8016684>
 8016760:	28c9883a 	add	r4,r5,r3
 8016764:	21000117 	ldw	r4,4(r4)
 8016768:	2100004c 	andi	r4,r4,1
 801676c:	20000a1e 	bne	r4,zero,8016798 <_free_r+0x230>
 8016770:	29000317 	ldw	r4,12(r5)
 8016774:	29400217 	ldw	r5,8(r5)
 8016778:	10c5883a 	add	r2,r2,r3
 801677c:	10c00054 	ori	r3,r2,1
 8016780:	29000315 	stw	r4,12(r5)
 8016784:	21400215 	stw	r5,8(r4)
 8016788:	30c00115 	stw	r3,4(r6)
 801678c:	308d883a 	add	r6,r6,r2
 8016790:	30800015 	stw	r2,0(r6)
 8016794:	003fbb06 	br	8016684 <__alt_data_end+0xf8016684>
 8016798:	10c00054 	ori	r3,r2,1
 801679c:	30c00115 	stw	r3,4(r6)
 80167a0:	308d883a 	add	r6,r6,r2
 80167a4:	30800015 	stw	r2,0(r6)
 80167a8:	003fb606 	br	8016684 <__alt_data_end+0xf8016684>
 80167ac:	01000504 	movi	r4,20
 80167b0:	20c01436 	bltu	r4,r3,8016804 <_free_r+0x29c>
 80167b4:	194016c4 	addi	r5,r3,91
 80167b8:	2947883a 	add	r3,r5,r5
 80167bc:	003fbe06 	br	80166b8 <__alt_data_end+0xf80166b8>
 80167c0:	280bd0ba 	srai	r5,r5,2
 80167c4:	00800044 	movi	r2,1
 80167c8:	39000117 	ldw	r4,4(r7)
 80167cc:	114a983a 	sll	r5,r2,r5
 80167d0:	1805883a 	mov	r2,r3
 80167d4:	2908b03a 	or	r4,r5,r4
 80167d8:	39000115 	stw	r4,4(r7)
 80167dc:	003fc406 	br	80166f0 <__alt_data_end+0xf80166f0>
 80167e0:	49800515 	stw	r6,20(r9)
 80167e4:	49800415 	stw	r6,16(r9)
 80167e8:	10c00054 	ori	r3,r2,1
 80167ec:	31000315 	stw	r4,12(r6)
 80167f0:	31000215 	stw	r4,8(r6)
 80167f4:	30c00115 	stw	r3,4(r6)
 80167f8:	308d883a 	add	r6,r6,r2
 80167fc:	30800015 	stw	r2,0(r6)
 8016800:	003fa006 	br	8016684 <__alt_data_end+0xf8016684>
 8016804:	01001504 	movi	r4,84
 8016808:	20c00436 	bltu	r4,r3,801681c <_free_r+0x2b4>
 801680c:	1006d33a 	srli	r3,r2,12
 8016810:	19401b84 	addi	r5,r3,110
 8016814:	2947883a 	add	r3,r5,r5
 8016818:	003fa706 	br	80166b8 <__alt_data_end+0xf80166b8>
 801681c:	01005504 	movi	r4,340
 8016820:	20c00436 	bltu	r4,r3,8016834 <_free_r+0x2cc>
 8016824:	1006d3fa 	srli	r3,r2,15
 8016828:	19401dc4 	addi	r5,r3,119
 801682c:	2947883a 	add	r3,r5,r5
 8016830:	003fa106 	br	80166b8 <__alt_data_end+0xf80166b8>
 8016834:	01015504 	movi	r4,1364
 8016838:	20c00436 	bltu	r4,r3,801684c <_free_r+0x2e4>
 801683c:	1006d4ba 	srli	r3,r2,18
 8016840:	19401f04 	addi	r5,r3,124
 8016844:	2947883a 	add	r3,r5,r5
 8016848:	003f9b06 	br	80166b8 <__alt_data_end+0xf80166b8>
 801684c:	00c03f04 	movi	r3,252
 8016850:	01401f84 	movi	r5,126
 8016854:	003f9806 	br	80166b8 <__alt_data_end+0xf80166b8>

08016858 <__sfvwrite_r>:
 8016858:	30800217 	ldw	r2,8(r6)
 801685c:	10006726 	beq	r2,zero,80169fc <__sfvwrite_r+0x1a4>
 8016860:	defff404 	addi	sp,sp,-48
 8016864:	dd000615 	stw	r20,24(sp)
 8016868:	2029883a 	mov	r20,r4
 801686c:	2900030b 	ldhu	r4,12(r5)
 8016870:	ddc00915 	stw	r23,36(sp)
 8016874:	dc000215 	stw	r16,8(sp)
 8016878:	dfc00b15 	stw	ra,44(sp)
 801687c:	df000a15 	stw	fp,40(sp)
 8016880:	dd800815 	stw	r22,32(sp)
 8016884:	dd400715 	stw	r21,28(sp)
 8016888:	dcc00515 	stw	r19,20(sp)
 801688c:	dc800415 	stw	r18,16(sp)
 8016890:	dc400315 	stw	r17,12(sp)
 8016894:	2080020c 	andi	r2,r4,8
 8016898:	2821883a 	mov	r16,r5
 801689c:	302f883a 	mov	r23,r6
 80168a0:	10002726 	beq	r2,zero,8016940 <__sfvwrite_r+0xe8>
 80168a4:	28800417 	ldw	r2,16(r5)
 80168a8:	10002526 	beq	r2,zero,8016940 <__sfvwrite_r+0xe8>
 80168ac:	2080008c 	andi	r2,r4,2
 80168b0:	bc400017 	ldw	r17,0(r23)
 80168b4:	10002a26 	beq	r2,zero,8016960 <__sfvwrite_r+0x108>
 80168b8:	05600034 	movhi	r21,32768
 80168bc:	0027883a 	mov	r19,zero
 80168c0:	0025883a 	mov	r18,zero
 80168c4:	ad7f0004 	addi	r21,r21,-1024
 80168c8:	980d883a 	mov	r6,r19
 80168cc:	a009883a 	mov	r4,r20
 80168d0:	90004626 	beq	r18,zero,80169ec <__sfvwrite_r+0x194>
 80168d4:	900f883a 	mov	r7,r18
 80168d8:	81400717 	ldw	r5,28(r16)
 80168dc:	ac80022e 	bgeu	r21,r18,80168e8 <__sfvwrite_r+0x90>
 80168e0:	01e00034 	movhi	r7,32768
 80168e4:	39ff0004 	addi	r7,r7,-1024
 80168e8:	80800917 	ldw	r2,36(r16)
 80168ec:	103ee83a 	callr	r2
 80168f0:	0080520e 	bge	zero,r2,8016a3c <__sfvwrite_r+0x1e4>
 80168f4:	b8c00217 	ldw	r3,8(r23)
 80168f8:	98a7883a 	add	r19,r19,r2
 80168fc:	90a5c83a 	sub	r18,r18,r2
 8016900:	1885c83a 	sub	r2,r3,r2
 8016904:	b8800215 	stw	r2,8(r23)
 8016908:	103fef1e 	bne	r2,zero,80168c8 <__alt_data_end+0xf80168c8>
 801690c:	0005883a 	mov	r2,zero
 8016910:	dfc00b17 	ldw	ra,44(sp)
 8016914:	df000a17 	ldw	fp,40(sp)
 8016918:	ddc00917 	ldw	r23,36(sp)
 801691c:	dd800817 	ldw	r22,32(sp)
 8016920:	dd400717 	ldw	r21,28(sp)
 8016924:	dd000617 	ldw	r20,24(sp)
 8016928:	dcc00517 	ldw	r19,20(sp)
 801692c:	dc800417 	ldw	r18,16(sp)
 8016930:	dc400317 	ldw	r17,12(sp)
 8016934:	dc000217 	ldw	r16,8(sp)
 8016938:	dec00c04 	addi	sp,sp,48
 801693c:	f800283a 	ret
 8016940:	a009883a 	mov	r4,r20
 8016944:	800b883a 	mov	r5,r16
 8016948:	80143940 	call	8014394 <__swsetup_r>
 801694c:	1000ec1e 	bne	r2,zero,8016d00 <__sfvwrite_r+0x4a8>
 8016950:	8100030b 	ldhu	r4,12(r16)
 8016954:	bc400017 	ldw	r17,0(r23)
 8016958:	2080008c 	andi	r2,r4,2
 801695c:	103fd61e 	bne	r2,zero,80168b8 <__alt_data_end+0xf80168b8>
 8016960:	2080004c 	andi	r2,r4,1
 8016964:	10003a1e 	bne	r2,zero,8016a50 <__sfvwrite_r+0x1f8>
 8016968:	0039883a 	mov	fp,zero
 801696c:	0025883a 	mov	r18,zero
 8016970:	90001a26 	beq	r18,zero,80169dc <__sfvwrite_r+0x184>
 8016974:	2080800c 	andi	r2,r4,512
 8016978:	85800217 	ldw	r22,8(r16)
 801697c:	10007626 	beq	r2,zero,8016b58 <__sfvwrite_r+0x300>
 8016980:	b027883a 	mov	r19,r22
 8016984:	95809436 	bltu	r18,r22,8016bd8 <__sfvwrite_r+0x380>
 8016988:	2081200c 	andi	r2,r4,1152
 801698c:	10009f1e 	bne	r2,zero,8016c0c <__sfvwrite_r+0x3b4>
 8016990:	81000017 	ldw	r4,0(r16)
 8016994:	e00b883a 	mov	r5,fp
 8016998:	980d883a 	mov	r6,r19
 801699c:	80172200 	call	8017220 <memmove>
 80169a0:	81000217 	ldw	r4,8(r16)
 80169a4:	81400017 	ldw	r5,0(r16)
 80169a8:	9005883a 	mov	r2,r18
 80169ac:	2587c83a 	sub	r3,r4,r22
 80169b0:	2ce7883a 	add	r19,r5,r19
 80169b4:	80c00215 	stw	r3,8(r16)
 80169b8:	84c00015 	stw	r19,0(r16)
 80169bc:	b8c00217 	ldw	r3,8(r23)
 80169c0:	e0b9883a 	add	fp,fp,r2
 80169c4:	90a5c83a 	sub	r18,r18,r2
 80169c8:	1885c83a 	sub	r2,r3,r2
 80169cc:	b8800215 	stw	r2,8(r23)
 80169d0:	103fce26 	beq	r2,zero,801690c <__alt_data_end+0xf801690c>
 80169d4:	8100030b 	ldhu	r4,12(r16)
 80169d8:	903fe61e 	bne	r18,zero,8016974 <__alt_data_end+0xf8016974>
 80169dc:	8f000017 	ldw	fp,0(r17)
 80169e0:	8c800117 	ldw	r18,4(r17)
 80169e4:	8c400204 	addi	r17,r17,8
 80169e8:	003fe106 	br	8016970 <__alt_data_end+0xf8016970>
 80169ec:	8cc00017 	ldw	r19,0(r17)
 80169f0:	8c800117 	ldw	r18,4(r17)
 80169f4:	8c400204 	addi	r17,r17,8
 80169f8:	003fb306 	br	80168c8 <__alt_data_end+0xf80168c8>
 80169fc:	0005883a 	mov	r2,zero
 8016a00:	f800283a 	ret
 8016a04:	00a00034 	movhi	r2,32768
 8016a08:	10bfffc4 	addi	r2,r2,-1
 8016a0c:	9009883a 	mov	r4,r18
 8016a10:	1480012e 	bgeu	r2,r18,8016a18 <__sfvwrite_r+0x1c0>
 8016a14:	1009883a 	mov	r4,r2
 8016a18:	980b883a 	mov	r5,r19
 8016a1c:	800c9500 	call	800c950 <__divsi3>
 8016a20:	81400717 	ldw	r5,28(r16)
 8016a24:	80c00917 	ldw	r3,36(r16)
 8016a28:	988f383a 	mul	r7,r19,r2
 8016a2c:	a009883a 	mov	r4,r20
 8016a30:	e00d883a 	mov	r6,fp
 8016a34:	183ee83a 	callr	r3
 8016a38:	00bfe016 	blt	zero,r2,80169bc <__alt_data_end+0xf80169bc>
 8016a3c:	8080030b 	ldhu	r2,12(r16)
 8016a40:	10801014 	ori	r2,r2,64
 8016a44:	8080030d 	sth	r2,12(r16)
 8016a48:	00bfffc4 	movi	r2,-1
 8016a4c:	003fb006 	br	8016910 <__alt_data_end+0xf8016910>
 8016a50:	0027883a 	mov	r19,zero
 8016a54:	0011883a 	mov	r8,zero
 8016a58:	0039883a 	mov	fp,zero
 8016a5c:	0025883a 	mov	r18,zero
 8016a60:	90001f26 	beq	r18,zero,8016ae0 <__sfvwrite_r+0x288>
 8016a64:	40006026 	beq	r8,zero,8016be8 <__sfvwrite_r+0x390>
 8016a68:	982b883a 	mov	r21,r19
 8016a6c:	94c0012e 	bgeu	r18,r19,8016a74 <__sfvwrite_r+0x21c>
 8016a70:	902b883a 	mov	r21,r18
 8016a74:	81000017 	ldw	r4,0(r16)
 8016a78:	80800417 	ldw	r2,16(r16)
 8016a7c:	a82d883a 	mov	r22,r21
 8016a80:	81800217 	ldw	r6,8(r16)
 8016a84:	81c00517 	ldw	r7,20(r16)
 8016a88:	1100022e 	bgeu	r2,r4,8016a94 <__sfvwrite_r+0x23c>
 8016a8c:	31c7883a 	add	r3,r6,r7
 8016a90:	1d401816 	blt	r3,r21,8016af4 <__sfvwrite_r+0x29c>
 8016a94:	a9c04416 	blt	r21,r7,8016ba8 <__sfvwrite_r+0x350>
 8016a98:	80800917 	ldw	r2,36(r16)
 8016a9c:	81400717 	ldw	r5,28(r16)
 8016aa0:	a009883a 	mov	r4,r20
 8016aa4:	da000115 	stw	r8,4(sp)
 8016aa8:	e00d883a 	mov	r6,fp
 8016aac:	103ee83a 	callr	r2
 8016ab0:	102d883a 	mov	r22,r2
 8016ab4:	da000117 	ldw	r8,4(sp)
 8016ab8:	00bfe00e 	bge	zero,r2,8016a3c <__alt_data_end+0xf8016a3c>
 8016abc:	9da7c83a 	sub	r19,r19,r22
 8016ac0:	98001f26 	beq	r19,zero,8016b40 <__sfvwrite_r+0x2e8>
 8016ac4:	b8800217 	ldw	r2,8(r23)
 8016ac8:	e5b9883a 	add	fp,fp,r22
 8016acc:	95a5c83a 	sub	r18,r18,r22
 8016ad0:	15adc83a 	sub	r22,r2,r22
 8016ad4:	bd800215 	stw	r22,8(r23)
 8016ad8:	b03f8c26 	beq	r22,zero,801690c <__alt_data_end+0xf801690c>
 8016adc:	903fe11e 	bne	r18,zero,8016a64 <__alt_data_end+0xf8016a64>
 8016ae0:	8f000017 	ldw	fp,0(r17)
 8016ae4:	8c800117 	ldw	r18,4(r17)
 8016ae8:	0011883a 	mov	r8,zero
 8016aec:	8c400204 	addi	r17,r17,8
 8016af0:	003fdb06 	br	8016a60 <__alt_data_end+0xf8016a60>
 8016af4:	180d883a 	mov	r6,r3
 8016af8:	e00b883a 	mov	r5,fp
 8016afc:	da000115 	stw	r8,4(sp)
 8016b00:	d8c00015 	stw	r3,0(sp)
 8016b04:	80172200 	call	8017220 <memmove>
 8016b08:	d8c00017 	ldw	r3,0(sp)
 8016b0c:	80800017 	ldw	r2,0(r16)
 8016b10:	a009883a 	mov	r4,r20
 8016b14:	800b883a 	mov	r5,r16
 8016b18:	10c5883a 	add	r2,r2,r3
 8016b1c:	80800015 	stw	r2,0(r16)
 8016b20:	d8c00015 	stw	r3,0(sp)
 8016b24:	80160180 	call	8016018 <_fflush_r>
 8016b28:	d8c00017 	ldw	r3,0(sp)
 8016b2c:	da000117 	ldw	r8,4(sp)
 8016b30:	103fc21e 	bne	r2,zero,8016a3c <__alt_data_end+0xf8016a3c>
 8016b34:	182d883a 	mov	r22,r3
 8016b38:	9da7c83a 	sub	r19,r19,r22
 8016b3c:	983fe11e 	bne	r19,zero,8016ac4 <__alt_data_end+0xf8016ac4>
 8016b40:	a009883a 	mov	r4,r20
 8016b44:	800b883a 	mov	r5,r16
 8016b48:	80160180 	call	8016018 <_fflush_r>
 8016b4c:	103fbb1e 	bne	r2,zero,8016a3c <__alt_data_end+0xf8016a3c>
 8016b50:	0011883a 	mov	r8,zero
 8016b54:	003fdb06 	br	8016ac4 <__alt_data_end+0xf8016ac4>
 8016b58:	81000017 	ldw	r4,0(r16)
 8016b5c:	80800417 	ldw	r2,16(r16)
 8016b60:	11000236 	bltu	r2,r4,8016b6c <__sfvwrite_r+0x314>
 8016b64:	84c00517 	ldw	r19,20(r16)
 8016b68:	94ffa62e 	bgeu	r18,r19,8016a04 <__alt_data_end+0xf8016a04>
 8016b6c:	9027883a 	mov	r19,r18
 8016b70:	b480012e 	bgeu	r22,r18,8016b78 <__sfvwrite_r+0x320>
 8016b74:	b027883a 	mov	r19,r22
 8016b78:	e00b883a 	mov	r5,fp
 8016b7c:	980d883a 	mov	r6,r19
 8016b80:	80172200 	call	8017220 <memmove>
 8016b84:	80800217 	ldw	r2,8(r16)
 8016b88:	80c00017 	ldw	r3,0(r16)
 8016b8c:	14c5c83a 	sub	r2,r2,r19
 8016b90:	1cc7883a 	add	r3,r3,r19
 8016b94:	80800215 	stw	r2,8(r16)
 8016b98:	80c00015 	stw	r3,0(r16)
 8016b9c:	10004326 	beq	r2,zero,8016cac <__sfvwrite_r+0x454>
 8016ba0:	9805883a 	mov	r2,r19
 8016ba4:	003f8506 	br	80169bc <__alt_data_end+0xf80169bc>
 8016ba8:	a80d883a 	mov	r6,r21
 8016bac:	e00b883a 	mov	r5,fp
 8016bb0:	da000115 	stw	r8,4(sp)
 8016bb4:	80172200 	call	8017220 <memmove>
 8016bb8:	80800217 	ldw	r2,8(r16)
 8016bbc:	80c00017 	ldw	r3,0(r16)
 8016bc0:	da000117 	ldw	r8,4(sp)
 8016bc4:	1545c83a 	sub	r2,r2,r21
 8016bc8:	1d6b883a 	add	r21,r3,r21
 8016bcc:	80800215 	stw	r2,8(r16)
 8016bd0:	85400015 	stw	r21,0(r16)
 8016bd4:	003fb906 	br	8016abc <__alt_data_end+0xf8016abc>
 8016bd8:	81000017 	ldw	r4,0(r16)
 8016bdc:	902d883a 	mov	r22,r18
 8016be0:	9027883a 	mov	r19,r18
 8016be4:	003f6b06 	br	8016994 <__alt_data_end+0xf8016994>
 8016be8:	e009883a 	mov	r4,fp
 8016bec:	01400284 	movi	r5,10
 8016bf0:	900d883a 	mov	r6,r18
 8016bf4:	80171380 	call	8017138 <memchr>
 8016bf8:	10003e26 	beq	r2,zero,8016cf4 <__sfvwrite_r+0x49c>
 8016bfc:	10800044 	addi	r2,r2,1
 8016c00:	1727c83a 	sub	r19,r2,fp
 8016c04:	02000044 	movi	r8,1
 8016c08:	003f9706 	br	8016a68 <__alt_data_end+0xf8016a68>
 8016c0c:	80800517 	ldw	r2,20(r16)
 8016c10:	81400417 	ldw	r5,16(r16)
 8016c14:	80c00017 	ldw	r3,0(r16)
 8016c18:	10a7883a 	add	r19,r2,r2
 8016c1c:	9885883a 	add	r2,r19,r2
 8016c20:	1026d7fa 	srli	r19,r2,31
 8016c24:	196bc83a 	sub	r21,r3,r5
 8016c28:	a9800044 	addi	r6,r21,1
 8016c2c:	9885883a 	add	r2,r19,r2
 8016c30:	1027d07a 	srai	r19,r2,1
 8016c34:	3485883a 	add	r2,r6,r18
 8016c38:	980d883a 	mov	r6,r19
 8016c3c:	9880022e 	bgeu	r19,r2,8016c48 <__sfvwrite_r+0x3f0>
 8016c40:	1027883a 	mov	r19,r2
 8016c44:	100d883a 	mov	r6,r2
 8016c48:	2101000c 	andi	r4,r4,1024
 8016c4c:	20001c26 	beq	r4,zero,8016cc0 <__sfvwrite_r+0x468>
 8016c50:	a009883a 	mov	r4,r20
 8016c54:	300b883a 	mov	r5,r6
 8016c58:	800f4b00 	call	800f4b0 <_malloc_r>
 8016c5c:	102d883a 	mov	r22,r2
 8016c60:	10002926 	beq	r2,zero,8016d08 <__sfvwrite_r+0x4b0>
 8016c64:	81400417 	ldw	r5,16(r16)
 8016c68:	1009883a 	mov	r4,r2
 8016c6c:	a80d883a 	mov	r6,r21
 8016c70:	800fc580 	call	800fc58 <memcpy>
 8016c74:	8080030b 	ldhu	r2,12(r16)
 8016c78:	00fedfc4 	movi	r3,-1153
 8016c7c:	10c4703a 	and	r2,r2,r3
 8016c80:	10802014 	ori	r2,r2,128
 8016c84:	8080030d 	sth	r2,12(r16)
 8016c88:	b549883a 	add	r4,r22,r21
 8016c8c:	9d4bc83a 	sub	r5,r19,r21
 8016c90:	85800415 	stw	r22,16(r16)
 8016c94:	84c00515 	stw	r19,20(r16)
 8016c98:	81000015 	stw	r4,0(r16)
 8016c9c:	902d883a 	mov	r22,r18
 8016ca0:	81400215 	stw	r5,8(r16)
 8016ca4:	9027883a 	mov	r19,r18
 8016ca8:	003f3a06 	br	8016994 <__alt_data_end+0xf8016994>
 8016cac:	a009883a 	mov	r4,r20
 8016cb0:	800b883a 	mov	r5,r16
 8016cb4:	80160180 	call	8016018 <_fflush_r>
 8016cb8:	103fb926 	beq	r2,zero,8016ba0 <__alt_data_end+0xf8016ba0>
 8016cbc:	003f5f06 	br	8016a3c <__alt_data_end+0xf8016a3c>
 8016cc0:	a009883a 	mov	r4,r20
 8016cc4:	801831c0 	call	801831c <_realloc_r>
 8016cc8:	102d883a 	mov	r22,r2
 8016ccc:	103fee1e 	bne	r2,zero,8016c88 <__alt_data_end+0xf8016c88>
 8016cd0:	81400417 	ldw	r5,16(r16)
 8016cd4:	a009883a 	mov	r4,r20
 8016cd8:	80165680 	call	8016568 <_free_r>
 8016cdc:	8080030b 	ldhu	r2,12(r16)
 8016ce0:	00ffdfc4 	movi	r3,-129
 8016ce4:	1884703a 	and	r2,r3,r2
 8016ce8:	00c00304 	movi	r3,12
 8016cec:	a0c00015 	stw	r3,0(r20)
 8016cf0:	003f5306 	br	8016a40 <__alt_data_end+0xf8016a40>
 8016cf4:	94c00044 	addi	r19,r18,1
 8016cf8:	02000044 	movi	r8,1
 8016cfc:	003f5a06 	br	8016a68 <__alt_data_end+0xf8016a68>
 8016d00:	00bfffc4 	movi	r2,-1
 8016d04:	003f0206 	br	8016910 <__alt_data_end+0xf8016910>
 8016d08:	00800304 	movi	r2,12
 8016d0c:	a0800015 	stw	r2,0(r20)
 8016d10:	8080030b 	ldhu	r2,12(r16)
 8016d14:	003f4a06 	br	8016a40 <__alt_data_end+0xf8016a40>

08016d18 <_fwalk>:
 8016d18:	defff704 	addi	sp,sp,-36
 8016d1c:	dd000415 	stw	r20,16(sp)
 8016d20:	dfc00815 	stw	ra,32(sp)
 8016d24:	ddc00715 	stw	r23,28(sp)
 8016d28:	dd800615 	stw	r22,24(sp)
 8016d2c:	dd400515 	stw	r21,20(sp)
 8016d30:	dcc00315 	stw	r19,12(sp)
 8016d34:	dc800215 	stw	r18,8(sp)
 8016d38:	dc400115 	stw	r17,4(sp)
 8016d3c:	dc000015 	stw	r16,0(sp)
 8016d40:	2500b804 	addi	r20,r4,736
 8016d44:	a0002326 	beq	r20,zero,8016dd4 <_fwalk+0xbc>
 8016d48:	282b883a 	mov	r21,r5
 8016d4c:	002f883a 	mov	r23,zero
 8016d50:	05800044 	movi	r22,1
 8016d54:	04ffffc4 	movi	r19,-1
 8016d58:	a4400117 	ldw	r17,4(r20)
 8016d5c:	a4800217 	ldw	r18,8(r20)
 8016d60:	8c7fffc4 	addi	r17,r17,-1
 8016d64:	88000d16 	blt	r17,zero,8016d9c <_fwalk+0x84>
 8016d68:	94000304 	addi	r16,r18,12
 8016d6c:	94800384 	addi	r18,r18,14
 8016d70:	80c0000b 	ldhu	r3,0(r16)
 8016d74:	8c7fffc4 	addi	r17,r17,-1
 8016d78:	813ffd04 	addi	r4,r16,-12
 8016d7c:	b0c0042e 	bgeu	r22,r3,8016d90 <_fwalk+0x78>
 8016d80:	90c0000f 	ldh	r3,0(r18)
 8016d84:	1cc00226 	beq	r3,r19,8016d90 <_fwalk+0x78>
 8016d88:	a83ee83a 	callr	r21
 8016d8c:	b8aeb03a 	or	r23,r23,r2
 8016d90:	84001a04 	addi	r16,r16,104
 8016d94:	94801a04 	addi	r18,r18,104
 8016d98:	8cfff51e 	bne	r17,r19,8016d70 <__alt_data_end+0xf8016d70>
 8016d9c:	a5000017 	ldw	r20,0(r20)
 8016da0:	a03fed1e 	bne	r20,zero,8016d58 <__alt_data_end+0xf8016d58>
 8016da4:	b805883a 	mov	r2,r23
 8016da8:	dfc00817 	ldw	ra,32(sp)
 8016dac:	ddc00717 	ldw	r23,28(sp)
 8016db0:	dd800617 	ldw	r22,24(sp)
 8016db4:	dd400517 	ldw	r21,20(sp)
 8016db8:	dd000417 	ldw	r20,16(sp)
 8016dbc:	dcc00317 	ldw	r19,12(sp)
 8016dc0:	dc800217 	ldw	r18,8(sp)
 8016dc4:	dc400117 	ldw	r17,4(sp)
 8016dc8:	dc000017 	ldw	r16,0(sp)
 8016dcc:	dec00904 	addi	sp,sp,36
 8016dd0:	f800283a 	ret
 8016dd4:	002f883a 	mov	r23,zero
 8016dd8:	003ff206 	br	8016da4 <__alt_data_end+0xf8016da4>

08016ddc <_fwalk_reent>:
 8016ddc:	defff704 	addi	sp,sp,-36
 8016de0:	dd400515 	stw	r21,20(sp)
 8016de4:	dfc00815 	stw	ra,32(sp)
 8016de8:	ddc00715 	stw	r23,28(sp)
 8016dec:	dd800615 	stw	r22,24(sp)
 8016df0:	dd000415 	stw	r20,16(sp)
 8016df4:	dcc00315 	stw	r19,12(sp)
 8016df8:	dc800215 	stw	r18,8(sp)
 8016dfc:	dc400115 	stw	r17,4(sp)
 8016e00:	dc000015 	stw	r16,0(sp)
 8016e04:	2540b804 	addi	r21,r4,736
 8016e08:	a8002326 	beq	r21,zero,8016e98 <_fwalk_reent+0xbc>
 8016e0c:	2829883a 	mov	r20,r5
 8016e10:	202d883a 	mov	r22,r4
 8016e14:	002f883a 	mov	r23,zero
 8016e18:	04c00044 	movi	r19,1
 8016e1c:	04bfffc4 	movi	r18,-1
 8016e20:	ac400117 	ldw	r17,4(r21)
 8016e24:	ac000217 	ldw	r16,8(r21)
 8016e28:	8c7fffc4 	addi	r17,r17,-1
 8016e2c:	88000c16 	blt	r17,zero,8016e60 <_fwalk_reent+0x84>
 8016e30:	84000304 	addi	r16,r16,12
 8016e34:	80c0000b 	ldhu	r3,0(r16)
 8016e38:	8c7fffc4 	addi	r17,r17,-1
 8016e3c:	817ffd04 	addi	r5,r16,-12
 8016e40:	98c0052e 	bgeu	r19,r3,8016e58 <_fwalk_reent+0x7c>
 8016e44:	80c0008f 	ldh	r3,2(r16)
 8016e48:	b009883a 	mov	r4,r22
 8016e4c:	1c800226 	beq	r3,r18,8016e58 <_fwalk_reent+0x7c>
 8016e50:	a03ee83a 	callr	r20
 8016e54:	b8aeb03a 	or	r23,r23,r2
 8016e58:	84001a04 	addi	r16,r16,104
 8016e5c:	8cbff51e 	bne	r17,r18,8016e34 <__alt_data_end+0xf8016e34>
 8016e60:	ad400017 	ldw	r21,0(r21)
 8016e64:	a83fee1e 	bne	r21,zero,8016e20 <__alt_data_end+0xf8016e20>
 8016e68:	b805883a 	mov	r2,r23
 8016e6c:	dfc00817 	ldw	ra,32(sp)
 8016e70:	ddc00717 	ldw	r23,28(sp)
 8016e74:	dd800617 	ldw	r22,24(sp)
 8016e78:	dd400517 	ldw	r21,20(sp)
 8016e7c:	dd000417 	ldw	r20,16(sp)
 8016e80:	dcc00317 	ldw	r19,12(sp)
 8016e84:	dc800217 	ldw	r18,8(sp)
 8016e88:	dc400117 	ldw	r17,4(sp)
 8016e8c:	dc000017 	ldw	r16,0(sp)
 8016e90:	dec00904 	addi	sp,sp,36
 8016e94:	f800283a 	ret
 8016e98:	002f883a 	mov	r23,zero
 8016e9c:	003ff206 	br	8016e68 <__alt_data_end+0xf8016e68>

08016ea0 <_setlocale_r>:
 8016ea0:	30001b26 	beq	r6,zero,8016f10 <_setlocale_r+0x70>
 8016ea4:	014205b4 	movhi	r5,2070
 8016ea8:	defffe04 	addi	sp,sp,-8
 8016eac:	2957e004 	addi	r5,r5,24448
 8016eb0:	3009883a 	mov	r4,r6
 8016eb4:	dc000015 	stw	r16,0(sp)
 8016eb8:	dfc00115 	stw	ra,4(sp)
 8016ebc:	3021883a 	mov	r16,r6
 8016ec0:	8018a340 	call	8018a34 <strcmp>
 8016ec4:	1000061e 	bne	r2,zero,8016ee0 <_setlocale_r+0x40>
 8016ec8:	008205b4 	movhi	r2,2070
 8016ecc:	1097df04 	addi	r2,r2,24444
 8016ed0:	dfc00117 	ldw	ra,4(sp)
 8016ed4:	dc000017 	ldw	r16,0(sp)
 8016ed8:	dec00204 	addi	sp,sp,8
 8016edc:	f800283a 	ret
 8016ee0:	014205b4 	movhi	r5,2070
 8016ee4:	2957df04 	addi	r5,r5,24444
 8016ee8:	8009883a 	mov	r4,r16
 8016eec:	8018a340 	call	8018a34 <strcmp>
 8016ef0:	103ff526 	beq	r2,zero,8016ec8 <__alt_data_end+0xf8016ec8>
 8016ef4:	014205b4 	movhi	r5,2070
 8016ef8:	2957c204 	addi	r5,r5,24328
 8016efc:	8009883a 	mov	r4,r16
 8016f00:	8018a340 	call	8018a34 <strcmp>
 8016f04:	103ff026 	beq	r2,zero,8016ec8 <__alt_data_end+0xf8016ec8>
 8016f08:	0005883a 	mov	r2,zero
 8016f0c:	003ff006 	br	8016ed0 <__alt_data_end+0xf8016ed0>
 8016f10:	008205b4 	movhi	r2,2070
 8016f14:	1097df04 	addi	r2,r2,24444
 8016f18:	f800283a 	ret

08016f1c <__locale_charset>:
 8016f1c:	008205b4 	movhi	r2,2070
 8016f20:	109e9e04 	addi	r2,r2,31352
 8016f24:	f800283a 	ret

08016f28 <__locale_mb_cur_max>:
 8016f28:	008205f4 	movhi	r2,2071
 8016f2c:	10a34704 	addi	r2,r2,-29412
 8016f30:	10800017 	ldw	r2,0(r2)
 8016f34:	f800283a 	ret

08016f38 <__locale_msgcharset>:
 8016f38:	008205b4 	movhi	r2,2070
 8016f3c:	109e9604 	addi	r2,r2,31320
 8016f40:	f800283a 	ret

08016f44 <__locale_cjk_lang>:
 8016f44:	0005883a 	mov	r2,zero
 8016f48:	f800283a 	ret

08016f4c <_localeconv_r>:
 8016f4c:	008205b4 	movhi	r2,2070
 8016f50:	109ea604 	addi	r2,r2,31384
 8016f54:	f800283a 	ret

08016f58 <setlocale>:
 8016f58:	00c205f4 	movhi	r3,2071
 8016f5c:	18e34604 	addi	r3,r3,-29416
 8016f60:	2005883a 	mov	r2,r4
 8016f64:	19000017 	ldw	r4,0(r3)
 8016f68:	280d883a 	mov	r6,r5
 8016f6c:	100b883a 	mov	r5,r2
 8016f70:	8016ea01 	jmpi	8016ea0 <_setlocale_r>

08016f74 <localeconv>:
 8016f74:	008205b4 	movhi	r2,2070
 8016f78:	109ea604 	addi	r2,r2,31384
 8016f7c:	f800283a 	ret

08016f80 <__smakebuf_r>:
 8016f80:	2880030b 	ldhu	r2,12(r5)
 8016f84:	10c0008c 	andi	r3,r2,2
 8016f88:	1800401e 	bne	r3,zero,801708c <__smakebuf_r+0x10c>
 8016f8c:	deffec04 	addi	sp,sp,-80
 8016f90:	dc000f15 	stw	r16,60(sp)
 8016f94:	2821883a 	mov	r16,r5
 8016f98:	2940038f 	ldh	r5,14(r5)
 8016f9c:	dc401015 	stw	r17,64(sp)
 8016fa0:	dfc01315 	stw	ra,76(sp)
 8016fa4:	dcc01215 	stw	r19,72(sp)
 8016fa8:	dc801115 	stw	r18,68(sp)
 8016fac:	2023883a 	mov	r17,r4
 8016fb0:	28001b16 	blt	r5,zero,8017020 <__smakebuf_r+0xa0>
 8016fb4:	d80d883a 	mov	r6,sp
 8016fb8:	801b5f80 	call	801b5f8 <_fstat_r>
 8016fbc:	10001716 	blt	r2,zero,801701c <__smakebuf_r+0x9c>
 8016fc0:	d8800117 	ldw	r2,4(sp)
 8016fc4:	00e00014 	movui	r3,32768
 8016fc8:	10bc000c 	andi	r2,r2,61440
 8016fcc:	10c03726 	beq	r2,r3,80170ac <__smakebuf_r+0x12c>
 8016fd0:	80c0030b 	ldhu	r3,12(r16)
 8016fd4:	18c20014 	ori	r3,r3,2048
 8016fd8:	80c0030d 	sth	r3,12(r16)
 8016fdc:	00c80004 	movi	r3,8192
 8016fe0:	10c03c1e 	bne	r2,r3,80170d4 <__smakebuf_r+0x154>
 8016fe4:	8140038f 	ldh	r5,14(r16)
 8016fe8:	8809883a 	mov	r4,r17
 8016fec:	801b6500 	call	801b650 <_isatty_r>
 8016ff0:	10004e26 	beq	r2,zero,801712c <__smakebuf_r+0x1ac>
 8016ff4:	8080030b 	ldhu	r2,12(r16)
 8016ff8:	04c00044 	movi	r19,1
 8016ffc:	80c010c4 	addi	r3,r16,67
 8017000:	14c4b03a 	or	r2,r2,r19
 8017004:	8080030d 	sth	r2,12(r16)
 8017008:	80c00015 	stw	r3,0(r16)
 801700c:	80c00415 	stw	r3,16(r16)
 8017010:	84c00515 	stw	r19,20(r16)
 8017014:	04810004 	movi	r18,1024
 8017018:	00000706 	br	8017038 <__smakebuf_r+0xb8>
 801701c:	8080030b 	ldhu	r2,12(r16)
 8017020:	10c0200c 	andi	r3,r2,128
 8017024:	18001f1e 	bne	r3,zero,80170a4 <__smakebuf_r+0x124>
 8017028:	04810004 	movi	r18,1024
 801702c:	10820014 	ori	r2,r2,2048
 8017030:	8080030d 	sth	r2,12(r16)
 8017034:	0027883a 	mov	r19,zero
 8017038:	8809883a 	mov	r4,r17
 801703c:	900b883a 	mov	r5,r18
 8017040:	800f4b00 	call	800f4b0 <_malloc_r>
 8017044:	10002e26 	beq	r2,zero,8017100 <__smakebuf_r+0x180>
 8017048:	80c0030b 	ldhu	r3,12(r16)
 801704c:	01020074 	movhi	r4,2049
 8017050:	21182d04 	addi	r4,r4,24756
 8017054:	89000f15 	stw	r4,60(r17)
 8017058:	18c02014 	ori	r3,r3,128
 801705c:	80c0030d 	sth	r3,12(r16)
 8017060:	80800015 	stw	r2,0(r16)
 8017064:	80800415 	stw	r2,16(r16)
 8017068:	84800515 	stw	r18,20(r16)
 801706c:	98001c1e 	bne	r19,zero,80170e0 <__smakebuf_r+0x160>
 8017070:	dfc01317 	ldw	ra,76(sp)
 8017074:	dcc01217 	ldw	r19,72(sp)
 8017078:	dc801117 	ldw	r18,68(sp)
 801707c:	dc401017 	ldw	r17,64(sp)
 8017080:	dc000f17 	ldw	r16,60(sp)
 8017084:	dec01404 	addi	sp,sp,80
 8017088:	f800283a 	ret
 801708c:	288010c4 	addi	r2,r5,67
 8017090:	28800015 	stw	r2,0(r5)
 8017094:	28800415 	stw	r2,16(r5)
 8017098:	00800044 	movi	r2,1
 801709c:	28800515 	stw	r2,20(r5)
 80170a0:	f800283a 	ret
 80170a4:	04801004 	movi	r18,64
 80170a8:	003fe006 	br	801702c <__alt_data_end+0xf801702c>
 80170ac:	81000a17 	ldw	r4,40(r16)
 80170b0:	00c200b4 	movhi	r3,2050
 80170b4:	18e27404 	addi	r3,r3,-30256
 80170b8:	20ffc51e 	bne	r4,r3,8016fd0 <__alt_data_end+0xf8016fd0>
 80170bc:	80c0030b 	ldhu	r3,12(r16)
 80170c0:	01010004 	movi	r4,1024
 80170c4:	81001315 	stw	r4,76(r16)
 80170c8:	1906b03a 	or	r3,r3,r4
 80170cc:	80c0030d 	sth	r3,12(r16)
 80170d0:	003fc206 	br	8016fdc <__alt_data_end+0xf8016fdc>
 80170d4:	0027883a 	mov	r19,zero
 80170d8:	04810004 	movi	r18,1024
 80170dc:	003fd606 	br	8017038 <__alt_data_end+0xf8017038>
 80170e0:	8140038f 	ldh	r5,14(r16)
 80170e4:	8809883a 	mov	r4,r17
 80170e8:	801b6500 	call	801b650 <_isatty_r>
 80170ec:	103fe026 	beq	r2,zero,8017070 <__alt_data_end+0xf8017070>
 80170f0:	8080030b 	ldhu	r2,12(r16)
 80170f4:	10800054 	ori	r2,r2,1
 80170f8:	8080030d 	sth	r2,12(r16)
 80170fc:	003fdc06 	br	8017070 <__alt_data_end+0xf8017070>
 8017100:	8080030b 	ldhu	r2,12(r16)
 8017104:	10c0800c 	andi	r3,r2,512
 8017108:	183fd91e 	bne	r3,zero,8017070 <__alt_data_end+0xf8017070>
 801710c:	10800094 	ori	r2,r2,2
 8017110:	80c010c4 	addi	r3,r16,67
 8017114:	8080030d 	sth	r2,12(r16)
 8017118:	00800044 	movi	r2,1
 801711c:	80c00015 	stw	r3,0(r16)
 8017120:	80c00415 	stw	r3,16(r16)
 8017124:	80800515 	stw	r2,20(r16)
 8017128:	003fd106 	br	8017070 <__alt_data_end+0xf8017070>
 801712c:	04c00044 	movi	r19,1
 8017130:	04810004 	movi	r18,1024
 8017134:	003fc006 	br	8017038 <__alt_data_end+0xf8017038>

08017138 <memchr>:
 8017138:	208000cc 	andi	r2,r4,3
 801713c:	280f883a 	mov	r7,r5
 8017140:	10003526 	beq	r2,zero,8017218 <memchr+0xe0>
 8017144:	30bfffc4 	addi	r2,r6,-1
 8017148:	30001b26 	beq	r6,zero,80171b8 <memchr+0x80>
 801714c:	21800003 	ldbu	r6,0(r4)
 8017150:	28c03fcc 	andi	r3,r5,255
 8017154:	30c01a26 	beq	r6,r3,80171c0 <memchr+0x88>
 8017158:	180d883a 	mov	r6,r3
 801715c:	00000406 	br	8017170 <memchr+0x38>
 8017160:	10001526 	beq	r2,zero,80171b8 <memchr+0x80>
 8017164:	20c00003 	ldbu	r3,0(r4)
 8017168:	10bfffc4 	addi	r2,r2,-1
 801716c:	19801426 	beq	r3,r6,80171c0 <memchr+0x88>
 8017170:	21000044 	addi	r4,r4,1
 8017174:	20c000cc 	andi	r3,r4,3
 8017178:	183ff91e 	bne	r3,zero,8017160 <__alt_data_end+0xf8017160>
 801717c:	024000c4 	movi	r9,3
 8017180:	48801136 	bltu	r9,r2,80171c8 <memchr+0x90>
 8017184:	10000c26 	beq	r2,zero,80171b8 <memchr+0x80>
 8017188:	20c00003 	ldbu	r3,0(r4)
 801718c:	29403fcc 	andi	r5,r5,255
 8017190:	19400b26 	beq	r3,r5,80171c0 <memchr+0x88>
 8017194:	20c00044 	addi	r3,r4,1
 8017198:	2085883a 	add	r2,r4,r2
 801719c:	39803fcc 	andi	r6,r7,255
 80171a0:	00000306 	br	80171b0 <memchr+0x78>
 80171a4:	18c00044 	addi	r3,r3,1
 80171a8:	197fffc3 	ldbu	r5,-1(r3)
 80171ac:	29800426 	beq	r5,r6,80171c0 <memchr+0x88>
 80171b0:	1809883a 	mov	r4,r3
 80171b4:	18bffb1e 	bne	r3,r2,80171a4 <__alt_data_end+0xf80171a4>
 80171b8:	0005883a 	mov	r2,zero
 80171bc:	f800283a 	ret
 80171c0:	2005883a 	mov	r2,r4
 80171c4:	f800283a 	ret
 80171c8:	28c03fcc 	andi	r3,r5,255
 80171cc:	1810923a 	slli	r8,r3,8
 80171d0:	02ffbff4 	movhi	r11,65279
 80171d4:	02a02074 	movhi	r10,32897
 80171d8:	40c6b03a 	or	r3,r8,r3
 80171dc:	1810943a 	slli	r8,r3,16
 80171e0:	5affbfc4 	addi	r11,r11,-257
 80171e4:	52a02004 	addi	r10,r10,-32640
 80171e8:	40d0b03a 	or	r8,r8,r3
 80171ec:	20c00017 	ldw	r3,0(r4)
 80171f0:	40c6f03a 	xor	r3,r8,r3
 80171f4:	1acd883a 	add	r6,r3,r11
 80171f8:	00c6303a 	nor	r3,zero,r3
 80171fc:	30c6703a 	and	r3,r6,r3
 8017200:	1a86703a 	and	r3,r3,r10
 8017204:	183fdf1e 	bne	r3,zero,8017184 <__alt_data_end+0xf8017184>
 8017208:	10bfff04 	addi	r2,r2,-4
 801720c:	21000104 	addi	r4,r4,4
 8017210:	48bff636 	bltu	r9,r2,80171ec <__alt_data_end+0xf80171ec>
 8017214:	003fdb06 	br	8017184 <__alt_data_end+0xf8017184>
 8017218:	3005883a 	mov	r2,r6
 801721c:	003fd706 	br	801717c <__alt_data_end+0xf801717c>

08017220 <memmove>:
 8017220:	2005883a 	mov	r2,r4
 8017224:	29000b2e 	bgeu	r5,r4,8017254 <memmove+0x34>
 8017228:	298f883a 	add	r7,r5,r6
 801722c:	21c0092e 	bgeu	r4,r7,8017254 <memmove+0x34>
 8017230:	2187883a 	add	r3,r4,r6
 8017234:	198bc83a 	sub	r5,r3,r6
 8017238:	30004b26 	beq	r6,zero,8017368 <memmove+0x148>
 801723c:	39ffffc4 	addi	r7,r7,-1
 8017240:	39000003 	ldbu	r4,0(r7)
 8017244:	18ffffc4 	addi	r3,r3,-1
 8017248:	19000005 	stb	r4,0(r3)
 801724c:	197ffb1e 	bne	r3,r5,801723c <__alt_data_end+0xf801723c>
 8017250:	f800283a 	ret
 8017254:	00c003c4 	movi	r3,15
 8017258:	1980412e 	bgeu	r3,r6,8017360 <memmove+0x140>
 801725c:	1146b03a 	or	r3,r2,r5
 8017260:	18c000cc 	andi	r3,r3,3
 8017264:	1800411e 	bne	r3,zero,801736c <memmove+0x14c>
 8017268:	33fffc04 	addi	r15,r6,-16
 801726c:	781ed13a 	srli	r15,r15,4
 8017270:	28c00104 	addi	r3,r5,4
 8017274:	13400104 	addi	r13,r2,4
 8017278:	781c913a 	slli	r14,r15,4
 801727c:	2b000204 	addi	r12,r5,8
 8017280:	12c00204 	addi	r11,r2,8
 8017284:	73800504 	addi	r14,r14,20
 8017288:	2a800304 	addi	r10,r5,12
 801728c:	12400304 	addi	r9,r2,12
 8017290:	2b9d883a 	add	r14,r5,r14
 8017294:	2811883a 	mov	r8,r5
 8017298:	100f883a 	mov	r7,r2
 801729c:	41000017 	ldw	r4,0(r8)
 80172a0:	39c00404 	addi	r7,r7,16
 80172a4:	18c00404 	addi	r3,r3,16
 80172a8:	393ffc15 	stw	r4,-16(r7)
 80172ac:	193ffc17 	ldw	r4,-16(r3)
 80172b0:	6b400404 	addi	r13,r13,16
 80172b4:	5ac00404 	addi	r11,r11,16
 80172b8:	693ffc15 	stw	r4,-16(r13)
 80172bc:	61000017 	ldw	r4,0(r12)
 80172c0:	4a400404 	addi	r9,r9,16
 80172c4:	42000404 	addi	r8,r8,16
 80172c8:	593ffc15 	stw	r4,-16(r11)
 80172cc:	51000017 	ldw	r4,0(r10)
 80172d0:	63000404 	addi	r12,r12,16
 80172d4:	52800404 	addi	r10,r10,16
 80172d8:	493ffc15 	stw	r4,-16(r9)
 80172dc:	1bbfef1e 	bne	r3,r14,801729c <__alt_data_end+0xf801729c>
 80172e0:	79000044 	addi	r4,r15,1
 80172e4:	2008913a 	slli	r4,r4,4
 80172e8:	328003cc 	andi	r10,r6,15
 80172ec:	02c000c4 	movi	r11,3
 80172f0:	1107883a 	add	r3,r2,r4
 80172f4:	290b883a 	add	r5,r5,r4
 80172f8:	5a801e2e 	bgeu	r11,r10,8017374 <memmove+0x154>
 80172fc:	1813883a 	mov	r9,r3
 8017300:	2811883a 	mov	r8,r5
 8017304:	500f883a 	mov	r7,r10
 8017308:	41000017 	ldw	r4,0(r8)
 801730c:	4a400104 	addi	r9,r9,4
 8017310:	39ffff04 	addi	r7,r7,-4
 8017314:	493fff15 	stw	r4,-4(r9)
 8017318:	42000104 	addi	r8,r8,4
 801731c:	59fffa36 	bltu	r11,r7,8017308 <__alt_data_end+0xf8017308>
 8017320:	513fff04 	addi	r4,r10,-4
 8017324:	2008d0ba 	srli	r4,r4,2
 8017328:	318000cc 	andi	r6,r6,3
 801732c:	21000044 	addi	r4,r4,1
 8017330:	2109883a 	add	r4,r4,r4
 8017334:	2109883a 	add	r4,r4,r4
 8017338:	1907883a 	add	r3,r3,r4
 801733c:	290b883a 	add	r5,r5,r4
 8017340:	30000926 	beq	r6,zero,8017368 <memmove+0x148>
 8017344:	198d883a 	add	r6,r3,r6
 8017348:	29c00003 	ldbu	r7,0(r5)
 801734c:	18c00044 	addi	r3,r3,1
 8017350:	29400044 	addi	r5,r5,1
 8017354:	19ffffc5 	stb	r7,-1(r3)
 8017358:	19bffb1e 	bne	r3,r6,8017348 <__alt_data_end+0xf8017348>
 801735c:	f800283a 	ret
 8017360:	1007883a 	mov	r3,r2
 8017364:	003ff606 	br	8017340 <__alt_data_end+0xf8017340>
 8017368:	f800283a 	ret
 801736c:	1007883a 	mov	r3,r2
 8017370:	003ff406 	br	8017344 <__alt_data_end+0xf8017344>
 8017374:	500d883a 	mov	r6,r10
 8017378:	003ff106 	br	8017340 <__alt_data_end+0xf8017340>

0801737c <_Balloc>:
 801737c:	20801317 	ldw	r2,76(r4)
 8017380:	defffc04 	addi	sp,sp,-16
 8017384:	dc400115 	stw	r17,4(sp)
 8017388:	dc000015 	stw	r16,0(sp)
 801738c:	dfc00315 	stw	ra,12(sp)
 8017390:	dc800215 	stw	r18,8(sp)
 8017394:	2023883a 	mov	r17,r4
 8017398:	2821883a 	mov	r16,r5
 801739c:	10000f26 	beq	r2,zero,80173dc <_Balloc+0x60>
 80173a0:	8407883a 	add	r3,r16,r16
 80173a4:	18c7883a 	add	r3,r3,r3
 80173a8:	10c7883a 	add	r3,r2,r3
 80173ac:	18800017 	ldw	r2,0(r3)
 80173b0:	10001126 	beq	r2,zero,80173f8 <_Balloc+0x7c>
 80173b4:	11000017 	ldw	r4,0(r2)
 80173b8:	19000015 	stw	r4,0(r3)
 80173bc:	10000415 	stw	zero,16(r2)
 80173c0:	10000315 	stw	zero,12(r2)
 80173c4:	dfc00317 	ldw	ra,12(sp)
 80173c8:	dc800217 	ldw	r18,8(sp)
 80173cc:	dc400117 	ldw	r17,4(sp)
 80173d0:	dc000017 	ldw	r16,0(sp)
 80173d4:	dec00404 	addi	sp,sp,16
 80173d8:	f800283a 	ret
 80173dc:	01400104 	movi	r5,4
 80173e0:	01800844 	movi	r6,33
 80173e4:	801b2500 	call	801b250 <_calloc_r>
 80173e8:	88801315 	stw	r2,76(r17)
 80173ec:	103fec1e 	bne	r2,zero,80173a0 <__alt_data_end+0xf80173a0>
 80173f0:	0005883a 	mov	r2,zero
 80173f4:	003ff306 	br	80173c4 <__alt_data_end+0xf80173c4>
 80173f8:	01400044 	movi	r5,1
 80173fc:	2c24983a 	sll	r18,r5,r16
 8017400:	8809883a 	mov	r4,r17
 8017404:	91800144 	addi	r6,r18,5
 8017408:	318d883a 	add	r6,r6,r6
 801740c:	318d883a 	add	r6,r6,r6
 8017410:	801b2500 	call	801b250 <_calloc_r>
 8017414:	103ff626 	beq	r2,zero,80173f0 <__alt_data_end+0xf80173f0>
 8017418:	14000115 	stw	r16,4(r2)
 801741c:	14800215 	stw	r18,8(r2)
 8017420:	003fe606 	br	80173bc <__alt_data_end+0xf80173bc>

08017424 <_Bfree>:
 8017424:	28000826 	beq	r5,zero,8017448 <_Bfree+0x24>
 8017428:	28c00117 	ldw	r3,4(r5)
 801742c:	20801317 	ldw	r2,76(r4)
 8017430:	18c7883a 	add	r3,r3,r3
 8017434:	18c7883a 	add	r3,r3,r3
 8017438:	10c5883a 	add	r2,r2,r3
 801743c:	10c00017 	ldw	r3,0(r2)
 8017440:	28c00015 	stw	r3,0(r5)
 8017444:	11400015 	stw	r5,0(r2)
 8017448:	f800283a 	ret

0801744c <__multadd>:
 801744c:	defffa04 	addi	sp,sp,-24
 8017450:	dc000115 	stw	r16,4(sp)
 8017454:	2c000417 	ldw	r16,16(r5)
 8017458:	dc800315 	stw	r18,12(sp)
 801745c:	dc400215 	stw	r17,8(sp)
 8017460:	dfc00515 	stw	ra,20(sp)
 8017464:	dcc00415 	stw	r19,16(sp)
 8017468:	2823883a 	mov	r17,r5
 801746c:	2025883a 	mov	r18,r4
 8017470:	2a400504 	addi	r9,r5,20
 8017474:	0015883a 	mov	r10,zero
 8017478:	4a000017 	ldw	r8,0(r9)
 801747c:	4a400104 	addi	r9,r9,4
 8017480:	52800044 	addi	r10,r10,1
 8017484:	40ffffcc 	andi	r3,r8,65535
 8017488:	1987383a 	mul	r3,r3,r6
 801748c:	4010d43a 	srli	r8,r8,16
 8017490:	19cf883a 	add	r7,r3,r7
 8017494:	4191383a 	mul	r8,r8,r6
 8017498:	3816d43a 	srli	r11,r7,16
 801749c:	38ffffcc 	andi	r3,r7,65535
 80174a0:	5a0f883a 	add	r7,r11,r8
 80174a4:	3810943a 	slli	r8,r7,16
 80174a8:	380ed43a 	srli	r7,r7,16
 80174ac:	40c7883a 	add	r3,r8,r3
 80174b0:	48ffff15 	stw	r3,-4(r9)
 80174b4:	543ff016 	blt	r10,r16,8017478 <__alt_data_end+0xf8017478>
 80174b8:	38000926 	beq	r7,zero,80174e0 <__multadd+0x94>
 80174bc:	88800217 	ldw	r2,8(r17)
 80174c0:	80800f0e 	bge	r16,r2,8017500 <__multadd+0xb4>
 80174c4:	80800144 	addi	r2,r16,5
 80174c8:	1085883a 	add	r2,r2,r2
 80174cc:	1085883a 	add	r2,r2,r2
 80174d0:	8885883a 	add	r2,r17,r2
 80174d4:	11c00015 	stw	r7,0(r2)
 80174d8:	84000044 	addi	r16,r16,1
 80174dc:	8c000415 	stw	r16,16(r17)
 80174e0:	8805883a 	mov	r2,r17
 80174e4:	dfc00517 	ldw	ra,20(sp)
 80174e8:	dcc00417 	ldw	r19,16(sp)
 80174ec:	dc800317 	ldw	r18,12(sp)
 80174f0:	dc400217 	ldw	r17,8(sp)
 80174f4:	dc000117 	ldw	r16,4(sp)
 80174f8:	dec00604 	addi	sp,sp,24
 80174fc:	f800283a 	ret
 8017500:	89400117 	ldw	r5,4(r17)
 8017504:	9009883a 	mov	r4,r18
 8017508:	d9c00015 	stw	r7,0(sp)
 801750c:	29400044 	addi	r5,r5,1
 8017510:	801737c0 	call	801737c <_Balloc>
 8017514:	89800417 	ldw	r6,16(r17)
 8017518:	11000304 	addi	r4,r2,12
 801751c:	89400304 	addi	r5,r17,12
 8017520:	31800084 	addi	r6,r6,2
 8017524:	318d883a 	add	r6,r6,r6
 8017528:	318d883a 	add	r6,r6,r6
 801752c:	1027883a 	mov	r19,r2
 8017530:	800fc580 	call	800fc58 <memcpy>
 8017534:	d9c00017 	ldw	r7,0(sp)
 8017538:	88000a26 	beq	r17,zero,8017564 <__multadd+0x118>
 801753c:	89000117 	ldw	r4,4(r17)
 8017540:	90c01317 	ldw	r3,76(r18)
 8017544:	2109883a 	add	r4,r4,r4
 8017548:	2109883a 	add	r4,r4,r4
 801754c:	1907883a 	add	r3,r3,r4
 8017550:	18800017 	ldw	r2,0(r3)
 8017554:	88800015 	stw	r2,0(r17)
 8017558:	1c400015 	stw	r17,0(r3)
 801755c:	9823883a 	mov	r17,r19
 8017560:	003fd806 	br	80174c4 <__alt_data_end+0xf80174c4>
 8017564:	9823883a 	mov	r17,r19
 8017568:	003fd606 	br	80174c4 <__alt_data_end+0xf80174c4>

0801756c <__s2b>:
 801756c:	defff904 	addi	sp,sp,-28
 8017570:	dc400115 	stw	r17,4(sp)
 8017574:	dc000015 	stw	r16,0(sp)
 8017578:	2023883a 	mov	r17,r4
 801757c:	2821883a 	mov	r16,r5
 8017580:	39000204 	addi	r4,r7,8
 8017584:	01400244 	movi	r5,9
 8017588:	dcc00315 	stw	r19,12(sp)
 801758c:	dc800215 	stw	r18,8(sp)
 8017590:	dfc00615 	stw	ra,24(sp)
 8017594:	dd400515 	stw	r21,20(sp)
 8017598:	dd000415 	stw	r20,16(sp)
 801759c:	3825883a 	mov	r18,r7
 80175a0:	3027883a 	mov	r19,r6
 80175a4:	800c9500 	call	800c950 <__divsi3>
 80175a8:	00c00044 	movi	r3,1
 80175ac:	000b883a 	mov	r5,zero
 80175b0:	1880030e 	bge	r3,r2,80175c0 <__s2b+0x54>
 80175b4:	18c7883a 	add	r3,r3,r3
 80175b8:	29400044 	addi	r5,r5,1
 80175bc:	18bffd16 	blt	r3,r2,80175b4 <__alt_data_end+0xf80175b4>
 80175c0:	8809883a 	mov	r4,r17
 80175c4:	801737c0 	call	801737c <_Balloc>
 80175c8:	d8c00717 	ldw	r3,28(sp)
 80175cc:	10c00515 	stw	r3,20(r2)
 80175d0:	00c00044 	movi	r3,1
 80175d4:	10c00415 	stw	r3,16(r2)
 80175d8:	00c00244 	movi	r3,9
 80175dc:	1cc0210e 	bge	r3,r19,8017664 <__s2b+0xf8>
 80175e0:	80eb883a 	add	r21,r16,r3
 80175e4:	a829883a 	mov	r20,r21
 80175e8:	84e1883a 	add	r16,r16,r19
 80175ec:	a1c00007 	ldb	r7,0(r20)
 80175f0:	8809883a 	mov	r4,r17
 80175f4:	a5000044 	addi	r20,r20,1
 80175f8:	100b883a 	mov	r5,r2
 80175fc:	01800284 	movi	r6,10
 8017600:	39fff404 	addi	r7,r7,-48
 8017604:	801744c0 	call	801744c <__multadd>
 8017608:	a43ff81e 	bne	r20,r16,80175ec <__alt_data_end+0xf80175ec>
 801760c:	ace1883a 	add	r16,r21,r19
 8017610:	843ffe04 	addi	r16,r16,-8
 8017614:	9c800a0e 	bge	r19,r18,8017640 <__s2b+0xd4>
 8017618:	94e5c83a 	sub	r18,r18,r19
 801761c:	84a5883a 	add	r18,r16,r18
 8017620:	81c00007 	ldb	r7,0(r16)
 8017624:	8809883a 	mov	r4,r17
 8017628:	84000044 	addi	r16,r16,1
 801762c:	100b883a 	mov	r5,r2
 8017630:	01800284 	movi	r6,10
 8017634:	39fff404 	addi	r7,r7,-48
 8017638:	801744c0 	call	801744c <__multadd>
 801763c:	84bff81e 	bne	r16,r18,8017620 <__alt_data_end+0xf8017620>
 8017640:	dfc00617 	ldw	ra,24(sp)
 8017644:	dd400517 	ldw	r21,20(sp)
 8017648:	dd000417 	ldw	r20,16(sp)
 801764c:	dcc00317 	ldw	r19,12(sp)
 8017650:	dc800217 	ldw	r18,8(sp)
 8017654:	dc400117 	ldw	r17,4(sp)
 8017658:	dc000017 	ldw	r16,0(sp)
 801765c:	dec00704 	addi	sp,sp,28
 8017660:	f800283a 	ret
 8017664:	84000284 	addi	r16,r16,10
 8017668:	1827883a 	mov	r19,r3
 801766c:	003fe906 	br	8017614 <__alt_data_end+0xf8017614>

08017670 <__hi0bits>:
 8017670:	20bfffec 	andhi	r2,r4,65535
 8017674:	1000141e 	bne	r2,zero,80176c8 <__hi0bits+0x58>
 8017678:	2008943a 	slli	r4,r4,16
 801767c:	00800404 	movi	r2,16
 8017680:	20ffc02c 	andhi	r3,r4,65280
 8017684:	1800021e 	bne	r3,zero,8017690 <__hi0bits+0x20>
 8017688:	2008923a 	slli	r4,r4,8
 801768c:	10800204 	addi	r2,r2,8
 8017690:	20fc002c 	andhi	r3,r4,61440
 8017694:	1800021e 	bne	r3,zero,80176a0 <__hi0bits+0x30>
 8017698:	2008913a 	slli	r4,r4,4
 801769c:	10800104 	addi	r2,r2,4
 80176a0:	20f0002c 	andhi	r3,r4,49152
 80176a4:	1800031e 	bne	r3,zero,80176b4 <__hi0bits+0x44>
 80176a8:	2109883a 	add	r4,r4,r4
 80176ac:	10800084 	addi	r2,r2,2
 80176b0:	2109883a 	add	r4,r4,r4
 80176b4:	20000316 	blt	r4,zero,80176c4 <__hi0bits+0x54>
 80176b8:	2110002c 	andhi	r4,r4,16384
 80176bc:	2000041e 	bne	r4,zero,80176d0 <__hi0bits+0x60>
 80176c0:	00800804 	movi	r2,32
 80176c4:	f800283a 	ret
 80176c8:	0005883a 	mov	r2,zero
 80176cc:	003fec06 	br	8017680 <__alt_data_end+0xf8017680>
 80176d0:	10800044 	addi	r2,r2,1
 80176d4:	f800283a 	ret

080176d8 <__lo0bits>:
 80176d8:	20c00017 	ldw	r3,0(r4)
 80176dc:	188001cc 	andi	r2,r3,7
 80176e0:	10000826 	beq	r2,zero,8017704 <__lo0bits+0x2c>
 80176e4:	1880004c 	andi	r2,r3,1
 80176e8:	1000211e 	bne	r2,zero,8017770 <__lo0bits+0x98>
 80176ec:	1880008c 	andi	r2,r3,2
 80176f0:	1000211e 	bne	r2,zero,8017778 <__lo0bits+0xa0>
 80176f4:	1806d0ba 	srli	r3,r3,2
 80176f8:	00800084 	movi	r2,2
 80176fc:	20c00015 	stw	r3,0(r4)
 8017700:	f800283a 	ret
 8017704:	18bfffcc 	andi	r2,r3,65535
 8017708:	10001326 	beq	r2,zero,8017758 <__lo0bits+0x80>
 801770c:	0005883a 	mov	r2,zero
 8017710:	19403fcc 	andi	r5,r3,255
 8017714:	2800021e 	bne	r5,zero,8017720 <__lo0bits+0x48>
 8017718:	1806d23a 	srli	r3,r3,8
 801771c:	10800204 	addi	r2,r2,8
 8017720:	194003cc 	andi	r5,r3,15
 8017724:	2800021e 	bne	r5,zero,8017730 <__lo0bits+0x58>
 8017728:	1806d13a 	srli	r3,r3,4
 801772c:	10800104 	addi	r2,r2,4
 8017730:	194000cc 	andi	r5,r3,3
 8017734:	2800021e 	bne	r5,zero,8017740 <__lo0bits+0x68>
 8017738:	1806d0ba 	srli	r3,r3,2
 801773c:	10800084 	addi	r2,r2,2
 8017740:	1940004c 	andi	r5,r3,1
 8017744:	2800081e 	bne	r5,zero,8017768 <__lo0bits+0x90>
 8017748:	1806d07a 	srli	r3,r3,1
 801774c:	1800051e 	bne	r3,zero,8017764 <__lo0bits+0x8c>
 8017750:	00800804 	movi	r2,32
 8017754:	f800283a 	ret
 8017758:	1806d43a 	srli	r3,r3,16
 801775c:	00800404 	movi	r2,16
 8017760:	003feb06 	br	8017710 <__alt_data_end+0xf8017710>
 8017764:	10800044 	addi	r2,r2,1
 8017768:	20c00015 	stw	r3,0(r4)
 801776c:	f800283a 	ret
 8017770:	0005883a 	mov	r2,zero
 8017774:	f800283a 	ret
 8017778:	1806d07a 	srli	r3,r3,1
 801777c:	00800044 	movi	r2,1
 8017780:	20c00015 	stw	r3,0(r4)
 8017784:	f800283a 	ret

08017788 <__i2b>:
 8017788:	defffd04 	addi	sp,sp,-12
 801778c:	dc000015 	stw	r16,0(sp)
 8017790:	04000044 	movi	r16,1
 8017794:	dc400115 	stw	r17,4(sp)
 8017798:	2823883a 	mov	r17,r5
 801779c:	800b883a 	mov	r5,r16
 80177a0:	dfc00215 	stw	ra,8(sp)
 80177a4:	801737c0 	call	801737c <_Balloc>
 80177a8:	14400515 	stw	r17,20(r2)
 80177ac:	14000415 	stw	r16,16(r2)
 80177b0:	dfc00217 	ldw	ra,8(sp)
 80177b4:	dc400117 	ldw	r17,4(sp)
 80177b8:	dc000017 	ldw	r16,0(sp)
 80177bc:	dec00304 	addi	sp,sp,12
 80177c0:	f800283a 	ret

080177c4 <__multiply>:
 80177c4:	defffa04 	addi	sp,sp,-24
 80177c8:	dcc00315 	stw	r19,12(sp)
 80177cc:	dc800215 	stw	r18,8(sp)
 80177d0:	2cc00417 	ldw	r19,16(r5)
 80177d4:	34800417 	ldw	r18,16(r6)
 80177d8:	dd000415 	stw	r20,16(sp)
 80177dc:	dc400115 	stw	r17,4(sp)
 80177e0:	dfc00515 	stw	ra,20(sp)
 80177e4:	dc000015 	stw	r16,0(sp)
 80177e8:	2829883a 	mov	r20,r5
 80177ec:	3023883a 	mov	r17,r6
 80177f0:	9c807016 	blt	r19,r18,80179b4 <__multiply+0x1f0>
 80177f4:	9005883a 	mov	r2,r18
 80177f8:	9825883a 	mov	r18,r19
 80177fc:	1027883a 	mov	r19,r2
 8017800:	a0800217 	ldw	r2,8(r20)
 8017804:	94e1883a 	add	r16,r18,r19
 8017808:	a1400117 	ldw	r5,4(r20)
 801780c:	1400010e 	bge	r2,r16,8017814 <__multiply+0x50>
 8017810:	29400044 	addi	r5,r5,1
 8017814:	801737c0 	call	801737c <_Balloc>
 8017818:	8417883a 	add	r11,r16,r16
 801781c:	13000504 	addi	r12,r2,20
 8017820:	5ad7883a 	add	r11,r11,r11
 8017824:	62d7883a 	add	r11,r12,r11
 8017828:	6007883a 	mov	r3,r12
 801782c:	62c0032e 	bgeu	r12,r11,801783c <__multiply+0x78>
 8017830:	18000015 	stw	zero,0(r3)
 8017834:	18c00104 	addi	r3,r3,4
 8017838:	1afffd36 	bltu	r3,r11,8017830 <__alt_data_end+0xf8017830>
 801783c:	9ce7883a 	add	r19,r19,r19
 8017840:	94a5883a 	add	r18,r18,r18
 8017844:	89800504 	addi	r6,r17,20
 8017848:	9ce7883a 	add	r19,r19,r19
 801784c:	a3800504 	addi	r14,r20,20
 8017850:	94a5883a 	add	r18,r18,r18
 8017854:	34db883a 	add	r13,r6,r19
 8017858:	7495883a 	add	r10,r14,r18
 801785c:	3340422e 	bgeu	r6,r13,8017968 <__multiply+0x1a4>
 8017860:	34400017 	ldw	r17,0(r6)
 8017864:	8cbfffcc 	andi	r18,r17,65535
 8017868:	90001b26 	beq	r18,zero,80178d8 <__multiply+0x114>
 801786c:	6013883a 	mov	r9,r12
 8017870:	7023883a 	mov	r17,r14
 8017874:	0011883a 	mov	r8,zero
 8017878:	88c00017 	ldw	r3,0(r17)
 801787c:	4bc00017 	ldw	r15,0(r9)
 8017880:	8c400104 	addi	r17,r17,4
 8017884:	19ffffcc 	andi	r7,r3,65535
 8017888:	3c8f383a 	mul	r7,r7,r18
 801788c:	1808d43a 	srli	r4,r3,16
 8017890:	797fffcc 	andi	r5,r15,65535
 8017894:	29cb883a 	add	r5,r5,r7
 8017898:	2a0b883a 	add	r5,r5,r8
 801789c:	2489383a 	mul	r4,r4,r18
 80178a0:	7806d43a 	srli	r3,r15,16
 80178a4:	2810d43a 	srli	r8,r5,16
 80178a8:	297fffcc 	andi	r5,r5,65535
 80178ac:	1907883a 	add	r3,r3,r4
 80178b0:	1a07883a 	add	r3,r3,r8
 80178b4:	1808943a 	slli	r4,r3,16
 80178b8:	480f883a 	mov	r7,r9
 80178bc:	1810d43a 	srli	r8,r3,16
 80178c0:	214ab03a 	or	r5,r4,r5
 80178c4:	49400015 	stw	r5,0(r9)
 80178c8:	4a400104 	addi	r9,r9,4
 80178cc:	8abfea36 	bltu	r17,r10,8017878 <__alt_data_end+0xf8017878>
 80178d0:	3a000115 	stw	r8,4(r7)
 80178d4:	34400017 	ldw	r17,0(r6)
 80178d8:	8822d43a 	srli	r17,r17,16
 80178dc:	88001f26 	beq	r17,zero,801795c <__multiply+0x198>
 80178e0:	60c00017 	ldw	r3,0(r12)
 80178e4:	7013883a 	mov	r9,r14
 80178e8:	601f883a 	mov	r15,r12
 80178ec:	1811883a 	mov	r8,r3
 80178f0:	6027883a 	mov	r19,r12
 80178f4:	000f883a 	mov	r7,zero
 80178f8:	00000106 	br	8017900 <__multiply+0x13c>
 80178fc:	9027883a 	mov	r19,r18
 8017900:	4940000b 	ldhu	r5,0(r9)
 8017904:	4010d43a 	srli	r8,r8,16
 8017908:	193fffcc 	andi	r4,r3,65535
 801790c:	2c4b383a 	mul	r5,r5,r17
 8017910:	7bc00104 	addi	r15,r15,4
 8017914:	4a400104 	addi	r9,r9,4
 8017918:	2a0b883a 	add	r5,r5,r8
 801791c:	29cb883a 	add	r5,r5,r7
 8017920:	2806943a 	slli	r3,r5,16
 8017924:	9c800104 	addi	r18,r19,4
 8017928:	280ad43a 	srli	r5,r5,16
 801792c:	1908b03a 	or	r4,r3,r4
 8017930:	793fff15 	stw	r4,-4(r15)
 8017934:	48ffff17 	ldw	r3,-4(r9)
 8017938:	92000017 	ldw	r8,0(r18)
 801793c:	1806d43a 	srli	r3,r3,16
 8017940:	413fffcc 	andi	r4,r8,65535
 8017944:	1c47383a 	mul	r3,r3,r17
 8017948:	1907883a 	add	r3,r3,r4
 801794c:	1947883a 	add	r3,r3,r5
 8017950:	180ed43a 	srli	r7,r3,16
 8017954:	4abfe936 	bltu	r9,r10,80178fc <__alt_data_end+0xf80178fc>
 8017958:	98c00115 	stw	r3,4(r19)
 801795c:	31800104 	addi	r6,r6,4
 8017960:	63000104 	addi	r12,r12,4
 8017964:	337fbe36 	bltu	r6,r13,8017860 <__alt_data_end+0xf8017860>
 8017968:	0400090e 	bge	zero,r16,8017990 <__multiply+0x1cc>
 801796c:	58ffff17 	ldw	r3,-4(r11)
 8017970:	5affff04 	addi	r11,r11,-4
 8017974:	18000326 	beq	r3,zero,8017984 <__multiply+0x1c0>
 8017978:	00000506 	br	8017990 <__multiply+0x1cc>
 801797c:	58c00017 	ldw	r3,0(r11)
 8017980:	1800031e 	bne	r3,zero,8017990 <__multiply+0x1cc>
 8017984:	843fffc4 	addi	r16,r16,-1
 8017988:	5affff04 	addi	r11,r11,-4
 801798c:	803ffb1e 	bne	r16,zero,801797c <__alt_data_end+0xf801797c>
 8017990:	14000415 	stw	r16,16(r2)
 8017994:	dfc00517 	ldw	ra,20(sp)
 8017998:	dd000417 	ldw	r20,16(sp)
 801799c:	dcc00317 	ldw	r19,12(sp)
 80179a0:	dc800217 	ldw	r18,8(sp)
 80179a4:	dc400117 	ldw	r17,4(sp)
 80179a8:	dc000017 	ldw	r16,0(sp)
 80179ac:	dec00604 	addi	sp,sp,24
 80179b0:	f800283a 	ret
 80179b4:	3029883a 	mov	r20,r6
 80179b8:	2823883a 	mov	r17,r5
 80179bc:	003f9006 	br	8017800 <__alt_data_end+0xf8017800>

080179c0 <__pow5mult>:
 80179c0:	defffa04 	addi	sp,sp,-24
 80179c4:	dcc00315 	stw	r19,12(sp)
 80179c8:	dc800215 	stw	r18,8(sp)
 80179cc:	dc000015 	stw	r16,0(sp)
 80179d0:	dfc00515 	stw	ra,20(sp)
 80179d4:	dd000415 	stw	r20,16(sp)
 80179d8:	dc400115 	stw	r17,4(sp)
 80179dc:	308000cc 	andi	r2,r6,3
 80179e0:	3021883a 	mov	r16,r6
 80179e4:	2027883a 	mov	r19,r4
 80179e8:	2825883a 	mov	r18,r5
 80179ec:	10002e1e 	bne	r2,zero,8017aa8 <__pow5mult+0xe8>
 80179f0:	8021d0ba 	srai	r16,r16,2
 80179f4:	80001a26 	beq	r16,zero,8017a60 <__pow5mult+0xa0>
 80179f8:	9c401217 	ldw	r17,72(r19)
 80179fc:	8800061e 	bne	r17,zero,8017a18 <__pow5mult+0x58>
 8017a00:	00003406 	br	8017ad4 <__pow5mult+0x114>
 8017a04:	8021d07a 	srai	r16,r16,1
 8017a08:	80001526 	beq	r16,zero,8017a60 <__pow5mult+0xa0>
 8017a0c:	88800017 	ldw	r2,0(r17)
 8017a10:	10001c26 	beq	r2,zero,8017a84 <__pow5mult+0xc4>
 8017a14:	1023883a 	mov	r17,r2
 8017a18:	80c0004c 	andi	r3,r16,1
 8017a1c:	183ff926 	beq	r3,zero,8017a04 <__alt_data_end+0xf8017a04>
 8017a20:	900b883a 	mov	r5,r18
 8017a24:	880d883a 	mov	r6,r17
 8017a28:	9809883a 	mov	r4,r19
 8017a2c:	80177c40 	call	80177c4 <__multiply>
 8017a30:	90001b26 	beq	r18,zero,8017aa0 <__pow5mult+0xe0>
 8017a34:	91c00117 	ldw	r7,4(r18)
 8017a38:	98c01317 	ldw	r3,76(r19)
 8017a3c:	8021d07a 	srai	r16,r16,1
 8017a40:	39cf883a 	add	r7,r7,r7
 8017a44:	39cf883a 	add	r7,r7,r7
 8017a48:	19c7883a 	add	r3,r3,r7
 8017a4c:	19000017 	ldw	r4,0(r3)
 8017a50:	91000015 	stw	r4,0(r18)
 8017a54:	1c800015 	stw	r18,0(r3)
 8017a58:	1025883a 	mov	r18,r2
 8017a5c:	803feb1e 	bne	r16,zero,8017a0c <__alt_data_end+0xf8017a0c>
 8017a60:	9005883a 	mov	r2,r18
 8017a64:	dfc00517 	ldw	ra,20(sp)
 8017a68:	dd000417 	ldw	r20,16(sp)
 8017a6c:	dcc00317 	ldw	r19,12(sp)
 8017a70:	dc800217 	ldw	r18,8(sp)
 8017a74:	dc400117 	ldw	r17,4(sp)
 8017a78:	dc000017 	ldw	r16,0(sp)
 8017a7c:	dec00604 	addi	sp,sp,24
 8017a80:	f800283a 	ret
 8017a84:	9809883a 	mov	r4,r19
 8017a88:	880b883a 	mov	r5,r17
 8017a8c:	880d883a 	mov	r6,r17
 8017a90:	80177c40 	call	80177c4 <__multiply>
 8017a94:	88800015 	stw	r2,0(r17)
 8017a98:	10000015 	stw	zero,0(r2)
 8017a9c:	003fdd06 	br	8017a14 <__alt_data_end+0xf8017a14>
 8017aa0:	1025883a 	mov	r18,r2
 8017aa4:	003fd706 	br	8017a04 <__alt_data_end+0xf8017a04>
 8017aa8:	10bfffc4 	addi	r2,r2,-1
 8017aac:	1085883a 	add	r2,r2,r2
 8017ab0:	00c205b4 	movhi	r3,2070
 8017ab4:	18d7e304 	addi	r3,r3,24460
 8017ab8:	1085883a 	add	r2,r2,r2
 8017abc:	1885883a 	add	r2,r3,r2
 8017ac0:	11800017 	ldw	r6,0(r2)
 8017ac4:	000f883a 	mov	r7,zero
 8017ac8:	801744c0 	call	801744c <__multadd>
 8017acc:	1025883a 	mov	r18,r2
 8017ad0:	003fc706 	br	80179f0 <__alt_data_end+0xf80179f0>
 8017ad4:	05000044 	movi	r20,1
 8017ad8:	9809883a 	mov	r4,r19
 8017adc:	a00b883a 	mov	r5,r20
 8017ae0:	801737c0 	call	801737c <_Balloc>
 8017ae4:	1023883a 	mov	r17,r2
 8017ae8:	00809c44 	movi	r2,625
 8017aec:	88800515 	stw	r2,20(r17)
 8017af0:	8d000415 	stw	r20,16(r17)
 8017af4:	9c401215 	stw	r17,72(r19)
 8017af8:	88000015 	stw	zero,0(r17)
 8017afc:	003fc606 	br	8017a18 <__alt_data_end+0xf8017a18>

08017b00 <__lshift>:
 8017b00:	defff904 	addi	sp,sp,-28
 8017b04:	dd000415 	stw	r20,16(sp)
 8017b08:	dcc00315 	stw	r19,12(sp)
 8017b0c:	3029d17a 	srai	r20,r6,5
 8017b10:	2cc00417 	ldw	r19,16(r5)
 8017b14:	28800217 	ldw	r2,8(r5)
 8017b18:	dd400515 	stw	r21,20(sp)
 8017b1c:	a4e7883a 	add	r19,r20,r19
 8017b20:	dc800215 	stw	r18,8(sp)
 8017b24:	dc400115 	stw	r17,4(sp)
 8017b28:	dc000015 	stw	r16,0(sp)
 8017b2c:	dfc00615 	stw	ra,24(sp)
 8017b30:	9c000044 	addi	r16,r19,1
 8017b34:	2823883a 	mov	r17,r5
 8017b38:	302b883a 	mov	r21,r6
 8017b3c:	2025883a 	mov	r18,r4
 8017b40:	29400117 	ldw	r5,4(r5)
 8017b44:	1400030e 	bge	r2,r16,8017b54 <__lshift+0x54>
 8017b48:	1085883a 	add	r2,r2,r2
 8017b4c:	29400044 	addi	r5,r5,1
 8017b50:	143ffd16 	blt	r2,r16,8017b48 <__alt_data_end+0xf8017b48>
 8017b54:	9009883a 	mov	r4,r18
 8017b58:	801737c0 	call	801737c <_Balloc>
 8017b5c:	11c00504 	addi	r7,r2,20
 8017b60:	0500090e 	bge	zero,r20,8017b88 <__lshift+0x88>
 8017b64:	3811883a 	mov	r8,r7
 8017b68:	0007883a 	mov	r3,zero
 8017b6c:	40000015 	stw	zero,0(r8)
 8017b70:	18c00044 	addi	r3,r3,1
 8017b74:	42000104 	addi	r8,r8,4
 8017b78:	1d3ffc1e 	bne	r3,r20,8017b6c <__alt_data_end+0xf8017b6c>
 8017b7c:	18c7883a 	add	r3,r3,r3
 8017b80:	18c7883a 	add	r3,r3,r3
 8017b84:	38cf883a 	add	r7,r7,r3
 8017b88:	89000417 	ldw	r4,16(r17)
 8017b8c:	88c00504 	addi	r3,r17,20
 8017b90:	a98007cc 	andi	r6,r21,31
 8017b94:	2109883a 	add	r4,r4,r4
 8017b98:	2109883a 	add	r4,r4,r4
 8017b9c:	1909883a 	add	r4,r3,r4
 8017ba0:	30002326 	beq	r6,zero,8017c30 <__lshift+0x130>
 8017ba4:	01400804 	movi	r5,32
 8017ba8:	298bc83a 	sub	r5,r5,r6
 8017bac:	0013883a 	mov	r9,zero
 8017bb0:	1a000017 	ldw	r8,0(r3)
 8017bb4:	3815883a 	mov	r10,r7
 8017bb8:	39c00104 	addi	r7,r7,4
 8017bbc:	4190983a 	sll	r8,r8,r6
 8017bc0:	18c00104 	addi	r3,r3,4
 8017bc4:	4a10b03a 	or	r8,r9,r8
 8017bc8:	3a3fff15 	stw	r8,-4(r7)
 8017bcc:	1a3fff17 	ldw	r8,-4(r3)
 8017bd0:	4152d83a 	srl	r9,r8,r5
 8017bd4:	193ff636 	bltu	r3,r4,8017bb0 <__alt_data_end+0xf8017bb0>
 8017bd8:	52400115 	stw	r9,4(r10)
 8017bdc:	48001a1e 	bne	r9,zero,8017c48 <__lshift+0x148>
 8017be0:	843fffc4 	addi	r16,r16,-1
 8017be4:	14000415 	stw	r16,16(r2)
 8017be8:	88000826 	beq	r17,zero,8017c0c <__lshift+0x10c>
 8017bec:	89000117 	ldw	r4,4(r17)
 8017bf0:	90c01317 	ldw	r3,76(r18)
 8017bf4:	2109883a 	add	r4,r4,r4
 8017bf8:	2109883a 	add	r4,r4,r4
 8017bfc:	1907883a 	add	r3,r3,r4
 8017c00:	19000017 	ldw	r4,0(r3)
 8017c04:	89000015 	stw	r4,0(r17)
 8017c08:	1c400015 	stw	r17,0(r3)
 8017c0c:	dfc00617 	ldw	ra,24(sp)
 8017c10:	dd400517 	ldw	r21,20(sp)
 8017c14:	dd000417 	ldw	r20,16(sp)
 8017c18:	dcc00317 	ldw	r19,12(sp)
 8017c1c:	dc800217 	ldw	r18,8(sp)
 8017c20:	dc400117 	ldw	r17,4(sp)
 8017c24:	dc000017 	ldw	r16,0(sp)
 8017c28:	dec00704 	addi	sp,sp,28
 8017c2c:	f800283a 	ret
 8017c30:	19400017 	ldw	r5,0(r3)
 8017c34:	39c00104 	addi	r7,r7,4
 8017c38:	18c00104 	addi	r3,r3,4
 8017c3c:	397fff15 	stw	r5,-4(r7)
 8017c40:	193ffb36 	bltu	r3,r4,8017c30 <__alt_data_end+0xf8017c30>
 8017c44:	003fe606 	br	8017be0 <__alt_data_end+0xf8017be0>
 8017c48:	9c000084 	addi	r16,r19,2
 8017c4c:	003fe406 	br	8017be0 <__alt_data_end+0xf8017be0>

08017c50 <__mcmp>:
 8017c50:	20800417 	ldw	r2,16(r4)
 8017c54:	28c00417 	ldw	r3,16(r5)
 8017c58:	10c5c83a 	sub	r2,r2,r3
 8017c5c:	1000111e 	bne	r2,zero,8017ca4 <__mcmp+0x54>
 8017c60:	18c7883a 	add	r3,r3,r3
 8017c64:	18c7883a 	add	r3,r3,r3
 8017c68:	21000504 	addi	r4,r4,20
 8017c6c:	29400504 	addi	r5,r5,20
 8017c70:	20c5883a 	add	r2,r4,r3
 8017c74:	28cb883a 	add	r5,r5,r3
 8017c78:	00000106 	br	8017c80 <__mcmp+0x30>
 8017c7c:	20800a2e 	bgeu	r4,r2,8017ca8 <__mcmp+0x58>
 8017c80:	10bfff04 	addi	r2,r2,-4
 8017c84:	297fff04 	addi	r5,r5,-4
 8017c88:	11800017 	ldw	r6,0(r2)
 8017c8c:	28c00017 	ldw	r3,0(r5)
 8017c90:	30fffa26 	beq	r6,r3,8017c7c <__alt_data_end+0xf8017c7c>
 8017c94:	30c00236 	bltu	r6,r3,8017ca0 <__mcmp+0x50>
 8017c98:	00800044 	movi	r2,1
 8017c9c:	f800283a 	ret
 8017ca0:	00bfffc4 	movi	r2,-1
 8017ca4:	f800283a 	ret
 8017ca8:	0005883a 	mov	r2,zero
 8017cac:	f800283a 	ret

08017cb0 <__mdiff>:
 8017cb0:	defffb04 	addi	sp,sp,-20
 8017cb4:	dc000015 	stw	r16,0(sp)
 8017cb8:	2821883a 	mov	r16,r5
 8017cbc:	dcc00315 	stw	r19,12(sp)
 8017cc0:	300b883a 	mov	r5,r6
 8017cc4:	2027883a 	mov	r19,r4
 8017cc8:	8009883a 	mov	r4,r16
 8017ccc:	dc800215 	stw	r18,8(sp)
 8017cd0:	dfc00415 	stw	ra,16(sp)
 8017cd4:	dc400115 	stw	r17,4(sp)
 8017cd8:	3025883a 	mov	r18,r6
 8017cdc:	8017c500 	call	8017c50 <__mcmp>
 8017ce0:	10005226 	beq	r2,zero,8017e2c <__mdiff+0x17c>
 8017ce4:	10004c16 	blt	r2,zero,8017e18 <__mdiff+0x168>
 8017ce8:	0023883a 	mov	r17,zero
 8017cec:	81400117 	ldw	r5,4(r16)
 8017cf0:	9809883a 	mov	r4,r19
 8017cf4:	801737c0 	call	801737c <_Balloc>
 8017cf8:	83400417 	ldw	r13,16(r16)
 8017cfc:	93800417 	ldw	r14,16(r18)
 8017d00:	81000504 	addi	r4,r16,20
 8017d04:	6b59883a 	add	r12,r13,r13
 8017d08:	739d883a 	add	r14,r14,r14
 8017d0c:	6319883a 	add	r12,r12,r12
 8017d10:	91800504 	addi	r6,r18,20
 8017d14:	739d883a 	add	r14,r14,r14
 8017d18:	14400315 	stw	r17,12(r2)
 8017d1c:	2319883a 	add	r12,r4,r12
 8017d20:	339d883a 	add	r14,r6,r14
 8017d24:	12400504 	addi	r9,r2,20
 8017d28:	0007883a 	mov	r3,zero
 8017d2c:	22000017 	ldw	r8,0(r4)
 8017d30:	32800017 	ldw	r10,0(r6)
 8017d34:	4ac00104 	addi	r11,r9,4
 8017d38:	41ffffcc 	andi	r7,r8,65535
 8017d3c:	38c7883a 	add	r3,r7,r3
 8017d40:	51ffffcc 	andi	r7,r10,65535
 8017d44:	19cfc83a 	sub	r7,r3,r7
 8017d48:	4010d43a 	srli	r8,r8,16
 8017d4c:	5014d43a 	srli	r10,r10,16
 8017d50:	3807d43a 	srai	r3,r7,16
 8017d54:	39ffffcc 	andi	r7,r7,65535
 8017d58:	4291c83a 	sub	r8,r8,r10
 8017d5c:	40c7883a 	add	r3,r8,r3
 8017d60:	1810943a 	slli	r8,r3,16
 8017d64:	31800104 	addi	r6,r6,4
 8017d68:	21000104 	addi	r4,r4,4
 8017d6c:	41ceb03a 	or	r7,r8,r7
 8017d70:	49c00015 	stw	r7,0(r9)
 8017d74:	1807d43a 	srai	r3,r3,16
 8017d78:	580b883a 	mov	r5,r11
 8017d7c:	5813883a 	mov	r9,r11
 8017d80:	33bfea36 	bltu	r6,r14,8017d2c <__alt_data_end+0xf8017d2c>
 8017d84:	2011883a 	mov	r8,r4
 8017d88:	2300152e 	bgeu	r4,r12,8017de0 <__mdiff+0x130>
 8017d8c:	21400017 	ldw	r5,0(r4)
 8017d90:	4a400104 	addi	r9,r9,4
 8017d94:	21000104 	addi	r4,r4,4
 8017d98:	29ffffcc 	andi	r7,r5,65535
 8017d9c:	38c7883a 	add	r3,r7,r3
 8017da0:	280ad43a 	srli	r5,r5,16
 8017da4:	180dd43a 	srai	r6,r3,16
 8017da8:	19ffffcc 	andi	r7,r3,65535
 8017dac:	3147883a 	add	r3,r6,r5
 8017db0:	180a943a 	slli	r5,r3,16
 8017db4:	1807d43a 	srai	r3,r3,16
 8017db8:	29ceb03a 	or	r7,r5,r7
 8017dbc:	49ffff15 	stw	r7,-4(r9)
 8017dc0:	233ff236 	bltu	r4,r12,8017d8c <__alt_data_end+0xf8017d8c>
 8017dc4:	0206303a 	nor	r3,zero,r8
 8017dc8:	1b07883a 	add	r3,r3,r12
 8017dcc:	1806d0ba 	srli	r3,r3,2
 8017dd0:	18c00044 	addi	r3,r3,1
 8017dd4:	18c7883a 	add	r3,r3,r3
 8017dd8:	18c7883a 	add	r3,r3,r3
 8017ddc:	58cb883a 	add	r5,r11,r3
 8017de0:	28ffff04 	addi	r3,r5,-4
 8017de4:	3800041e 	bne	r7,zero,8017df8 <__mdiff+0x148>
 8017de8:	18ffff04 	addi	r3,r3,-4
 8017dec:	19000017 	ldw	r4,0(r3)
 8017df0:	6b7fffc4 	addi	r13,r13,-1
 8017df4:	203ffc26 	beq	r4,zero,8017de8 <__alt_data_end+0xf8017de8>
 8017df8:	13400415 	stw	r13,16(r2)
 8017dfc:	dfc00417 	ldw	ra,16(sp)
 8017e00:	dcc00317 	ldw	r19,12(sp)
 8017e04:	dc800217 	ldw	r18,8(sp)
 8017e08:	dc400117 	ldw	r17,4(sp)
 8017e0c:	dc000017 	ldw	r16,0(sp)
 8017e10:	dec00504 	addi	sp,sp,20
 8017e14:	f800283a 	ret
 8017e18:	8005883a 	mov	r2,r16
 8017e1c:	04400044 	movi	r17,1
 8017e20:	9021883a 	mov	r16,r18
 8017e24:	1025883a 	mov	r18,r2
 8017e28:	003fb006 	br	8017cec <__alt_data_end+0xf8017cec>
 8017e2c:	9809883a 	mov	r4,r19
 8017e30:	000b883a 	mov	r5,zero
 8017e34:	801737c0 	call	801737c <_Balloc>
 8017e38:	00c00044 	movi	r3,1
 8017e3c:	10c00415 	stw	r3,16(r2)
 8017e40:	10000515 	stw	zero,20(r2)
 8017e44:	003fed06 	br	8017dfc <__alt_data_end+0xf8017dfc>

08017e48 <__ulp>:
 8017e48:	295ffc2c 	andhi	r5,r5,32752
 8017e4c:	00bf3034 	movhi	r2,64704
 8017e50:	2887883a 	add	r3,r5,r2
 8017e54:	00c0020e 	bge	zero,r3,8017e60 <__ulp+0x18>
 8017e58:	0005883a 	mov	r2,zero
 8017e5c:	f800283a 	ret
 8017e60:	00c7c83a 	sub	r3,zero,r3
 8017e64:	180bd53a 	srai	r5,r3,20
 8017e68:	008004c4 	movi	r2,19
 8017e6c:	11400a0e 	bge	r2,r5,8017e98 <__ulp+0x50>
 8017e70:	00800c84 	movi	r2,50
 8017e74:	0007883a 	mov	r3,zero
 8017e78:	11400516 	blt	r2,r5,8017e90 <__ulp+0x48>
 8017e7c:	00800cc4 	movi	r2,51
 8017e80:	114bc83a 	sub	r5,r2,r5
 8017e84:	00800044 	movi	r2,1
 8017e88:	1144983a 	sll	r2,r2,r5
 8017e8c:	f800283a 	ret
 8017e90:	00800044 	movi	r2,1
 8017e94:	f800283a 	ret
 8017e98:	00800234 	movhi	r2,8
 8017e9c:	1147d83a 	sra	r3,r2,r5
 8017ea0:	0005883a 	mov	r2,zero
 8017ea4:	f800283a 	ret

08017ea8 <__b2d>:
 8017ea8:	defffa04 	addi	sp,sp,-24
 8017eac:	dc000015 	stw	r16,0(sp)
 8017eb0:	24000417 	ldw	r16,16(r4)
 8017eb4:	dc400115 	stw	r17,4(sp)
 8017eb8:	24400504 	addi	r17,r4,20
 8017ebc:	8421883a 	add	r16,r16,r16
 8017ec0:	8421883a 	add	r16,r16,r16
 8017ec4:	8c21883a 	add	r16,r17,r16
 8017ec8:	dc800215 	stw	r18,8(sp)
 8017ecc:	84bfff17 	ldw	r18,-4(r16)
 8017ed0:	dd000415 	stw	r20,16(sp)
 8017ed4:	dcc00315 	stw	r19,12(sp)
 8017ed8:	9009883a 	mov	r4,r18
 8017edc:	2829883a 	mov	r20,r5
 8017ee0:	dfc00515 	stw	ra,20(sp)
 8017ee4:	80176700 	call	8017670 <__hi0bits>
 8017ee8:	00c00804 	movi	r3,32
 8017eec:	1887c83a 	sub	r3,r3,r2
 8017ef0:	a0c00015 	stw	r3,0(r20)
 8017ef4:	00c00284 	movi	r3,10
 8017ef8:	84ffff04 	addi	r19,r16,-4
 8017efc:	18801216 	blt	r3,r2,8017f48 <__b2d+0xa0>
 8017f00:	014002c4 	movi	r5,11
 8017f04:	2889c83a 	sub	r4,r5,r2
 8017f08:	9106d83a 	srl	r3,r18,r4
 8017f0c:	18cffc34 	orhi	r3,r3,16368
 8017f10:	8cc0282e 	bgeu	r17,r19,8017fb4 <__b2d+0x10c>
 8017f14:	817ffe17 	ldw	r5,-8(r16)
 8017f18:	290ad83a 	srl	r5,r5,r4
 8017f1c:	10800544 	addi	r2,r2,21
 8017f20:	9084983a 	sll	r2,r18,r2
 8017f24:	2884b03a 	or	r2,r5,r2
 8017f28:	dfc00517 	ldw	ra,20(sp)
 8017f2c:	dd000417 	ldw	r20,16(sp)
 8017f30:	dcc00317 	ldw	r19,12(sp)
 8017f34:	dc800217 	ldw	r18,8(sp)
 8017f38:	dc400117 	ldw	r17,4(sp)
 8017f3c:	dc000017 	ldw	r16,0(sp)
 8017f40:	dec00604 	addi	sp,sp,24
 8017f44:	f800283a 	ret
 8017f48:	113ffd44 	addi	r4,r2,-11
 8017f4c:	8cc00f2e 	bgeu	r17,r19,8017f8c <__b2d+0xe4>
 8017f50:	81bffe04 	addi	r6,r16,-8
 8017f54:	817ffe17 	ldw	r5,-8(r16)
 8017f58:	20001326 	beq	r4,zero,8017fa8 <__b2d+0x100>
 8017f5c:	00c00ac4 	movi	r3,43
 8017f60:	1885c83a 	sub	r2,r3,r2
 8017f64:	2886d83a 	srl	r3,r5,r2
 8017f68:	9124983a 	sll	r18,r18,r4
 8017f6c:	90e4b03a 	or	r18,r18,r3
 8017f70:	90cffc34 	orhi	r3,r18,16368
 8017f74:	8980112e 	bgeu	r17,r6,8017fbc <__b2d+0x114>
 8017f78:	81bffd17 	ldw	r6,-12(r16)
 8017f7c:	308cd83a 	srl	r6,r6,r2
 8017f80:	2904983a 	sll	r2,r5,r4
 8017f84:	1184b03a 	or	r2,r2,r6
 8017f88:	003fe706 	br	8017f28 <__alt_data_end+0xf8017f28>
 8017f8c:	20000526 	beq	r4,zero,8017fa4 <__b2d+0xfc>
 8017f90:	9124983a 	sll	r18,r18,r4
 8017f94:	000d883a 	mov	r6,zero
 8017f98:	000b883a 	mov	r5,zero
 8017f9c:	90cffc34 	orhi	r3,r18,16368
 8017fa0:	003ff706 	br	8017f80 <__alt_data_end+0xf8017f80>
 8017fa4:	000b883a 	mov	r5,zero
 8017fa8:	90cffc34 	orhi	r3,r18,16368
 8017fac:	2805883a 	mov	r2,r5
 8017fb0:	003fdd06 	br	8017f28 <__alt_data_end+0xf8017f28>
 8017fb4:	000b883a 	mov	r5,zero
 8017fb8:	003fd806 	br	8017f1c <__alt_data_end+0xf8017f1c>
 8017fbc:	000d883a 	mov	r6,zero
 8017fc0:	003fef06 	br	8017f80 <__alt_data_end+0xf8017f80>

08017fc4 <__d2b>:
 8017fc4:	defff704 	addi	sp,sp,-36
 8017fc8:	dc000215 	stw	r16,8(sp)
 8017fcc:	3021883a 	mov	r16,r6
 8017fd0:	dc400315 	stw	r17,12(sp)
 8017fd4:	8022907a 	slli	r17,r16,1
 8017fd8:	dd400715 	stw	r21,28(sp)
 8017fdc:	282b883a 	mov	r21,r5
 8017fe0:	01400044 	movi	r5,1
 8017fe4:	dd000615 	stw	r20,24(sp)
 8017fe8:	dcc00515 	stw	r19,20(sp)
 8017fec:	dc800415 	stw	r18,16(sp)
 8017ff0:	dfc00815 	stw	ra,32(sp)
 8017ff4:	3829883a 	mov	r20,r7
 8017ff8:	dc800917 	ldw	r18,36(sp)
 8017ffc:	8822d57a 	srli	r17,r17,21
 8018000:	801737c0 	call	801737c <_Balloc>
 8018004:	1027883a 	mov	r19,r2
 8018008:	00800434 	movhi	r2,16
 801800c:	10bfffc4 	addi	r2,r2,-1
 8018010:	808c703a 	and	r6,r16,r2
 8018014:	88000126 	beq	r17,zero,801801c <__d2b+0x58>
 8018018:	31800434 	orhi	r6,r6,16
 801801c:	d9800015 	stw	r6,0(sp)
 8018020:	a8001f26 	beq	r21,zero,80180a0 <__d2b+0xdc>
 8018024:	d9000104 	addi	r4,sp,4
 8018028:	dd400115 	stw	r21,4(sp)
 801802c:	80176d80 	call	80176d8 <__lo0bits>
 8018030:	d8c00017 	ldw	r3,0(sp)
 8018034:	1000291e 	bne	r2,zero,80180dc <__d2b+0x118>
 8018038:	d9000117 	ldw	r4,4(sp)
 801803c:	99000515 	stw	r4,20(r19)
 8018040:	1820c03a 	cmpne	r16,r3,zero
 8018044:	84000044 	addi	r16,r16,1
 8018048:	98c00615 	stw	r3,24(r19)
 801804c:	9c000415 	stw	r16,16(r19)
 8018050:	88001b1e 	bne	r17,zero,80180c0 <__d2b+0xfc>
 8018054:	800690ba 	slli	r3,r16,2
 8018058:	10bef384 	addi	r2,r2,-1074
 801805c:	a0800015 	stw	r2,0(r20)
 8018060:	98c5883a 	add	r2,r19,r3
 8018064:	11000417 	ldw	r4,16(r2)
 8018068:	8020917a 	slli	r16,r16,5
 801806c:	80176700 	call	8017670 <__hi0bits>
 8018070:	8085c83a 	sub	r2,r16,r2
 8018074:	90800015 	stw	r2,0(r18)
 8018078:	9805883a 	mov	r2,r19
 801807c:	dfc00817 	ldw	ra,32(sp)
 8018080:	dd400717 	ldw	r21,28(sp)
 8018084:	dd000617 	ldw	r20,24(sp)
 8018088:	dcc00517 	ldw	r19,20(sp)
 801808c:	dc800417 	ldw	r18,16(sp)
 8018090:	dc400317 	ldw	r17,12(sp)
 8018094:	dc000217 	ldw	r16,8(sp)
 8018098:	dec00904 	addi	sp,sp,36
 801809c:	f800283a 	ret
 80180a0:	d809883a 	mov	r4,sp
 80180a4:	80176d80 	call	80176d8 <__lo0bits>
 80180a8:	d8c00017 	ldw	r3,0(sp)
 80180ac:	04000044 	movi	r16,1
 80180b0:	9c000415 	stw	r16,16(r19)
 80180b4:	98c00515 	stw	r3,20(r19)
 80180b8:	10800804 	addi	r2,r2,32
 80180bc:	883fe526 	beq	r17,zero,8018054 <__alt_data_end+0xf8018054>
 80180c0:	8c7ef344 	addi	r17,r17,-1075
 80180c4:	88a3883a 	add	r17,r17,r2
 80180c8:	00c00d44 	movi	r3,53
 80180cc:	a4400015 	stw	r17,0(r20)
 80180d0:	1885c83a 	sub	r2,r3,r2
 80180d4:	90800015 	stw	r2,0(r18)
 80180d8:	003fe706 	br	8018078 <__alt_data_end+0xf8018078>
 80180dc:	01000804 	movi	r4,32
 80180e0:	2089c83a 	sub	r4,r4,r2
 80180e4:	1908983a 	sll	r4,r3,r4
 80180e8:	d9400117 	ldw	r5,4(sp)
 80180ec:	1886d83a 	srl	r3,r3,r2
 80180f0:	2148b03a 	or	r4,r4,r5
 80180f4:	99000515 	stw	r4,20(r19)
 80180f8:	d8c00015 	stw	r3,0(sp)
 80180fc:	003fd006 	br	8018040 <__alt_data_end+0xf8018040>

08018100 <__ratio>:
 8018100:	defff904 	addi	sp,sp,-28
 8018104:	dc400315 	stw	r17,12(sp)
 8018108:	2823883a 	mov	r17,r5
 801810c:	d9400104 	addi	r5,sp,4
 8018110:	dfc00615 	stw	ra,24(sp)
 8018114:	dcc00515 	stw	r19,20(sp)
 8018118:	dc800415 	stw	r18,16(sp)
 801811c:	2027883a 	mov	r19,r4
 8018120:	dc000215 	stw	r16,8(sp)
 8018124:	8017ea80 	call	8017ea8 <__b2d>
 8018128:	8809883a 	mov	r4,r17
 801812c:	d80b883a 	mov	r5,sp
 8018130:	1025883a 	mov	r18,r2
 8018134:	1821883a 	mov	r16,r3
 8018138:	8017ea80 	call	8017ea8 <__b2d>
 801813c:	8a400417 	ldw	r9,16(r17)
 8018140:	9a000417 	ldw	r8,16(r19)
 8018144:	100d883a 	mov	r6,r2
 8018148:	d8800017 	ldw	r2,0(sp)
 801814c:	4251c83a 	sub	r8,r8,r9
 8018150:	4012917a 	slli	r9,r8,5
 8018154:	da000117 	ldw	r8,4(sp)
 8018158:	4091c83a 	sub	r8,r8,r2
 801815c:	4251883a 	add	r8,r8,r9
 8018160:	02000d0e 	bge	zero,r8,8018198 <__ratio+0x98>
 8018164:	4010953a 	slli	r8,r8,20
 8018168:	4421883a 	add	r16,r8,r16
 801816c:	9009883a 	mov	r4,r18
 8018170:	800b883a 	mov	r5,r16
 8018174:	180f883a 	mov	r7,r3
 8018178:	800d2ac0 	call	800d2ac <__divdf3>
 801817c:	dfc00617 	ldw	ra,24(sp)
 8018180:	dcc00517 	ldw	r19,20(sp)
 8018184:	dc800417 	ldw	r18,16(sp)
 8018188:	dc400317 	ldw	r17,12(sp)
 801818c:	dc000217 	ldw	r16,8(sp)
 8018190:	dec00704 	addi	sp,sp,28
 8018194:	f800283a 	ret
 8018198:	4010953a 	slli	r8,r8,20
 801819c:	1a07c83a 	sub	r3,r3,r8
 80181a0:	003ff206 	br	801816c <__alt_data_end+0xf801816c>

080181a4 <_mprec_log10>:
 80181a4:	defffe04 	addi	sp,sp,-8
 80181a8:	dc000015 	stw	r16,0(sp)
 80181ac:	dfc00115 	stw	ra,4(sp)
 80181b0:	008005c4 	movi	r2,23
 80181b4:	2021883a 	mov	r16,r4
 80181b8:	11000d0e 	bge	r2,r4,80181f0 <_mprec_log10+0x4c>
 80181bc:	0005883a 	mov	r2,zero
 80181c0:	00cffc34 	movhi	r3,16368
 80181c4:	843fffc4 	addi	r16,r16,-1
 80181c8:	1009883a 	mov	r4,r2
 80181cc:	180b883a 	mov	r5,r3
 80181d0:	000d883a 	mov	r6,zero
 80181d4:	01d00934 	movhi	r7,16420
 80181d8:	800ddbc0 	call	800ddbc <__muldf3>
 80181dc:	803ff91e 	bne	r16,zero,80181c4 <__alt_data_end+0xf80181c4>
 80181e0:	dfc00117 	ldw	ra,4(sp)
 80181e4:	dc000017 	ldw	r16,0(sp)
 80181e8:	dec00204 	addi	sp,sp,8
 80181ec:	f800283a 	ret
 80181f0:	202090fa 	slli	r16,r4,3
 80181f4:	008205b4 	movhi	r2,2070
 80181f8:	1097fa04 	addi	r2,r2,24552
 80181fc:	1421883a 	add	r16,r2,r16
 8018200:	80800017 	ldw	r2,0(r16)
 8018204:	80c00117 	ldw	r3,4(r16)
 8018208:	dfc00117 	ldw	ra,4(sp)
 801820c:	dc000017 	ldw	r16,0(sp)
 8018210:	dec00204 	addi	sp,sp,8
 8018214:	f800283a 	ret

08018218 <__copybits>:
 8018218:	297fffc4 	addi	r5,r5,-1
 801821c:	280fd17a 	srai	r7,r5,5
 8018220:	30c00417 	ldw	r3,16(r6)
 8018224:	30800504 	addi	r2,r6,20
 8018228:	39c00044 	addi	r7,r7,1
 801822c:	18c7883a 	add	r3,r3,r3
 8018230:	39cf883a 	add	r7,r7,r7
 8018234:	18c7883a 	add	r3,r3,r3
 8018238:	39cf883a 	add	r7,r7,r7
 801823c:	10c7883a 	add	r3,r2,r3
 8018240:	21cf883a 	add	r7,r4,r7
 8018244:	10c00d2e 	bgeu	r2,r3,801827c <__copybits+0x64>
 8018248:	200b883a 	mov	r5,r4
 801824c:	12000017 	ldw	r8,0(r2)
 8018250:	29400104 	addi	r5,r5,4
 8018254:	10800104 	addi	r2,r2,4
 8018258:	2a3fff15 	stw	r8,-4(r5)
 801825c:	10fffb36 	bltu	r2,r3,801824c <__alt_data_end+0xf801824c>
 8018260:	1985c83a 	sub	r2,r3,r6
 8018264:	10bffac4 	addi	r2,r2,-21
 8018268:	1004d0ba 	srli	r2,r2,2
 801826c:	10800044 	addi	r2,r2,1
 8018270:	1085883a 	add	r2,r2,r2
 8018274:	1085883a 	add	r2,r2,r2
 8018278:	2089883a 	add	r4,r4,r2
 801827c:	21c0032e 	bgeu	r4,r7,801828c <__copybits+0x74>
 8018280:	20000015 	stw	zero,0(r4)
 8018284:	21000104 	addi	r4,r4,4
 8018288:	21fffd36 	bltu	r4,r7,8018280 <__alt_data_end+0xf8018280>
 801828c:	f800283a 	ret

08018290 <__any_on>:
 8018290:	20c00417 	ldw	r3,16(r4)
 8018294:	2805d17a 	srai	r2,r5,5
 8018298:	21000504 	addi	r4,r4,20
 801829c:	18800d0e 	bge	r3,r2,80182d4 <__any_on+0x44>
 80182a0:	18c7883a 	add	r3,r3,r3
 80182a4:	18c7883a 	add	r3,r3,r3
 80182a8:	20c7883a 	add	r3,r4,r3
 80182ac:	20c0192e 	bgeu	r4,r3,8018314 <__any_on+0x84>
 80182b0:	18bfff17 	ldw	r2,-4(r3)
 80182b4:	18ffff04 	addi	r3,r3,-4
 80182b8:	1000041e 	bne	r2,zero,80182cc <__any_on+0x3c>
 80182bc:	20c0142e 	bgeu	r4,r3,8018310 <__any_on+0x80>
 80182c0:	18ffff04 	addi	r3,r3,-4
 80182c4:	19400017 	ldw	r5,0(r3)
 80182c8:	283ffc26 	beq	r5,zero,80182bc <__alt_data_end+0xf80182bc>
 80182cc:	00800044 	movi	r2,1
 80182d0:	f800283a 	ret
 80182d4:	10c00a0e 	bge	r2,r3,8018300 <__any_on+0x70>
 80182d8:	1085883a 	add	r2,r2,r2
 80182dc:	1085883a 	add	r2,r2,r2
 80182e0:	294007cc 	andi	r5,r5,31
 80182e4:	2087883a 	add	r3,r4,r2
 80182e8:	283ff026 	beq	r5,zero,80182ac <__alt_data_end+0xf80182ac>
 80182ec:	19800017 	ldw	r6,0(r3)
 80182f0:	3144d83a 	srl	r2,r6,r5
 80182f4:	114a983a 	sll	r5,r2,r5
 80182f8:	29bff41e 	bne	r5,r6,80182cc <__alt_data_end+0xf80182cc>
 80182fc:	003feb06 	br	80182ac <__alt_data_end+0xf80182ac>
 8018300:	1085883a 	add	r2,r2,r2
 8018304:	1085883a 	add	r2,r2,r2
 8018308:	2087883a 	add	r3,r4,r2
 801830c:	003fe706 	br	80182ac <__alt_data_end+0xf80182ac>
 8018310:	f800283a 	ret
 8018314:	0005883a 	mov	r2,zero
 8018318:	f800283a 	ret

0801831c <_realloc_r>:
 801831c:	defff604 	addi	sp,sp,-40
 8018320:	dd000415 	stw	r20,16(sp)
 8018324:	dc400115 	stw	r17,4(sp)
 8018328:	dfc00915 	stw	ra,36(sp)
 801832c:	df000815 	stw	fp,32(sp)
 8018330:	ddc00715 	stw	r23,28(sp)
 8018334:	dd800615 	stw	r22,24(sp)
 8018338:	dd400515 	stw	r21,20(sp)
 801833c:	dcc00315 	stw	r19,12(sp)
 8018340:	dc800215 	stw	r18,8(sp)
 8018344:	dc000015 	stw	r16,0(sp)
 8018348:	2829883a 	mov	r20,r5
 801834c:	3023883a 	mov	r17,r6
 8018350:	2800ad26 	beq	r5,zero,8018608 <_realloc_r+0x2ec>
 8018354:	2025883a 	mov	r18,r4
 8018358:	801ce800 	call	801ce80 <__malloc_lock>
 801835c:	a0ffff17 	ldw	r3,-4(r20)
 8018360:	043fff04 	movi	r16,-4
 8018364:	890002c4 	addi	r4,r17,11
 8018368:	01c00584 	movi	r7,22
 801836c:	a57ffe04 	addi	r21,r20,-8
 8018370:	1c20703a 	and	r16,r3,r16
 8018374:	39001d2e 	bgeu	r7,r4,80183ec <_realloc_r+0xd0>
 8018378:	05bffe04 	movi	r22,-8
 801837c:	25ac703a 	and	r22,r4,r22
 8018380:	b00f883a 	mov	r7,r22
 8018384:	b0006516 	blt	r22,zero,801851c <_realloc_r+0x200>
 8018388:	b4406436 	bltu	r22,r17,801851c <_realloc_r+0x200>
 801838c:	81c01a0e 	bge	r16,r7,80183f8 <_realloc_r+0xdc>
 8018390:	070205b4 	movhi	fp,2070
 8018394:	e71c8b04 	addi	fp,fp,29228
 8018398:	e1400217 	ldw	r5,8(fp)
 801839c:	ac11883a 	add	r8,r21,r16
 80183a0:	2a006226 	beq	r5,r8,801852c <_realloc_r+0x210>
 80183a4:	41800117 	ldw	r6,4(r8)
 80183a8:	027fff84 	movi	r9,-2
 80183ac:	3252703a 	and	r9,r6,r9
 80183b0:	4253883a 	add	r9,r8,r9
 80183b4:	49000117 	ldw	r4,4(r9)
 80183b8:	2100004c 	andi	r4,r4,1
 80183bc:	2000281e 	bne	r4,zero,8018460 <_realloc_r+0x144>
 80183c0:	00bfff04 	movi	r2,-4
 80183c4:	3084703a 	and	r2,r6,r2
 80183c8:	1409883a 	add	r4,r2,r16
 80183cc:	21c05e16 	blt	r4,r7,8018548 <_realloc_r+0x22c>
 80183d0:	40800317 	ldw	r2,12(r8)
 80183d4:	41400217 	ldw	r5,8(r8)
 80183d8:	a023883a 	mov	r17,r20
 80183dc:	2021883a 	mov	r16,r4
 80183e0:	28800315 	stw	r2,12(r5)
 80183e4:	11400215 	stw	r5,8(r2)
 80183e8:	00000406 	br	80183fc <_realloc_r+0xe0>
 80183ec:	01c00404 	movi	r7,16
 80183f0:	382d883a 	mov	r22,r7
 80183f4:	003fe406 	br	8018388 <__alt_data_end+0xf8018388>
 80183f8:	a023883a 	mov	r17,r20
 80183fc:	858fc83a 	sub	r7,r16,r22
 8018400:	008003c4 	movi	r2,15
 8018404:	18c0004c 	andi	r3,r3,1
 8018408:	11c07236 	bltu	r2,r7,80185d4 <_realloc_r+0x2b8>
 801840c:	1c06b03a 	or	r3,r3,r16
 8018410:	a8c00115 	stw	r3,4(r21)
 8018414:	ac21883a 	add	r16,r21,r16
 8018418:	80800117 	ldw	r2,4(r16)
 801841c:	10800054 	ori	r2,r2,1
 8018420:	80800115 	stw	r2,4(r16)
 8018424:	9009883a 	mov	r4,r18
 8018428:	801cea40 	call	801cea4 <__malloc_unlock>
 801842c:	8805883a 	mov	r2,r17
 8018430:	dfc00917 	ldw	ra,36(sp)
 8018434:	df000817 	ldw	fp,32(sp)
 8018438:	ddc00717 	ldw	r23,28(sp)
 801843c:	dd800617 	ldw	r22,24(sp)
 8018440:	dd400517 	ldw	r21,20(sp)
 8018444:	dd000417 	ldw	r20,16(sp)
 8018448:	dcc00317 	ldw	r19,12(sp)
 801844c:	dc800217 	ldw	r18,8(sp)
 8018450:	dc400117 	ldw	r17,4(sp)
 8018454:	dc000017 	ldw	r16,0(sp)
 8018458:	dec00a04 	addi	sp,sp,40
 801845c:	f800283a 	ret
 8018460:	18c0004c 	andi	r3,r3,1
 8018464:	1800081e 	bne	r3,zero,8018488 <_realloc_r+0x16c>
 8018468:	a4fffe17 	ldw	r19,-8(r20)
 801846c:	00bfff04 	movi	r2,-4
 8018470:	ace7c83a 	sub	r19,r21,r19
 8018474:	98c00117 	ldw	r3,4(r19)
 8018478:	1886703a 	and	r3,r3,r2
 801847c:	98000226 	beq	r19,zero,8018488 <_realloc_r+0x16c>
 8018480:	1c2f883a 	add	r23,r3,r16
 8018484:	b9c06d0e 	bge	r23,r7,801863c <_realloc_r+0x320>
 8018488:	880b883a 	mov	r5,r17
 801848c:	9009883a 	mov	r4,r18
 8018490:	800f4b00 	call	800f4b0 <_malloc_r>
 8018494:	1023883a 	mov	r17,r2
 8018498:	1000ef26 	beq	r2,zero,8018858 <_realloc_r+0x53c>
 801849c:	a0ffff17 	ldw	r3,-4(r20)
 80184a0:	113ffe04 	addi	r4,r2,-8
 80184a4:	00bfff84 	movi	r2,-2
 80184a8:	1884703a 	and	r2,r3,r2
 80184ac:	a885883a 	add	r2,r21,r2
 80184b0:	2080bf26 	beq	r4,r2,80187b0 <_realloc_r+0x494>
 80184b4:	81bfff04 	addi	r6,r16,-4
 80184b8:	00800904 	movi	r2,36
 80184bc:	11808936 	bltu	r2,r6,80186e4 <_realloc_r+0x3c8>
 80184c0:	00c004c4 	movi	r3,19
 80184c4:	19806c2e 	bgeu	r3,r6,8018678 <_realloc_r+0x35c>
 80184c8:	a0c00017 	ldw	r3,0(r20)
 80184cc:	88c00015 	stw	r3,0(r17)
 80184d0:	a0c00117 	ldw	r3,4(r20)
 80184d4:	88c00115 	stw	r3,4(r17)
 80184d8:	00c006c4 	movi	r3,27
 80184dc:	1980ac36 	bltu	r3,r6,8018790 <_realloc_r+0x474>
 80184e0:	88800204 	addi	r2,r17,8
 80184e4:	a0c00204 	addi	r3,r20,8
 80184e8:	19000017 	ldw	r4,0(r3)
 80184ec:	11000015 	stw	r4,0(r2)
 80184f0:	19000117 	ldw	r4,4(r3)
 80184f4:	11000115 	stw	r4,4(r2)
 80184f8:	18c00217 	ldw	r3,8(r3)
 80184fc:	10c00215 	stw	r3,8(r2)
 8018500:	a00b883a 	mov	r5,r20
 8018504:	9009883a 	mov	r4,r18
 8018508:	80165680 	call	8016568 <_free_r>
 801850c:	9009883a 	mov	r4,r18
 8018510:	801cea40 	call	801cea4 <__malloc_unlock>
 8018514:	8805883a 	mov	r2,r17
 8018518:	003fc506 	br	8018430 <__alt_data_end+0xf8018430>
 801851c:	00800304 	movi	r2,12
 8018520:	90800015 	stw	r2,0(r18)
 8018524:	0005883a 	mov	r2,zero
 8018528:	003fc106 	br	8018430 <__alt_data_end+0xf8018430>
 801852c:	29800117 	ldw	r6,4(r5)
 8018530:	00bfff04 	movi	r2,-4
 8018534:	b1000404 	addi	r4,r22,16
 8018538:	3084703a 	and	r2,r6,r2
 801853c:	140d883a 	add	r6,r2,r16
 8018540:	31005b0e 	bge	r6,r4,80186b0 <_realloc_r+0x394>
 8018544:	2811883a 	mov	r8,r5
 8018548:	18c0004c 	andi	r3,r3,1
 801854c:	183fce1e 	bne	r3,zero,8018488 <__alt_data_end+0xf8018488>
 8018550:	a4fffe17 	ldw	r19,-8(r20)
 8018554:	00ffff04 	movi	r3,-4
 8018558:	ace7c83a 	sub	r19,r21,r19
 801855c:	99000117 	ldw	r4,4(r19)
 8018560:	20c6703a 	and	r3,r4,r3
 8018564:	403fc526 	beq	r8,zero,801847c <__alt_data_end+0xf801847c>
 8018568:	1c2f883a 	add	r23,r3,r16
 801856c:	b8af883a 	add	r23,r23,r2
 8018570:	41406026 	beq	r8,r5,80186f4 <_realloc_r+0x3d8>
 8018574:	b9ffc116 	blt	r23,r7,801847c <__alt_data_end+0xf801847c>
 8018578:	40c00217 	ldw	r3,8(r8)
 801857c:	40800317 	ldw	r2,12(r8)
 8018580:	81bfff04 	addi	r6,r16,-4
 8018584:	01000904 	movi	r4,36
 8018588:	18800315 	stw	r2,12(r3)
 801858c:	10c00215 	stw	r3,8(r2)
 8018590:	99400217 	ldw	r5,8(r19)
 8018594:	98c00317 	ldw	r3,12(r19)
 8018598:	9c400204 	addi	r17,r19,8
 801859c:	28c00315 	stw	r3,12(r5)
 80185a0:	19400215 	stw	r5,8(r3)
 80185a4:	21802d36 	bltu	r4,r6,801865c <_realloc_r+0x340>
 80185a8:	008004c4 	movi	r2,19
 80185ac:	1180352e 	bgeu	r2,r6,8018684 <_realloc_r+0x368>
 80185b0:	a0800017 	ldw	r2,0(r20)
 80185b4:	98800215 	stw	r2,8(r19)
 80185b8:	a0800117 	ldw	r2,4(r20)
 80185bc:	98800315 	stw	r2,12(r19)
 80185c0:	008006c4 	movi	r2,27
 80185c4:	11808036 	bltu	r2,r6,80187c8 <_realloc_r+0x4ac>
 80185c8:	98c00404 	addi	r3,r19,16
 80185cc:	a5000204 	addi	r20,r20,8
 80185d0:	00002d06 	br	8018688 <_realloc_r+0x36c>
 80185d4:	1d86b03a 	or	r3,r3,r22
 80185d8:	ad8b883a 	add	r5,r21,r22
 80185dc:	a8c00115 	stw	r3,4(r21)
 80185e0:	38800054 	ori	r2,r7,1
 80185e4:	28800115 	stw	r2,4(r5)
 80185e8:	29cf883a 	add	r7,r5,r7
 80185ec:	38800117 	ldw	r2,4(r7)
 80185f0:	9009883a 	mov	r4,r18
 80185f4:	29400204 	addi	r5,r5,8
 80185f8:	10800054 	ori	r2,r2,1
 80185fc:	38800115 	stw	r2,4(r7)
 8018600:	80165680 	call	8016568 <_free_r>
 8018604:	003f8706 	br	8018424 <__alt_data_end+0xf8018424>
 8018608:	300b883a 	mov	r5,r6
 801860c:	dfc00917 	ldw	ra,36(sp)
 8018610:	df000817 	ldw	fp,32(sp)
 8018614:	ddc00717 	ldw	r23,28(sp)
 8018618:	dd800617 	ldw	r22,24(sp)
 801861c:	dd400517 	ldw	r21,20(sp)
 8018620:	dd000417 	ldw	r20,16(sp)
 8018624:	dcc00317 	ldw	r19,12(sp)
 8018628:	dc800217 	ldw	r18,8(sp)
 801862c:	dc400117 	ldw	r17,4(sp)
 8018630:	dc000017 	ldw	r16,0(sp)
 8018634:	dec00a04 	addi	sp,sp,40
 8018638:	800f4b01 	jmpi	800f4b0 <_malloc_r>
 801863c:	98800317 	ldw	r2,12(r19)
 8018640:	98c00217 	ldw	r3,8(r19)
 8018644:	81bfff04 	addi	r6,r16,-4
 8018648:	01000904 	movi	r4,36
 801864c:	18800315 	stw	r2,12(r3)
 8018650:	10c00215 	stw	r3,8(r2)
 8018654:	9c400204 	addi	r17,r19,8
 8018658:	21bfd32e 	bgeu	r4,r6,80185a8 <__alt_data_end+0xf80185a8>
 801865c:	8809883a 	mov	r4,r17
 8018660:	a00b883a 	mov	r5,r20
 8018664:	80172200 	call	8017220 <memmove>
 8018668:	98c00117 	ldw	r3,4(r19)
 801866c:	b821883a 	mov	r16,r23
 8018670:	982b883a 	mov	r21,r19
 8018674:	003f6106 	br	80183fc <__alt_data_end+0xf80183fc>
 8018678:	8805883a 	mov	r2,r17
 801867c:	a007883a 	mov	r3,r20
 8018680:	003f9906 	br	80184e8 <__alt_data_end+0xf80184e8>
 8018684:	8807883a 	mov	r3,r17
 8018688:	a0800017 	ldw	r2,0(r20)
 801868c:	b821883a 	mov	r16,r23
 8018690:	982b883a 	mov	r21,r19
 8018694:	18800015 	stw	r2,0(r3)
 8018698:	a0800117 	ldw	r2,4(r20)
 801869c:	18800115 	stw	r2,4(r3)
 80186a0:	a0800217 	ldw	r2,8(r20)
 80186a4:	18800215 	stw	r2,8(r3)
 80186a8:	98c00117 	ldw	r3,4(r19)
 80186ac:	003f5306 	br	80183fc <__alt_data_end+0xf80183fc>
 80186b0:	adab883a 	add	r21,r21,r22
 80186b4:	3585c83a 	sub	r2,r6,r22
 80186b8:	e5400215 	stw	r21,8(fp)
 80186bc:	10800054 	ori	r2,r2,1
 80186c0:	a8800115 	stw	r2,4(r21)
 80186c4:	a0bfff17 	ldw	r2,-4(r20)
 80186c8:	9009883a 	mov	r4,r18
 80186cc:	1080004c 	andi	r2,r2,1
 80186d0:	b0acb03a 	or	r22,r22,r2
 80186d4:	a5bfff15 	stw	r22,-4(r20)
 80186d8:	801cea40 	call	801cea4 <__malloc_unlock>
 80186dc:	a005883a 	mov	r2,r20
 80186e0:	003f5306 	br	8018430 <__alt_data_end+0xf8018430>
 80186e4:	8809883a 	mov	r4,r17
 80186e8:	a00b883a 	mov	r5,r20
 80186ec:	80172200 	call	8017220 <memmove>
 80186f0:	003f8306 	br	8018500 <__alt_data_end+0xf8018500>
 80186f4:	b0800404 	addi	r2,r22,16
 80186f8:	b8bf6016 	blt	r23,r2,801847c <__alt_data_end+0xf801847c>
 80186fc:	98800317 	ldw	r2,12(r19)
 8018700:	98c00217 	ldw	r3,8(r19)
 8018704:	81bfff04 	addi	r6,r16,-4
 8018708:	01000904 	movi	r4,36
 801870c:	18800315 	stw	r2,12(r3)
 8018710:	10c00215 	stw	r3,8(r2)
 8018714:	9c400204 	addi	r17,r19,8
 8018718:	21804336 	bltu	r4,r6,8018828 <_realloc_r+0x50c>
 801871c:	008004c4 	movi	r2,19
 8018720:	11803f2e 	bgeu	r2,r6,8018820 <_realloc_r+0x504>
 8018724:	a0800017 	ldw	r2,0(r20)
 8018728:	98800215 	stw	r2,8(r19)
 801872c:	a0800117 	ldw	r2,4(r20)
 8018730:	98800315 	stw	r2,12(r19)
 8018734:	008006c4 	movi	r2,27
 8018738:	11803f36 	bltu	r2,r6,8018838 <_realloc_r+0x51c>
 801873c:	98800404 	addi	r2,r19,16
 8018740:	a5000204 	addi	r20,r20,8
 8018744:	a0c00017 	ldw	r3,0(r20)
 8018748:	10c00015 	stw	r3,0(r2)
 801874c:	a0c00117 	ldw	r3,4(r20)
 8018750:	10c00115 	stw	r3,4(r2)
 8018754:	a0c00217 	ldw	r3,8(r20)
 8018758:	10c00215 	stw	r3,8(r2)
 801875c:	9d87883a 	add	r3,r19,r22
 8018760:	bd85c83a 	sub	r2,r23,r22
 8018764:	e0c00215 	stw	r3,8(fp)
 8018768:	10800054 	ori	r2,r2,1
 801876c:	18800115 	stw	r2,4(r3)
 8018770:	98800117 	ldw	r2,4(r19)
 8018774:	9009883a 	mov	r4,r18
 8018778:	1080004c 	andi	r2,r2,1
 801877c:	b0acb03a 	or	r22,r22,r2
 8018780:	9d800115 	stw	r22,4(r19)
 8018784:	801cea40 	call	801cea4 <__malloc_unlock>
 8018788:	8805883a 	mov	r2,r17
 801878c:	003f2806 	br	8018430 <__alt_data_end+0xf8018430>
 8018790:	a0c00217 	ldw	r3,8(r20)
 8018794:	88c00215 	stw	r3,8(r17)
 8018798:	a0c00317 	ldw	r3,12(r20)
 801879c:	88c00315 	stw	r3,12(r17)
 80187a0:	30801126 	beq	r6,r2,80187e8 <_realloc_r+0x4cc>
 80187a4:	88800404 	addi	r2,r17,16
 80187a8:	a0c00404 	addi	r3,r20,16
 80187ac:	003f4e06 	br	80184e8 <__alt_data_end+0xf80184e8>
 80187b0:	893fff17 	ldw	r4,-4(r17)
 80187b4:	00bfff04 	movi	r2,-4
 80187b8:	a023883a 	mov	r17,r20
 80187bc:	2084703a 	and	r2,r4,r2
 80187c0:	80a1883a 	add	r16,r16,r2
 80187c4:	003f0d06 	br	80183fc <__alt_data_end+0xf80183fc>
 80187c8:	a0800217 	ldw	r2,8(r20)
 80187cc:	98800415 	stw	r2,16(r19)
 80187d0:	a0800317 	ldw	r2,12(r20)
 80187d4:	98800515 	stw	r2,20(r19)
 80187d8:	31000a26 	beq	r6,r4,8018804 <_realloc_r+0x4e8>
 80187dc:	98c00604 	addi	r3,r19,24
 80187e0:	a5000404 	addi	r20,r20,16
 80187e4:	003fa806 	br	8018688 <__alt_data_end+0xf8018688>
 80187e8:	a1000417 	ldw	r4,16(r20)
 80187ec:	88800604 	addi	r2,r17,24
 80187f0:	a0c00604 	addi	r3,r20,24
 80187f4:	89000415 	stw	r4,16(r17)
 80187f8:	a1000517 	ldw	r4,20(r20)
 80187fc:	89000515 	stw	r4,20(r17)
 8018800:	003f3906 	br	80184e8 <__alt_data_end+0xf80184e8>
 8018804:	a0800417 	ldw	r2,16(r20)
 8018808:	a5000604 	addi	r20,r20,24
 801880c:	98c00804 	addi	r3,r19,32
 8018810:	98800615 	stw	r2,24(r19)
 8018814:	a0bfff17 	ldw	r2,-4(r20)
 8018818:	98800715 	stw	r2,28(r19)
 801881c:	003f9a06 	br	8018688 <__alt_data_end+0xf8018688>
 8018820:	8805883a 	mov	r2,r17
 8018824:	003fc706 	br	8018744 <__alt_data_end+0xf8018744>
 8018828:	8809883a 	mov	r4,r17
 801882c:	a00b883a 	mov	r5,r20
 8018830:	80172200 	call	8017220 <memmove>
 8018834:	003fc906 	br	801875c <__alt_data_end+0xf801875c>
 8018838:	a0800217 	ldw	r2,8(r20)
 801883c:	98800415 	stw	r2,16(r19)
 8018840:	a0800317 	ldw	r2,12(r20)
 8018844:	98800515 	stw	r2,20(r19)
 8018848:	31000726 	beq	r6,r4,8018868 <_realloc_r+0x54c>
 801884c:	98800604 	addi	r2,r19,24
 8018850:	a5000404 	addi	r20,r20,16
 8018854:	003fbb06 	br	8018744 <__alt_data_end+0xf8018744>
 8018858:	9009883a 	mov	r4,r18
 801885c:	801cea40 	call	801cea4 <__malloc_unlock>
 8018860:	0005883a 	mov	r2,zero
 8018864:	003ef206 	br	8018430 <__alt_data_end+0xf8018430>
 8018868:	a0c00417 	ldw	r3,16(r20)
 801886c:	a5000604 	addi	r20,r20,24
 8018870:	98800804 	addi	r2,r19,32
 8018874:	98c00615 	stw	r3,24(r19)
 8018878:	a0ffff17 	ldw	r3,-4(r20)
 801887c:	98c00715 	stw	r3,28(r19)
 8018880:	003fb006 	br	8018744 <__alt_data_end+0xf8018744>

08018884 <__fpclassifyd>:
 8018884:	00a00034 	movhi	r2,32768
 8018888:	10bfffc4 	addi	r2,r2,-1
 801888c:	2884703a 	and	r2,r5,r2
 8018890:	10000726 	beq	r2,zero,80188b0 <__fpclassifyd+0x2c>
 8018894:	00fffc34 	movhi	r3,65520
 8018898:	019ff834 	movhi	r6,32736
 801889c:	28c7883a 	add	r3,r5,r3
 80188a0:	31bfffc4 	addi	r6,r6,-1
 80188a4:	30c00536 	bltu	r6,r3,80188bc <__fpclassifyd+0x38>
 80188a8:	00800104 	movi	r2,4
 80188ac:	f800283a 	ret
 80188b0:	2000021e 	bne	r4,zero,80188bc <__fpclassifyd+0x38>
 80188b4:	00800084 	movi	r2,2
 80188b8:	f800283a 	ret
 80188bc:	00dffc34 	movhi	r3,32752
 80188c0:	019ff834 	movhi	r6,32736
 80188c4:	28cb883a 	add	r5,r5,r3
 80188c8:	31bfffc4 	addi	r6,r6,-1
 80188cc:	317ff62e 	bgeu	r6,r5,80188a8 <__alt_data_end+0xf80188a8>
 80188d0:	01400434 	movhi	r5,16
 80188d4:	297fffc4 	addi	r5,r5,-1
 80188d8:	28800236 	bltu	r5,r2,80188e4 <__fpclassifyd+0x60>
 80188dc:	008000c4 	movi	r2,3
 80188e0:	f800283a 	ret
 80188e4:	10c00226 	beq	r2,r3,80188f0 <__fpclassifyd+0x6c>
 80188e8:	0005883a 	mov	r2,zero
 80188ec:	f800283a 	ret
 80188f0:	2005003a 	cmpeq	r2,r4,zero
 80188f4:	f800283a 	ret

080188f8 <__sread>:
 80188f8:	defffe04 	addi	sp,sp,-8
 80188fc:	dc000015 	stw	r16,0(sp)
 8018900:	2821883a 	mov	r16,r5
 8018904:	2940038f 	ldh	r5,14(r5)
 8018908:	dfc00115 	stw	ra,4(sp)
 801890c:	801b7000 	call	801b700 <_read_r>
 8018910:	10000716 	blt	r2,zero,8018930 <__sread+0x38>
 8018914:	80c01417 	ldw	r3,80(r16)
 8018918:	1887883a 	add	r3,r3,r2
 801891c:	80c01415 	stw	r3,80(r16)
 8018920:	dfc00117 	ldw	ra,4(sp)
 8018924:	dc000017 	ldw	r16,0(sp)
 8018928:	dec00204 	addi	sp,sp,8
 801892c:	f800283a 	ret
 8018930:	80c0030b 	ldhu	r3,12(r16)
 8018934:	18fbffcc 	andi	r3,r3,61439
 8018938:	80c0030d 	sth	r3,12(r16)
 801893c:	dfc00117 	ldw	ra,4(sp)
 8018940:	dc000017 	ldw	r16,0(sp)
 8018944:	dec00204 	addi	sp,sp,8
 8018948:	f800283a 	ret

0801894c <__seofread>:
 801894c:	0005883a 	mov	r2,zero
 8018950:	f800283a 	ret

08018954 <__swrite>:
 8018954:	2880030b 	ldhu	r2,12(r5)
 8018958:	defffb04 	addi	sp,sp,-20
 801895c:	dcc00315 	stw	r19,12(sp)
 8018960:	dc800215 	stw	r18,8(sp)
 8018964:	dc400115 	stw	r17,4(sp)
 8018968:	dc000015 	stw	r16,0(sp)
 801896c:	dfc00415 	stw	ra,16(sp)
 8018970:	10c0400c 	andi	r3,r2,256
 8018974:	2821883a 	mov	r16,r5
 8018978:	2027883a 	mov	r19,r4
 801897c:	3025883a 	mov	r18,r6
 8018980:	3823883a 	mov	r17,r7
 8018984:	18000526 	beq	r3,zero,801899c <__swrite+0x48>
 8018988:	2940038f 	ldh	r5,14(r5)
 801898c:	000d883a 	mov	r6,zero
 8018990:	01c00084 	movi	r7,2
 8018994:	801b6a40 	call	801b6a4 <_lseek_r>
 8018998:	8080030b 	ldhu	r2,12(r16)
 801899c:	8140038f 	ldh	r5,14(r16)
 80189a0:	10bbffcc 	andi	r2,r2,61439
 80189a4:	9809883a 	mov	r4,r19
 80189a8:	900d883a 	mov	r6,r18
 80189ac:	880f883a 	mov	r7,r17
 80189b0:	8080030d 	sth	r2,12(r16)
 80189b4:	dfc00417 	ldw	ra,16(sp)
 80189b8:	dcc00317 	ldw	r19,12(sp)
 80189bc:	dc800217 	ldw	r18,8(sp)
 80189c0:	dc400117 	ldw	r17,4(sp)
 80189c4:	dc000017 	ldw	r16,0(sp)
 80189c8:	dec00504 	addi	sp,sp,20
 80189cc:	801b1a01 	jmpi	801b1a0 <_write_r>

080189d0 <__sseek>:
 80189d0:	defffe04 	addi	sp,sp,-8
 80189d4:	dc000015 	stw	r16,0(sp)
 80189d8:	2821883a 	mov	r16,r5
 80189dc:	2940038f 	ldh	r5,14(r5)
 80189e0:	dfc00115 	stw	ra,4(sp)
 80189e4:	801b6a40 	call	801b6a4 <_lseek_r>
 80189e8:	00ffffc4 	movi	r3,-1
 80189ec:	10c00826 	beq	r2,r3,8018a10 <__sseek+0x40>
 80189f0:	80c0030b 	ldhu	r3,12(r16)
 80189f4:	80801415 	stw	r2,80(r16)
 80189f8:	18c40014 	ori	r3,r3,4096
 80189fc:	80c0030d 	sth	r3,12(r16)
 8018a00:	dfc00117 	ldw	ra,4(sp)
 8018a04:	dc000017 	ldw	r16,0(sp)
 8018a08:	dec00204 	addi	sp,sp,8
 8018a0c:	f800283a 	ret
 8018a10:	80c0030b 	ldhu	r3,12(r16)
 8018a14:	18fbffcc 	andi	r3,r3,61439
 8018a18:	80c0030d 	sth	r3,12(r16)
 8018a1c:	dfc00117 	ldw	ra,4(sp)
 8018a20:	dc000017 	ldw	r16,0(sp)
 8018a24:	dec00204 	addi	sp,sp,8
 8018a28:	f800283a 	ret

08018a2c <__sclose>:
 8018a2c:	2940038f 	ldh	r5,14(r5)
 8018a30:	801b1fc1 	jmpi	801b1fc <_close_r>

08018a34 <strcmp>:
 8018a34:	2144b03a 	or	r2,r4,r5
 8018a38:	108000cc 	andi	r2,r2,3
 8018a3c:	1000171e 	bne	r2,zero,8018a9c <strcmp+0x68>
 8018a40:	20800017 	ldw	r2,0(r4)
 8018a44:	28c00017 	ldw	r3,0(r5)
 8018a48:	10c0141e 	bne	r2,r3,8018a9c <strcmp+0x68>
 8018a4c:	027fbff4 	movhi	r9,65279
 8018a50:	4a7fbfc4 	addi	r9,r9,-257
 8018a54:	0086303a 	nor	r3,zero,r2
 8018a58:	02202074 	movhi	r8,32897
 8018a5c:	1245883a 	add	r2,r2,r9
 8018a60:	42202004 	addi	r8,r8,-32640
 8018a64:	10c4703a 	and	r2,r2,r3
 8018a68:	1204703a 	and	r2,r2,r8
 8018a6c:	10000226 	beq	r2,zero,8018a78 <strcmp+0x44>
 8018a70:	00001706 	br	8018ad0 <strcmp+0x9c>
 8018a74:	1000161e 	bne	r2,zero,8018ad0 <strcmp+0x9c>
 8018a78:	21000104 	addi	r4,r4,4
 8018a7c:	20c00017 	ldw	r3,0(r4)
 8018a80:	29400104 	addi	r5,r5,4
 8018a84:	29800017 	ldw	r6,0(r5)
 8018a88:	1a4f883a 	add	r7,r3,r9
 8018a8c:	00c4303a 	nor	r2,zero,r3
 8018a90:	3884703a 	and	r2,r7,r2
 8018a94:	1204703a 	and	r2,r2,r8
 8018a98:	19bff626 	beq	r3,r6,8018a74 <__alt_data_end+0xf8018a74>
 8018a9c:	20800007 	ldb	r2,0(r4)
 8018aa0:	1000051e 	bne	r2,zero,8018ab8 <strcmp+0x84>
 8018aa4:	00000606 	br	8018ac0 <strcmp+0x8c>
 8018aa8:	21000044 	addi	r4,r4,1
 8018aac:	20800007 	ldb	r2,0(r4)
 8018ab0:	29400044 	addi	r5,r5,1
 8018ab4:	10000226 	beq	r2,zero,8018ac0 <strcmp+0x8c>
 8018ab8:	28c00007 	ldb	r3,0(r5)
 8018abc:	10fffa26 	beq	r2,r3,8018aa8 <__alt_data_end+0xf8018aa8>
 8018ac0:	20800003 	ldbu	r2,0(r4)
 8018ac4:	28c00003 	ldbu	r3,0(r5)
 8018ac8:	10c5c83a 	sub	r2,r2,r3
 8018acc:	f800283a 	ret
 8018ad0:	0005883a 	mov	r2,zero
 8018ad4:	f800283a 	ret

08018ad8 <__ssprint_r>:
 8018ad8:	30800217 	ldw	r2,8(r6)
 8018adc:	defff604 	addi	sp,sp,-40
 8018ae0:	ddc00715 	stw	r23,28(sp)
 8018ae4:	dc800215 	stw	r18,8(sp)
 8018ae8:	dfc00915 	stw	ra,36(sp)
 8018aec:	df000815 	stw	fp,32(sp)
 8018af0:	dd800615 	stw	r22,24(sp)
 8018af4:	dd400515 	stw	r21,20(sp)
 8018af8:	dd000415 	stw	r20,16(sp)
 8018afc:	dcc00315 	stw	r19,12(sp)
 8018b00:	dc400115 	stw	r17,4(sp)
 8018b04:	dc000015 	stw	r16,0(sp)
 8018b08:	3025883a 	mov	r18,r6
 8018b0c:	35c00017 	ldw	r23,0(r6)
 8018b10:	10005626 	beq	r2,zero,8018c6c <__ssprint_r+0x194>
 8018b14:	2027883a 	mov	r19,r4
 8018b18:	28800217 	ldw	r2,8(r5)
 8018b1c:	29000017 	ldw	r4,0(r5)
 8018b20:	2823883a 	mov	r17,r5
 8018b24:	0039883a 	mov	fp,zero
 8018b28:	0021883a 	mov	r16,zero
 8018b2c:	80003926 	beq	r16,zero,8018c14 <__ssprint_r+0x13c>
 8018b30:	102b883a 	mov	r21,r2
 8018b34:	102d883a 	mov	r22,r2
 8018b38:	80803a36 	bltu	r16,r2,8018c24 <__ssprint_r+0x14c>
 8018b3c:	88c0030b 	ldhu	r3,12(r17)
 8018b40:	1881200c 	andi	r2,r3,1152
 8018b44:	10002626 	beq	r2,zero,8018be0 <__ssprint_r+0x108>
 8018b48:	88800517 	ldw	r2,20(r17)
 8018b4c:	89400417 	ldw	r5,16(r17)
 8018b50:	81c00044 	addi	r7,r16,1
 8018b54:	108d883a 	add	r6,r2,r2
 8018b58:	3085883a 	add	r2,r6,r2
 8018b5c:	100cd7fa 	srli	r6,r2,31
 8018b60:	216dc83a 	sub	r22,r4,r5
 8018b64:	3d89883a 	add	r4,r7,r22
 8018b68:	3085883a 	add	r2,r6,r2
 8018b6c:	102bd07a 	srai	r21,r2,1
 8018b70:	a80d883a 	mov	r6,r21
 8018b74:	a900022e 	bgeu	r21,r4,8018b80 <__ssprint_r+0xa8>
 8018b78:	202b883a 	mov	r21,r4
 8018b7c:	200d883a 	mov	r6,r4
 8018b80:	18c1000c 	andi	r3,r3,1024
 8018b84:	9809883a 	mov	r4,r19
 8018b88:	18002926 	beq	r3,zero,8018c30 <__ssprint_r+0x158>
 8018b8c:	300b883a 	mov	r5,r6
 8018b90:	800f4b00 	call	800f4b0 <_malloc_r>
 8018b94:	1029883a 	mov	r20,r2
 8018b98:	10002b26 	beq	r2,zero,8018c48 <__ssprint_r+0x170>
 8018b9c:	89400417 	ldw	r5,16(r17)
 8018ba0:	1009883a 	mov	r4,r2
 8018ba4:	b00d883a 	mov	r6,r22
 8018ba8:	800fc580 	call	800fc58 <memcpy>
 8018bac:	8880030b 	ldhu	r2,12(r17)
 8018bb0:	00fedfc4 	movi	r3,-1153
 8018bb4:	10c4703a 	and	r2,r2,r3
 8018bb8:	10802014 	ori	r2,r2,128
 8018bbc:	8880030d 	sth	r2,12(r17)
 8018bc0:	a589883a 	add	r4,r20,r22
 8018bc4:	adadc83a 	sub	r22,r21,r22
 8018bc8:	8d400515 	stw	r21,20(r17)
 8018bcc:	8d800215 	stw	r22,8(r17)
 8018bd0:	8d000415 	stw	r20,16(r17)
 8018bd4:	89000015 	stw	r4,0(r17)
 8018bd8:	802b883a 	mov	r21,r16
 8018bdc:	802d883a 	mov	r22,r16
 8018be0:	e00b883a 	mov	r5,fp
 8018be4:	b00d883a 	mov	r6,r22
 8018be8:	80172200 	call	8017220 <memmove>
 8018bec:	88800217 	ldw	r2,8(r17)
 8018bf0:	89000017 	ldw	r4,0(r17)
 8018bf4:	90c00217 	ldw	r3,8(r18)
 8018bf8:	1545c83a 	sub	r2,r2,r21
 8018bfc:	2589883a 	add	r4,r4,r22
 8018c00:	88800215 	stw	r2,8(r17)
 8018c04:	89000015 	stw	r4,0(r17)
 8018c08:	1c21c83a 	sub	r16,r3,r16
 8018c0c:	94000215 	stw	r16,8(r18)
 8018c10:	80001626 	beq	r16,zero,8018c6c <__ssprint_r+0x194>
 8018c14:	bf000017 	ldw	fp,0(r23)
 8018c18:	bc000117 	ldw	r16,4(r23)
 8018c1c:	bdc00204 	addi	r23,r23,8
 8018c20:	003fc206 	br	8018b2c <__alt_data_end+0xf8018b2c>
 8018c24:	802b883a 	mov	r21,r16
 8018c28:	802d883a 	mov	r22,r16
 8018c2c:	003fec06 	br	8018be0 <__alt_data_end+0xf8018be0>
 8018c30:	801831c0 	call	801831c <_realloc_r>
 8018c34:	1029883a 	mov	r20,r2
 8018c38:	103fe11e 	bne	r2,zero,8018bc0 <__alt_data_end+0xf8018bc0>
 8018c3c:	89400417 	ldw	r5,16(r17)
 8018c40:	9809883a 	mov	r4,r19
 8018c44:	80165680 	call	8016568 <_free_r>
 8018c48:	88c0030b 	ldhu	r3,12(r17)
 8018c4c:	00800304 	movi	r2,12
 8018c50:	98800015 	stw	r2,0(r19)
 8018c54:	18c01014 	ori	r3,r3,64
 8018c58:	88c0030d 	sth	r3,12(r17)
 8018c5c:	00bfffc4 	movi	r2,-1
 8018c60:	90000215 	stw	zero,8(r18)
 8018c64:	90000115 	stw	zero,4(r18)
 8018c68:	00000206 	br	8018c74 <__ssprint_r+0x19c>
 8018c6c:	90000115 	stw	zero,4(r18)
 8018c70:	0005883a 	mov	r2,zero
 8018c74:	dfc00917 	ldw	ra,36(sp)
 8018c78:	df000817 	ldw	fp,32(sp)
 8018c7c:	ddc00717 	ldw	r23,28(sp)
 8018c80:	dd800617 	ldw	r22,24(sp)
 8018c84:	dd400517 	ldw	r21,20(sp)
 8018c88:	dd000417 	ldw	r20,16(sp)
 8018c8c:	dcc00317 	ldw	r19,12(sp)
 8018c90:	dc800217 	ldw	r18,8(sp)
 8018c94:	dc400117 	ldw	r17,4(sp)
 8018c98:	dc000017 	ldw	r16,0(sp)
 8018c9c:	dec00a04 	addi	sp,sp,40
 8018ca0:	f800283a 	ret

08018ca4 <___svfiprintf_internal_r>:
 8018ca4:	2880030b 	ldhu	r2,12(r5)
 8018ca8:	deffc904 	addi	sp,sp,-220
 8018cac:	dd403215 	stw	r21,200(sp)
 8018cb0:	dfc03615 	stw	ra,216(sp)
 8018cb4:	df003515 	stw	fp,212(sp)
 8018cb8:	ddc03415 	stw	r23,208(sp)
 8018cbc:	dd803315 	stw	r22,204(sp)
 8018cc0:	dd003115 	stw	r20,196(sp)
 8018cc4:	dcc03015 	stw	r19,192(sp)
 8018cc8:	dc802f15 	stw	r18,188(sp)
 8018ccc:	dc402e15 	stw	r17,184(sp)
 8018cd0:	dc002d15 	stw	r16,180(sp)
 8018cd4:	d9402715 	stw	r5,156(sp)
 8018cd8:	d9002915 	stw	r4,164(sp)
 8018cdc:	1080200c 	andi	r2,r2,128
 8018ce0:	d9c02315 	stw	r7,140(sp)
 8018ce4:	302b883a 	mov	r21,r6
 8018ce8:	10000226 	beq	r2,zero,8018cf4 <___svfiprintf_internal_r+0x50>
 8018cec:	28800417 	ldw	r2,16(r5)
 8018cf0:	1003ce26 	beq	r2,zero,8019c2c <___svfiprintf_internal_r+0xf88>
 8018cf4:	dac01a04 	addi	r11,sp,104
 8018cf8:	da8019c4 	addi	r10,sp,103
 8018cfc:	dc802917 	ldw	r18,164(sp)
 8018d00:	dd002717 	ldw	r20,156(sp)
 8018d04:	04c205b4 	movhi	r19,2070
 8018d08:	dac01e15 	stw	r11,120(sp)
 8018d0c:	5a97c83a 	sub	r11,r11,r10
 8018d10:	9cd82c04 	addi	r19,r19,24752
 8018d14:	da801f15 	stw	r10,124(sp)
 8018d18:	dec01a15 	stw	sp,104(sp)
 8018d1c:	d8001c15 	stw	zero,112(sp)
 8018d20:	d8001b15 	stw	zero,108(sp)
 8018d24:	d811883a 	mov	r8,sp
 8018d28:	d8002a15 	stw	zero,168(sp)
 8018d2c:	d8002415 	stw	zero,144(sp)
 8018d30:	dac02b15 	stw	r11,172(sp)
 8018d34:	a8800007 	ldb	r2,0(r21)
 8018d38:	10026a26 	beq	r2,zero,80196e4 <___svfiprintf_internal_r+0xa40>
 8018d3c:	01000944 	movi	r4,37
 8018d40:	11026826 	beq	r2,r4,80196e4 <___svfiprintf_internal_r+0xa40>
 8018d44:	a805883a 	mov	r2,r21
 8018d48:	00000106 	br	8018d50 <___svfiprintf_internal_r+0xac>
 8018d4c:	19000326 	beq	r3,r4,8018d5c <___svfiprintf_internal_r+0xb8>
 8018d50:	10800044 	addi	r2,r2,1
 8018d54:	10c00007 	ldb	r3,0(r2)
 8018d58:	183ffc1e 	bne	r3,zero,8018d4c <__alt_data_end+0xf8018d4c>
 8018d5c:	1561c83a 	sub	r16,r2,r21
 8018d60:	102d883a 	mov	r22,r2
 8018d64:	80000e26 	beq	r16,zero,8018da0 <___svfiprintf_internal_r+0xfc>
 8018d68:	d8c01c17 	ldw	r3,112(sp)
 8018d6c:	d8801b17 	ldw	r2,108(sp)
 8018d70:	45400015 	stw	r21,0(r8)
 8018d74:	1c07883a 	add	r3,r3,r16
 8018d78:	10800044 	addi	r2,r2,1
 8018d7c:	d8c01c15 	stw	r3,112(sp)
 8018d80:	44000115 	stw	r16,4(r8)
 8018d84:	d8801b15 	stw	r2,108(sp)
 8018d88:	00c001c4 	movi	r3,7
 8018d8c:	1882d816 	blt	r3,r2,80198f0 <___svfiprintf_internal_r+0xc4c>
 8018d90:	42000204 	addi	r8,r8,8
 8018d94:	da802417 	ldw	r10,144(sp)
 8018d98:	5415883a 	add	r10,r10,r16
 8018d9c:	da802415 	stw	r10,144(sp)
 8018da0:	b0800007 	ldb	r2,0(r22)
 8018da4:	10027526 	beq	r2,zero,801977c <___svfiprintf_internal_r+0xad8>
 8018da8:	b1000047 	ldb	r4,1(r22)
 8018dac:	b5400044 	addi	r21,r22,1
 8018db0:	d8001d85 	stb	zero,118(sp)
 8018db4:	000d883a 	mov	r6,zero
 8018db8:	043fffc4 	movi	r16,-1
 8018dbc:	d8002115 	stw	zero,132(sp)
 8018dc0:	0023883a 	mov	r17,zero
 8018dc4:	00c01604 	movi	r3,88
 8018dc8:	01400244 	movi	r5,9
 8018dcc:	02400a84 	movi	r9,42
 8018dd0:	01c01b04 	movi	r7,108
 8018dd4:	ad400044 	addi	r21,r21,1
 8018dd8:	20bff804 	addi	r2,r4,-32
 8018ddc:	18819736 	bltu	r3,r2,801943c <___svfiprintf_internal_r+0x798>
 8018de0:	100490ba 	slli	r2,r2,2
 8018de4:	02c200b4 	movhi	r11,2050
 8018de8:	5ae37e04 	addi	r11,r11,-29192
 8018dec:	12c5883a 	add	r2,r2,r11
 8018df0:	10800017 	ldw	r2,0(r2)
 8018df4:	1000683a 	jmp	r2
 8018df8:	08019334 	orhi	zero,at,1612
 8018dfc:	0801943c 	xorhi	zero,at,1616
 8018e00:	0801943c 	xorhi	zero,at,1616
 8018e04:	08019328 	cmpgeui	zero,at,1612
 8018e08:	0801943c 	xorhi	zero,at,1616
 8018e0c:	0801943c 	xorhi	zero,at,1616
 8018e10:	0801943c 	xorhi	zero,at,1616
 8018e14:	0801943c 	xorhi	zero,at,1616
 8018e18:	0801943c 	xorhi	zero,at,1616
 8018e1c:	0801943c 	xorhi	zero,at,1616
 8018e20:	08019054 	ori	zero,at,1601
 8018e24:	08019470 	cmpltui	zero,at,1617
 8018e28:	0801943c 	xorhi	zero,at,1616
 8018e2c:	0801907c 	xorhi	zero,at,1601
 8018e30:	0801947c 	xorhi	zero,at,1617
 8018e34:	0801943c 	xorhi	zero,at,1616
 8018e38:	08019464 	muli	zero,at,1617
 8018e3c:	08019404 	addi	zero,at,1616
 8018e40:	08019404 	addi	zero,at,1616
 8018e44:	08019404 	addi	zero,at,1616
 8018e48:	08019404 	addi	zero,at,1616
 8018e4c:	08019404 	addi	zero,at,1616
 8018e50:	08019404 	addi	zero,at,1616
 8018e54:	08019404 	addi	zero,at,1616
 8018e58:	08019404 	addi	zero,at,1616
 8018e5c:	08019404 	addi	zero,at,1616
 8018e60:	0801943c 	xorhi	zero,at,1616
 8018e64:	0801943c 	xorhi	zero,at,1616
 8018e68:	0801943c 	xorhi	zero,at,1616
 8018e6c:	0801943c 	xorhi	zero,at,1616
 8018e70:	0801943c 	xorhi	zero,at,1616
 8018e74:	0801943c 	xorhi	zero,at,1616
 8018e78:	0801943c 	xorhi	zero,at,1616
 8018e7c:	0801943c 	xorhi	zero,at,1616
 8018e80:	0801943c 	xorhi	zero,at,1616
 8018e84:	0801943c 	xorhi	zero,at,1616
 8018e88:	0801939c 	xori	zero,at,1614
 8018e8c:	0801943c 	xorhi	zero,at,1616
 8018e90:	0801943c 	xorhi	zero,at,1616
 8018e94:	0801943c 	xorhi	zero,at,1616
 8018e98:	0801943c 	xorhi	zero,at,1616
 8018e9c:	0801943c 	xorhi	zero,at,1616
 8018ea0:	0801943c 	xorhi	zero,at,1616
 8018ea4:	0801943c 	xorhi	zero,at,1616
 8018ea8:	0801943c 	xorhi	zero,at,1616
 8018eac:	0801943c 	xorhi	zero,at,1616
 8018eb0:	0801943c 	xorhi	zero,at,1616
 8018eb4:	08019028 	cmpgeui	zero,at,1600
 8018eb8:	0801943c 	xorhi	zero,at,1616
 8018ebc:	0801943c 	xorhi	zero,at,1616
 8018ec0:	0801943c 	xorhi	zero,at,1616
 8018ec4:	0801943c 	xorhi	zero,at,1616
 8018ec8:	0801943c 	xorhi	zero,at,1616
 8018ecc:	08018f5c 	xori	zero,at,1597
 8018ed0:	0801943c 	xorhi	zero,at,1616
 8018ed4:	0801943c 	xorhi	zero,at,1616
 8018ed8:	08019288 	cmpgei	zero,at,1610
 8018edc:	0801943c 	xorhi	zero,at,1616
 8018ee0:	0801943c 	xorhi	zero,at,1616
 8018ee4:	0801943c 	xorhi	zero,at,1616
 8018ee8:	0801943c 	xorhi	zero,at,1616
 8018eec:	0801943c 	xorhi	zero,at,1616
 8018ef0:	0801943c 	xorhi	zero,at,1616
 8018ef4:	0801943c 	xorhi	zero,at,1616
 8018ef8:	0801943c 	xorhi	zero,at,1616
 8018efc:	0801943c 	xorhi	zero,at,1616
 8018f00:	0801943c 	xorhi	zero,at,1616
 8018f04:	08019174 	orhi	zero,at,1605
 8018f08:	08019134 	orhi	zero,at,1604
 8018f0c:	0801943c 	xorhi	zero,at,1616
 8018f10:	0801943c 	xorhi	zero,at,1616
 8018f14:	0801943c 	xorhi	zero,at,1616
 8018f18:	080192e4 	muli	zero,at,1611
 8018f1c:	08019134 	orhi	zero,at,1604
 8018f20:	0801943c 	xorhi	zero,at,1616
 8018f24:	0801943c 	xorhi	zero,at,1616
 8018f28:	080192d0 	cmplti	zero,at,1611
 8018f2c:	0801943c 	xorhi	zero,at,1616
 8018f30:	080192f0 	cmpltui	zero,at,1611
 8018f34:	0801902c 	andhi	zero,at,1600
 8018f38:	080190f0 	cmpltui	zero,at,1603
 8018f3c:	080190e4 	muli	zero,at,1603
 8018f40:	0801943c 	xorhi	zero,at,1616
 8018f44:	08019088 	cmpgei	zero,at,1602
 8018f48:	0801943c 	xorhi	zero,at,1616
 8018f4c:	08018f60 	cmpeqi	zero,at,1597
 8018f50:	0801943c 	xorhi	zero,at,1616
 8018f54:	0801943c 	xorhi	zero,at,1616
 8018f58:	08019350 	cmplti	zero,at,1613
 8018f5c:	8c400414 	ori	r17,r17,16
 8018f60:	8880080c 	andi	r2,r17,32
 8018f64:	10029626 	beq	r2,zero,80199c0 <___svfiprintf_internal_r+0xd1c>
 8018f68:	da802317 	ldw	r10,140(sp)
 8018f6c:	dac02317 	ldw	r11,140(sp)
 8018f70:	00800044 	movi	r2,1
 8018f74:	52400017 	ldw	r9,0(r10)
 8018f78:	52800117 	ldw	r10,4(r10)
 8018f7c:	5ac00204 	addi	r11,r11,8
 8018f80:	dac02315 	stw	r11,140(sp)
 8018f84:	4a86b03a 	or	r3,r9,r10
 8018f88:	d8001d85 	stb	zero,118(sp)
 8018f8c:	8039883a 	mov	fp,r16
 8018f90:	0017883a 	mov	r11,zero
 8018f94:	80000216 	blt	r16,zero,8018fa0 <___svfiprintf_internal_r+0x2fc>
 8018f98:	013fdfc4 	movi	r4,-129
 8018f9c:	8922703a 	and	r17,r17,r4
 8018fa0:	1801d21e 	bne	r3,zero,80196ec <___svfiprintf_internal_r+0xa48>
 8018fa4:	80024626 	beq	r16,zero,80198c0 <___svfiprintf_internal_r+0xc1c>
 8018fa8:	10803fcc 	andi	r2,r2,255
 8018fac:	00c00044 	movi	r3,1
 8018fb0:	10c2b426 	beq	r2,r3,8019a84 <___svfiprintf_internal_r+0xde0>
 8018fb4:	00c00084 	movi	r3,2
 8018fb8:	10c25d26 	beq	r2,r3,8019930 <___svfiprintf_internal_r+0xc8c>
 8018fbc:	d8c01a04 	addi	r3,sp,104
 8018fc0:	4808d0fa 	srli	r4,r9,3
 8018fc4:	500a977a 	slli	r5,r10,29
 8018fc8:	5014d0fa 	srli	r10,r10,3
 8018fcc:	4a4001cc 	andi	r9,r9,7
 8018fd0:	48800c04 	addi	r2,r9,48
 8018fd4:	18ffffc4 	addi	r3,r3,-1
 8018fd8:	2912b03a 	or	r9,r5,r4
 8018fdc:	18800005 	stb	r2,0(r3)
 8018fe0:	4a88b03a 	or	r4,r9,r10
 8018fe4:	203ff61e 	bne	r4,zero,8018fc0 <__alt_data_end+0xf8018fc0>
 8018fe8:	8900004c 	andi	r4,r17,1
 8018fec:	d8c02615 	stw	r3,152(sp)
 8018ff0:	2002961e 	bne	r4,zero,8019a4c <___svfiprintf_internal_r+0xda8>
 8018ff4:	da801e17 	ldw	r10,120(sp)
 8018ff8:	50f9c83a 	sub	fp,r10,r3
 8018ffc:	df002015 	stw	fp,128(sp)
 8019000:	e400010e 	bge	fp,r16,8019008 <___svfiprintf_internal_r+0x364>
 8019004:	dc002015 	stw	r16,128(sp)
 8019008:	5ac03fcc 	andi	r11,r11,255
 801900c:	5ac0201c 	xori	r11,r11,128
 8019010:	5affe004 	addi	r11,r11,-128
 8019014:	58006326 	beq	r11,zero,80191a4 <___svfiprintf_internal_r+0x500>
 8019018:	d8c02017 	ldw	r3,128(sp)
 801901c:	18c00044 	addi	r3,r3,1
 8019020:	d8c02015 	stw	r3,128(sp)
 8019024:	00005f06 	br	80191a4 <___svfiprintf_internal_r+0x500>
 8019028:	8c400414 	ori	r17,r17,16
 801902c:	8880080c 	andi	r2,r17,32
 8019030:	10027926 	beq	r2,zero,8019a18 <___svfiprintf_internal_r+0xd74>
 8019034:	dac02317 	ldw	r11,140(sp)
 8019038:	0005883a 	mov	r2,zero
 801903c:	5a400017 	ldw	r9,0(r11)
 8019040:	5a800117 	ldw	r10,4(r11)
 8019044:	5ac00204 	addi	r11,r11,8
 8019048:	dac02315 	stw	r11,140(sp)
 801904c:	4a86b03a 	or	r3,r9,r10
 8019050:	003fcd06 	br	8018f88 <__alt_data_end+0xf8018f88>
 8019054:	da802317 	ldw	r10,140(sp)
 8019058:	dac02317 	ldw	r11,140(sp)
 801905c:	52800017 	ldw	r10,0(r10)
 8019060:	58800104 	addi	r2,r11,4
 8019064:	da802115 	stw	r10,132(sp)
 8019068:	50028c0e 	bge	r10,zero,8019a9c <___svfiprintf_internal_r+0xdf8>
 801906c:	da802117 	ldw	r10,132(sp)
 8019070:	d8802315 	stw	r2,140(sp)
 8019074:	0295c83a 	sub	r10,zero,r10
 8019078:	da802115 	stw	r10,132(sp)
 801907c:	8c400114 	ori	r17,r17,4
 8019080:	a9000007 	ldb	r4,0(r21)
 8019084:	003f5306 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019088:	da802317 	ldw	r10,140(sp)
 801908c:	dac02317 	ldw	r11,140(sp)
 8019090:	d8001d85 	stb	zero,118(sp)
 8019094:	52800017 	ldw	r10,0(r10)
 8019098:	5dc00104 	addi	r23,r11,4
 801909c:	da802615 	stw	r10,152(sp)
 80190a0:	5002d626 	beq	r10,zero,8019bfc <___svfiprintf_internal_r+0xf58>
 80190a4:	d9002617 	ldw	r4,152(sp)
 80190a8:	8002cc16 	blt	r16,zero,8019bdc <___svfiprintf_internal_r+0xf38>
 80190ac:	000b883a 	mov	r5,zero
 80190b0:	800d883a 	mov	r6,r16
 80190b4:	da002c15 	stw	r8,176(sp)
 80190b8:	80171380 	call	8017138 <memchr>
 80190bc:	da002c17 	ldw	r8,176(sp)
 80190c0:	1002f026 	beq	r2,zero,8019c84 <___svfiprintf_internal_r+0xfe0>
 80190c4:	d8c02617 	ldw	r3,152(sp)
 80190c8:	10f9c83a 	sub	fp,r2,r3
 80190cc:	8700010e 	bge	r16,fp,80190d4 <___svfiprintf_internal_r+0x430>
 80190d0:	8039883a 	mov	fp,r16
 80190d4:	dac01d83 	ldbu	r11,118(sp)
 80190d8:	ddc02315 	stw	r23,140(sp)
 80190dc:	0021883a 	mov	r16,zero
 80190e0:	003fc606 	br	8018ffc <__alt_data_end+0xf8018ffc>
 80190e4:	8c400814 	ori	r17,r17,32
 80190e8:	a9000007 	ldb	r4,0(r21)
 80190ec:	003f3906 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 80190f0:	da802317 	ldw	r10,140(sp)
 80190f4:	00800c04 	movi	r2,48
 80190f8:	dac02317 	ldw	r11,140(sp)
 80190fc:	52400017 	ldw	r9,0(r10)
 8019100:	d8801d05 	stb	r2,116(sp)
 8019104:	00801e04 	movi	r2,120
 8019108:	d8801d45 	stb	r2,117(sp)
 801910c:	008205b4 	movhi	r2,2070
 8019110:	1097c304 	addi	r2,r2,24332
 8019114:	5ac00104 	addi	r11,r11,4
 8019118:	d8802a15 	stw	r2,168(sp)
 801911c:	0015883a 	mov	r10,zero
 8019120:	8c400094 	ori	r17,r17,2
 8019124:	dac02315 	stw	r11,140(sp)
 8019128:	00800084 	movi	r2,2
 801912c:	4807883a 	mov	r3,r9
 8019130:	003f9506 	br	8018f88 <__alt_data_end+0xf8018f88>
 8019134:	d9801d85 	stb	r6,118(sp)
 8019138:	8880080c 	andi	r2,r17,32
 801913c:	d8c02317 	ldw	r3,140(sp)
 8019140:	10009b26 	beq	r2,zero,80193b0 <___svfiprintf_internal_r+0x70c>
 8019144:	dac02317 	ldw	r11,140(sp)
 8019148:	18800117 	ldw	r2,4(r3)
 801914c:	1a400017 	ldw	r9,0(r3)
 8019150:	5ac00204 	addi	r11,r11,8
 8019154:	dac02315 	stw	r11,140(sp)
 8019158:	1015883a 	mov	r10,r2
 801915c:	10009f16 	blt	r2,zero,80193dc <___svfiprintf_internal_r+0x738>
 8019160:	dac01d83 	ldbu	r11,118(sp)
 8019164:	8039883a 	mov	fp,r16
 8019168:	00800044 	movi	r2,1
 801916c:	4a86b03a 	or	r3,r9,r10
 8019170:	003f8806 	br	8018f94 <__alt_data_end+0xf8018f94>
 8019174:	dac02317 	ldw	r11,140(sp)
 8019178:	00c00044 	movi	r3,1
 801917c:	da801004 	addi	r10,sp,64
 8019180:	58800017 	ldw	r2,0(r11)
 8019184:	5ac00104 	addi	r11,r11,4
 8019188:	d8c02015 	stw	r3,128(sp)
 801918c:	d8001d85 	stb	zero,118(sp)
 8019190:	d8801005 	stb	r2,64(sp)
 8019194:	dac02315 	stw	r11,140(sp)
 8019198:	1839883a 	mov	fp,r3
 801919c:	da802615 	stw	r10,152(sp)
 80191a0:	0021883a 	mov	r16,zero
 80191a4:	8a80008c 	andi	r10,r17,2
 80191a8:	da802215 	stw	r10,136(sp)
 80191ac:	50000326 	beq	r10,zero,80191bc <___svfiprintf_internal_r+0x518>
 80191b0:	dac02017 	ldw	r11,128(sp)
 80191b4:	5ac00084 	addi	r11,r11,2
 80191b8:	dac02015 	stw	r11,128(sp)
 80191bc:	88c0210c 	andi	r3,r17,132
 80191c0:	d8c02515 	stw	r3,148(sp)
 80191c4:	1800bd1e 	bne	r3,zero,80194bc <___svfiprintf_internal_r+0x818>
 80191c8:	da802117 	ldw	r10,132(sp)
 80191cc:	dac02017 	ldw	r11,128(sp)
 80191d0:	52edc83a 	sub	r22,r10,r11
 80191d4:	0580b90e 	bge	zero,r22,80194bc <___svfiprintf_internal_r+0x818>
 80191d8:	02400404 	movi	r9,16
 80191dc:	d8c01c17 	ldw	r3,112(sp)
 80191e0:	d8801b17 	ldw	r2,108(sp)
 80191e4:	4d829b0e 	bge	r9,r22,8019c54 <___svfiprintf_internal_r+0xfb0>
 80191e8:	014205b4 	movhi	r5,2070
 80191ec:	29583004 	addi	r5,r5,24768
 80191f0:	d9402815 	stw	r5,160(sp)
 80191f4:	05c001c4 	movi	r23,7
 80191f8:	00000306 	br	8019208 <___svfiprintf_internal_r+0x564>
 80191fc:	b5bffc04 	addi	r22,r22,-16
 8019200:	42000204 	addi	r8,r8,8
 8019204:	4d80150e 	bge	r9,r22,801925c <___svfiprintf_internal_r+0x5b8>
 8019208:	028205b4 	movhi	r10,2070
 801920c:	18c00404 	addi	r3,r3,16
 8019210:	10800044 	addi	r2,r2,1
 8019214:	52983004 	addi	r10,r10,24768
 8019218:	42800015 	stw	r10,0(r8)
 801921c:	42400115 	stw	r9,4(r8)
 8019220:	d8c01c15 	stw	r3,112(sp)
 8019224:	d8801b15 	stw	r2,108(sp)
 8019228:	b8bff40e 	bge	r23,r2,80191fc <__alt_data_end+0xf80191fc>
 801922c:	9009883a 	mov	r4,r18
 8019230:	a00b883a 	mov	r5,r20
 8019234:	d9801a04 	addi	r6,sp,104
 8019238:	da402c15 	stw	r9,176(sp)
 801923c:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019240:	da402c17 	ldw	r9,176(sp)
 8019244:	1001531e 	bne	r2,zero,8019794 <___svfiprintf_internal_r+0xaf0>
 8019248:	b5bffc04 	addi	r22,r22,-16
 801924c:	d8c01c17 	ldw	r3,112(sp)
 8019250:	d8801b17 	ldw	r2,108(sp)
 8019254:	d811883a 	mov	r8,sp
 8019258:	4dbfeb16 	blt	r9,r22,8019208 <__alt_data_end+0xf8019208>
 801925c:	dac02817 	ldw	r11,160(sp)
 8019260:	b0c7883a 	add	r3,r22,r3
 8019264:	10800044 	addi	r2,r2,1
 8019268:	42c00015 	stw	r11,0(r8)
 801926c:	45800115 	stw	r22,4(r8)
 8019270:	d8c01c15 	stw	r3,112(sp)
 8019274:	d8801b15 	stw	r2,108(sp)
 8019278:	010001c4 	movi	r4,7
 801927c:	2081dd16 	blt	r4,r2,80199f4 <___svfiprintf_internal_r+0xd50>
 8019280:	42000204 	addi	r8,r8,8
 8019284:	00008f06 	br	80194c4 <___svfiprintf_internal_r+0x820>
 8019288:	008205b4 	movhi	r2,2070
 801928c:	1097be04 	addi	r2,r2,24312
 8019290:	d8802a15 	stw	r2,168(sp)
 8019294:	d9801d85 	stb	r6,118(sp)
 8019298:	8880080c 	andi	r2,r17,32
 801929c:	10003226 	beq	r2,zero,8019368 <___svfiprintf_internal_r+0x6c4>
 80192a0:	da802317 	ldw	r10,140(sp)
 80192a4:	dac02317 	ldw	r11,140(sp)
 80192a8:	52400017 	ldw	r9,0(r10)
 80192ac:	52800117 	ldw	r10,4(r10)
 80192b0:	5ac00204 	addi	r11,r11,8
 80192b4:	dac02315 	stw	r11,140(sp)
 80192b8:	8880004c 	andi	r2,r17,1
 80192bc:	10003426 	beq	r2,zero,8019390 <___svfiprintf_internal_r+0x6ec>
 80192c0:	4a86b03a 	or	r3,r9,r10
 80192c4:	1802231e 	bne	r3,zero,8019b54 <___svfiprintf_internal_r+0xeb0>
 80192c8:	00800084 	movi	r2,2
 80192cc:	003f2e06 	br	8018f88 <__alt_data_end+0xf8018f88>
 80192d0:	a9000007 	ldb	r4,0(r21)
 80192d4:	a805883a 	mov	r2,r21
 80192d8:	21c22426 	beq	r4,r7,8019b6c <___svfiprintf_internal_r+0xec8>
 80192dc:	8c400414 	ori	r17,r17,16
 80192e0:	003ebc06 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 80192e4:	8c401014 	ori	r17,r17,64
 80192e8:	a9000007 	ldb	r4,0(r21)
 80192ec:	003eb906 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 80192f0:	d9801d85 	stb	r6,118(sp)
 80192f4:	8880080c 	andi	r2,r17,32
 80192f8:	10020d1e 	bne	r2,zero,8019b30 <___svfiprintf_internal_r+0xe8c>
 80192fc:	8880040c 	andi	r2,r17,16
 8019300:	10021e1e 	bne	r2,zero,8019b7c <___svfiprintf_internal_r+0xed8>
 8019304:	8c40100c 	andi	r17,r17,64
 8019308:	88021c26 	beq	r17,zero,8019b7c <___svfiprintf_internal_r+0xed8>
 801930c:	dac02317 	ldw	r11,140(sp)
 8019310:	da802417 	ldw	r10,144(sp)
 8019314:	58800017 	ldw	r2,0(r11)
 8019318:	5ac00104 	addi	r11,r11,4
 801931c:	dac02315 	stw	r11,140(sp)
 8019320:	1280000d 	sth	r10,0(r2)
 8019324:	003e8306 	br	8018d34 <__alt_data_end+0xf8018d34>
 8019328:	8c400054 	ori	r17,r17,1
 801932c:	a9000007 	ldb	r4,0(r21)
 8019330:	003ea806 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019334:	30803fcc 	andi	r2,r6,255
 8019338:	1080201c 	xori	r2,r2,128
 801933c:	10bfe004 	addi	r2,r2,-128
 8019340:	1001f91e 	bne	r2,zero,8019b28 <___svfiprintf_internal_r+0xe84>
 8019344:	01800804 	movi	r6,32
 8019348:	a9000007 	ldb	r4,0(r21)
 801934c:	003ea106 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019350:	008205b4 	movhi	r2,2070
 8019354:	1097c304 	addi	r2,r2,24332
 8019358:	d8802a15 	stw	r2,168(sp)
 801935c:	d9801d85 	stb	r6,118(sp)
 8019360:	8880080c 	andi	r2,r17,32
 8019364:	103fce1e 	bne	r2,zero,80192a0 <__alt_data_end+0xf80192a0>
 8019368:	8880040c 	andi	r2,r17,16
 801936c:	1001e526 	beq	r2,zero,8019b04 <___svfiprintf_internal_r+0xe60>
 8019370:	da802317 	ldw	r10,140(sp)
 8019374:	dac02317 	ldw	r11,140(sp)
 8019378:	52400017 	ldw	r9,0(r10)
 801937c:	8880004c 	andi	r2,r17,1
 8019380:	5ac00104 	addi	r11,r11,4
 8019384:	dac02315 	stw	r11,140(sp)
 8019388:	0015883a 	mov	r10,zero
 801938c:	103fcc1e 	bne	r2,zero,80192c0 <__alt_data_end+0xf80192c0>
 8019390:	00800084 	movi	r2,2
 8019394:	4a86b03a 	or	r3,r9,r10
 8019398:	003efb06 	br	8018f88 <__alt_data_end+0xf8018f88>
 801939c:	8c400414 	ori	r17,r17,16
 80193a0:	d9801d85 	stb	r6,118(sp)
 80193a4:	8880080c 	andi	r2,r17,32
 80193a8:	d8c02317 	ldw	r3,140(sp)
 80193ac:	103f651e 	bne	r2,zero,8019144 <__alt_data_end+0xf8019144>
 80193b0:	8880040c 	andi	r2,r17,16
 80193b4:	1001c61e 	bne	r2,zero,8019ad0 <___svfiprintf_internal_r+0xe2c>
 80193b8:	8880100c 	andi	r2,r17,64
 80193bc:	1001c426 	beq	r2,zero,8019ad0 <___svfiprintf_internal_r+0xe2c>
 80193c0:	1a40000f 	ldh	r9,0(r3)
 80193c4:	dac02317 	ldw	r11,140(sp)
 80193c8:	4815d7fa 	srai	r10,r9,31
 80193cc:	5ac00104 	addi	r11,r11,4
 80193d0:	dac02315 	stw	r11,140(sp)
 80193d4:	5005883a 	mov	r2,r10
 80193d8:	103f610e 	bge	r2,zero,8019160 <__alt_data_end+0xf8019160>
 80193dc:	0253c83a 	sub	r9,zero,r9
 80193e0:	4804c03a 	cmpne	r2,r9,zero
 80193e4:	0295c83a 	sub	r10,zero,r10
 80193e8:	5095c83a 	sub	r10,r10,r2
 80193ec:	02c00b44 	movi	r11,45
 80193f0:	dac01d85 	stb	r11,118(sp)
 80193f4:	8039883a 	mov	fp,r16
 80193f8:	00800044 	movi	r2,1
 80193fc:	4a86b03a 	or	r3,r9,r10
 8019400:	003ee406 	br	8018f94 <__alt_data_end+0xf8018f94>
 8019404:	a815883a 	mov	r10,r21
 8019408:	d8002115 	stw	zero,132(sp)
 801940c:	20bff404 	addi	r2,r4,-48
 8019410:	51000007 	ldb	r4,0(r10)
 8019414:	da802117 	ldw	r10,132(sp)
 8019418:	ad400044 	addi	r21,r21,1
 801941c:	52c002a4 	muli	r11,r10,10
 8019420:	a815883a 	mov	r10,r21
 8019424:	5885883a 	add	r2,r11,r2
 8019428:	d8802115 	stw	r2,132(sp)
 801942c:	20bff404 	addi	r2,r4,-48
 8019430:	28bff72e 	bgeu	r5,r2,8019410 <__alt_data_end+0xf8019410>
 8019434:	20bff804 	addi	r2,r4,-32
 8019438:	18be692e 	bgeu	r3,r2,8018de0 <__alt_data_end+0xf8018de0>
 801943c:	d9801d85 	stb	r6,118(sp)
 8019440:	2000ce26 	beq	r4,zero,801977c <___svfiprintf_internal_r+0xad8>
 8019444:	02800044 	movi	r10,1
 8019448:	dac01004 	addi	r11,sp,64
 801944c:	da802015 	stw	r10,128(sp)
 8019450:	d9001005 	stb	r4,64(sp)
 8019454:	d8001d85 	stb	zero,118(sp)
 8019458:	5039883a 	mov	fp,r10
 801945c:	dac02615 	stw	r11,152(sp)
 8019460:	003f4f06 	br	80191a0 <__alt_data_end+0xf80191a0>
 8019464:	8c402014 	ori	r17,r17,128
 8019468:	a9000007 	ldb	r4,0(r21)
 801946c:	003e5906 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019470:	01800ac4 	movi	r6,43
 8019474:	a9000007 	ldb	r4,0(r21)
 8019478:	003e5606 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 801947c:	a9000007 	ldb	r4,0(r21)
 8019480:	aa800044 	addi	r10,r21,1
 8019484:	22420626 	beq	r4,r9,8019ca0 <___svfiprintf_internal_r+0xffc>
 8019488:	20bff404 	addi	r2,r4,-48
 801948c:	502b883a 	mov	r21,r10
 8019490:	0021883a 	mov	r16,zero
 8019494:	28be5036 	bltu	r5,r2,8018dd8 <__alt_data_end+0xf8018dd8>
 8019498:	a9000007 	ldb	r4,0(r21)
 801949c:	840002a4 	muli	r16,r16,10
 80194a0:	ad400044 	addi	r21,r21,1
 80194a4:	1421883a 	add	r16,r2,r16
 80194a8:	20bff404 	addi	r2,r4,-48
 80194ac:	28bffa2e 	bgeu	r5,r2,8019498 <__alt_data_end+0xf8019498>
 80194b0:	803e490e 	bge	r16,zero,8018dd8 <__alt_data_end+0xf8018dd8>
 80194b4:	043fffc4 	movi	r16,-1
 80194b8:	003e4706 	br	8018dd8 <__alt_data_end+0xf8018dd8>
 80194bc:	d8c01c17 	ldw	r3,112(sp)
 80194c0:	d8801b17 	ldw	r2,108(sp)
 80194c4:	d9001d87 	ldb	r4,118(sp)
 80194c8:	20000b26 	beq	r4,zero,80194f8 <___svfiprintf_internal_r+0x854>
 80194cc:	d9001d84 	addi	r4,sp,118
 80194d0:	18c00044 	addi	r3,r3,1
 80194d4:	10800044 	addi	r2,r2,1
 80194d8:	41000015 	stw	r4,0(r8)
 80194dc:	01000044 	movi	r4,1
 80194e0:	41000115 	stw	r4,4(r8)
 80194e4:	d8c01c15 	stw	r3,112(sp)
 80194e8:	d8801b15 	stw	r2,108(sp)
 80194ec:	010001c4 	movi	r4,7
 80194f0:	20811e16 	blt	r4,r2,801996c <___svfiprintf_internal_r+0xcc8>
 80194f4:	42000204 	addi	r8,r8,8
 80194f8:	da802217 	ldw	r10,136(sp)
 80194fc:	50000b26 	beq	r10,zero,801952c <___svfiprintf_internal_r+0x888>
 8019500:	d9001d04 	addi	r4,sp,116
 8019504:	18c00084 	addi	r3,r3,2
 8019508:	10800044 	addi	r2,r2,1
 801950c:	41000015 	stw	r4,0(r8)
 8019510:	01000084 	movi	r4,2
 8019514:	41000115 	stw	r4,4(r8)
 8019518:	d8c01c15 	stw	r3,112(sp)
 801951c:	d8801b15 	stw	r2,108(sp)
 8019520:	010001c4 	movi	r4,7
 8019524:	20811a16 	blt	r4,r2,8019990 <___svfiprintf_internal_r+0xcec>
 8019528:	42000204 	addi	r8,r8,8
 801952c:	dac02517 	ldw	r11,148(sp)
 8019530:	01002004 	movi	r4,128
 8019534:	5900a826 	beq	r11,r4,80197d8 <___svfiprintf_internal_r+0xb34>
 8019538:	8721c83a 	sub	r16,r16,fp
 801953c:	0400260e 	bge	zero,r16,80195d8 <___svfiprintf_internal_r+0x934>
 8019540:	01c00404 	movi	r7,16
 8019544:	3c019d0e 	bge	r7,r16,8019bbc <___svfiprintf_internal_r+0xf18>
 8019548:	010205b4 	movhi	r4,2070
 801954c:	21182c04 	addi	r4,r4,24752
 8019550:	d9002215 	stw	r4,136(sp)
 8019554:	382f883a 	mov	r23,r7
 8019558:	058001c4 	movi	r22,7
 801955c:	00000306 	br	801956c <___svfiprintf_internal_r+0x8c8>
 8019560:	843ffc04 	addi	r16,r16,-16
 8019564:	42000204 	addi	r8,r8,8
 8019568:	bc00110e 	bge	r23,r16,80195b0 <___svfiprintf_internal_r+0x90c>
 801956c:	18c00404 	addi	r3,r3,16
 8019570:	10800044 	addi	r2,r2,1
 8019574:	44c00015 	stw	r19,0(r8)
 8019578:	45c00115 	stw	r23,4(r8)
 801957c:	d8c01c15 	stw	r3,112(sp)
 8019580:	d8801b15 	stw	r2,108(sp)
 8019584:	b0bff60e 	bge	r22,r2,8019560 <__alt_data_end+0xf8019560>
 8019588:	9009883a 	mov	r4,r18
 801958c:	a00b883a 	mov	r5,r20
 8019590:	d9801a04 	addi	r6,sp,104
 8019594:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019598:	10007e1e 	bne	r2,zero,8019794 <___svfiprintf_internal_r+0xaf0>
 801959c:	843ffc04 	addi	r16,r16,-16
 80195a0:	d8c01c17 	ldw	r3,112(sp)
 80195a4:	d8801b17 	ldw	r2,108(sp)
 80195a8:	d811883a 	mov	r8,sp
 80195ac:	bc3fef16 	blt	r23,r16,801956c <__alt_data_end+0xf801956c>
 80195b0:	da802217 	ldw	r10,136(sp)
 80195b4:	1c07883a 	add	r3,r3,r16
 80195b8:	10800044 	addi	r2,r2,1
 80195bc:	42800015 	stw	r10,0(r8)
 80195c0:	44000115 	stw	r16,4(r8)
 80195c4:	d8c01c15 	stw	r3,112(sp)
 80195c8:	d8801b15 	stw	r2,108(sp)
 80195cc:	010001c4 	movi	r4,7
 80195d0:	2080ce16 	blt	r4,r2,801990c <___svfiprintf_internal_r+0xc68>
 80195d4:	42000204 	addi	r8,r8,8
 80195d8:	dac02617 	ldw	r11,152(sp)
 80195dc:	1f07883a 	add	r3,r3,fp
 80195e0:	10800044 	addi	r2,r2,1
 80195e4:	42c00015 	stw	r11,0(r8)
 80195e8:	47000115 	stw	fp,4(r8)
 80195ec:	d8c01c15 	stw	r3,112(sp)
 80195f0:	d8801b15 	stw	r2,108(sp)
 80195f4:	010001c4 	movi	r4,7
 80195f8:	2080a316 	blt	r4,r2,8019888 <___svfiprintf_internal_r+0xbe4>
 80195fc:	42000204 	addi	r8,r8,8
 8019600:	8c40010c 	andi	r17,r17,4
 8019604:	88002b26 	beq	r17,zero,80196b4 <___svfiprintf_internal_r+0xa10>
 8019608:	da802117 	ldw	r10,132(sp)
 801960c:	dac02017 	ldw	r11,128(sp)
 8019610:	52e1c83a 	sub	r16,r10,r11
 8019614:	0400270e 	bge	zero,r16,80196b4 <___svfiprintf_internal_r+0xa10>
 8019618:	04400404 	movi	r17,16
 801961c:	d8801b17 	ldw	r2,108(sp)
 8019620:	8c01900e 	bge	r17,r16,8019c64 <___svfiprintf_internal_r+0xfc0>
 8019624:	014205b4 	movhi	r5,2070
 8019628:	29583004 	addi	r5,r5,24768
 801962c:	d9402815 	stw	r5,160(sp)
 8019630:	070001c4 	movi	fp,7
 8019634:	00000306 	br	8019644 <___svfiprintf_internal_r+0x9a0>
 8019638:	843ffc04 	addi	r16,r16,-16
 801963c:	42000204 	addi	r8,r8,8
 8019640:	8c00130e 	bge	r17,r16,8019690 <___svfiprintf_internal_r+0x9ec>
 8019644:	028205b4 	movhi	r10,2070
 8019648:	18c00404 	addi	r3,r3,16
 801964c:	10800044 	addi	r2,r2,1
 8019650:	52983004 	addi	r10,r10,24768
 8019654:	42800015 	stw	r10,0(r8)
 8019658:	44400115 	stw	r17,4(r8)
 801965c:	d8c01c15 	stw	r3,112(sp)
 8019660:	d8801b15 	stw	r2,108(sp)
 8019664:	e0bff40e 	bge	fp,r2,8019638 <__alt_data_end+0xf8019638>
 8019668:	9009883a 	mov	r4,r18
 801966c:	a00b883a 	mov	r5,r20
 8019670:	d9801a04 	addi	r6,sp,104
 8019674:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019678:	1000461e 	bne	r2,zero,8019794 <___svfiprintf_internal_r+0xaf0>
 801967c:	843ffc04 	addi	r16,r16,-16
 8019680:	d8c01c17 	ldw	r3,112(sp)
 8019684:	d8801b17 	ldw	r2,108(sp)
 8019688:	d811883a 	mov	r8,sp
 801968c:	8c3fed16 	blt	r17,r16,8019644 <__alt_data_end+0xf8019644>
 8019690:	dac02817 	ldw	r11,160(sp)
 8019694:	1c07883a 	add	r3,r3,r16
 8019698:	10800044 	addi	r2,r2,1
 801969c:	42c00015 	stw	r11,0(r8)
 80196a0:	44000115 	stw	r16,4(r8)
 80196a4:	d8c01c15 	stw	r3,112(sp)
 80196a8:	d8801b15 	stw	r2,108(sp)
 80196ac:	010001c4 	movi	r4,7
 80196b0:	2080fd16 	blt	r4,r2,8019aa8 <___svfiprintf_internal_r+0xe04>
 80196b4:	dd802017 	ldw	r22,128(sp)
 80196b8:	da802117 	ldw	r10,132(sp)
 80196bc:	b280010e 	bge	r22,r10,80196c4 <___svfiprintf_internal_r+0xa20>
 80196c0:	502d883a 	mov	r22,r10
 80196c4:	dac02417 	ldw	r11,144(sp)
 80196c8:	5d97883a 	add	r11,r11,r22
 80196cc:	dac02415 	stw	r11,144(sp)
 80196d0:	1800751e 	bne	r3,zero,80198a8 <___svfiprintf_internal_r+0xc04>
 80196d4:	a8800007 	ldb	r2,0(r21)
 80196d8:	d8001b15 	stw	zero,108(sp)
 80196dc:	d811883a 	mov	r8,sp
 80196e0:	103d961e 	bne	r2,zero,8018d3c <__alt_data_end+0xf8018d3c>
 80196e4:	a82d883a 	mov	r22,r21
 80196e8:	003dad06 	br	8018da0 <__alt_data_end+0xf8018da0>
 80196ec:	10803fcc 	andi	r2,r2,255
 80196f0:	00c00044 	movi	r3,1
 80196f4:	10fe2f1e 	bne	r2,r3,8018fb4 <__alt_data_end+0xf8018fb4>
 80196f8:	5000e026 	beq	r10,zero,8019a7c <___svfiprintf_internal_r+0xdd8>
 80196fc:	dc002015 	stw	r16,128(sp)
 8019700:	dc402215 	stw	r17,136(sp)
 8019704:	dd801a04 	addi	r22,sp,104
 8019708:	402f883a 	mov	r23,r8
 801970c:	5839883a 	mov	fp,r11
 8019710:	4821883a 	mov	r16,r9
 8019714:	5023883a 	mov	r17,r10
 8019718:	8009883a 	mov	r4,r16
 801971c:	880b883a 	mov	r5,r17
 8019720:	01800284 	movi	r6,10
 8019724:	000f883a 	mov	r7,zero
 8019728:	801c0580 	call	801c058 <__umoddi3>
 801972c:	10800c04 	addi	r2,r2,48
 8019730:	b5bfffc4 	addi	r22,r22,-1
 8019734:	8009883a 	mov	r4,r16
 8019738:	880b883a 	mov	r5,r17
 801973c:	01800284 	movi	r6,10
 8019740:	000f883a 	mov	r7,zero
 8019744:	b0800005 	stb	r2,0(r22)
 8019748:	801ba980 	call	801ba98 <__udivdi3>
 801974c:	1021883a 	mov	r16,r2
 8019750:	10c4b03a 	or	r2,r2,r3
 8019754:	1823883a 	mov	r17,r3
 8019758:	103fef1e 	bne	r2,zero,8019718 <__alt_data_end+0xf8019718>
 801975c:	da801e17 	ldw	r10,120(sp)
 8019760:	e017883a 	mov	r11,fp
 8019764:	dc002017 	ldw	r16,128(sp)
 8019768:	dc402217 	ldw	r17,136(sp)
 801976c:	b811883a 	mov	r8,r23
 8019770:	dd802615 	stw	r22,152(sp)
 8019774:	55b9c83a 	sub	fp,r10,r22
 8019778:	003e2006 	br	8018ffc <__alt_data_end+0xf8018ffc>
 801977c:	d8801c17 	ldw	r2,112(sp)
 8019780:	10000426 	beq	r2,zero,8019794 <___svfiprintf_internal_r+0xaf0>
 8019784:	d9002917 	ldw	r4,164(sp)
 8019788:	d9402717 	ldw	r5,156(sp)
 801978c:	d9801a04 	addi	r6,sp,104
 8019790:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019794:	da802717 	ldw	r10,156(sp)
 8019798:	5080030b 	ldhu	r2,12(r10)
 801979c:	1080100c 	andi	r2,r2,64
 80197a0:	1000511e 	bne	r2,zero,80198e8 <___svfiprintf_internal_r+0xc44>
 80197a4:	d8802417 	ldw	r2,144(sp)
 80197a8:	dfc03617 	ldw	ra,216(sp)
 80197ac:	df003517 	ldw	fp,212(sp)
 80197b0:	ddc03417 	ldw	r23,208(sp)
 80197b4:	dd803317 	ldw	r22,204(sp)
 80197b8:	dd403217 	ldw	r21,200(sp)
 80197bc:	dd003117 	ldw	r20,196(sp)
 80197c0:	dcc03017 	ldw	r19,192(sp)
 80197c4:	dc802f17 	ldw	r18,188(sp)
 80197c8:	dc402e17 	ldw	r17,184(sp)
 80197cc:	dc002d17 	ldw	r16,180(sp)
 80197d0:	dec03704 	addi	sp,sp,220
 80197d4:	f800283a 	ret
 80197d8:	da802117 	ldw	r10,132(sp)
 80197dc:	dac02017 	ldw	r11,128(sp)
 80197e0:	52edc83a 	sub	r22,r10,r11
 80197e4:	05bf540e 	bge	zero,r22,8019538 <__alt_data_end+0xf8019538>
 80197e8:	02400404 	movi	r9,16
 80197ec:	4d81210e 	bge	r9,r22,8019c74 <___svfiprintf_internal_r+0xfd0>
 80197f0:	014205b4 	movhi	r5,2070
 80197f4:	29582c04 	addi	r5,r5,24752
 80197f8:	d9402215 	stw	r5,136(sp)
 80197fc:	05c001c4 	movi	r23,7
 8019800:	00000306 	br	8019810 <___svfiprintf_internal_r+0xb6c>
 8019804:	b5bffc04 	addi	r22,r22,-16
 8019808:	42000204 	addi	r8,r8,8
 801980c:	4d80130e 	bge	r9,r22,801985c <___svfiprintf_internal_r+0xbb8>
 8019810:	18c00404 	addi	r3,r3,16
 8019814:	10800044 	addi	r2,r2,1
 8019818:	44c00015 	stw	r19,0(r8)
 801981c:	42400115 	stw	r9,4(r8)
 8019820:	d8c01c15 	stw	r3,112(sp)
 8019824:	d8801b15 	stw	r2,108(sp)
 8019828:	b8bff60e 	bge	r23,r2,8019804 <__alt_data_end+0xf8019804>
 801982c:	9009883a 	mov	r4,r18
 8019830:	a00b883a 	mov	r5,r20
 8019834:	d9801a04 	addi	r6,sp,104
 8019838:	da402c15 	stw	r9,176(sp)
 801983c:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019840:	da402c17 	ldw	r9,176(sp)
 8019844:	103fd31e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019848:	b5bffc04 	addi	r22,r22,-16
 801984c:	d8c01c17 	ldw	r3,112(sp)
 8019850:	d8801b17 	ldw	r2,108(sp)
 8019854:	d811883a 	mov	r8,sp
 8019858:	4dbfed16 	blt	r9,r22,8019810 <__alt_data_end+0xf8019810>
 801985c:	da802217 	ldw	r10,136(sp)
 8019860:	1d87883a 	add	r3,r3,r22
 8019864:	10800044 	addi	r2,r2,1
 8019868:	42800015 	stw	r10,0(r8)
 801986c:	45800115 	stw	r22,4(r8)
 8019870:	d8c01c15 	stw	r3,112(sp)
 8019874:	d8801b15 	stw	r2,108(sp)
 8019878:	010001c4 	movi	r4,7
 801987c:	2080c616 	blt	r4,r2,8019b98 <___svfiprintf_internal_r+0xef4>
 8019880:	42000204 	addi	r8,r8,8
 8019884:	003f2c06 	br	8019538 <__alt_data_end+0xf8019538>
 8019888:	9009883a 	mov	r4,r18
 801988c:	a00b883a 	mov	r5,r20
 8019890:	d9801a04 	addi	r6,sp,104
 8019894:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019898:	103fbe1e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 801989c:	d8c01c17 	ldw	r3,112(sp)
 80198a0:	d811883a 	mov	r8,sp
 80198a4:	003f5606 	br	8019600 <__alt_data_end+0xf8019600>
 80198a8:	9009883a 	mov	r4,r18
 80198ac:	a00b883a 	mov	r5,r20
 80198b0:	d9801a04 	addi	r6,sp,104
 80198b4:	8018ad80 	call	8018ad8 <__ssprint_r>
 80198b8:	103f8626 	beq	r2,zero,80196d4 <__alt_data_end+0xf80196d4>
 80198bc:	003fb506 	br	8019794 <__alt_data_end+0xf8019794>
 80198c0:	10803fcc 	andi	r2,r2,255
 80198c4:	10003b1e 	bne	r2,zero,80199b4 <___svfiprintf_internal_r+0xd10>
 80198c8:	8880004c 	andi	r2,r17,1
 80198cc:	10007d26 	beq	r2,zero,8019ac4 <___svfiprintf_internal_r+0xe20>
 80198d0:	00800c04 	movi	r2,48
 80198d4:	d8c019c4 	addi	r3,sp,103
 80198d8:	d88019c5 	stb	r2,103(sp)
 80198dc:	df002b17 	ldw	fp,172(sp)
 80198e0:	d8c02615 	stw	r3,152(sp)
 80198e4:	003dc506 	br	8018ffc <__alt_data_end+0xf8018ffc>
 80198e8:	00bfffc4 	movi	r2,-1
 80198ec:	003fae06 	br	80197a8 <__alt_data_end+0xf80197a8>
 80198f0:	9009883a 	mov	r4,r18
 80198f4:	a00b883a 	mov	r5,r20
 80198f8:	d9801a04 	addi	r6,sp,104
 80198fc:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019900:	103fa41e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019904:	d811883a 	mov	r8,sp
 8019908:	003d2206 	br	8018d94 <__alt_data_end+0xf8018d94>
 801990c:	9009883a 	mov	r4,r18
 8019910:	a00b883a 	mov	r5,r20
 8019914:	d9801a04 	addi	r6,sp,104
 8019918:	8018ad80 	call	8018ad8 <__ssprint_r>
 801991c:	103f9d1e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019920:	d8c01c17 	ldw	r3,112(sp)
 8019924:	d8801b17 	ldw	r2,108(sp)
 8019928:	d811883a 	mov	r8,sp
 801992c:	003f2a06 	br	80195d8 <__alt_data_end+0xf80195d8>
 8019930:	d9402a17 	ldw	r5,168(sp)
 8019934:	d8c01a04 	addi	r3,sp,104
 8019938:	488003cc 	andi	r2,r9,15
 801993c:	5008973a 	slli	r4,r10,28
 8019940:	2885883a 	add	r2,r5,r2
 8019944:	4812d13a 	srli	r9,r9,4
 8019948:	10800003 	ldbu	r2,0(r2)
 801994c:	5014d13a 	srli	r10,r10,4
 8019950:	18ffffc4 	addi	r3,r3,-1
 8019954:	2252b03a 	or	r9,r4,r9
 8019958:	18800005 	stb	r2,0(r3)
 801995c:	4a84b03a 	or	r2,r9,r10
 8019960:	103ff51e 	bne	r2,zero,8019938 <__alt_data_end+0xf8019938>
 8019964:	d8c02615 	stw	r3,152(sp)
 8019968:	003da206 	br	8018ff4 <__alt_data_end+0xf8018ff4>
 801996c:	9009883a 	mov	r4,r18
 8019970:	a00b883a 	mov	r5,r20
 8019974:	d9801a04 	addi	r6,sp,104
 8019978:	8018ad80 	call	8018ad8 <__ssprint_r>
 801997c:	103f851e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019980:	d8c01c17 	ldw	r3,112(sp)
 8019984:	d8801b17 	ldw	r2,108(sp)
 8019988:	d811883a 	mov	r8,sp
 801998c:	003eda06 	br	80194f8 <__alt_data_end+0xf80194f8>
 8019990:	9009883a 	mov	r4,r18
 8019994:	a00b883a 	mov	r5,r20
 8019998:	d9801a04 	addi	r6,sp,104
 801999c:	8018ad80 	call	8018ad8 <__ssprint_r>
 80199a0:	103f7c1e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 80199a4:	d8c01c17 	ldw	r3,112(sp)
 80199a8:	d8801b17 	ldw	r2,108(sp)
 80199ac:	d811883a 	mov	r8,sp
 80199b0:	003ede06 	br	801952c <__alt_data_end+0xf801952c>
 80199b4:	da801a04 	addi	r10,sp,104
 80199b8:	da802615 	stw	r10,152(sp)
 80199bc:	003d8f06 	br	8018ffc <__alt_data_end+0xf8018ffc>
 80199c0:	8880040c 	andi	r2,r17,16
 80199c4:	10004c1e 	bne	r2,zero,8019af8 <___svfiprintf_internal_r+0xe54>
 80199c8:	8880100c 	andi	r2,r17,64
 80199cc:	da802317 	ldw	r10,140(sp)
 80199d0:	10004a26 	beq	r2,zero,8019afc <___svfiprintf_internal_r+0xe58>
 80199d4:	5240000b 	ldhu	r9,0(r10)
 80199d8:	dac02317 	ldw	r11,140(sp)
 80199dc:	0015883a 	mov	r10,zero
 80199e0:	00800044 	movi	r2,1
 80199e4:	5ac00104 	addi	r11,r11,4
 80199e8:	dac02315 	stw	r11,140(sp)
 80199ec:	4807883a 	mov	r3,r9
 80199f0:	003d6506 	br	8018f88 <__alt_data_end+0xf8018f88>
 80199f4:	9009883a 	mov	r4,r18
 80199f8:	a00b883a 	mov	r5,r20
 80199fc:	d9801a04 	addi	r6,sp,104
 8019a00:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019a04:	103f631e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019a08:	d8c01c17 	ldw	r3,112(sp)
 8019a0c:	d8801b17 	ldw	r2,108(sp)
 8019a10:	d811883a 	mov	r8,sp
 8019a14:	003eab06 	br	80194c4 <__alt_data_end+0xf80194c4>
 8019a18:	8880040c 	andi	r2,r17,16
 8019a1c:	1000331e 	bne	r2,zero,8019aec <___svfiprintf_internal_r+0xe48>
 8019a20:	8880100c 	andi	r2,r17,64
 8019a24:	da802317 	ldw	r10,140(sp)
 8019a28:	10003126 	beq	r2,zero,8019af0 <___svfiprintf_internal_r+0xe4c>
 8019a2c:	5240000b 	ldhu	r9,0(r10)
 8019a30:	dac02317 	ldw	r11,140(sp)
 8019a34:	0015883a 	mov	r10,zero
 8019a38:	0005883a 	mov	r2,zero
 8019a3c:	5ac00104 	addi	r11,r11,4
 8019a40:	dac02315 	stw	r11,140(sp)
 8019a44:	4807883a 	mov	r3,r9
 8019a48:	003d4f06 	br	8018f88 <__alt_data_end+0xf8018f88>
 8019a4c:	10803fcc 	andi	r2,r2,255
 8019a50:	1080201c 	xori	r2,r2,128
 8019a54:	10bfe004 	addi	r2,r2,-128
 8019a58:	01000c04 	movi	r4,48
 8019a5c:	11005b26 	beq	r2,r4,8019bcc <___svfiprintf_internal_r+0xf28>
 8019a60:	da802617 	ldw	r10,152(sp)
 8019a64:	d8801e17 	ldw	r2,120(sp)
 8019a68:	193fffc5 	stb	r4,-1(r3)
 8019a6c:	52bfffc4 	addi	r10,r10,-1
 8019a70:	da802615 	stw	r10,152(sp)
 8019a74:	12b9c83a 	sub	fp,r2,r10
 8019a78:	003d6006 	br	8018ffc <__alt_data_end+0xf8018ffc>
 8019a7c:	00800244 	movi	r2,9
 8019a80:	127f1e36 	bltu	r2,r9,80196fc <__alt_data_end+0xf80196fc>
 8019a84:	4a400c04 	addi	r9,r9,48
 8019a88:	d8c019c4 	addi	r3,sp,103
 8019a8c:	da4019c5 	stb	r9,103(sp)
 8019a90:	df002b17 	ldw	fp,172(sp)
 8019a94:	d8c02615 	stw	r3,152(sp)
 8019a98:	003d5806 	br	8018ffc <__alt_data_end+0xf8018ffc>
 8019a9c:	d8802315 	stw	r2,140(sp)
 8019aa0:	a9000007 	ldb	r4,0(r21)
 8019aa4:	003ccb06 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019aa8:	9009883a 	mov	r4,r18
 8019aac:	a00b883a 	mov	r5,r20
 8019ab0:	d9801a04 	addi	r6,sp,104
 8019ab4:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019ab8:	103f361e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019abc:	d8c01c17 	ldw	r3,112(sp)
 8019ac0:	003efc06 	br	80196b4 <__alt_data_end+0xf80196b4>
 8019ac4:	d8c01a04 	addi	r3,sp,104
 8019ac8:	d8c02615 	stw	r3,152(sp)
 8019acc:	003d4b06 	br	8018ffc <__alt_data_end+0xf8018ffc>
 8019ad0:	da802317 	ldw	r10,140(sp)
 8019ad4:	1a400017 	ldw	r9,0(r3)
 8019ad8:	52800104 	addi	r10,r10,4
 8019adc:	da802315 	stw	r10,140(sp)
 8019ae0:	4815d7fa 	srai	r10,r9,31
 8019ae4:	5005883a 	mov	r2,r10
 8019ae8:	003d9c06 	br	801915c <__alt_data_end+0xf801915c>
 8019aec:	da802317 	ldw	r10,140(sp)
 8019af0:	52400017 	ldw	r9,0(r10)
 8019af4:	003fce06 	br	8019a30 <__alt_data_end+0xf8019a30>
 8019af8:	da802317 	ldw	r10,140(sp)
 8019afc:	52400017 	ldw	r9,0(r10)
 8019b00:	003fb506 	br	80199d8 <__alt_data_end+0xf80199d8>
 8019b04:	8880100c 	andi	r2,r17,64
 8019b08:	da802317 	ldw	r10,140(sp)
 8019b0c:	103e1926 	beq	r2,zero,8019374 <__alt_data_end+0xf8019374>
 8019b10:	dac02317 	ldw	r11,140(sp)
 8019b14:	5240000b 	ldhu	r9,0(r10)
 8019b18:	0015883a 	mov	r10,zero
 8019b1c:	5ac00104 	addi	r11,r11,4
 8019b20:	dac02315 	stw	r11,140(sp)
 8019b24:	003de406 	br	80192b8 <__alt_data_end+0xf80192b8>
 8019b28:	a9000007 	ldb	r4,0(r21)
 8019b2c:	003ca906 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019b30:	dac02317 	ldw	r11,140(sp)
 8019b34:	da802417 	ldw	r10,144(sp)
 8019b38:	58800017 	ldw	r2,0(r11)
 8019b3c:	5007d7fa 	srai	r3,r10,31
 8019b40:	5ac00104 	addi	r11,r11,4
 8019b44:	dac02315 	stw	r11,140(sp)
 8019b48:	12800015 	stw	r10,0(r2)
 8019b4c:	10c00115 	stw	r3,4(r2)
 8019b50:	003c7806 	br	8018d34 <__alt_data_end+0xf8018d34>
 8019b54:	00800c04 	movi	r2,48
 8019b58:	d8801d05 	stb	r2,116(sp)
 8019b5c:	d9001d45 	stb	r4,117(sp)
 8019b60:	8c400094 	ori	r17,r17,2
 8019b64:	00800084 	movi	r2,2
 8019b68:	003d0706 	br	8018f88 <__alt_data_end+0xf8018f88>
 8019b6c:	ad400044 	addi	r21,r21,1
 8019b70:	8c400814 	ori	r17,r17,32
 8019b74:	11000047 	ldb	r4,1(r2)
 8019b78:	003c9606 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019b7c:	dac02317 	ldw	r11,140(sp)
 8019b80:	da802417 	ldw	r10,144(sp)
 8019b84:	58800017 	ldw	r2,0(r11)
 8019b88:	5ac00104 	addi	r11,r11,4
 8019b8c:	dac02315 	stw	r11,140(sp)
 8019b90:	12800015 	stw	r10,0(r2)
 8019b94:	003c6706 	br	8018d34 <__alt_data_end+0xf8018d34>
 8019b98:	9009883a 	mov	r4,r18
 8019b9c:	a00b883a 	mov	r5,r20
 8019ba0:	d9801a04 	addi	r6,sp,104
 8019ba4:	8018ad80 	call	8018ad8 <__ssprint_r>
 8019ba8:	103efa1e 	bne	r2,zero,8019794 <__alt_data_end+0xf8019794>
 8019bac:	d8c01c17 	ldw	r3,112(sp)
 8019bb0:	d8801b17 	ldw	r2,108(sp)
 8019bb4:	d811883a 	mov	r8,sp
 8019bb8:	003e5f06 	br	8019538 <__alt_data_end+0xf8019538>
 8019bbc:	02c205b4 	movhi	r11,2070
 8019bc0:	5ad82c04 	addi	r11,r11,24752
 8019bc4:	dac02215 	stw	r11,136(sp)
 8019bc8:	003e7906 	br	80195b0 <__alt_data_end+0xf80195b0>
 8019bcc:	da801e17 	ldw	r10,120(sp)
 8019bd0:	d8c02617 	ldw	r3,152(sp)
 8019bd4:	50f9c83a 	sub	fp,r10,r3
 8019bd8:	003d0806 	br	8018ffc <__alt_data_end+0xf8018ffc>
 8019bdc:	da002c15 	stw	r8,176(sp)
 8019be0:	801033c0 	call	801033c <strlen>
 8019be4:	1039883a 	mov	fp,r2
 8019be8:	dac01d83 	ldbu	r11,118(sp)
 8019bec:	ddc02315 	stw	r23,140(sp)
 8019bf0:	0021883a 	mov	r16,zero
 8019bf4:	da002c17 	ldw	r8,176(sp)
 8019bf8:	003d0006 	br	8018ffc <__alt_data_end+0xf8018ffc>
 8019bfc:	00800184 	movi	r2,6
 8019c00:	1400012e 	bgeu	r2,r16,8019c08 <___svfiprintf_internal_r+0xf64>
 8019c04:	1021883a 	mov	r16,r2
 8019c08:	8039883a 	mov	fp,r16
 8019c0c:	802d883a 	mov	r22,r16
 8019c10:	80002116 	blt	r16,zero,8019c98 <___svfiprintf_internal_r+0xff4>
 8019c14:	008205b4 	movhi	r2,2070
 8019c18:	1097c804 	addi	r2,r2,24352
 8019c1c:	dd802015 	stw	r22,128(sp)
 8019c20:	ddc02315 	stw	r23,140(sp)
 8019c24:	d8802615 	stw	r2,152(sp)
 8019c28:	003d5d06 	br	80191a0 <__alt_data_end+0xf80191a0>
 8019c2c:	04001004 	movi	r16,64
 8019c30:	800b883a 	mov	r5,r16
 8019c34:	800f4b00 	call	800f4b0 <_malloc_r>
 8019c38:	da802717 	ldw	r10,156(sp)
 8019c3c:	50800015 	stw	r2,0(r10)
 8019c40:	50800415 	stw	r2,16(r10)
 8019c44:	10002026 	beq	r2,zero,8019cc8 <___svfiprintf_internal_r+0x1024>
 8019c48:	da802717 	ldw	r10,156(sp)
 8019c4c:	54000515 	stw	r16,20(r10)
 8019c50:	003c2806 	br	8018cf4 <__alt_data_end+0xf8018cf4>
 8019c54:	010205b4 	movhi	r4,2070
 8019c58:	21183004 	addi	r4,r4,24768
 8019c5c:	d9002815 	stw	r4,160(sp)
 8019c60:	003d7e06 	br	801925c <__alt_data_end+0xf801925c>
 8019c64:	010205b4 	movhi	r4,2070
 8019c68:	21183004 	addi	r4,r4,24768
 8019c6c:	d9002815 	stw	r4,160(sp)
 8019c70:	003e8706 	br	8019690 <__alt_data_end+0xf8019690>
 8019c74:	010205b4 	movhi	r4,2070
 8019c78:	21182c04 	addi	r4,r4,24752
 8019c7c:	d9002215 	stw	r4,136(sp)
 8019c80:	003ef606 	br	801985c <__alt_data_end+0xf801985c>
 8019c84:	8039883a 	mov	fp,r16
 8019c88:	dac01d83 	ldbu	r11,118(sp)
 8019c8c:	ddc02315 	stw	r23,140(sp)
 8019c90:	0021883a 	mov	r16,zero
 8019c94:	003cd906 	br	8018ffc <__alt_data_end+0xf8018ffc>
 8019c98:	002d883a 	mov	r22,zero
 8019c9c:	003fdd06 	br	8019c14 <__alt_data_end+0xf8019c14>
 8019ca0:	dac02317 	ldw	r11,140(sp)
 8019ca4:	a805883a 	mov	r2,r21
 8019ca8:	502b883a 	mov	r21,r10
 8019cac:	5c000017 	ldw	r16,0(r11)
 8019cb0:	59000104 	addi	r4,r11,4
 8019cb4:	d9002315 	stw	r4,140(sp)
 8019cb8:	803fae0e 	bge	r16,zero,8019b74 <__alt_data_end+0xf8019b74>
 8019cbc:	043fffc4 	movi	r16,-1
 8019cc0:	11000047 	ldb	r4,1(r2)
 8019cc4:	003c4306 	br	8018dd4 <__alt_data_end+0xf8018dd4>
 8019cc8:	dac02917 	ldw	r11,164(sp)
 8019ccc:	00800304 	movi	r2,12
 8019cd0:	58800015 	stw	r2,0(r11)
 8019cd4:	00bfffc4 	movi	r2,-1
 8019cd8:	003eb306 	br	80197a8 <__alt_data_end+0xf80197a8>

08019cdc <__sprint_r.part.0>:
 8019cdc:	28801917 	ldw	r2,100(r5)
 8019ce0:	defff604 	addi	sp,sp,-40
 8019ce4:	dd400515 	stw	r21,20(sp)
 8019ce8:	dcc00315 	stw	r19,12(sp)
 8019cec:	dfc00915 	stw	ra,36(sp)
 8019cf0:	df000815 	stw	fp,32(sp)
 8019cf4:	ddc00715 	stw	r23,28(sp)
 8019cf8:	dd800615 	stw	r22,24(sp)
 8019cfc:	dd000415 	stw	r20,16(sp)
 8019d00:	dc800215 	stw	r18,8(sp)
 8019d04:	dc400115 	stw	r17,4(sp)
 8019d08:	dc000015 	stw	r16,0(sp)
 8019d0c:	1088000c 	andi	r2,r2,8192
 8019d10:	2827883a 	mov	r19,r5
 8019d14:	302b883a 	mov	r21,r6
 8019d18:	10002d26 	beq	r2,zero,8019dd0 <__sprint_r.part.0+0xf4>
 8019d1c:	30800217 	ldw	r2,8(r6)
 8019d20:	35800017 	ldw	r22,0(r6)
 8019d24:	10002826 	beq	r2,zero,8019dc8 <__sprint_r.part.0+0xec>
 8019d28:	2029883a 	mov	r20,r4
 8019d2c:	b5c00104 	addi	r23,r22,4
 8019d30:	04bfffc4 	movi	r18,-1
 8019d34:	bc400017 	ldw	r17,0(r23)
 8019d38:	b4000017 	ldw	r16,0(r22)
 8019d3c:	0039883a 	mov	fp,zero
 8019d40:	8822d0ba 	srli	r17,r17,2
 8019d44:	04400316 	blt	zero,r17,8019d54 <__sprint_r.part.0+0x78>
 8019d48:	00001806 	br	8019dac <__sprint_r.part.0+0xd0>
 8019d4c:	84000104 	addi	r16,r16,4
 8019d50:	8f001526 	beq	r17,fp,8019da8 <__sprint_r.part.0+0xcc>
 8019d54:	81400017 	ldw	r5,0(r16)
 8019d58:	a009883a 	mov	r4,r20
 8019d5c:	980d883a 	mov	r6,r19
 8019d60:	801b4180 	call	801b418 <_fputwc_r>
 8019d64:	e7000044 	addi	fp,fp,1
 8019d68:	14bff81e 	bne	r2,r18,8019d4c <__alt_data_end+0xf8019d4c>
 8019d6c:	9005883a 	mov	r2,r18
 8019d70:	a8000215 	stw	zero,8(r21)
 8019d74:	a8000115 	stw	zero,4(r21)
 8019d78:	dfc00917 	ldw	ra,36(sp)
 8019d7c:	df000817 	ldw	fp,32(sp)
 8019d80:	ddc00717 	ldw	r23,28(sp)
 8019d84:	dd800617 	ldw	r22,24(sp)
 8019d88:	dd400517 	ldw	r21,20(sp)
 8019d8c:	dd000417 	ldw	r20,16(sp)
 8019d90:	dcc00317 	ldw	r19,12(sp)
 8019d94:	dc800217 	ldw	r18,8(sp)
 8019d98:	dc400117 	ldw	r17,4(sp)
 8019d9c:	dc000017 	ldw	r16,0(sp)
 8019da0:	dec00a04 	addi	sp,sp,40
 8019da4:	f800283a 	ret
 8019da8:	a8800217 	ldw	r2,8(r21)
 8019dac:	8c63883a 	add	r17,r17,r17
 8019db0:	8c63883a 	add	r17,r17,r17
 8019db4:	1445c83a 	sub	r2,r2,r17
 8019db8:	a8800215 	stw	r2,8(r21)
 8019dbc:	b5800204 	addi	r22,r22,8
 8019dc0:	bdc00204 	addi	r23,r23,8
 8019dc4:	103fdb1e 	bne	r2,zero,8019d34 <__alt_data_end+0xf8019d34>
 8019dc8:	0005883a 	mov	r2,zero
 8019dcc:	003fe806 	br	8019d70 <__alt_data_end+0xf8019d70>
 8019dd0:	80168580 	call	8016858 <__sfvwrite_r>
 8019dd4:	003fe606 	br	8019d70 <__alt_data_end+0xf8019d70>

08019dd8 <__sprint_r>:
 8019dd8:	30c00217 	ldw	r3,8(r6)
 8019ddc:	18000126 	beq	r3,zero,8019de4 <__sprint_r+0xc>
 8019de0:	8019cdc1 	jmpi	8019cdc <__sprint_r.part.0>
 8019de4:	30000115 	stw	zero,4(r6)
 8019de8:	0005883a 	mov	r2,zero
 8019dec:	f800283a 	ret

08019df0 <___vfiprintf_internal_r>:
 8019df0:	deffca04 	addi	sp,sp,-216
 8019df4:	dd803215 	stw	r22,200(sp)
 8019df8:	dd403115 	stw	r21,196(sp)
 8019dfc:	dfc03515 	stw	ra,212(sp)
 8019e00:	df003415 	stw	fp,208(sp)
 8019e04:	ddc03315 	stw	r23,204(sp)
 8019e08:	dd003015 	stw	r20,192(sp)
 8019e0c:	dcc02f15 	stw	r19,188(sp)
 8019e10:	dc802e15 	stw	r18,184(sp)
 8019e14:	dc402d15 	stw	r17,180(sp)
 8019e18:	dc002c15 	stw	r16,176(sp)
 8019e1c:	d9002015 	stw	r4,128(sp)
 8019e20:	d9c02215 	stw	r7,136(sp)
 8019e24:	282b883a 	mov	r21,r5
 8019e28:	302d883a 	mov	r22,r6
 8019e2c:	20000226 	beq	r4,zero,8019e38 <___vfiprintf_internal_r+0x48>
 8019e30:	20800e17 	ldw	r2,56(r4)
 8019e34:	1001b126 	beq	r2,zero,801a4fc <___vfiprintf_internal_r+0x70c>
 8019e38:	a880030b 	ldhu	r2,12(r21)
 8019e3c:	10c8000c 	andi	r3,r2,8192
 8019e40:	1800061e 	bne	r3,zero,8019e5c <___vfiprintf_internal_r+0x6c>
 8019e44:	a9001917 	ldw	r4,100(r21)
 8019e48:	00f7ffc4 	movi	r3,-8193
 8019e4c:	10880014 	ori	r2,r2,8192
 8019e50:	20c6703a 	and	r3,r4,r3
 8019e54:	a880030d 	sth	r2,12(r21)
 8019e58:	a8c01915 	stw	r3,100(r21)
 8019e5c:	10c0020c 	andi	r3,r2,8
 8019e60:	18018926 	beq	r3,zero,801a488 <___vfiprintf_internal_r+0x698>
 8019e64:	a8c00417 	ldw	r3,16(r21)
 8019e68:	18018726 	beq	r3,zero,801a488 <___vfiprintf_internal_r+0x698>
 8019e6c:	1080068c 	andi	r2,r2,26
 8019e70:	00c00284 	movi	r3,10
 8019e74:	10c18c26 	beq	r2,r3,801a4a8 <___vfiprintf_internal_r+0x6b8>
 8019e78:	d8801a04 	addi	r2,sp,104
 8019e7c:	d8c019c4 	addi	r3,sp,103
 8019e80:	070205b4 	movhi	fp,2070
 8019e84:	05c205b4 	movhi	r23,2070
 8019e88:	10c9c83a 	sub	r4,r2,r3
 8019e8c:	e7183804 	addi	fp,fp,24800
 8019e90:	bdd83404 	addi	r23,r23,24784
 8019e94:	d8801e15 	stw	r2,120(sp)
 8019e98:	d8c01f15 	stw	r3,124(sp)
 8019e9c:	dec01a15 	stw	sp,104(sp)
 8019ea0:	d8001c15 	stw	zero,112(sp)
 8019ea4:	d8001b15 	stw	zero,108(sp)
 8019ea8:	d8002615 	stw	zero,152(sp)
 8019eac:	d8002315 	stw	zero,140(sp)
 8019eb0:	d9002715 	stw	r4,156(sp)
 8019eb4:	d811883a 	mov	r8,sp
 8019eb8:	dd402115 	stw	r21,132(sp)
 8019ebc:	b021883a 	mov	r16,r22
 8019ec0:	80800007 	ldb	r2,0(r16)
 8019ec4:	10037226 	beq	r2,zero,801ac90 <___vfiprintf_internal_r+0xea0>
 8019ec8:	01000944 	movi	r4,37
 8019ecc:	11037026 	beq	r2,r4,801ac90 <___vfiprintf_internal_r+0xea0>
 8019ed0:	8005883a 	mov	r2,r16
 8019ed4:	00000106 	br	8019edc <___vfiprintf_internal_r+0xec>
 8019ed8:	19000326 	beq	r3,r4,8019ee8 <___vfiprintf_internal_r+0xf8>
 8019edc:	10800044 	addi	r2,r2,1
 8019ee0:	10c00007 	ldb	r3,0(r2)
 8019ee4:	183ffc1e 	bne	r3,zero,8019ed8 <__alt_data_end+0xf8019ed8>
 8019ee8:	1425c83a 	sub	r18,r2,r16
 8019eec:	1023883a 	mov	r17,r2
 8019ef0:	90001026 	beq	r18,zero,8019f34 <___vfiprintf_internal_r+0x144>
 8019ef4:	d8c01c17 	ldw	r3,112(sp)
 8019ef8:	d8801b17 	ldw	r2,108(sp)
 8019efc:	44000015 	stw	r16,0(r8)
 8019f00:	90c7883a 	add	r3,r18,r3
 8019f04:	10800044 	addi	r2,r2,1
 8019f08:	44800115 	stw	r18,4(r8)
 8019f0c:	d8c01c15 	stw	r3,112(sp)
 8019f10:	d8801b15 	stw	r2,108(sp)
 8019f14:	010001c4 	movi	r4,7
 8019f18:	2080750e 	bge	r4,r2,801a0f0 <___vfiprintf_internal_r+0x300>
 8019f1c:	18036f1e 	bne	r3,zero,801acdc <___vfiprintf_internal_r+0xeec>
 8019f20:	d8802317 	ldw	r2,140(sp)
 8019f24:	d8001b15 	stw	zero,108(sp)
 8019f28:	d811883a 	mov	r8,sp
 8019f2c:	1485883a 	add	r2,r2,r18
 8019f30:	d8802315 	stw	r2,140(sp)
 8019f34:	88800007 	ldb	r2,0(r17)
 8019f38:	10041026 	beq	r2,zero,801af7c <___vfiprintf_internal_r+0x118c>
 8019f3c:	88c00047 	ldb	r3,1(r17)
 8019f40:	88800044 	addi	r2,r17,1
 8019f44:	d8001d85 	stb	zero,118(sp)
 8019f48:	000f883a 	mov	r7,zero
 8019f4c:	027fffc4 	movi	r9,-1
 8019f50:	0025883a 	mov	r18,zero
 8019f54:	002b883a 	mov	r21,zero
 8019f58:	01401604 	movi	r5,88
 8019f5c:	01800244 	movi	r6,9
 8019f60:	03400a84 	movi	r13,42
 8019f64:	03001b04 	movi	r12,108
 8019f68:	14000044 	addi	r16,r2,1
 8019f6c:	18bff804 	addi	r2,r3,-32
 8019f70:	28825536 	bltu	r5,r2,801a8c8 <___vfiprintf_internal_r+0xad8>
 8019f74:	100490ba 	slli	r2,r2,2
 8019f78:	010200b4 	movhi	r4,2050
 8019f7c:	2127e304 	addi	r4,r4,-24692
 8019f80:	1105883a 	add	r2,r2,r4
 8019f84:	10800017 	ldw	r2,0(r2)
 8019f88:	1000683a 	jmp	r2
 8019f8c:	0801a68c 	andi	zero,at,1690
 8019f90:	0801a8c8 	cmpgei	zero,at,1699
 8019f94:	0801a8c8 	cmpgei	zero,at,1699
 8019f98:	0801a6ac 	andhi	zero,at,1690
 8019f9c:	0801a8c8 	cmpgei	zero,at,1699
 8019fa0:	0801a8c8 	cmpgei	zero,at,1699
 8019fa4:	0801a8c8 	cmpgei	zero,at,1699
 8019fa8:	0801a8c8 	cmpgei	zero,at,1699
 8019fac:	0801a8c8 	cmpgei	zero,at,1699
 8019fb0:	0801a8c8 	cmpgei	zero,at,1699
 8019fb4:	0801a6bc 	xorhi	zero,at,1690
 8019fb8:	0801a6dc 	xori	zero,at,1691
 8019fbc:	0801a8c8 	cmpgei	zero,at,1699
 8019fc0:	0801a504 	addi	zero,at,1684
 8019fc4:	0801a5f0 	cmpltui	zero,at,1687
 8019fc8:	0801a8c8 	cmpgei	zero,at,1699
 8019fcc:	0801a570 	cmpltui	zero,at,1685
 8019fd0:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fd4:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fd8:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fdc:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fe0:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fe4:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fe8:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019fec:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019ff0:	0801a580 	call	801a58 <__reset-0x77fe5a8>
 8019ff4:	0801a8c8 	cmpgei	zero,at,1699
 8019ff8:	0801a8c8 	cmpgei	zero,at,1699
 8019ffc:	0801a8c8 	cmpgei	zero,at,1699
 801a000:	0801a8c8 	cmpgei	zero,at,1699
 801a004:	0801a8c8 	cmpgei	zero,at,1699
 801a008:	0801a8c8 	cmpgei	zero,at,1699
 801a00c:	0801a8c8 	cmpgei	zero,at,1699
 801a010:	0801a8c8 	cmpgei	zero,at,1699
 801a014:	0801a8c8 	cmpgei	zero,at,1699
 801a018:	0801a8c8 	cmpgei	zero,at,1699
 801a01c:	0801a5ac 	andhi	zero,at,1686
 801a020:	0801a8c8 	cmpgei	zero,at,1699
 801a024:	0801a8c8 	cmpgei	zero,at,1699
 801a028:	0801a8c8 	cmpgei	zero,at,1699
 801a02c:	0801a8c8 	cmpgei	zero,at,1699
 801a030:	0801a8c8 	cmpgei	zero,at,1699
 801a034:	0801a8c8 	cmpgei	zero,at,1699
 801a038:	0801a8c8 	cmpgei	zero,at,1699
 801a03c:	0801a8c8 	cmpgei	zero,at,1699
 801a040:	0801a8c8 	cmpgei	zero,at,1699
 801a044:	0801a8c8 	cmpgei	zero,at,1699
 801a048:	0801a138 	rdprs	zero,at,1668
 801a04c:	0801a8c8 	cmpgei	zero,at,1699
 801a050:	0801a8c8 	cmpgei	zero,at,1699
 801a054:	0801a8c8 	cmpgei	zero,at,1699
 801a058:	0801a8c8 	cmpgei	zero,at,1699
 801a05c:	0801a8c8 	cmpgei	zero,at,1699
 801a060:	0801a104 	addi	zero,at,1668
 801a064:	0801a8c8 	cmpgei	zero,at,1699
 801a068:	0801a8c8 	cmpgei	zero,at,1699
 801a06c:	0801a74c 	andi	zero,at,1693
 801a070:	0801a8c8 	cmpgei	zero,at,1699
 801a074:	0801a8c8 	cmpgei	zero,at,1699
 801a078:	0801a8c8 	cmpgei	zero,at,1699
 801a07c:	0801a8c8 	cmpgei	zero,at,1699
 801a080:	0801a8c8 	cmpgei	zero,at,1699
 801a084:	0801a8c8 	cmpgei	zero,at,1699
 801a088:	0801a8c8 	cmpgei	zero,at,1699
 801a08c:	0801a8c8 	cmpgei	zero,at,1699
 801a090:	0801a8c8 	cmpgei	zero,at,1699
 801a094:	0801a8c8 	cmpgei	zero,at,1699
 801a098:	0801a6ec 	andhi	zero,at,1691
 801a09c:	0801a718 	cmpnei	zero,at,1692
 801a0a0:	0801a8c8 	cmpgei	zero,at,1699
 801a0a4:	0801a8c8 	cmpgei	zero,at,1699
 801a0a8:	0801a8c8 	cmpgei	zero,at,1699
 801a0ac:	0801a7f4 	orhi	zero,at,1695
 801a0b0:	0801a718 	cmpnei	zero,at,1692
 801a0b4:	0801a8c8 	cmpgei	zero,at,1699
 801a0b8:	0801a8c8 	cmpgei	zero,at,1699
 801a0bc:	0801a804 	addi	zero,at,1696
 801a0c0:	0801a8c8 	cmpgei	zero,at,1699
 801a0c4:	0801a630 	cmpltui	zero,at,1688
 801a0c8:	0801a13c 	xorhi	zero,at,1668
 801a0cc:	0801a818 	cmpnei	zero,at,1696
 801a0d0:	0801a858 	cmpnei	zero,at,1697
 801a0d4:	0801a8c8 	cmpgei	zero,at,1699
 801a0d8:	0801a7a0 	cmpeqi	zero,at,1694
 801a0dc:	0801a8c8 	cmpgei	zero,at,1699
 801a0e0:	0801a108 	cmpgei	zero,at,1668
 801a0e4:	0801a8c8 	cmpgei	zero,at,1699
 801a0e8:	0801a8c8 	cmpgei	zero,at,1699
 801a0ec:	0801a868 	cmpgeui	zero,at,1697
 801a0f0:	42000204 	addi	r8,r8,8
 801a0f4:	d8802317 	ldw	r2,140(sp)
 801a0f8:	1485883a 	add	r2,r2,r18
 801a0fc:	d8802315 	stw	r2,140(sp)
 801a100:	003f8c06 	br	8019f34 <__alt_data_end+0xf8019f34>
 801a104:	ad400414 	ori	r21,r21,16
 801a108:	a880080c 	andi	r2,r21,32
 801a10c:	1001e61e 	bne	r2,zero,801a8a8 <___vfiprintf_internal_r+0xab8>
 801a110:	a880040c 	andi	r2,r21,16
 801a114:	10034726 	beq	r2,zero,801ae34 <___vfiprintf_internal_r+0x1044>
 801a118:	d8802217 	ldw	r2,136(sp)
 801a11c:	001b883a 	mov	r13,zero
 801a120:	15800017 	ldw	r22,0(r2)
 801a124:	10800104 	addi	r2,r2,4
 801a128:	d8802215 	stw	r2,136(sp)
 801a12c:	b009883a 	mov	r4,r22
 801a130:	00800044 	movi	r2,1
 801a134:	00000c06 	br	801a168 <___vfiprintf_internal_r+0x378>
 801a138:	ad400414 	ori	r21,r21,16
 801a13c:	a880080c 	andi	r2,r21,32
 801a140:	1001491e 	bne	r2,zero,801a668 <___vfiprintf_internal_r+0x878>
 801a144:	a880040c 	andi	r2,r21,16
 801a148:	10032d26 	beq	r2,zero,801ae00 <___vfiprintf_internal_r+0x1010>
 801a14c:	d9002217 	ldw	r4,136(sp)
 801a150:	001b883a 	mov	r13,zero
 801a154:	0005883a 	mov	r2,zero
 801a158:	25800017 	ldw	r22,0(r4)
 801a15c:	21000104 	addi	r4,r4,4
 801a160:	d9002215 	stw	r4,136(sp)
 801a164:	b009883a 	mov	r4,r22
 801a168:	d8001d85 	stb	zero,118(sp)
 801a16c:	4827883a 	mov	r19,r9
 801a170:	001d883a 	mov	r14,zero
 801a174:	48000216 	blt	r9,zero,801a180 <___vfiprintf_internal_r+0x390>
 801a178:	00ffdfc4 	movi	r3,-129
 801a17c:	a8ea703a 	and	r21,r21,r3
 801a180:	2002071e 	bne	r4,zero,801a9a0 <___vfiprintf_internal_r+0xbb0>
 801a184:	4802ad26 	beq	r9,zero,801ac3c <___vfiprintf_internal_r+0xe4c>
 801a188:	10803fcc 	andi	r2,r2,255
 801a18c:	00c00044 	movi	r3,1
 801a190:	10c22b26 	beq	r2,r3,801aa40 <___vfiprintf_internal_r+0xc50>
 801a194:	00c00084 	movi	r3,2
 801a198:	dd001a04 	addi	r20,sp,104
 801a19c:	10c0dd1e 	bne	r2,r3,801a514 <___vfiprintf_internal_r+0x724>
 801a1a0:	d9002617 	ldw	r4,152(sp)
 801a1a4:	b08003cc 	andi	r2,r22,15
 801a1a8:	6806973a 	slli	r3,r13,28
 801a1ac:	2085883a 	add	r2,r4,r2
 801a1b0:	b02cd13a 	srli	r22,r22,4
 801a1b4:	10800003 	ldbu	r2,0(r2)
 801a1b8:	681ad13a 	srli	r13,r13,4
 801a1bc:	a53fffc4 	addi	r20,r20,-1
 801a1c0:	1dacb03a 	or	r22,r3,r22
 801a1c4:	a0800005 	stb	r2,0(r20)
 801a1c8:	b344b03a 	or	r2,r22,r13
 801a1cc:	103ff51e 	bne	r2,zero,801a1a4 <__alt_data_end+0xf801a1a4>
 801a1d0:	d9001e17 	ldw	r4,120(sp)
 801a1d4:	2527c83a 	sub	r19,r4,r20
 801a1d8:	9823883a 	mov	r17,r19
 801a1dc:	9a40010e 	bge	r19,r9,801a1e4 <___vfiprintf_internal_r+0x3f4>
 801a1e0:	4823883a 	mov	r17,r9
 801a1e4:	73803fcc 	andi	r14,r14,255
 801a1e8:	7380201c 	xori	r14,r14,128
 801a1ec:	73bfe004 	addi	r14,r14,-128
 801a1f0:	70000126 	beq	r14,zero,801a1f8 <___vfiprintf_internal_r+0x408>
 801a1f4:	8c400044 	addi	r17,r17,1
 801a1f8:	ab40008c 	andi	r13,r21,2
 801a1fc:	68000126 	beq	r13,zero,801a204 <___vfiprintf_internal_r+0x414>
 801a200:	8c400084 	addi	r17,r17,2
 801a204:	ad80210c 	andi	r22,r21,132
 801a208:	b001c51e 	bne	r22,zero,801a920 <___vfiprintf_internal_r+0xb30>
 801a20c:	9447c83a 	sub	r3,r18,r17
 801a210:	00c1c30e 	bge	zero,r3,801a920 <___vfiprintf_internal_r+0xb30>
 801a214:	01c00404 	movi	r7,16
 801a218:	d8801c17 	ldw	r2,112(sp)
 801a21c:	38c37b0e 	bge	r7,r3,801b00c <___vfiprintf_internal_r+0x121c>
 801a220:	010205b4 	movhi	r4,2070
 801a224:	21183804 	addi	r4,r4,24800
 801a228:	dc002915 	stw	r16,164(sp)
 801a22c:	d9801b17 	ldw	r6,108(sp)
 801a230:	d9002415 	stw	r4,144(sp)
 801a234:	03c001c4 	movi	r15,7
 801a238:	da402515 	stw	r9,148(sp)
 801a23c:	db402815 	stw	r13,160(sp)
 801a240:	1821883a 	mov	r16,r3
 801a244:	00000506 	br	801a25c <___vfiprintf_internal_r+0x46c>
 801a248:	31400084 	addi	r5,r6,2
 801a24c:	42000204 	addi	r8,r8,8
 801a250:	200d883a 	mov	r6,r4
 801a254:	843ffc04 	addi	r16,r16,-16
 801a258:	3c000d0e 	bge	r7,r16,801a290 <___vfiprintf_internal_r+0x4a0>
 801a25c:	10800404 	addi	r2,r2,16
 801a260:	31000044 	addi	r4,r6,1
 801a264:	47000015 	stw	fp,0(r8)
 801a268:	41c00115 	stw	r7,4(r8)
 801a26c:	d8801c15 	stw	r2,112(sp)
 801a270:	d9001b15 	stw	r4,108(sp)
 801a274:	793ff40e 	bge	r15,r4,801a248 <__alt_data_end+0xf801a248>
 801a278:	10019b1e 	bne	r2,zero,801a8e8 <___vfiprintf_internal_r+0xaf8>
 801a27c:	843ffc04 	addi	r16,r16,-16
 801a280:	000d883a 	mov	r6,zero
 801a284:	01400044 	movi	r5,1
 801a288:	d811883a 	mov	r8,sp
 801a28c:	3c3ff316 	blt	r7,r16,801a25c <__alt_data_end+0xf801a25c>
 801a290:	8007883a 	mov	r3,r16
 801a294:	da402517 	ldw	r9,148(sp)
 801a298:	db402817 	ldw	r13,160(sp)
 801a29c:	dc002917 	ldw	r16,164(sp)
 801a2a0:	d9002417 	ldw	r4,144(sp)
 801a2a4:	1885883a 	add	r2,r3,r2
 801a2a8:	40c00115 	stw	r3,4(r8)
 801a2ac:	41000015 	stw	r4,0(r8)
 801a2b0:	d8801c15 	stw	r2,112(sp)
 801a2b4:	d9401b15 	stw	r5,108(sp)
 801a2b8:	00c001c4 	movi	r3,7
 801a2bc:	19426a16 	blt	r3,r5,801ac68 <___vfiprintf_internal_r+0xe78>
 801a2c0:	d8c01d87 	ldb	r3,118(sp)
 801a2c4:	42000204 	addi	r8,r8,8
 801a2c8:	29000044 	addi	r4,r5,1
 801a2cc:	1801991e 	bne	r3,zero,801a934 <___vfiprintf_internal_r+0xb44>
 801a2d0:	68000c26 	beq	r13,zero,801a304 <___vfiprintf_internal_r+0x514>
 801a2d4:	d8c01d04 	addi	r3,sp,116
 801a2d8:	10800084 	addi	r2,r2,2
 801a2dc:	40c00015 	stw	r3,0(r8)
 801a2e0:	00c00084 	movi	r3,2
 801a2e4:	40c00115 	stw	r3,4(r8)
 801a2e8:	d8801c15 	stw	r2,112(sp)
 801a2ec:	d9001b15 	stw	r4,108(sp)
 801a2f0:	00c001c4 	movi	r3,7
 801a2f4:	19024c16 	blt	r3,r4,801ac28 <___vfiprintf_internal_r+0xe38>
 801a2f8:	200b883a 	mov	r5,r4
 801a2fc:	42000204 	addi	r8,r8,8
 801a300:	21000044 	addi	r4,r4,1
 801a304:	00c02004 	movi	r3,128
 801a308:	b0c20126 	beq	r22,r3,801ab10 <___vfiprintf_internal_r+0xd20>
 801a30c:	4cedc83a 	sub	r22,r9,r19
 801a310:	0580230e 	bge	zero,r22,801a3a0 <___vfiprintf_internal_r+0x5b0>
 801a314:	01c00404 	movi	r7,16
 801a318:	3d83140e 	bge	r7,r22,801af6c <___vfiprintf_internal_r+0x117c>
 801a31c:	010205b4 	movhi	r4,2070
 801a320:	21183404 	addi	r4,r4,24784
 801a324:	d9002415 	stw	r4,144(sp)
 801a328:	034001c4 	movi	r13,7
 801a32c:	00000506 	br	801a344 <___vfiprintf_internal_r+0x554>
 801a330:	29000084 	addi	r4,r5,2
 801a334:	42000204 	addi	r8,r8,8
 801a338:	180b883a 	mov	r5,r3
 801a33c:	b5bffc04 	addi	r22,r22,-16
 801a340:	3d800d0e 	bge	r7,r22,801a378 <___vfiprintf_internal_r+0x588>
 801a344:	10800404 	addi	r2,r2,16
 801a348:	28c00044 	addi	r3,r5,1
 801a34c:	45c00015 	stw	r23,0(r8)
 801a350:	41c00115 	stw	r7,4(r8)
 801a354:	d8801c15 	stw	r2,112(sp)
 801a358:	d8c01b15 	stw	r3,108(sp)
 801a35c:	68fff40e 	bge	r13,r3,801a330 <__alt_data_end+0xf801a330>
 801a360:	1001811e 	bne	r2,zero,801a968 <___vfiprintf_internal_r+0xb78>
 801a364:	b5bffc04 	addi	r22,r22,-16
 801a368:	01000044 	movi	r4,1
 801a36c:	000b883a 	mov	r5,zero
 801a370:	d811883a 	mov	r8,sp
 801a374:	3dbff316 	blt	r7,r22,801a344 <__alt_data_end+0xf801a344>
 801a378:	d8c02417 	ldw	r3,144(sp)
 801a37c:	1585883a 	add	r2,r2,r22
 801a380:	45800115 	stw	r22,4(r8)
 801a384:	40c00015 	stw	r3,0(r8)
 801a388:	d8801c15 	stw	r2,112(sp)
 801a38c:	d9001b15 	stw	r4,108(sp)
 801a390:	00c001c4 	movi	r3,7
 801a394:	1901d016 	blt	r3,r4,801aad8 <___vfiprintf_internal_r+0xce8>
 801a398:	42000204 	addi	r8,r8,8
 801a39c:	21000044 	addi	r4,r4,1
 801a3a0:	14c5883a 	add	r2,r2,r19
 801a3a4:	45000015 	stw	r20,0(r8)
 801a3a8:	44c00115 	stw	r19,4(r8)
 801a3ac:	d8801c15 	stw	r2,112(sp)
 801a3b0:	d9001b15 	stw	r4,108(sp)
 801a3b4:	00c001c4 	movi	r3,7
 801a3b8:	1901cf0e 	bge	r3,r4,801aaf8 <___vfiprintf_internal_r+0xd08>
 801a3bc:	1002361e 	bne	r2,zero,801ac98 <___vfiprintf_internal_r+0xea8>
 801a3c0:	d8001b15 	stw	zero,108(sp)
 801a3c4:	aac0010c 	andi	r11,r21,4
 801a3c8:	58002826 	beq	r11,zero,801a46c <___vfiprintf_internal_r+0x67c>
 801a3cc:	9467c83a 	sub	r19,r18,r17
 801a3d0:	d811883a 	mov	r8,sp
 801a3d4:	04c3340e 	bge	zero,r19,801b0a8 <___vfiprintf_internal_r+0x12b8>
 801a3d8:	01c00404 	movi	r7,16
 801a3dc:	3cc31b0e 	bge	r7,r19,801b04c <___vfiprintf_internal_r+0x125c>
 801a3e0:	00c205b4 	movhi	r3,2070
 801a3e4:	18d83804 	addi	r3,r3,24800
 801a3e8:	d9001b17 	ldw	r4,108(sp)
 801a3ec:	d8c02415 	stw	r3,144(sp)
 801a3f0:	382b883a 	mov	r21,r7
 801a3f4:	050001c4 	movi	r20,7
 801a3f8:	dd802017 	ldw	r22,128(sp)
 801a3fc:	00000506 	br	801a414 <___vfiprintf_internal_r+0x624>
 801a400:	21400084 	addi	r5,r4,2
 801a404:	42000204 	addi	r8,r8,8
 801a408:	1809883a 	mov	r4,r3
 801a40c:	9cfffc04 	addi	r19,r19,-16
 801a410:	acc00d0e 	bge	r21,r19,801a448 <___vfiprintf_internal_r+0x658>
 801a414:	10800404 	addi	r2,r2,16
 801a418:	20c00044 	addi	r3,r4,1
 801a41c:	47000015 	stw	fp,0(r8)
 801a420:	45400115 	stw	r21,4(r8)
 801a424:	d8801c15 	stw	r2,112(sp)
 801a428:	d8c01b15 	stw	r3,108(sp)
 801a42c:	a0fff40e 	bge	r20,r3,801a400 <__alt_data_end+0xf801a400>
 801a430:	10019f1e 	bne	r2,zero,801aab0 <___vfiprintf_internal_r+0xcc0>
 801a434:	9cfffc04 	addi	r19,r19,-16
 801a438:	01400044 	movi	r5,1
 801a43c:	0009883a 	mov	r4,zero
 801a440:	d811883a 	mov	r8,sp
 801a444:	acfff316 	blt	r21,r19,801a414 <__alt_data_end+0xf801a414>
 801a448:	d8c02417 	ldw	r3,144(sp)
 801a44c:	14c5883a 	add	r2,r2,r19
 801a450:	44c00115 	stw	r19,4(r8)
 801a454:	40c00015 	stw	r3,0(r8)
 801a458:	d8801c15 	stw	r2,112(sp)
 801a45c:	d9401b15 	stw	r5,108(sp)
 801a460:	00c001c4 	movi	r3,7
 801a464:	1941810e 	bge	r3,r5,801aa6c <___vfiprintf_internal_r+0xc7c>
 801a468:	10017a1e 	bne	r2,zero,801aa54 <___vfiprintf_internal_r+0xc64>
 801a46c:	8c82a416 	blt	r17,r18,801af00 <___vfiprintf_internal_r+0x1110>
 801a470:	d9002317 	ldw	r4,140(sp)
 801a474:	2449883a 	add	r4,r4,r17
 801a478:	d9002315 	stw	r4,140(sp)
 801a47c:	d8001b15 	stw	zero,108(sp)
 801a480:	d811883a 	mov	r8,sp
 801a484:	003e8e06 	br	8019ec0 <__alt_data_end+0xf8019ec0>
 801a488:	d9002017 	ldw	r4,128(sp)
 801a48c:	a80b883a 	mov	r5,r21
 801a490:	80143940 	call	8014394 <__swsetup_r>
 801a494:	10000c1e 	bne	r2,zero,801a4c8 <___vfiprintf_internal_r+0x6d8>
 801a498:	a880030b 	ldhu	r2,12(r21)
 801a49c:	00c00284 	movi	r3,10
 801a4a0:	1080068c 	andi	r2,r2,26
 801a4a4:	10fe741e 	bne	r2,r3,8019e78 <__alt_data_end+0xf8019e78>
 801a4a8:	a880038f 	ldh	r2,14(r21)
 801a4ac:	103e7216 	blt	r2,zero,8019e78 <__alt_data_end+0xf8019e78>
 801a4b0:	d9002017 	ldw	r4,128(sp)
 801a4b4:	d9c02217 	ldw	r7,136(sp)
 801a4b8:	a80b883a 	mov	r5,r21
 801a4bc:	b00d883a 	mov	r6,r22
 801a4c0:	801b0e40 	call	801b0e4 <__sbprintf>
 801a4c4:	00000106 	br	801a4cc <___vfiprintf_internal_r+0x6dc>
 801a4c8:	00bfffc4 	movi	r2,-1
 801a4cc:	dfc03517 	ldw	ra,212(sp)
 801a4d0:	df003417 	ldw	fp,208(sp)
 801a4d4:	ddc03317 	ldw	r23,204(sp)
 801a4d8:	dd803217 	ldw	r22,200(sp)
 801a4dc:	dd403117 	ldw	r21,196(sp)
 801a4e0:	dd003017 	ldw	r20,192(sp)
 801a4e4:	dcc02f17 	ldw	r19,188(sp)
 801a4e8:	dc802e17 	ldw	r18,184(sp)
 801a4ec:	dc402d17 	ldw	r17,180(sp)
 801a4f0:	dc002c17 	ldw	r16,176(sp)
 801a4f4:	dec03604 	addi	sp,sp,216
 801a4f8:	f800283a 	ret
 801a4fc:	80163f40 	call	80163f4 <__sinit>
 801a500:	003e4d06 	br	8019e38 <__alt_data_end+0xf8019e38>
 801a504:	8005883a 	mov	r2,r16
 801a508:	ad400114 	ori	r21,r21,4
 801a50c:	80c00007 	ldb	r3,0(r16)
 801a510:	003e9506 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a514:	b006d0fa 	srli	r3,r22,3
 801a518:	6808977a 	slli	r4,r13,29
 801a51c:	681ad0fa 	srli	r13,r13,3
 801a520:	b58001cc 	andi	r22,r22,7
 801a524:	b0800c04 	addi	r2,r22,48
 801a528:	a53fffc4 	addi	r20,r20,-1
 801a52c:	20ecb03a 	or	r22,r4,r3
 801a530:	a0800005 	stb	r2,0(r20)
 801a534:	b346b03a 	or	r3,r22,r13
 801a538:	183ff61e 	bne	r3,zero,801a514 <__alt_data_end+0xf801a514>
 801a53c:	a8c0004c 	andi	r3,r21,1
 801a540:	a009883a 	mov	r4,r20
 801a544:	18013b26 	beq	r3,zero,801aa34 <___vfiprintf_internal_r+0xc44>
 801a548:	10803fcc 	andi	r2,r2,255
 801a54c:	1080201c 	xori	r2,r2,128
 801a550:	10bfe004 	addi	r2,r2,-128
 801a554:	00c00c04 	movi	r3,48
 801a558:	10ff1d26 	beq	r2,r3,801a1d0 <__alt_data_end+0xf801a1d0>
 801a55c:	d8801e17 	ldw	r2,120(sp)
 801a560:	a53fffc4 	addi	r20,r20,-1
 801a564:	20ffffc5 	stb	r3,-1(r4)
 801a568:	1527c83a 	sub	r19,r2,r20
 801a56c:	003f1a06 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801a570:	ad402014 	ori	r21,r21,128
 801a574:	8005883a 	mov	r2,r16
 801a578:	80c00007 	ldb	r3,0(r16)
 801a57c:	003e7a06 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a580:	8005883a 	mov	r2,r16
 801a584:	0025883a 	mov	r18,zero
 801a588:	193ff404 	addi	r4,r3,-48
 801a58c:	10c00007 	ldb	r3,0(r2)
 801a590:	948002a4 	muli	r18,r18,10
 801a594:	84000044 	addi	r16,r16,1
 801a598:	8005883a 	mov	r2,r16
 801a59c:	9125883a 	add	r18,r18,r4
 801a5a0:	193ff404 	addi	r4,r3,-48
 801a5a4:	313ff92e 	bgeu	r6,r4,801a58c <__alt_data_end+0xf801a58c>
 801a5a8:	003e7006 	br	8019f6c <__alt_data_end+0xf8019f6c>
 801a5ac:	ad400414 	ori	r21,r21,16
 801a5b0:	d9c01d85 	stb	r7,118(sp)
 801a5b4:	a880080c 	andi	r2,r21,32
 801a5b8:	d8c02217 	ldw	r3,136(sp)
 801a5bc:	10005a26 	beq	r2,zero,801a728 <___vfiprintf_internal_r+0x938>
 801a5c0:	d9002217 	ldw	r4,136(sp)
 801a5c4:	18800117 	ldw	r2,4(r3)
 801a5c8:	1d800017 	ldw	r22,0(r3)
 801a5cc:	21000204 	addi	r4,r4,8
 801a5d0:	d9002215 	stw	r4,136(sp)
 801a5d4:	101b883a 	mov	r13,r2
 801a5d8:	1001f416 	blt	r2,zero,801adac <___vfiprintf_internal_r+0xfbc>
 801a5dc:	db801d83 	ldbu	r14,118(sp)
 801a5e0:	4827883a 	mov	r19,r9
 801a5e4:	00800044 	movi	r2,1
 801a5e8:	b348b03a 	or	r4,r22,r13
 801a5ec:	003ee106 	br	801a174 <__alt_data_end+0xf801a174>
 801a5f0:	80c00007 	ldb	r3,0(r16)
 801a5f4:	80800044 	addi	r2,r16,1
 801a5f8:	1b42a326 	beq	r3,r13,801b088 <___vfiprintf_internal_r+0x1298>
 801a5fc:	193ff404 	addi	r4,r3,-48
 801a600:	1021883a 	mov	r16,r2
 801a604:	0013883a 	mov	r9,zero
 801a608:	313e5836 	bltu	r6,r4,8019f6c <__alt_data_end+0xf8019f6c>
 801a60c:	80c00007 	ldb	r3,0(r16)
 801a610:	4a4002a4 	muli	r9,r9,10
 801a614:	84000044 	addi	r16,r16,1
 801a618:	2253883a 	add	r9,r4,r9
 801a61c:	193ff404 	addi	r4,r3,-48
 801a620:	313ffa2e 	bgeu	r6,r4,801a60c <__alt_data_end+0xf801a60c>
 801a624:	483e510e 	bge	r9,zero,8019f6c <__alt_data_end+0xf8019f6c>
 801a628:	027fffc4 	movi	r9,-1
 801a62c:	003e4f06 	br	8019f6c <__alt_data_end+0xf8019f6c>
 801a630:	d9c01d85 	stb	r7,118(sp)
 801a634:	a880080c 	andi	r2,r21,32
 801a638:	10020826 	beq	r2,zero,801ae5c <___vfiprintf_internal_r+0x106c>
 801a63c:	d8c02217 	ldw	r3,136(sp)
 801a640:	d9002317 	ldw	r4,140(sp)
 801a644:	18800017 	ldw	r2,0(r3)
 801a648:	2007d7fa 	srai	r3,r4,31
 801a64c:	d9002217 	ldw	r4,136(sp)
 801a650:	10c00115 	stw	r3,4(r2)
 801a654:	21000104 	addi	r4,r4,4
 801a658:	d9002215 	stw	r4,136(sp)
 801a65c:	d9002317 	ldw	r4,140(sp)
 801a660:	11000015 	stw	r4,0(r2)
 801a664:	003e1606 	br	8019ec0 <__alt_data_end+0xf8019ec0>
 801a668:	d8802217 	ldw	r2,136(sp)
 801a66c:	d8c02217 	ldw	r3,136(sp)
 801a670:	15800017 	ldw	r22,0(r2)
 801a674:	13400117 	ldw	r13,4(r2)
 801a678:	18c00204 	addi	r3,r3,8
 801a67c:	0005883a 	mov	r2,zero
 801a680:	d8c02215 	stw	r3,136(sp)
 801a684:	b348b03a 	or	r4,r22,r13
 801a688:	003eb706 	br	801a168 <__alt_data_end+0xf801a168>
 801a68c:	38803fcc 	andi	r2,r7,255
 801a690:	1080201c 	xori	r2,r2,128
 801a694:	10bfe004 	addi	r2,r2,-128
 801a698:	1001e31e 	bne	r2,zero,801ae28 <___vfiprintf_internal_r+0x1038>
 801a69c:	8005883a 	mov	r2,r16
 801a6a0:	01c00804 	movi	r7,32
 801a6a4:	80c00007 	ldb	r3,0(r16)
 801a6a8:	003e2f06 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a6ac:	ad400054 	ori	r21,r21,1
 801a6b0:	8005883a 	mov	r2,r16
 801a6b4:	80c00007 	ldb	r3,0(r16)
 801a6b8:	003e2b06 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a6bc:	d8c02217 	ldw	r3,136(sp)
 801a6c0:	1c800017 	ldw	r18,0(r3)
 801a6c4:	18c00104 	addi	r3,r3,4
 801a6c8:	90023816 	blt	r18,zero,801afac <___vfiprintf_internal_r+0x11bc>
 801a6cc:	d8c02215 	stw	r3,136(sp)
 801a6d0:	8005883a 	mov	r2,r16
 801a6d4:	80c00007 	ldb	r3,0(r16)
 801a6d8:	003e2306 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a6dc:	8005883a 	mov	r2,r16
 801a6e0:	01c00ac4 	movi	r7,43
 801a6e4:	80c00007 	ldb	r3,0(r16)
 801a6e8:	003e1f06 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a6ec:	d8c02217 	ldw	r3,136(sp)
 801a6f0:	04400044 	movi	r17,1
 801a6f4:	d8001d85 	stb	zero,118(sp)
 801a6f8:	18800017 	ldw	r2,0(r3)
 801a6fc:	18c00104 	addi	r3,r3,4
 801a700:	d8c02215 	stw	r3,136(sp)
 801a704:	d8801005 	stb	r2,64(sp)
 801a708:	8827883a 	mov	r19,r17
 801a70c:	dd001004 	addi	r20,sp,64
 801a710:	0013883a 	mov	r9,zero
 801a714:	003eb806 	br	801a1f8 <__alt_data_end+0xf801a1f8>
 801a718:	d9c01d85 	stb	r7,118(sp)
 801a71c:	a880080c 	andi	r2,r21,32
 801a720:	d8c02217 	ldw	r3,136(sp)
 801a724:	103fa61e 	bne	r2,zero,801a5c0 <__alt_data_end+0xf801a5c0>
 801a728:	a880040c 	andi	r2,r21,16
 801a72c:	1001dd26 	beq	r2,zero,801aea4 <___vfiprintf_internal_r+0x10b4>
 801a730:	1d800017 	ldw	r22,0(r3)
 801a734:	d8802217 	ldw	r2,136(sp)
 801a738:	b01bd7fa 	srai	r13,r22,31
 801a73c:	10800104 	addi	r2,r2,4
 801a740:	d8802215 	stw	r2,136(sp)
 801a744:	6805883a 	mov	r2,r13
 801a748:	003fa306 	br	801a5d8 <__alt_data_end+0xf801a5d8>
 801a74c:	008205b4 	movhi	r2,2070
 801a750:	1097be04 	addi	r2,r2,24312
 801a754:	d8802615 	stw	r2,152(sp)
 801a758:	d9c01d85 	stb	r7,118(sp)
 801a75c:	a880080c 	andi	r2,r21,32
 801a760:	10004726 	beq	r2,zero,801a880 <___vfiprintf_internal_r+0xa90>
 801a764:	d9002217 	ldw	r4,136(sp)
 801a768:	25800017 	ldw	r22,0(r4)
 801a76c:	23400117 	ldw	r13,4(r4)
 801a770:	21000204 	addi	r4,r4,8
 801a774:	d9002215 	stw	r4,136(sp)
 801a778:	a880004c 	andi	r2,r21,1
 801a77c:	10014e26 	beq	r2,zero,801acb8 <___vfiprintf_internal_r+0xec8>
 801a780:	b348b03a 	or	r4,r22,r13
 801a784:	20019c26 	beq	r4,zero,801adf8 <___vfiprintf_internal_r+0x1008>
 801a788:	00800c04 	movi	r2,48
 801a78c:	d8801d05 	stb	r2,116(sp)
 801a790:	d8c01d45 	stb	r3,117(sp)
 801a794:	ad400094 	ori	r21,r21,2
 801a798:	00800084 	movi	r2,2
 801a79c:	003e7206 	br	801a168 <__alt_data_end+0xf801a168>
 801a7a0:	d8c02217 	ldw	r3,136(sp)
 801a7a4:	d8001d85 	stb	zero,118(sp)
 801a7a8:	1d000017 	ldw	r20,0(r3)
 801a7ac:	1d800104 	addi	r22,r3,4
 801a7b0:	a0021c26 	beq	r20,zero,801b024 <___vfiprintf_internal_r+0x1234>
 801a7b4:	a009883a 	mov	r4,r20
 801a7b8:	48020016 	blt	r9,zero,801afbc <___vfiprintf_internal_r+0x11cc>
 801a7bc:	480d883a 	mov	r6,r9
 801a7c0:	000b883a 	mov	r5,zero
 801a7c4:	da002a15 	stw	r8,168(sp)
 801a7c8:	da402b15 	stw	r9,172(sp)
 801a7cc:	80171380 	call	8017138 <memchr>
 801a7d0:	da002a17 	ldw	r8,168(sp)
 801a7d4:	da402b17 	ldw	r9,172(sp)
 801a7d8:	10022226 	beq	r2,zero,801b064 <___vfiprintf_internal_r+0x1274>
 801a7dc:	1527c83a 	sub	r19,r2,r20
 801a7e0:	4cc1c916 	blt	r9,r19,801af08 <___vfiprintf_internal_r+0x1118>
 801a7e4:	db801d83 	ldbu	r14,118(sp)
 801a7e8:	dd802215 	stw	r22,136(sp)
 801a7ec:	0013883a 	mov	r9,zero
 801a7f0:	003e7906 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801a7f4:	ad401014 	ori	r21,r21,64
 801a7f8:	8005883a 	mov	r2,r16
 801a7fc:	80c00007 	ldb	r3,0(r16)
 801a800:	003dd906 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a804:	80c00007 	ldb	r3,0(r16)
 801a808:	8005883a 	mov	r2,r16
 801a80c:	1b01e326 	beq	r3,r12,801af9c <___vfiprintf_internal_r+0x11ac>
 801a810:	ad400414 	ori	r21,r21,16
 801a814:	003dd406 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a818:	d9002217 	ldw	r4,136(sp)
 801a81c:	00800c04 	movi	r2,48
 801a820:	d8801d05 	stb	r2,116(sp)
 801a824:	25800017 	ldw	r22,0(r4)
 801a828:	00801e04 	movi	r2,120
 801a82c:	d8801d45 	stb	r2,117(sp)
 801a830:	008205b4 	movhi	r2,2070
 801a834:	21000104 	addi	r4,r4,4
 801a838:	1097c304 	addi	r2,r2,24332
 801a83c:	d9002215 	stw	r4,136(sp)
 801a840:	d8802615 	stw	r2,152(sp)
 801a844:	001b883a 	mov	r13,zero
 801a848:	ad400094 	ori	r21,r21,2
 801a84c:	00800084 	movi	r2,2
 801a850:	b009883a 	mov	r4,r22
 801a854:	003e4406 	br	801a168 <__alt_data_end+0xf801a168>
 801a858:	ad400814 	ori	r21,r21,32
 801a85c:	8005883a 	mov	r2,r16
 801a860:	80c00007 	ldb	r3,0(r16)
 801a864:	003dc006 	br	8019f68 <__alt_data_end+0xf8019f68>
 801a868:	008205b4 	movhi	r2,2070
 801a86c:	1097c304 	addi	r2,r2,24332
 801a870:	d8802615 	stw	r2,152(sp)
 801a874:	d9c01d85 	stb	r7,118(sp)
 801a878:	a880080c 	andi	r2,r21,32
 801a87c:	103fb91e 	bne	r2,zero,801a764 <__alt_data_end+0xf801a764>
 801a880:	a880040c 	andi	r2,r21,16
 801a884:	10010f1e 	bne	r2,zero,801acc4 <___vfiprintf_internal_r+0xed4>
 801a888:	a880100c 	andi	r2,r21,64
 801a88c:	10010d26 	beq	r2,zero,801acc4 <___vfiprintf_internal_r+0xed4>
 801a890:	d9002217 	ldw	r4,136(sp)
 801a894:	001b883a 	mov	r13,zero
 801a898:	2580000b 	ldhu	r22,0(r4)
 801a89c:	21000104 	addi	r4,r4,4
 801a8a0:	d9002215 	stw	r4,136(sp)
 801a8a4:	003fb406 	br	801a778 <__alt_data_end+0xf801a778>
 801a8a8:	d9002217 	ldw	r4,136(sp)
 801a8ac:	00800044 	movi	r2,1
 801a8b0:	25800017 	ldw	r22,0(r4)
 801a8b4:	23400117 	ldw	r13,4(r4)
 801a8b8:	21000204 	addi	r4,r4,8
 801a8bc:	d9002215 	stw	r4,136(sp)
 801a8c0:	b348b03a 	or	r4,r22,r13
 801a8c4:	003e2806 	br	801a168 <__alt_data_end+0xf801a168>
 801a8c8:	d9c01d85 	stb	r7,118(sp)
 801a8cc:	1801ab26 	beq	r3,zero,801af7c <___vfiprintf_internal_r+0x118c>
 801a8d0:	04400044 	movi	r17,1
 801a8d4:	d8c01005 	stb	r3,64(sp)
 801a8d8:	d8001d85 	stb	zero,118(sp)
 801a8dc:	8827883a 	mov	r19,r17
 801a8e0:	dd001004 	addi	r20,sp,64
 801a8e4:	003f8a06 	br	801a710 <__alt_data_end+0xf801a710>
 801a8e8:	d9002017 	ldw	r4,128(sp)
 801a8ec:	d9402117 	ldw	r5,132(sp)
 801a8f0:	d9801a04 	addi	r6,sp,104
 801a8f4:	d9c02b15 	stw	r7,172(sp)
 801a8f8:	dbc02a15 	stw	r15,168(sp)
 801a8fc:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801a900:	d9c02b17 	ldw	r7,172(sp)
 801a904:	dbc02a17 	ldw	r15,168(sp)
 801a908:	1000631e 	bne	r2,zero,801aa98 <___vfiprintf_internal_r+0xca8>
 801a90c:	d9801b17 	ldw	r6,108(sp)
 801a910:	d8801c17 	ldw	r2,112(sp)
 801a914:	d811883a 	mov	r8,sp
 801a918:	31400044 	addi	r5,r6,1
 801a91c:	003e4d06 	br	801a254 <__alt_data_end+0xf801a254>
 801a920:	d9401b17 	ldw	r5,108(sp)
 801a924:	d8801c17 	ldw	r2,112(sp)
 801a928:	29000044 	addi	r4,r5,1
 801a92c:	d8c01d87 	ldb	r3,118(sp)
 801a930:	183e6726 	beq	r3,zero,801a2d0 <__alt_data_end+0xf801a2d0>
 801a934:	00c00044 	movi	r3,1
 801a938:	d9401d84 	addi	r5,sp,118
 801a93c:	10c5883a 	add	r2,r2,r3
 801a940:	41400015 	stw	r5,0(r8)
 801a944:	40c00115 	stw	r3,4(r8)
 801a948:	d8801c15 	stw	r2,112(sp)
 801a94c:	d9001b15 	stw	r4,108(sp)
 801a950:	014001c4 	movi	r5,7
 801a954:	2900ab16 	blt	r5,r4,801ac04 <___vfiprintf_internal_r+0xe14>
 801a958:	200b883a 	mov	r5,r4
 801a95c:	42000204 	addi	r8,r8,8
 801a960:	21000044 	addi	r4,r4,1
 801a964:	003e5a06 	br	801a2d0 <__alt_data_end+0xf801a2d0>
 801a968:	d9002017 	ldw	r4,128(sp)
 801a96c:	d9402117 	ldw	r5,132(sp)
 801a970:	d9801a04 	addi	r6,sp,104
 801a974:	d9c02b15 	stw	r7,172(sp)
 801a978:	db402a15 	stw	r13,168(sp)
 801a97c:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801a980:	d9c02b17 	ldw	r7,172(sp)
 801a984:	db402a17 	ldw	r13,168(sp)
 801a988:	1000431e 	bne	r2,zero,801aa98 <___vfiprintf_internal_r+0xca8>
 801a98c:	d9401b17 	ldw	r5,108(sp)
 801a990:	d8801c17 	ldw	r2,112(sp)
 801a994:	d811883a 	mov	r8,sp
 801a998:	29000044 	addi	r4,r5,1
 801a99c:	003e6706 	br	801a33c <__alt_data_end+0xf801a33c>
 801a9a0:	10803fcc 	andi	r2,r2,255
 801a9a4:	00c00044 	movi	r3,1
 801a9a8:	10fdfa1e 	bne	r2,r3,801a194 <__alt_data_end+0xf801a194>
 801a9ac:	6800021e 	bne	r13,zero,801a9b8 <___vfiprintf_internal_r+0xbc8>
 801a9b0:	00800244 	movi	r2,9
 801a9b4:	1580222e 	bgeu	r2,r22,801aa40 <___vfiprintf_internal_r+0xc50>
 801a9b8:	dc802415 	stw	r18,144(sp)
 801a9bc:	dc002515 	stw	r16,148(sp)
 801a9c0:	dc401a04 	addi	r17,sp,104
 801a9c4:	b021883a 	mov	r16,r22
 801a9c8:	4827883a 	mov	r19,r9
 801a9cc:	4029883a 	mov	r20,r8
 801a9d0:	702d883a 	mov	r22,r14
 801a9d4:	6825883a 	mov	r18,r13
 801a9d8:	8009883a 	mov	r4,r16
 801a9dc:	900b883a 	mov	r5,r18
 801a9e0:	01800284 	movi	r6,10
 801a9e4:	000f883a 	mov	r7,zero
 801a9e8:	801c0580 	call	801c058 <__umoddi3>
 801a9ec:	10800c04 	addi	r2,r2,48
 801a9f0:	8c7fffc4 	addi	r17,r17,-1
 801a9f4:	8009883a 	mov	r4,r16
 801a9f8:	900b883a 	mov	r5,r18
 801a9fc:	01800284 	movi	r6,10
 801aa00:	000f883a 	mov	r7,zero
 801aa04:	88800005 	stb	r2,0(r17)
 801aa08:	801ba980 	call	801ba98 <__udivdi3>
 801aa0c:	1021883a 	mov	r16,r2
 801aa10:	10c4b03a 	or	r2,r2,r3
 801aa14:	1825883a 	mov	r18,r3
 801aa18:	103fef1e 	bne	r2,zero,801a9d8 <__alt_data_end+0xf801a9d8>
 801aa1c:	dc802417 	ldw	r18,144(sp)
 801aa20:	dc002517 	ldw	r16,148(sp)
 801aa24:	a011883a 	mov	r8,r20
 801aa28:	9813883a 	mov	r9,r19
 801aa2c:	b01d883a 	mov	r14,r22
 801aa30:	8829883a 	mov	r20,r17
 801aa34:	d8c01e17 	ldw	r3,120(sp)
 801aa38:	1d27c83a 	sub	r19,r3,r20
 801aa3c:	003de606 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801aa40:	b5800c04 	addi	r22,r22,48
 801aa44:	dd8019c5 	stb	r22,103(sp)
 801aa48:	dcc02717 	ldw	r19,156(sp)
 801aa4c:	dd0019c4 	addi	r20,sp,103
 801aa50:	003de106 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801aa54:	d9002017 	ldw	r4,128(sp)
 801aa58:	d9402117 	ldw	r5,132(sp)
 801aa5c:	d9801a04 	addi	r6,sp,104
 801aa60:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801aa64:	10000c1e 	bne	r2,zero,801aa98 <___vfiprintf_internal_r+0xca8>
 801aa68:	d8801c17 	ldw	r2,112(sp)
 801aa6c:	8c80010e 	bge	r17,r18,801aa74 <___vfiprintf_internal_r+0xc84>
 801aa70:	9023883a 	mov	r17,r18
 801aa74:	d8c02317 	ldw	r3,140(sp)
 801aa78:	1c47883a 	add	r3,r3,r17
 801aa7c:	d8c02315 	stw	r3,140(sp)
 801aa80:	103e7e26 	beq	r2,zero,801a47c <__alt_data_end+0xf801a47c>
 801aa84:	d9002017 	ldw	r4,128(sp)
 801aa88:	d9402117 	ldw	r5,132(sp)
 801aa8c:	d9801a04 	addi	r6,sp,104
 801aa90:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801aa94:	103e7926 	beq	r2,zero,801a47c <__alt_data_end+0xf801a47c>
 801aa98:	dd402117 	ldw	r21,132(sp)
 801aa9c:	a880030b 	ldhu	r2,12(r21)
 801aaa0:	1080100c 	andi	r2,r2,64
 801aaa4:	103e881e 	bne	r2,zero,801a4c8 <__alt_data_end+0xf801a4c8>
 801aaa8:	d8802317 	ldw	r2,140(sp)
 801aaac:	003e8706 	br	801a4cc <__alt_data_end+0xf801a4cc>
 801aab0:	d9402117 	ldw	r5,132(sp)
 801aab4:	b009883a 	mov	r4,r22
 801aab8:	d9801a04 	addi	r6,sp,104
 801aabc:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801aac0:	103ff51e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801aac4:	d9001b17 	ldw	r4,108(sp)
 801aac8:	d8801c17 	ldw	r2,112(sp)
 801aacc:	d811883a 	mov	r8,sp
 801aad0:	21400044 	addi	r5,r4,1
 801aad4:	003e4d06 	br	801a40c <__alt_data_end+0xf801a40c>
 801aad8:	1000aa1e 	bne	r2,zero,801ad84 <___vfiprintf_internal_r+0xf94>
 801aadc:	00c00044 	movi	r3,1
 801aae0:	9805883a 	mov	r2,r19
 801aae4:	dd000015 	stw	r20,0(sp)
 801aae8:	dcc00115 	stw	r19,4(sp)
 801aaec:	dcc01c15 	stw	r19,112(sp)
 801aaf0:	d8c01b15 	stw	r3,108(sp)
 801aaf4:	d811883a 	mov	r8,sp
 801aaf8:	42000204 	addi	r8,r8,8
 801aafc:	aac0010c 	andi	r11,r21,4
 801ab00:	583fda26 	beq	r11,zero,801aa6c <__alt_data_end+0xf801aa6c>
 801ab04:	9467c83a 	sub	r19,r18,r17
 801ab08:	04fe3316 	blt	zero,r19,801a3d8 <__alt_data_end+0xf801a3d8>
 801ab0c:	003fd706 	br	801aa6c <__alt_data_end+0xf801aa6c>
 801ab10:	946dc83a 	sub	r22,r18,r17
 801ab14:	05bdfd0e 	bge	zero,r22,801a30c <__alt_data_end+0xf801a30c>
 801ab18:	00c205b4 	movhi	r3,2070
 801ab1c:	18d83404 	addi	r3,r3,24784
 801ab20:	01c00404 	movi	r7,16
 801ab24:	d8c02415 	stw	r3,144(sp)
 801ab28:	3d81530e 	bge	r7,r22,801b078 <___vfiprintf_internal_r+0x1288>
 801ab2c:	8007883a 	mov	r3,r16
 801ab30:	034001c4 	movi	r13,7
 801ab34:	b021883a 	mov	r16,r22
 801ab38:	da402515 	stw	r9,148(sp)
 801ab3c:	182d883a 	mov	r22,r3
 801ab40:	00000506 	br	801ab58 <___vfiprintf_internal_r+0xd68>
 801ab44:	29800084 	addi	r6,r5,2
 801ab48:	42000204 	addi	r8,r8,8
 801ab4c:	180b883a 	mov	r5,r3
 801ab50:	843ffc04 	addi	r16,r16,-16
 801ab54:	3c000d0e 	bge	r7,r16,801ab8c <___vfiprintf_internal_r+0xd9c>
 801ab58:	10800404 	addi	r2,r2,16
 801ab5c:	28c00044 	addi	r3,r5,1
 801ab60:	45c00015 	stw	r23,0(r8)
 801ab64:	41c00115 	stw	r7,4(r8)
 801ab68:	d8801c15 	stw	r2,112(sp)
 801ab6c:	d8c01b15 	stw	r3,108(sp)
 801ab70:	68fff40e 	bge	r13,r3,801ab44 <__alt_data_end+0xf801ab44>
 801ab74:	1000151e 	bne	r2,zero,801abcc <___vfiprintf_internal_r+0xddc>
 801ab78:	843ffc04 	addi	r16,r16,-16
 801ab7c:	01800044 	movi	r6,1
 801ab80:	000b883a 	mov	r5,zero
 801ab84:	d811883a 	mov	r8,sp
 801ab88:	3c3ff316 	blt	r7,r16,801ab58 <__alt_data_end+0xf801ab58>
 801ab8c:	da402517 	ldw	r9,148(sp)
 801ab90:	b007883a 	mov	r3,r22
 801ab94:	802d883a 	mov	r22,r16
 801ab98:	1821883a 	mov	r16,r3
 801ab9c:	d8c02417 	ldw	r3,144(sp)
 801aba0:	1585883a 	add	r2,r2,r22
 801aba4:	45800115 	stw	r22,4(r8)
 801aba8:	40c00015 	stw	r3,0(r8)
 801abac:	d8801c15 	stw	r2,112(sp)
 801abb0:	d9801b15 	stw	r6,108(sp)
 801abb4:	00c001c4 	movi	r3,7
 801abb8:	19806d16 	blt	r3,r6,801ad70 <___vfiprintf_internal_r+0xf80>
 801abbc:	42000204 	addi	r8,r8,8
 801abc0:	31000044 	addi	r4,r6,1
 801abc4:	300b883a 	mov	r5,r6
 801abc8:	003dd006 	br	801a30c <__alt_data_end+0xf801a30c>
 801abcc:	d9002017 	ldw	r4,128(sp)
 801abd0:	d9402117 	ldw	r5,132(sp)
 801abd4:	d9801a04 	addi	r6,sp,104
 801abd8:	d9c02b15 	stw	r7,172(sp)
 801abdc:	db402a15 	stw	r13,168(sp)
 801abe0:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801abe4:	d9c02b17 	ldw	r7,172(sp)
 801abe8:	db402a17 	ldw	r13,168(sp)
 801abec:	103faa1e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801abf0:	d9401b17 	ldw	r5,108(sp)
 801abf4:	d8801c17 	ldw	r2,112(sp)
 801abf8:	d811883a 	mov	r8,sp
 801abfc:	29800044 	addi	r6,r5,1
 801ac00:	003fd306 	br	801ab50 <__alt_data_end+0xf801ab50>
 801ac04:	1000401e 	bne	r2,zero,801ad08 <___vfiprintf_internal_r+0xf18>
 801ac08:	68003b26 	beq	r13,zero,801acf8 <___vfiprintf_internal_r+0xf08>
 801ac0c:	d9001d04 	addi	r4,sp,116
 801ac10:	00800084 	movi	r2,2
 801ac14:	d9000015 	stw	r4,0(sp)
 801ac18:	d8800115 	stw	r2,4(sp)
 801ac1c:	1809883a 	mov	r4,r3
 801ac20:	d811883a 	mov	r8,sp
 801ac24:	003db406 	br	801a2f8 <__alt_data_end+0xf801a2f8>
 801ac28:	1000451e 	bne	r2,zero,801ad40 <___vfiprintf_internal_r+0xf50>
 801ac2c:	01000044 	movi	r4,1
 801ac30:	000b883a 	mov	r5,zero
 801ac34:	d811883a 	mov	r8,sp
 801ac38:	003db206 	br	801a304 <__alt_data_end+0xf801a304>
 801ac3c:	10803fcc 	andi	r2,r2,255
 801ac40:	1000071e 	bne	r2,zero,801ac60 <___vfiprintf_internal_r+0xe70>
 801ac44:	a880004c 	andi	r2,r21,1
 801ac48:	10000526 	beq	r2,zero,801ac60 <___vfiprintf_internal_r+0xe70>
 801ac4c:	00800c04 	movi	r2,48
 801ac50:	d88019c5 	stb	r2,103(sp)
 801ac54:	dcc02717 	ldw	r19,156(sp)
 801ac58:	dd0019c4 	addi	r20,sp,103
 801ac5c:	003d5e06 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801ac60:	dd001a04 	addi	r20,sp,104
 801ac64:	003d5c06 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801ac68:	1000971e 	bne	r2,zero,801aec8 <___vfiprintf_internal_r+0x10d8>
 801ac6c:	d8c01d87 	ldb	r3,118(sp)
 801ac70:	18005826 	beq	r3,zero,801add4 <___vfiprintf_internal_r+0xfe4>
 801ac74:	00800044 	movi	r2,1
 801ac78:	d8c01d84 	addi	r3,sp,118
 801ac7c:	1009883a 	mov	r4,r2
 801ac80:	d8c00015 	stw	r3,0(sp)
 801ac84:	d8800115 	stw	r2,4(sp)
 801ac88:	d811883a 	mov	r8,sp
 801ac8c:	003f3206 	br	801a958 <__alt_data_end+0xf801a958>
 801ac90:	8023883a 	mov	r17,r16
 801ac94:	003ca706 	br	8019f34 <__alt_data_end+0xf8019f34>
 801ac98:	d9002017 	ldw	r4,128(sp)
 801ac9c:	d9402117 	ldw	r5,132(sp)
 801aca0:	d9801a04 	addi	r6,sp,104
 801aca4:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801aca8:	103f7b1e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801acac:	d8801c17 	ldw	r2,112(sp)
 801acb0:	d811883a 	mov	r8,sp
 801acb4:	003f9106 	br	801aafc <__alt_data_end+0xf801aafc>
 801acb8:	00800084 	movi	r2,2
 801acbc:	b348b03a 	or	r4,r22,r13
 801acc0:	003d2906 	br	801a168 <__alt_data_end+0xf801a168>
 801acc4:	d8802217 	ldw	r2,136(sp)
 801acc8:	001b883a 	mov	r13,zero
 801accc:	15800017 	ldw	r22,0(r2)
 801acd0:	10800104 	addi	r2,r2,4
 801acd4:	d8802215 	stw	r2,136(sp)
 801acd8:	003ea706 	br	801a778 <__alt_data_end+0xf801a778>
 801acdc:	d9002017 	ldw	r4,128(sp)
 801ace0:	d9402117 	ldw	r5,132(sp)
 801ace4:	d9801a04 	addi	r6,sp,104
 801ace8:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801acec:	103f6a1e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801acf0:	d811883a 	mov	r8,sp
 801acf4:	003cff06 	br	801a0f4 <__alt_data_end+0xf801a0f4>
 801acf8:	000b883a 	mov	r5,zero
 801acfc:	1809883a 	mov	r4,r3
 801ad00:	d811883a 	mov	r8,sp
 801ad04:	003d7f06 	br	801a304 <__alt_data_end+0xf801a304>
 801ad08:	d9002017 	ldw	r4,128(sp)
 801ad0c:	d9402117 	ldw	r5,132(sp)
 801ad10:	d9801a04 	addi	r6,sp,104
 801ad14:	da402b15 	stw	r9,172(sp)
 801ad18:	db402a15 	stw	r13,168(sp)
 801ad1c:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801ad20:	da402b17 	ldw	r9,172(sp)
 801ad24:	db402a17 	ldw	r13,168(sp)
 801ad28:	103f5b1e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801ad2c:	d9401b17 	ldw	r5,108(sp)
 801ad30:	d8801c17 	ldw	r2,112(sp)
 801ad34:	d811883a 	mov	r8,sp
 801ad38:	29000044 	addi	r4,r5,1
 801ad3c:	003d6406 	br	801a2d0 <__alt_data_end+0xf801a2d0>
 801ad40:	d9002017 	ldw	r4,128(sp)
 801ad44:	d9402117 	ldw	r5,132(sp)
 801ad48:	d9801a04 	addi	r6,sp,104
 801ad4c:	da402b15 	stw	r9,172(sp)
 801ad50:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801ad54:	da402b17 	ldw	r9,172(sp)
 801ad58:	103f4f1e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801ad5c:	d9401b17 	ldw	r5,108(sp)
 801ad60:	d8801c17 	ldw	r2,112(sp)
 801ad64:	d811883a 	mov	r8,sp
 801ad68:	29000044 	addi	r4,r5,1
 801ad6c:	003d6506 	br	801a304 <__alt_data_end+0xf801a304>
 801ad70:	10009a1e 	bne	r2,zero,801afdc <___vfiprintf_internal_r+0x11ec>
 801ad74:	01000044 	movi	r4,1
 801ad78:	000b883a 	mov	r5,zero
 801ad7c:	d811883a 	mov	r8,sp
 801ad80:	003d6206 	br	801a30c <__alt_data_end+0xf801a30c>
 801ad84:	d9002017 	ldw	r4,128(sp)
 801ad88:	d9402117 	ldw	r5,132(sp)
 801ad8c:	d9801a04 	addi	r6,sp,104
 801ad90:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801ad94:	103f401e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801ad98:	d9001b17 	ldw	r4,108(sp)
 801ad9c:	d8801c17 	ldw	r2,112(sp)
 801ada0:	d811883a 	mov	r8,sp
 801ada4:	21000044 	addi	r4,r4,1
 801ada8:	003d7d06 	br	801a3a0 <__alt_data_end+0xf801a3a0>
 801adac:	05adc83a 	sub	r22,zero,r22
 801adb0:	b004c03a 	cmpne	r2,r22,zero
 801adb4:	035bc83a 	sub	r13,zero,r13
 801adb8:	689bc83a 	sub	r13,r13,r2
 801adbc:	03800b44 	movi	r14,45
 801adc0:	db801d85 	stb	r14,118(sp)
 801adc4:	4827883a 	mov	r19,r9
 801adc8:	00800044 	movi	r2,1
 801adcc:	b348b03a 	or	r4,r22,r13
 801add0:	003ce806 	br	801a174 <__alt_data_end+0xf801a174>
 801add4:	000b883a 	mov	r5,zero
 801add8:	01000044 	movi	r4,1
 801addc:	d811883a 	mov	r8,sp
 801ade0:	683d4826 	beq	r13,zero,801a304 <__alt_data_end+0xf801a304>
 801ade4:	00800084 	movi	r2,2
 801ade8:	d8c01d04 	addi	r3,sp,116
 801adec:	d8c00015 	stw	r3,0(sp)
 801adf0:	d8800115 	stw	r2,4(sp)
 801adf4:	003d4006 	br	801a2f8 <__alt_data_end+0xf801a2f8>
 801adf8:	00800084 	movi	r2,2
 801adfc:	003cda06 	br	801a168 <__alt_data_end+0xf801a168>
 801ae00:	a880100c 	andi	r2,r21,64
 801ae04:	10004226 	beq	r2,zero,801af10 <___vfiprintf_internal_r+0x1120>
 801ae08:	d8802217 	ldw	r2,136(sp)
 801ae0c:	001b883a 	mov	r13,zero
 801ae10:	1580000b 	ldhu	r22,0(r2)
 801ae14:	10800104 	addi	r2,r2,4
 801ae18:	d8802215 	stw	r2,136(sp)
 801ae1c:	b009883a 	mov	r4,r22
 801ae20:	0005883a 	mov	r2,zero
 801ae24:	003cd006 	br	801a168 <__alt_data_end+0xf801a168>
 801ae28:	80c00007 	ldb	r3,0(r16)
 801ae2c:	8005883a 	mov	r2,r16
 801ae30:	003c4d06 	br	8019f68 <__alt_data_end+0xf8019f68>
 801ae34:	a880100c 	andi	r2,r21,64
 801ae38:	10004426 	beq	r2,zero,801af4c <___vfiprintf_internal_r+0x115c>
 801ae3c:	d8c02217 	ldw	r3,136(sp)
 801ae40:	001b883a 	mov	r13,zero
 801ae44:	00800044 	movi	r2,1
 801ae48:	1d80000b 	ldhu	r22,0(r3)
 801ae4c:	18c00104 	addi	r3,r3,4
 801ae50:	d8c02215 	stw	r3,136(sp)
 801ae54:	b009883a 	mov	r4,r22
 801ae58:	003cc306 	br	801a168 <__alt_data_end+0xf801a168>
 801ae5c:	a880040c 	andi	r2,r21,16
 801ae60:	1000091e 	bne	r2,zero,801ae88 <___vfiprintf_internal_r+0x1098>
 801ae64:	aac0100c 	andi	r11,r21,64
 801ae68:	58000726 	beq	r11,zero,801ae88 <___vfiprintf_internal_r+0x1098>
 801ae6c:	d8c02217 	ldw	r3,136(sp)
 801ae70:	d9002317 	ldw	r4,140(sp)
 801ae74:	18800017 	ldw	r2,0(r3)
 801ae78:	18c00104 	addi	r3,r3,4
 801ae7c:	d8c02215 	stw	r3,136(sp)
 801ae80:	1100000d 	sth	r4,0(r2)
 801ae84:	003c0e06 	br	8019ec0 <__alt_data_end+0xf8019ec0>
 801ae88:	d8c02217 	ldw	r3,136(sp)
 801ae8c:	d9002317 	ldw	r4,140(sp)
 801ae90:	18800017 	ldw	r2,0(r3)
 801ae94:	18c00104 	addi	r3,r3,4
 801ae98:	d8c02215 	stw	r3,136(sp)
 801ae9c:	11000015 	stw	r4,0(r2)
 801aea0:	003c0706 	br	8019ec0 <__alt_data_end+0xf8019ec0>
 801aea4:	a880100c 	andi	r2,r21,64
 801aea8:	10002126 	beq	r2,zero,801af30 <___vfiprintf_internal_r+0x1140>
 801aeac:	1d80000f 	ldh	r22,0(r3)
 801aeb0:	d8c02217 	ldw	r3,136(sp)
 801aeb4:	b01bd7fa 	srai	r13,r22,31
 801aeb8:	18c00104 	addi	r3,r3,4
 801aebc:	d8c02215 	stw	r3,136(sp)
 801aec0:	6805883a 	mov	r2,r13
 801aec4:	003dc406 	br	801a5d8 <__alt_data_end+0xf801a5d8>
 801aec8:	d9002017 	ldw	r4,128(sp)
 801aecc:	d9402117 	ldw	r5,132(sp)
 801aed0:	d9801a04 	addi	r6,sp,104
 801aed4:	da402b15 	stw	r9,172(sp)
 801aed8:	db402a15 	stw	r13,168(sp)
 801aedc:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801aee0:	da402b17 	ldw	r9,172(sp)
 801aee4:	db402a17 	ldw	r13,168(sp)
 801aee8:	103eeb1e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801aeec:	d9401b17 	ldw	r5,108(sp)
 801aef0:	d8801c17 	ldw	r2,112(sp)
 801aef4:	d811883a 	mov	r8,sp
 801aef8:	29000044 	addi	r4,r5,1
 801aefc:	003e8b06 	br	801a92c <__alt_data_end+0xf801a92c>
 801af00:	9023883a 	mov	r17,r18
 801af04:	003d5a06 	br	801a470 <__alt_data_end+0xf801a470>
 801af08:	4827883a 	mov	r19,r9
 801af0c:	003e3506 	br	801a7e4 <__alt_data_end+0xf801a7e4>
 801af10:	d8c02217 	ldw	r3,136(sp)
 801af14:	001b883a 	mov	r13,zero
 801af18:	0005883a 	mov	r2,zero
 801af1c:	1d800017 	ldw	r22,0(r3)
 801af20:	18c00104 	addi	r3,r3,4
 801af24:	d8c02215 	stw	r3,136(sp)
 801af28:	b009883a 	mov	r4,r22
 801af2c:	003c8e06 	br	801a168 <__alt_data_end+0xf801a168>
 801af30:	1d800017 	ldw	r22,0(r3)
 801af34:	d9002217 	ldw	r4,136(sp)
 801af38:	b01bd7fa 	srai	r13,r22,31
 801af3c:	21000104 	addi	r4,r4,4
 801af40:	d9002215 	stw	r4,136(sp)
 801af44:	6805883a 	mov	r2,r13
 801af48:	003da306 	br	801a5d8 <__alt_data_end+0xf801a5d8>
 801af4c:	d9002217 	ldw	r4,136(sp)
 801af50:	001b883a 	mov	r13,zero
 801af54:	00800044 	movi	r2,1
 801af58:	25800017 	ldw	r22,0(r4)
 801af5c:	21000104 	addi	r4,r4,4
 801af60:	d9002215 	stw	r4,136(sp)
 801af64:	b009883a 	mov	r4,r22
 801af68:	003c7f06 	br	801a168 <__alt_data_end+0xf801a168>
 801af6c:	00c205b4 	movhi	r3,2070
 801af70:	18d83404 	addi	r3,r3,24784
 801af74:	d8c02415 	stw	r3,144(sp)
 801af78:	003cff06 	br	801a378 <__alt_data_end+0xf801a378>
 801af7c:	d8801c17 	ldw	r2,112(sp)
 801af80:	dd402117 	ldw	r21,132(sp)
 801af84:	103ec526 	beq	r2,zero,801aa9c <__alt_data_end+0xf801aa9c>
 801af88:	d9002017 	ldw	r4,128(sp)
 801af8c:	a80b883a 	mov	r5,r21
 801af90:	d9801a04 	addi	r6,sp,104
 801af94:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801af98:	003ec006 	br	801aa9c <__alt_data_end+0xf801aa9c>
 801af9c:	80800044 	addi	r2,r16,1
 801afa0:	ad400814 	ori	r21,r21,32
 801afa4:	80c00047 	ldb	r3,1(r16)
 801afa8:	003bef06 	br	8019f68 <__alt_data_end+0xf8019f68>
 801afac:	04a5c83a 	sub	r18,zero,r18
 801afb0:	8005883a 	mov	r2,r16
 801afb4:	d8c02215 	stw	r3,136(sp)
 801afb8:	003d5306 	br	801a508 <__alt_data_end+0xf801a508>
 801afbc:	da002a15 	stw	r8,168(sp)
 801afc0:	801033c0 	call	801033c <strlen>
 801afc4:	1027883a 	mov	r19,r2
 801afc8:	db801d83 	ldbu	r14,118(sp)
 801afcc:	dd802215 	stw	r22,136(sp)
 801afd0:	0013883a 	mov	r9,zero
 801afd4:	da002a17 	ldw	r8,168(sp)
 801afd8:	003c7f06 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801afdc:	d9002017 	ldw	r4,128(sp)
 801afe0:	d9402117 	ldw	r5,132(sp)
 801afe4:	d9801a04 	addi	r6,sp,104
 801afe8:	da402b15 	stw	r9,172(sp)
 801afec:	8019cdc0 	call	8019cdc <__sprint_r.part.0>
 801aff0:	da402b17 	ldw	r9,172(sp)
 801aff4:	103ea81e 	bne	r2,zero,801aa98 <__alt_data_end+0xf801aa98>
 801aff8:	d9401b17 	ldw	r5,108(sp)
 801affc:	d8801c17 	ldw	r2,112(sp)
 801b000:	d811883a 	mov	r8,sp
 801b004:	29000044 	addi	r4,r5,1
 801b008:	003cc006 	br	801a30c <__alt_data_end+0xf801a30c>
 801b00c:	d9401b17 	ldw	r5,108(sp)
 801b010:	010205b4 	movhi	r4,2070
 801b014:	21183804 	addi	r4,r4,24800
 801b018:	d9002415 	stw	r4,144(sp)
 801b01c:	29400044 	addi	r5,r5,1
 801b020:	003c9f06 	br	801a2a0 <__alt_data_end+0xf801a2a0>
 801b024:	00800184 	movi	r2,6
 801b028:	1240012e 	bgeu	r2,r9,801b030 <___vfiprintf_internal_r+0x1240>
 801b02c:	1013883a 	mov	r9,r2
 801b030:	4827883a 	mov	r19,r9
 801b034:	4823883a 	mov	r17,r9
 801b038:	48001116 	blt	r9,zero,801b080 <___vfiprintf_internal_r+0x1290>
 801b03c:	050205b4 	movhi	r20,2070
 801b040:	dd802215 	stw	r22,136(sp)
 801b044:	a517c804 	addi	r20,r20,24352
 801b048:	003db106 	br	801a710 <__alt_data_end+0xf801a710>
 801b04c:	d9401b17 	ldw	r5,108(sp)
 801b050:	010205b4 	movhi	r4,2070
 801b054:	21183804 	addi	r4,r4,24800
 801b058:	d9002415 	stw	r4,144(sp)
 801b05c:	29400044 	addi	r5,r5,1
 801b060:	003cf906 	br	801a448 <__alt_data_end+0xf801a448>
 801b064:	4827883a 	mov	r19,r9
 801b068:	db801d83 	ldbu	r14,118(sp)
 801b06c:	dd802215 	stw	r22,136(sp)
 801b070:	0013883a 	mov	r9,zero
 801b074:	003c5806 	br	801a1d8 <__alt_data_end+0xf801a1d8>
 801b078:	200d883a 	mov	r6,r4
 801b07c:	003ec706 	br	801ab9c <__alt_data_end+0xf801ab9c>
 801b080:	0023883a 	mov	r17,zero
 801b084:	003fed06 	br	801b03c <__alt_data_end+0xf801b03c>
 801b088:	d9002217 	ldw	r4,136(sp)
 801b08c:	22400017 	ldw	r9,0(r4)
 801b090:	20c00104 	addi	r3,r4,4
 801b094:	d8c02215 	stw	r3,136(sp)
 801b098:	483fc20e 	bge	r9,zero,801afa4 <__alt_data_end+0xf801afa4>
 801b09c:	027fffc4 	movi	r9,-1
 801b0a0:	80c00047 	ldb	r3,1(r16)
 801b0a4:	003bb006 	br	8019f68 <__alt_data_end+0xf8019f68>
 801b0a8:	8c80010e 	bge	r17,r18,801b0b0 <___vfiprintf_internal_r+0x12c0>
 801b0ac:	9023883a 	mov	r17,r18
 801b0b0:	d8802317 	ldw	r2,140(sp)
 801b0b4:	1445883a 	add	r2,r2,r17
 801b0b8:	d8802315 	stw	r2,140(sp)
 801b0bc:	003cef06 	br	801a47c <__alt_data_end+0xf801a47c>

0801b0c0 <__vfiprintf_internal>:
 801b0c0:	2007883a 	mov	r3,r4
 801b0c4:	010205f4 	movhi	r4,2071
 801b0c8:	21234604 	addi	r4,r4,-29416
 801b0cc:	21000017 	ldw	r4,0(r4)
 801b0d0:	2805883a 	mov	r2,r5
 801b0d4:	300f883a 	mov	r7,r6
 801b0d8:	180b883a 	mov	r5,r3
 801b0dc:	100d883a 	mov	r6,r2
 801b0e0:	8019df01 	jmpi	8019df0 <___vfiprintf_internal_r>

0801b0e4 <__sbprintf>:
 801b0e4:	2880030b 	ldhu	r2,12(r5)
 801b0e8:	2ac01917 	ldw	r11,100(r5)
 801b0ec:	2a80038b 	ldhu	r10,14(r5)
 801b0f0:	2a400717 	ldw	r9,28(r5)
 801b0f4:	2a000917 	ldw	r8,36(r5)
 801b0f8:	defee204 	addi	sp,sp,-1144
 801b0fc:	00c10004 	movi	r3,1024
 801b100:	dc011a15 	stw	r16,1128(sp)
 801b104:	10bfff4c 	andi	r2,r2,65533
 801b108:	2821883a 	mov	r16,r5
 801b10c:	d8cb883a 	add	r5,sp,r3
 801b110:	dc811c15 	stw	r18,1136(sp)
 801b114:	dc411b15 	stw	r17,1132(sp)
 801b118:	dfc11d15 	stw	ra,1140(sp)
 801b11c:	2025883a 	mov	r18,r4
 801b120:	d881030d 	sth	r2,1036(sp)
 801b124:	dac11915 	stw	r11,1124(sp)
 801b128:	da81038d 	sth	r10,1038(sp)
 801b12c:	da410715 	stw	r9,1052(sp)
 801b130:	da010915 	stw	r8,1060(sp)
 801b134:	dec10015 	stw	sp,1024(sp)
 801b138:	dec10415 	stw	sp,1040(sp)
 801b13c:	d8c10215 	stw	r3,1032(sp)
 801b140:	d8c10515 	stw	r3,1044(sp)
 801b144:	d8010615 	stw	zero,1048(sp)
 801b148:	8019df00 	call	8019df0 <___vfiprintf_internal_r>
 801b14c:	1023883a 	mov	r17,r2
 801b150:	10000416 	blt	r2,zero,801b164 <__sbprintf+0x80>
 801b154:	9009883a 	mov	r4,r18
 801b158:	d9410004 	addi	r5,sp,1024
 801b15c:	80160180 	call	8016018 <_fflush_r>
 801b160:	10000d1e 	bne	r2,zero,801b198 <__sbprintf+0xb4>
 801b164:	d8c1030b 	ldhu	r3,1036(sp)
 801b168:	18c0100c 	andi	r3,r3,64
 801b16c:	18000326 	beq	r3,zero,801b17c <__sbprintf+0x98>
 801b170:	8080030b 	ldhu	r2,12(r16)
 801b174:	10801014 	ori	r2,r2,64
 801b178:	8080030d 	sth	r2,12(r16)
 801b17c:	8805883a 	mov	r2,r17
 801b180:	dfc11d17 	ldw	ra,1140(sp)
 801b184:	dc811c17 	ldw	r18,1136(sp)
 801b188:	dc411b17 	ldw	r17,1132(sp)
 801b18c:	dc011a17 	ldw	r16,1128(sp)
 801b190:	dec11e04 	addi	sp,sp,1144
 801b194:	f800283a 	ret
 801b198:	047fffc4 	movi	r17,-1
 801b19c:	003ff106 	br	801b164 <__alt_data_end+0xf801b164>

0801b1a0 <_write_r>:
 801b1a0:	defffd04 	addi	sp,sp,-12
 801b1a4:	dc000015 	stw	r16,0(sp)
 801b1a8:	040205f4 	movhi	r16,2071
 801b1ac:	dc400115 	stw	r17,4(sp)
 801b1b0:	842e6904 	addi	r16,r16,-18012
 801b1b4:	2023883a 	mov	r17,r4
 801b1b8:	2809883a 	mov	r4,r5
 801b1bc:	300b883a 	mov	r5,r6
 801b1c0:	380d883a 	mov	r6,r7
 801b1c4:	dfc00215 	stw	ra,8(sp)
 801b1c8:	80000015 	stw	zero,0(r16)
 801b1cc:	801d3ec0 	call	801d3ec <write>
 801b1d0:	00ffffc4 	movi	r3,-1
 801b1d4:	10c00526 	beq	r2,r3,801b1ec <_write_r+0x4c>
 801b1d8:	dfc00217 	ldw	ra,8(sp)
 801b1dc:	dc400117 	ldw	r17,4(sp)
 801b1e0:	dc000017 	ldw	r16,0(sp)
 801b1e4:	dec00304 	addi	sp,sp,12
 801b1e8:	f800283a 	ret
 801b1ec:	80c00017 	ldw	r3,0(r16)
 801b1f0:	183ff926 	beq	r3,zero,801b1d8 <__alt_data_end+0xf801b1d8>
 801b1f4:	88c00015 	stw	r3,0(r17)
 801b1f8:	003ff706 	br	801b1d8 <__alt_data_end+0xf801b1d8>

0801b1fc <_close_r>:
 801b1fc:	defffd04 	addi	sp,sp,-12
 801b200:	dc000015 	stw	r16,0(sp)
 801b204:	040205f4 	movhi	r16,2071
 801b208:	dc400115 	stw	r17,4(sp)
 801b20c:	842e6904 	addi	r16,r16,-18012
 801b210:	2023883a 	mov	r17,r4
 801b214:	2809883a 	mov	r4,r5
 801b218:	dfc00215 	stw	ra,8(sp)
 801b21c:	80000015 	stw	zero,0(r16)
 801b220:	801c6380 	call	801c638 <close>
 801b224:	00ffffc4 	movi	r3,-1
 801b228:	10c00526 	beq	r2,r3,801b240 <_close_r+0x44>
 801b22c:	dfc00217 	ldw	ra,8(sp)
 801b230:	dc400117 	ldw	r17,4(sp)
 801b234:	dc000017 	ldw	r16,0(sp)
 801b238:	dec00304 	addi	sp,sp,12
 801b23c:	f800283a 	ret
 801b240:	80c00017 	ldw	r3,0(r16)
 801b244:	183ff926 	beq	r3,zero,801b22c <__alt_data_end+0xf801b22c>
 801b248:	88c00015 	stw	r3,0(r17)
 801b24c:	003ff706 	br	801b22c <__alt_data_end+0xf801b22c>

0801b250 <_calloc_r>:
 801b250:	298b383a 	mul	r5,r5,r6
 801b254:	defffe04 	addi	sp,sp,-8
 801b258:	dc000015 	stw	r16,0(sp)
 801b25c:	dfc00115 	stw	ra,4(sp)
 801b260:	800f4b00 	call	800f4b0 <_malloc_r>
 801b264:	1021883a 	mov	r16,r2
 801b268:	10002826 	beq	r2,zero,801b30c <_calloc_r+0xbc>
 801b26c:	11bfff17 	ldw	r6,-4(r2)
 801b270:	00bfff04 	movi	r2,-4
 801b274:	00c00904 	movi	r3,36
 801b278:	308c703a 	and	r6,r6,r2
 801b27c:	308d883a 	add	r6,r6,r2
 801b280:	19801436 	bltu	r3,r6,801b2d4 <_calloc_r+0x84>
 801b284:	008004c4 	movi	r2,19
 801b288:	11800936 	bltu	r2,r6,801b2b0 <_calloc_r+0x60>
 801b28c:	8005883a 	mov	r2,r16
 801b290:	10000015 	stw	zero,0(r2)
 801b294:	10000115 	stw	zero,4(r2)
 801b298:	10000215 	stw	zero,8(r2)
 801b29c:	8005883a 	mov	r2,r16
 801b2a0:	dfc00117 	ldw	ra,4(sp)
 801b2a4:	dc000017 	ldw	r16,0(sp)
 801b2a8:	dec00204 	addi	sp,sp,8
 801b2ac:	f800283a 	ret
 801b2b0:	80000015 	stw	zero,0(r16)
 801b2b4:	80000115 	stw	zero,4(r16)
 801b2b8:	008006c4 	movi	r2,27
 801b2bc:	11800d2e 	bgeu	r2,r6,801b2f4 <_calloc_r+0xa4>
 801b2c0:	80000215 	stw	zero,8(r16)
 801b2c4:	80000315 	stw	zero,12(r16)
 801b2c8:	30c00c26 	beq	r6,r3,801b2fc <_calloc_r+0xac>
 801b2cc:	80800404 	addi	r2,r16,16
 801b2d0:	003fef06 	br	801b290 <__alt_data_end+0xf801b290>
 801b2d4:	8009883a 	mov	r4,r16
 801b2d8:	000b883a 	mov	r5,zero
 801b2dc:	800fd900 	call	800fd90 <memset>
 801b2e0:	8005883a 	mov	r2,r16
 801b2e4:	dfc00117 	ldw	ra,4(sp)
 801b2e8:	dc000017 	ldw	r16,0(sp)
 801b2ec:	dec00204 	addi	sp,sp,8
 801b2f0:	f800283a 	ret
 801b2f4:	80800204 	addi	r2,r16,8
 801b2f8:	003fe506 	br	801b290 <__alt_data_end+0xf801b290>
 801b2fc:	80000415 	stw	zero,16(r16)
 801b300:	80800604 	addi	r2,r16,24
 801b304:	80000515 	stw	zero,20(r16)
 801b308:	003fe106 	br	801b290 <__alt_data_end+0xf801b290>
 801b30c:	0005883a 	mov	r2,zero
 801b310:	003fe306 	br	801b2a0 <__alt_data_end+0xf801b2a0>

0801b314 <_fclose_r>:
 801b314:	28003926 	beq	r5,zero,801b3fc <_fclose_r+0xe8>
 801b318:	defffc04 	addi	sp,sp,-16
 801b31c:	dc400115 	stw	r17,4(sp)
 801b320:	dc000015 	stw	r16,0(sp)
 801b324:	dfc00315 	stw	ra,12(sp)
 801b328:	dc800215 	stw	r18,8(sp)
 801b32c:	2023883a 	mov	r17,r4
 801b330:	2821883a 	mov	r16,r5
 801b334:	20000226 	beq	r4,zero,801b340 <_fclose_r+0x2c>
 801b338:	20800e17 	ldw	r2,56(r4)
 801b33c:	10002726 	beq	r2,zero,801b3dc <_fclose_r+0xc8>
 801b340:	8080030f 	ldh	r2,12(r16)
 801b344:	1000071e 	bne	r2,zero,801b364 <_fclose_r+0x50>
 801b348:	0005883a 	mov	r2,zero
 801b34c:	dfc00317 	ldw	ra,12(sp)
 801b350:	dc800217 	ldw	r18,8(sp)
 801b354:	dc400117 	ldw	r17,4(sp)
 801b358:	dc000017 	ldw	r16,0(sp)
 801b35c:	dec00404 	addi	sp,sp,16
 801b360:	f800283a 	ret
 801b364:	8809883a 	mov	r4,r17
 801b368:	800b883a 	mov	r5,r16
 801b36c:	8015e100 	call	8015e10 <__sflush_r>
 801b370:	1025883a 	mov	r18,r2
 801b374:	80800b17 	ldw	r2,44(r16)
 801b378:	10000426 	beq	r2,zero,801b38c <_fclose_r+0x78>
 801b37c:	81400717 	ldw	r5,28(r16)
 801b380:	8809883a 	mov	r4,r17
 801b384:	103ee83a 	callr	r2
 801b388:	10001616 	blt	r2,zero,801b3e4 <_fclose_r+0xd0>
 801b38c:	8080030b 	ldhu	r2,12(r16)
 801b390:	1080200c 	andi	r2,r2,128
 801b394:	1000151e 	bne	r2,zero,801b3ec <_fclose_r+0xd8>
 801b398:	81400c17 	ldw	r5,48(r16)
 801b39c:	28000526 	beq	r5,zero,801b3b4 <_fclose_r+0xa0>
 801b3a0:	80801004 	addi	r2,r16,64
 801b3a4:	28800226 	beq	r5,r2,801b3b0 <_fclose_r+0x9c>
 801b3a8:	8809883a 	mov	r4,r17
 801b3ac:	80165680 	call	8016568 <_free_r>
 801b3b0:	80000c15 	stw	zero,48(r16)
 801b3b4:	81401117 	ldw	r5,68(r16)
 801b3b8:	28000326 	beq	r5,zero,801b3c8 <_fclose_r+0xb4>
 801b3bc:	8809883a 	mov	r4,r17
 801b3c0:	80165680 	call	8016568 <_free_r>
 801b3c4:	80001115 	stw	zero,68(r16)
 801b3c8:	80164040 	call	8016404 <__sfp_lock_acquire>
 801b3cc:	8000030d 	sth	zero,12(r16)
 801b3d0:	80164080 	call	8016408 <__sfp_lock_release>
 801b3d4:	9005883a 	mov	r2,r18
 801b3d8:	003fdc06 	br	801b34c <__alt_data_end+0xf801b34c>
 801b3dc:	80163f40 	call	80163f4 <__sinit>
 801b3e0:	003fd706 	br	801b340 <__alt_data_end+0xf801b340>
 801b3e4:	04bfffc4 	movi	r18,-1
 801b3e8:	003fe806 	br	801b38c <__alt_data_end+0xf801b38c>
 801b3ec:	81400417 	ldw	r5,16(r16)
 801b3f0:	8809883a 	mov	r4,r17
 801b3f4:	80165680 	call	8016568 <_free_r>
 801b3f8:	003fe706 	br	801b398 <__alt_data_end+0xf801b398>
 801b3fc:	0005883a 	mov	r2,zero
 801b400:	f800283a 	ret

0801b404 <fclose>:
 801b404:	008205f4 	movhi	r2,2071
 801b408:	10a34604 	addi	r2,r2,-29416
 801b40c:	200b883a 	mov	r5,r4
 801b410:	11000017 	ldw	r4,0(r2)
 801b414:	801b3141 	jmpi	801b314 <_fclose_r>

0801b418 <_fputwc_r>:
 801b418:	3080030b 	ldhu	r2,12(r6)
 801b41c:	defff804 	addi	sp,sp,-32
 801b420:	dcc00415 	stw	r19,16(sp)
 801b424:	dc800315 	stw	r18,12(sp)
 801b428:	dc000115 	stw	r16,4(sp)
 801b42c:	dfc00715 	stw	ra,28(sp)
 801b430:	dd400615 	stw	r21,24(sp)
 801b434:	dd000515 	stw	r20,20(sp)
 801b438:	dc400215 	stw	r17,8(sp)
 801b43c:	10c8000c 	andi	r3,r2,8192
 801b440:	3021883a 	mov	r16,r6
 801b444:	2027883a 	mov	r19,r4
 801b448:	2825883a 	mov	r18,r5
 801b44c:	1800051e 	bne	r3,zero,801b464 <_fputwc_r+0x4c>
 801b450:	30c01917 	ldw	r3,100(r6)
 801b454:	10880014 	ori	r2,r2,8192
 801b458:	3080030d 	sth	r2,12(r6)
 801b45c:	18880014 	ori	r2,r3,8192
 801b460:	30801915 	stw	r2,100(r6)
 801b464:	8016f280 	call	8016f28 <__locale_mb_cur_max>
 801b468:	00c00044 	movi	r3,1
 801b46c:	10c03e26 	beq	r2,r3,801b568 <_fputwc_r+0x150>
 801b470:	9809883a 	mov	r4,r19
 801b474:	d80b883a 	mov	r5,sp
 801b478:	900d883a 	mov	r6,r18
 801b47c:	81c01704 	addi	r7,r16,92
 801b480:	801b8b00 	call	801b8b0 <_wcrtomb_r>
 801b484:	1029883a 	mov	r20,r2
 801b488:	00bfffc4 	movi	r2,-1
 801b48c:	a0802026 	beq	r20,r2,801b510 <_fputwc_r+0xf8>
 801b490:	d9400003 	ldbu	r5,0(sp)
 801b494:	a0001c26 	beq	r20,zero,801b508 <_fputwc_r+0xf0>
 801b498:	0023883a 	mov	r17,zero
 801b49c:	05400284 	movi	r21,10
 801b4a0:	00000906 	br	801b4c8 <_fputwc_r+0xb0>
 801b4a4:	80800017 	ldw	r2,0(r16)
 801b4a8:	11400005 	stb	r5,0(r2)
 801b4ac:	80c00017 	ldw	r3,0(r16)
 801b4b0:	18c00044 	addi	r3,r3,1
 801b4b4:	80c00015 	stw	r3,0(r16)
 801b4b8:	8c400044 	addi	r17,r17,1
 801b4bc:	dc45883a 	add	r2,sp,r17
 801b4c0:	8d00112e 	bgeu	r17,r20,801b508 <_fputwc_r+0xf0>
 801b4c4:	11400003 	ldbu	r5,0(r2)
 801b4c8:	80c00217 	ldw	r3,8(r16)
 801b4cc:	18ffffc4 	addi	r3,r3,-1
 801b4d0:	80c00215 	stw	r3,8(r16)
 801b4d4:	183ff30e 	bge	r3,zero,801b4a4 <__alt_data_end+0xf801b4a4>
 801b4d8:	80800617 	ldw	r2,24(r16)
 801b4dc:	18801916 	blt	r3,r2,801b544 <_fputwc_r+0x12c>
 801b4e0:	80800017 	ldw	r2,0(r16)
 801b4e4:	11400005 	stb	r5,0(r2)
 801b4e8:	80800017 	ldw	r2,0(r16)
 801b4ec:	10c00003 	ldbu	r3,0(r2)
 801b4f0:	10800044 	addi	r2,r2,1
 801b4f4:	1d402326 	beq	r3,r21,801b584 <_fputwc_r+0x16c>
 801b4f8:	80800015 	stw	r2,0(r16)
 801b4fc:	8c400044 	addi	r17,r17,1
 801b500:	dc45883a 	add	r2,sp,r17
 801b504:	8d3fef36 	bltu	r17,r20,801b4c4 <__alt_data_end+0xf801b4c4>
 801b508:	9005883a 	mov	r2,r18
 801b50c:	00000406 	br	801b520 <_fputwc_r+0x108>
 801b510:	80c0030b 	ldhu	r3,12(r16)
 801b514:	a005883a 	mov	r2,r20
 801b518:	18c01014 	ori	r3,r3,64
 801b51c:	80c0030d 	sth	r3,12(r16)
 801b520:	dfc00717 	ldw	ra,28(sp)
 801b524:	dd400617 	ldw	r21,24(sp)
 801b528:	dd000517 	ldw	r20,20(sp)
 801b52c:	dcc00417 	ldw	r19,16(sp)
 801b530:	dc800317 	ldw	r18,12(sp)
 801b534:	dc400217 	ldw	r17,8(sp)
 801b538:	dc000117 	ldw	r16,4(sp)
 801b53c:	dec00804 	addi	sp,sp,32
 801b540:	f800283a 	ret
 801b544:	9809883a 	mov	r4,r19
 801b548:	29403fcc 	andi	r5,r5,255
 801b54c:	800d883a 	mov	r6,r16
 801b550:	801b75c0 	call	801b75c <__swbuf_r>
 801b554:	10bfffe0 	cmpeqi	r2,r2,-1
 801b558:	10803fcc 	andi	r2,r2,255
 801b55c:	103fd626 	beq	r2,zero,801b4b8 <__alt_data_end+0xf801b4b8>
 801b560:	00bfffc4 	movi	r2,-1
 801b564:	003fee06 	br	801b520 <__alt_data_end+0xf801b520>
 801b568:	90ffffc4 	addi	r3,r18,-1
 801b56c:	01003f84 	movi	r4,254
 801b570:	20ffbf36 	bltu	r4,r3,801b470 <__alt_data_end+0xf801b470>
 801b574:	900b883a 	mov	r5,r18
 801b578:	dc800005 	stb	r18,0(sp)
 801b57c:	1029883a 	mov	r20,r2
 801b580:	003fc506 	br	801b498 <__alt_data_end+0xf801b498>
 801b584:	9809883a 	mov	r4,r19
 801b588:	a80b883a 	mov	r5,r21
 801b58c:	800d883a 	mov	r6,r16
 801b590:	801b75c0 	call	801b75c <__swbuf_r>
 801b594:	10bfffe0 	cmpeqi	r2,r2,-1
 801b598:	003fef06 	br	801b558 <__alt_data_end+0xf801b558>

0801b59c <fputwc>:
 801b59c:	008205f4 	movhi	r2,2071
 801b5a0:	defffc04 	addi	sp,sp,-16
 801b5a4:	10a34604 	addi	r2,r2,-29416
 801b5a8:	dc000115 	stw	r16,4(sp)
 801b5ac:	14000017 	ldw	r16,0(r2)
 801b5b0:	dc400215 	stw	r17,8(sp)
 801b5b4:	dfc00315 	stw	ra,12(sp)
 801b5b8:	2023883a 	mov	r17,r4
 801b5bc:	280d883a 	mov	r6,r5
 801b5c0:	80000626 	beq	r16,zero,801b5dc <fputwc+0x40>
 801b5c4:	80800e17 	ldw	r2,56(r16)
 801b5c8:	1000041e 	bne	r2,zero,801b5dc <fputwc+0x40>
 801b5cc:	8009883a 	mov	r4,r16
 801b5d0:	d9400015 	stw	r5,0(sp)
 801b5d4:	80163f40 	call	80163f4 <__sinit>
 801b5d8:	d9800017 	ldw	r6,0(sp)
 801b5dc:	8009883a 	mov	r4,r16
 801b5e0:	880b883a 	mov	r5,r17
 801b5e4:	dfc00317 	ldw	ra,12(sp)
 801b5e8:	dc400217 	ldw	r17,8(sp)
 801b5ec:	dc000117 	ldw	r16,4(sp)
 801b5f0:	dec00404 	addi	sp,sp,16
 801b5f4:	801b4181 	jmpi	801b418 <_fputwc_r>

0801b5f8 <_fstat_r>:
 801b5f8:	defffd04 	addi	sp,sp,-12
 801b5fc:	dc000015 	stw	r16,0(sp)
 801b600:	040205f4 	movhi	r16,2071
 801b604:	dc400115 	stw	r17,4(sp)
 801b608:	842e6904 	addi	r16,r16,-18012
 801b60c:	2023883a 	mov	r17,r4
 801b610:	2809883a 	mov	r4,r5
 801b614:	300b883a 	mov	r5,r6
 801b618:	dfc00215 	stw	ra,8(sp)
 801b61c:	80000015 	stw	zero,0(r16)
 801b620:	801c7840 	call	801c784 <fstat>
 801b624:	00ffffc4 	movi	r3,-1
 801b628:	10c00526 	beq	r2,r3,801b640 <_fstat_r+0x48>
 801b62c:	dfc00217 	ldw	ra,8(sp)
 801b630:	dc400117 	ldw	r17,4(sp)
 801b634:	dc000017 	ldw	r16,0(sp)
 801b638:	dec00304 	addi	sp,sp,12
 801b63c:	f800283a 	ret
 801b640:	80c00017 	ldw	r3,0(r16)
 801b644:	183ff926 	beq	r3,zero,801b62c <__alt_data_end+0xf801b62c>
 801b648:	88c00015 	stw	r3,0(r17)
 801b64c:	003ff706 	br	801b62c <__alt_data_end+0xf801b62c>

0801b650 <_isatty_r>:
 801b650:	defffd04 	addi	sp,sp,-12
 801b654:	dc000015 	stw	r16,0(sp)
 801b658:	040205f4 	movhi	r16,2071
 801b65c:	dc400115 	stw	r17,4(sp)
 801b660:	842e6904 	addi	r16,r16,-18012
 801b664:	2023883a 	mov	r17,r4
 801b668:	2809883a 	mov	r4,r5
 801b66c:	dfc00215 	stw	ra,8(sp)
 801b670:	80000015 	stw	zero,0(r16)
 801b674:	801cb540 	call	801cb54 <isatty>
 801b678:	00ffffc4 	movi	r3,-1
 801b67c:	10c00526 	beq	r2,r3,801b694 <_isatty_r+0x44>
 801b680:	dfc00217 	ldw	ra,8(sp)
 801b684:	dc400117 	ldw	r17,4(sp)
 801b688:	dc000017 	ldw	r16,0(sp)
 801b68c:	dec00304 	addi	sp,sp,12
 801b690:	f800283a 	ret
 801b694:	80c00017 	ldw	r3,0(r16)
 801b698:	183ff926 	beq	r3,zero,801b680 <__alt_data_end+0xf801b680>
 801b69c:	88c00015 	stw	r3,0(r17)
 801b6a0:	003ff706 	br	801b680 <__alt_data_end+0xf801b680>

0801b6a4 <_lseek_r>:
 801b6a4:	defffd04 	addi	sp,sp,-12
 801b6a8:	dc000015 	stw	r16,0(sp)
 801b6ac:	040205f4 	movhi	r16,2071
 801b6b0:	dc400115 	stw	r17,4(sp)
 801b6b4:	842e6904 	addi	r16,r16,-18012
 801b6b8:	2023883a 	mov	r17,r4
 801b6bc:	2809883a 	mov	r4,r5
 801b6c0:	300b883a 	mov	r5,r6
 801b6c4:	380d883a 	mov	r6,r7
 801b6c8:	dfc00215 	stw	ra,8(sp)
 801b6cc:	80000015 	stw	zero,0(r16)
 801b6d0:	801cd340 	call	801cd34 <lseek>
 801b6d4:	00ffffc4 	movi	r3,-1
 801b6d8:	10c00526 	beq	r2,r3,801b6f0 <_lseek_r+0x4c>
 801b6dc:	dfc00217 	ldw	ra,8(sp)
 801b6e0:	dc400117 	ldw	r17,4(sp)
 801b6e4:	dc000017 	ldw	r16,0(sp)
 801b6e8:	dec00304 	addi	sp,sp,12
 801b6ec:	f800283a 	ret
 801b6f0:	80c00017 	ldw	r3,0(r16)
 801b6f4:	183ff926 	beq	r3,zero,801b6dc <__alt_data_end+0xf801b6dc>
 801b6f8:	88c00015 	stw	r3,0(r17)
 801b6fc:	003ff706 	br	801b6dc <__alt_data_end+0xf801b6dc>

0801b700 <_read_r>:
 801b700:	defffd04 	addi	sp,sp,-12
 801b704:	dc000015 	stw	r16,0(sp)
 801b708:	040205f4 	movhi	r16,2071
 801b70c:	dc400115 	stw	r17,4(sp)
 801b710:	842e6904 	addi	r16,r16,-18012
 801b714:	2023883a 	mov	r17,r4
 801b718:	2809883a 	mov	r4,r5
 801b71c:	300b883a 	mov	r5,r6
 801b720:	380d883a 	mov	r6,r7
 801b724:	dfc00215 	stw	ra,8(sp)
 801b728:	80000015 	stw	zero,0(r16)
 801b72c:	801cf180 	call	801cf18 <read>
 801b730:	00ffffc4 	movi	r3,-1
 801b734:	10c00526 	beq	r2,r3,801b74c <_read_r+0x4c>
 801b738:	dfc00217 	ldw	ra,8(sp)
 801b73c:	dc400117 	ldw	r17,4(sp)
 801b740:	dc000017 	ldw	r16,0(sp)
 801b744:	dec00304 	addi	sp,sp,12
 801b748:	f800283a 	ret
 801b74c:	80c00017 	ldw	r3,0(r16)
 801b750:	183ff926 	beq	r3,zero,801b738 <__alt_data_end+0xf801b738>
 801b754:	88c00015 	stw	r3,0(r17)
 801b758:	003ff706 	br	801b738 <__alt_data_end+0xf801b738>

0801b75c <__swbuf_r>:
 801b75c:	defffc04 	addi	sp,sp,-16
 801b760:	dc800215 	stw	r18,8(sp)
 801b764:	dc400115 	stw	r17,4(sp)
 801b768:	dc000015 	stw	r16,0(sp)
 801b76c:	dfc00315 	stw	ra,12(sp)
 801b770:	2025883a 	mov	r18,r4
 801b774:	2823883a 	mov	r17,r5
 801b778:	3021883a 	mov	r16,r6
 801b77c:	20000226 	beq	r4,zero,801b788 <__swbuf_r+0x2c>
 801b780:	20800e17 	ldw	r2,56(r4)
 801b784:	10004126 	beq	r2,zero,801b88c <__swbuf_r+0x130>
 801b788:	80c00617 	ldw	r3,24(r16)
 801b78c:	8180030b 	ldhu	r6,12(r16)
 801b790:	80c00215 	stw	r3,8(r16)
 801b794:	30c0020c 	andi	r3,r6,8
 801b798:	18003526 	beq	r3,zero,801b870 <__swbuf_r+0x114>
 801b79c:	80c00417 	ldw	r3,16(r16)
 801b7a0:	18003326 	beq	r3,zero,801b870 <__swbuf_r+0x114>
 801b7a4:	3088000c 	andi	r2,r6,8192
 801b7a8:	8c403fcc 	andi	r17,r17,255
 801b7ac:	10001726 	beq	r2,zero,801b80c <__swbuf_r+0xb0>
 801b7b0:	80800017 	ldw	r2,0(r16)
 801b7b4:	81000517 	ldw	r4,20(r16)
 801b7b8:	10c7c83a 	sub	r3,r2,r3
 801b7bc:	19001d0e 	bge	r3,r4,801b834 <__swbuf_r+0xd8>
 801b7c0:	18c00044 	addi	r3,r3,1
 801b7c4:	81400217 	ldw	r5,8(r16)
 801b7c8:	11000044 	addi	r4,r2,1
 801b7cc:	81000015 	stw	r4,0(r16)
 801b7d0:	297fffc4 	addi	r5,r5,-1
 801b7d4:	81400215 	stw	r5,8(r16)
 801b7d8:	14400005 	stb	r17,0(r2)
 801b7dc:	80800517 	ldw	r2,20(r16)
 801b7e0:	10c01d26 	beq	r2,r3,801b858 <__swbuf_r+0xfc>
 801b7e4:	8080030b 	ldhu	r2,12(r16)
 801b7e8:	1080004c 	andi	r2,r2,1
 801b7ec:	1000181e 	bne	r2,zero,801b850 <__swbuf_r+0xf4>
 801b7f0:	8805883a 	mov	r2,r17
 801b7f4:	dfc00317 	ldw	ra,12(sp)
 801b7f8:	dc800217 	ldw	r18,8(sp)
 801b7fc:	dc400117 	ldw	r17,4(sp)
 801b800:	dc000017 	ldw	r16,0(sp)
 801b804:	dec00404 	addi	sp,sp,16
 801b808:	f800283a 	ret
 801b80c:	81001917 	ldw	r4,100(r16)
 801b810:	00b7ffc4 	movi	r2,-8193
 801b814:	31880014 	ori	r6,r6,8192
 801b818:	2084703a 	and	r2,r4,r2
 801b81c:	80801915 	stw	r2,100(r16)
 801b820:	80800017 	ldw	r2,0(r16)
 801b824:	81000517 	ldw	r4,20(r16)
 801b828:	8180030d 	sth	r6,12(r16)
 801b82c:	10c7c83a 	sub	r3,r2,r3
 801b830:	193fe316 	blt	r3,r4,801b7c0 <__alt_data_end+0xf801b7c0>
 801b834:	9009883a 	mov	r4,r18
 801b838:	800b883a 	mov	r5,r16
 801b83c:	80160180 	call	8016018 <_fflush_r>
 801b840:	1000091e 	bne	r2,zero,801b868 <__swbuf_r+0x10c>
 801b844:	80800017 	ldw	r2,0(r16)
 801b848:	00c00044 	movi	r3,1
 801b84c:	003fdd06 	br	801b7c4 <__alt_data_end+0xf801b7c4>
 801b850:	00800284 	movi	r2,10
 801b854:	88bfe61e 	bne	r17,r2,801b7f0 <__alt_data_end+0xf801b7f0>
 801b858:	9009883a 	mov	r4,r18
 801b85c:	800b883a 	mov	r5,r16
 801b860:	80160180 	call	8016018 <_fflush_r>
 801b864:	103fe226 	beq	r2,zero,801b7f0 <__alt_data_end+0xf801b7f0>
 801b868:	00bfffc4 	movi	r2,-1
 801b86c:	003fe106 	br	801b7f4 <__alt_data_end+0xf801b7f4>
 801b870:	9009883a 	mov	r4,r18
 801b874:	800b883a 	mov	r5,r16
 801b878:	80143940 	call	8014394 <__swsetup_r>
 801b87c:	103ffa1e 	bne	r2,zero,801b868 <__alt_data_end+0xf801b868>
 801b880:	8180030b 	ldhu	r6,12(r16)
 801b884:	80c00417 	ldw	r3,16(r16)
 801b888:	003fc606 	br	801b7a4 <__alt_data_end+0xf801b7a4>
 801b88c:	80163f40 	call	80163f4 <__sinit>
 801b890:	003fbd06 	br	801b788 <__alt_data_end+0xf801b788>

0801b894 <__swbuf>:
 801b894:	00c205f4 	movhi	r3,2071
 801b898:	18e34604 	addi	r3,r3,-29416
 801b89c:	2005883a 	mov	r2,r4
 801b8a0:	19000017 	ldw	r4,0(r3)
 801b8a4:	280d883a 	mov	r6,r5
 801b8a8:	100b883a 	mov	r5,r2
 801b8ac:	801b75c1 	jmpi	801b75c <__swbuf_r>

0801b8b0 <_wcrtomb_r>:
 801b8b0:	defff604 	addi	sp,sp,-40
 801b8b4:	008205f4 	movhi	r2,2071
 801b8b8:	dc800815 	stw	r18,32(sp)
 801b8bc:	dc400715 	stw	r17,28(sp)
 801b8c0:	dc000615 	stw	r16,24(sp)
 801b8c4:	10a34804 	addi	r2,r2,-29408
 801b8c8:	dfc00915 	stw	ra,36(sp)
 801b8cc:	2021883a 	mov	r16,r4
 801b8d0:	3823883a 	mov	r17,r7
 801b8d4:	14800017 	ldw	r18,0(r2)
 801b8d8:	28001426 	beq	r5,zero,801b92c <_wcrtomb_r+0x7c>
 801b8dc:	d9400415 	stw	r5,16(sp)
 801b8e0:	d9800515 	stw	r6,20(sp)
 801b8e4:	8016f1c0 	call	8016f1c <__locale_charset>
 801b8e8:	d9400417 	ldw	r5,16(sp)
 801b8ec:	d9800517 	ldw	r6,20(sp)
 801b8f0:	8009883a 	mov	r4,r16
 801b8f4:	dc400015 	stw	r17,0(sp)
 801b8f8:	100f883a 	mov	r7,r2
 801b8fc:	903ee83a 	callr	r18
 801b900:	00ffffc4 	movi	r3,-1
 801b904:	10c0031e 	bne	r2,r3,801b914 <_wcrtomb_r+0x64>
 801b908:	88000015 	stw	zero,0(r17)
 801b90c:	00c02284 	movi	r3,138
 801b910:	80c00015 	stw	r3,0(r16)
 801b914:	dfc00917 	ldw	ra,36(sp)
 801b918:	dc800817 	ldw	r18,32(sp)
 801b91c:	dc400717 	ldw	r17,28(sp)
 801b920:	dc000617 	ldw	r16,24(sp)
 801b924:	dec00a04 	addi	sp,sp,40
 801b928:	f800283a 	ret
 801b92c:	8016f1c0 	call	8016f1c <__locale_charset>
 801b930:	8009883a 	mov	r4,r16
 801b934:	dc400015 	stw	r17,0(sp)
 801b938:	d9400104 	addi	r5,sp,4
 801b93c:	000d883a 	mov	r6,zero
 801b940:	100f883a 	mov	r7,r2
 801b944:	903ee83a 	callr	r18
 801b948:	003fed06 	br	801b900 <__alt_data_end+0xf801b900>

0801b94c <wcrtomb>:
 801b94c:	defff604 	addi	sp,sp,-40
 801b950:	008205f4 	movhi	r2,2071
 801b954:	dc800615 	stw	r18,24(sp)
 801b958:	dc400515 	stw	r17,20(sp)
 801b95c:	dc000415 	stw	r16,16(sp)
 801b960:	10a34604 	addi	r2,r2,-29416
 801b964:	dfc00915 	stw	ra,36(sp)
 801b968:	dd000815 	stw	r20,32(sp)
 801b96c:	dcc00715 	stw	r19,28(sp)
 801b970:	2021883a 	mov	r16,r4
 801b974:	3025883a 	mov	r18,r6
 801b978:	14400017 	ldw	r17,0(r2)
 801b97c:	20001826 	beq	r4,zero,801b9e0 <wcrtomb+0x94>
 801b980:	008205f4 	movhi	r2,2071
 801b984:	10a34804 	addi	r2,r2,-29408
 801b988:	15000017 	ldw	r20,0(r2)
 801b98c:	2827883a 	mov	r19,r5
 801b990:	8016f1c0 	call	8016f1c <__locale_charset>
 801b994:	8809883a 	mov	r4,r17
 801b998:	dc800015 	stw	r18,0(sp)
 801b99c:	800b883a 	mov	r5,r16
 801b9a0:	980d883a 	mov	r6,r19
 801b9a4:	100f883a 	mov	r7,r2
 801b9a8:	a03ee83a 	callr	r20
 801b9ac:	00ffffc4 	movi	r3,-1
 801b9b0:	10c0031e 	bne	r2,r3,801b9c0 <wcrtomb+0x74>
 801b9b4:	90000015 	stw	zero,0(r18)
 801b9b8:	00c02284 	movi	r3,138
 801b9bc:	88c00015 	stw	r3,0(r17)
 801b9c0:	dfc00917 	ldw	ra,36(sp)
 801b9c4:	dd000817 	ldw	r20,32(sp)
 801b9c8:	dcc00717 	ldw	r19,28(sp)
 801b9cc:	dc800617 	ldw	r18,24(sp)
 801b9d0:	dc400517 	ldw	r17,20(sp)
 801b9d4:	dc000417 	ldw	r16,16(sp)
 801b9d8:	dec00a04 	addi	sp,sp,40
 801b9dc:	f800283a 	ret
 801b9e0:	008205f4 	movhi	r2,2071
 801b9e4:	10a34804 	addi	r2,r2,-29408
 801b9e8:	14000017 	ldw	r16,0(r2)
 801b9ec:	8016f1c0 	call	8016f1c <__locale_charset>
 801b9f0:	8809883a 	mov	r4,r17
 801b9f4:	dc800015 	stw	r18,0(sp)
 801b9f8:	d9400104 	addi	r5,sp,4
 801b9fc:	000d883a 	mov	r6,zero
 801ba00:	100f883a 	mov	r7,r2
 801ba04:	803ee83a 	callr	r16
 801ba08:	003fe806 	br	801b9ac <__alt_data_end+0xf801b9ac>

0801ba0c <__ascii_wctomb>:
 801ba0c:	28000526 	beq	r5,zero,801ba24 <__ascii_wctomb+0x18>
 801ba10:	00803fc4 	movi	r2,255
 801ba14:	11800536 	bltu	r2,r6,801ba2c <__ascii_wctomb+0x20>
 801ba18:	29800005 	stb	r6,0(r5)
 801ba1c:	00800044 	movi	r2,1
 801ba20:	f800283a 	ret
 801ba24:	0005883a 	mov	r2,zero
 801ba28:	f800283a 	ret
 801ba2c:	00802284 	movi	r2,138
 801ba30:	20800015 	stw	r2,0(r4)
 801ba34:	00bfffc4 	movi	r2,-1
 801ba38:	f800283a 	ret

0801ba3c <_wctomb_r>:
 801ba3c:	008205f4 	movhi	r2,2071
 801ba40:	defff904 	addi	sp,sp,-28
 801ba44:	10a34804 	addi	r2,r2,-29408
 801ba48:	dfc00615 	stw	ra,24(sp)
 801ba4c:	dc400515 	stw	r17,20(sp)
 801ba50:	dc000415 	stw	r16,16(sp)
 801ba54:	3823883a 	mov	r17,r7
 801ba58:	14000017 	ldw	r16,0(r2)
 801ba5c:	d9000115 	stw	r4,4(sp)
 801ba60:	d9400215 	stw	r5,8(sp)
 801ba64:	d9800315 	stw	r6,12(sp)
 801ba68:	8016f1c0 	call	8016f1c <__locale_charset>
 801ba6c:	d9000117 	ldw	r4,4(sp)
 801ba70:	d9400217 	ldw	r5,8(sp)
 801ba74:	d9800317 	ldw	r6,12(sp)
 801ba78:	dc400015 	stw	r17,0(sp)
 801ba7c:	100f883a 	mov	r7,r2
 801ba80:	803ee83a 	callr	r16
 801ba84:	dfc00617 	ldw	ra,24(sp)
 801ba88:	dc400517 	ldw	r17,20(sp)
 801ba8c:	dc000417 	ldw	r16,16(sp)
 801ba90:	dec00704 	addi	sp,sp,28
 801ba94:	f800283a 	ret

0801ba98 <__udivdi3>:
 801ba98:	defff504 	addi	sp,sp,-44
 801ba9c:	dcc00415 	stw	r19,16(sp)
 801baa0:	dc000115 	stw	r16,4(sp)
 801baa4:	dfc00a15 	stw	ra,40(sp)
 801baa8:	df000915 	stw	fp,36(sp)
 801baac:	ddc00815 	stw	r23,32(sp)
 801bab0:	dd800715 	stw	r22,28(sp)
 801bab4:	dd400615 	stw	r21,24(sp)
 801bab8:	dd000515 	stw	r20,20(sp)
 801babc:	dc800315 	stw	r18,12(sp)
 801bac0:	dc400215 	stw	r17,8(sp)
 801bac4:	2027883a 	mov	r19,r4
 801bac8:	2821883a 	mov	r16,r5
 801bacc:	3800421e 	bne	r7,zero,801bbd8 <__udivdi3+0x140>
 801bad0:	3025883a 	mov	r18,r6
 801bad4:	2023883a 	mov	r17,r4
 801bad8:	2980542e 	bgeu	r5,r6,801bc2c <__udivdi3+0x194>
 801badc:	00bfffd4 	movui	r2,65535
 801bae0:	282d883a 	mov	r22,r5
 801bae4:	1180a836 	bltu	r2,r6,801bd88 <__udivdi3+0x2f0>
 801bae8:	00803fc4 	movi	r2,255
 801baec:	1181422e 	bgeu	r2,r6,801bff8 <__udivdi3+0x560>
 801baf0:	00800204 	movi	r2,8
 801baf4:	1007883a 	mov	r3,r2
 801baf8:	3084d83a 	srl	r2,r6,r2
 801bafc:	010205b4 	movhi	r4,2070
 801bb00:	21177904 	addi	r4,r4,24036
 801bb04:	2085883a 	add	r2,r4,r2
 801bb08:	10800003 	ldbu	r2,0(r2)
 801bb0c:	10c7883a 	add	r3,r2,r3
 801bb10:	00800804 	movi	r2,32
 801bb14:	10c5c83a 	sub	r2,r2,r3
 801bb18:	10000526 	beq	r2,zero,801bb30 <__udivdi3+0x98>
 801bb1c:	80a0983a 	sll	r16,r16,r2
 801bb20:	98c6d83a 	srl	r3,r19,r3
 801bb24:	30a4983a 	sll	r18,r6,r2
 801bb28:	98a2983a 	sll	r17,r19,r2
 801bb2c:	80ecb03a 	or	r22,r16,r3
 801bb30:	902ad43a 	srli	r21,r18,16
 801bb34:	b009883a 	mov	r4,r22
 801bb38:	953fffcc 	andi	r20,r18,65535
 801bb3c:	a80b883a 	mov	r5,r21
 801bb40:	800ca080 	call	800ca08 <__umodsi3>
 801bb44:	b009883a 	mov	r4,r22
 801bb48:	a80b883a 	mov	r5,r21
 801bb4c:	1027883a 	mov	r19,r2
 801bb50:	800ca000 	call	800ca00 <__udivsi3>
 801bb54:	1021883a 	mov	r16,r2
 801bb58:	8806d43a 	srli	r3,r17,16
 801bb5c:	9804943a 	slli	r2,r19,16
 801bb60:	8527383a 	mul	r19,r16,r20
 801bb64:	10c4b03a 	or	r2,r2,r3
 801bb68:	14c0052e 	bgeu	r2,r19,801bb80 <__udivdi3+0xe8>
 801bb6c:	1485883a 	add	r2,r2,r18
 801bb70:	80ffffc4 	addi	r3,r16,-1
 801bb74:	14800136 	bltu	r2,r18,801bb7c <__udivdi3+0xe4>
 801bb78:	14c13436 	bltu	r2,r19,801c04c <__udivdi3+0x5b4>
 801bb7c:	1821883a 	mov	r16,r3
 801bb80:	14e7c83a 	sub	r19,r2,r19
 801bb84:	9809883a 	mov	r4,r19
 801bb88:	a80b883a 	mov	r5,r21
 801bb8c:	800ca080 	call	800ca08 <__umodsi3>
 801bb90:	102d883a 	mov	r22,r2
 801bb94:	9809883a 	mov	r4,r19
 801bb98:	a80b883a 	mov	r5,r21
 801bb9c:	800ca000 	call	800ca00 <__udivsi3>
 801bba0:	b02c943a 	slli	r22,r22,16
 801bba4:	1529383a 	mul	r20,r2,r20
 801bba8:	8c7fffcc 	andi	r17,r17,65535
 801bbac:	b462b03a 	or	r17,r22,r17
 801bbb0:	8d00052e 	bgeu	r17,r20,801bbc8 <__udivdi3+0x130>
 801bbb4:	8ca3883a 	add	r17,r17,r18
 801bbb8:	10ffffc4 	addi	r3,r2,-1
 801bbbc:	8c80f636 	bltu	r17,r18,801bf98 <__udivdi3+0x500>
 801bbc0:	8d00f52e 	bgeu	r17,r20,801bf98 <__udivdi3+0x500>
 801bbc4:	10bfff84 	addi	r2,r2,-2
 801bbc8:	8020943a 	slli	r16,r16,16
 801bbcc:	0007883a 	mov	r3,zero
 801bbd0:	1404b03a 	or	r2,r2,r16
 801bbd4:	00005b06 	br	801bd44 <__udivdi3+0x2ac>
 801bbd8:	29c05836 	bltu	r5,r7,801bd3c <__udivdi3+0x2a4>
 801bbdc:	00bfffd4 	movui	r2,65535
 801bbe0:	11c0642e 	bgeu	r2,r7,801bd74 <__udivdi3+0x2dc>
 801bbe4:	00804034 	movhi	r2,256
 801bbe8:	10bfffc4 	addi	r2,r2,-1
 801bbec:	11c0f32e 	bgeu	r2,r7,801bfbc <__udivdi3+0x524>
 801bbf0:	00c00604 	movi	r3,24
 801bbf4:	180b883a 	mov	r5,r3
 801bbf8:	38c6d83a 	srl	r3,r7,r3
 801bbfc:	008205b4 	movhi	r2,2070
 801bc00:	10977904 	addi	r2,r2,24036
 801bc04:	10c7883a 	add	r3,r2,r3
 801bc08:	18c00003 	ldbu	r3,0(r3)
 801bc0c:	01000804 	movi	r4,32
 801bc10:	1947883a 	add	r3,r3,r5
 801bc14:	20e5c83a 	sub	r18,r4,r3
 801bc18:	9000661e 	bne	r18,zero,801bdb4 <__udivdi3+0x31c>
 801bc1c:	3c00f936 	bltu	r7,r16,801c004 <__udivdi3+0x56c>
 801bc20:	9985403a 	cmpgeu	r2,r19,r6
 801bc24:	0007883a 	mov	r3,zero
 801bc28:	00004606 	br	801bd44 <__udivdi3+0x2ac>
 801bc2c:	3000041e 	bne	r6,zero,801bc40 <__udivdi3+0x1a8>
 801bc30:	01000044 	movi	r4,1
 801bc34:	000b883a 	mov	r5,zero
 801bc38:	800ca000 	call	800ca00 <__udivsi3>
 801bc3c:	1025883a 	mov	r18,r2
 801bc40:	00bfffd4 	movui	r2,65535
 801bc44:	1480562e 	bgeu	r2,r18,801bda0 <__udivdi3+0x308>
 801bc48:	00804034 	movhi	r2,256
 801bc4c:	10bfffc4 	addi	r2,r2,-1
 801bc50:	1480e32e 	bgeu	r2,r18,801bfe0 <__udivdi3+0x548>
 801bc54:	00800604 	movi	r2,24
 801bc58:	1007883a 	mov	r3,r2
 801bc5c:	9084d83a 	srl	r2,r18,r2
 801bc60:	010205b4 	movhi	r4,2070
 801bc64:	21177904 	addi	r4,r4,24036
 801bc68:	2085883a 	add	r2,r4,r2
 801bc6c:	10800003 	ldbu	r2,0(r2)
 801bc70:	10c5883a 	add	r2,r2,r3
 801bc74:	00c00804 	movi	r3,32
 801bc78:	1887c83a 	sub	r3,r3,r2
 801bc7c:	1800911e 	bne	r3,zero,801bec4 <__udivdi3+0x42c>
 801bc80:	9028d43a 	srli	r20,r18,16
 801bc84:	84a1c83a 	sub	r16,r16,r18
 801bc88:	957fffcc 	andi	r21,r18,65535
 801bc8c:	00c00044 	movi	r3,1
 801bc90:	8009883a 	mov	r4,r16
 801bc94:	a00b883a 	mov	r5,r20
 801bc98:	d8c00015 	stw	r3,0(sp)
 801bc9c:	800ca080 	call	800ca08 <__umodsi3>
 801bca0:	8009883a 	mov	r4,r16
 801bca4:	a00b883a 	mov	r5,r20
 801bca8:	1027883a 	mov	r19,r2
 801bcac:	800ca000 	call	800ca00 <__udivsi3>
 801bcb0:	1021883a 	mov	r16,r2
 801bcb4:	880cd43a 	srli	r6,r17,16
 801bcb8:	9804943a 	slli	r2,r19,16
 801bcbc:	8567383a 	mul	r19,r16,r21
 801bcc0:	d8c00017 	ldw	r3,0(sp)
 801bcc4:	1188b03a 	or	r4,r2,r6
 801bcc8:	24c0052e 	bgeu	r4,r19,801bce0 <__udivdi3+0x248>
 801bccc:	2489883a 	add	r4,r4,r18
 801bcd0:	80bfffc4 	addi	r2,r16,-1
 801bcd4:	24800136 	bltu	r4,r18,801bcdc <__udivdi3+0x244>
 801bcd8:	24c0d936 	bltu	r4,r19,801c040 <__udivdi3+0x5a8>
 801bcdc:	1021883a 	mov	r16,r2
 801bce0:	24e7c83a 	sub	r19,r4,r19
 801bce4:	9809883a 	mov	r4,r19
 801bce8:	a00b883a 	mov	r5,r20
 801bcec:	d8c00015 	stw	r3,0(sp)
 801bcf0:	800ca080 	call	800ca08 <__umodsi3>
 801bcf4:	102d883a 	mov	r22,r2
 801bcf8:	9809883a 	mov	r4,r19
 801bcfc:	a00b883a 	mov	r5,r20
 801bd00:	800ca000 	call	800ca00 <__udivsi3>
 801bd04:	b02c943a 	slli	r22,r22,16
 801bd08:	156b383a 	mul	r21,r2,r21
 801bd0c:	8c7fffcc 	andi	r17,r17,65535
 801bd10:	b462b03a 	or	r17,r22,r17
 801bd14:	d8c00017 	ldw	r3,0(sp)
 801bd18:	8d40052e 	bgeu	r17,r21,801bd30 <__udivdi3+0x298>
 801bd1c:	8ca3883a 	add	r17,r17,r18
 801bd20:	113fffc4 	addi	r4,r2,-1
 801bd24:	8c809a36 	bltu	r17,r18,801bf90 <__udivdi3+0x4f8>
 801bd28:	8d40992e 	bgeu	r17,r21,801bf90 <__udivdi3+0x4f8>
 801bd2c:	10bfff84 	addi	r2,r2,-2
 801bd30:	8020943a 	slli	r16,r16,16
 801bd34:	1404b03a 	or	r2,r2,r16
 801bd38:	00000206 	br	801bd44 <__udivdi3+0x2ac>
 801bd3c:	0007883a 	mov	r3,zero
 801bd40:	0005883a 	mov	r2,zero
 801bd44:	dfc00a17 	ldw	ra,40(sp)
 801bd48:	df000917 	ldw	fp,36(sp)
 801bd4c:	ddc00817 	ldw	r23,32(sp)
 801bd50:	dd800717 	ldw	r22,28(sp)
 801bd54:	dd400617 	ldw	r21,24(sp)
 801bd58:	dd000517 	ldw	r20,20(sp)
 801bd5c:	dcc00417 	ldw	r19,16(sp)
 801bd60:	dc800317 	ldw	r18,12(sp)
 801bd64:	dc400217 	ldw	r17,8(sp)
 801bd68:	dc000117 	ldw	r16,4(sp)
 801bd6c:	dec00b04 	addi	sp,sp,44
 801bd70:	f800283a 	ret
 801bd74:	00803fc4 	movi	r2,255
 801bd78:	11c0932e 	bgeu	r2,r7,801bfc8 <__udivdi3+0x530>
 801bd7c:	00c00204 	movi	r3,8
 801bd80:	180b883a 	mov	r5,r3
 801bd84:	003f9c06 	br	801bbf8 <__alt_data_end+0xf801bbf8>
 801bd88:	00804034 	movhi	r2,256
 801bd8c:	10bfffc4 	addi	r2,r2,-1
 801bd90:	1180902e 	bgeu	r2,r6,801bfd4 <__udivdi3+0x53c>
 801bd94:	00800604 	movi	r2,24
 801bd98:	1007883a 	mov	r3,r2
 801bd9c:	003f5606 	br	801baf8 <__alt_data_end+0xf801baf8>
 801bda0:	00803fc4 	movi	r2,255
 801bda4:	1480912e 	bgeu	r2,r18,801bfec <__udivdi3+0x554>
 801bda8:	00800204 	movi	r2,8
 801bdac:	1007883a 	mov	r3,r2
 801bdb0:	003faa06 	br	801bc5c <__alt_data_end+0xf801bc5c>
 801bdb4:	30eed83a 	srl	r23,r6,r3
 801bdb8:	3c8e983a 	sll	r7,r7,r18
 801bdbc:	80f8d83a 	srl	fp,r16,r3
 801bdc0:	98c6d83a 	srl	r3,r19,r3
 801bdc4:	3deeb03a 	or	r23,r7,r23
 801bdc8:	b828d43a 	srli	r20,r23,16
 801bdcc:	84a0983a 	sll	r16,r16,r18
 801bdd0:	e009883a 	mov	r4,fp
 801bdd4:	a00b883a 	mov	r5,r20
 801bdd8:	80e2b03a 	or	r17,r16,r3
 801bddc:	34aa983a 	sll	r21,r6,r18
 801bde0:	800ca080 	call	800ca08 <__umodsi3>
 801bde4:	e009883a 	mov	r4,fp
 801bde8:	a00b883a 	mov	r5,r20
 801bdec:	102d883a 	mov	r22,r2
 801bdf0:	800ca000 	call	800ca00 <__udivsi3>
 801bdf4:	1021883a 	mov	r16,r2
 801bdf8:	bf3fffcc 	andi	fp,r23,65535
 801bdfc:	b004943a 	slli	r2,r22,16
 801be00:	8808d43a 	srli	r4,r17,16
 801be04:	872d383a 	mul	r22,r16,fp
 801be08:	1104b03a 	or	r2,r2,r4
 801be0c:	1580042e 	bgeu	r2,r22,801be20 <__udivdi3+0x388>
 801be10:	15c5883a 	add	r2,r2,r23
 801be14:	80ffffc4 	addi	r3,r16,-1
 801be18:	15c0812e 	bgeu	r2,r23,801c020 <__udivdi3+0x588>
 801be1c:	1821883a 	mov	r16,r3
 801be20:	15adc83a 	sub	r22,r2,r22
 801be24:	b009883a 	mov	r4,r22
 801be28:	a00b883a 	mov	r5,r20
 801be2c:	800ca080 	call	800ca08 <__umodsi3>
 801be30:	a00b883a 	mov	r5,r20
 801be34:	b009883a 	mov	r4,r22
 801be38:	d8800015 	stw	r2,0(sp)
 801be3c:	800ca000 	call	800ca00 <__udivsi3>
 801be40:	d8c00017 	ldw	r3,0(sp)
 801be44:	170b383a 	mul	r5,r2,fp
 801be48:	8c7fffcc 	andi	r17,r17,65535
 801be4c:	1806943a 	slli	r3,r3,16
 801be50:	1c46b03a 	or	r3,r3,r17
 801be54:	1940042e 	bgeu	r3,r5,801be68 <__udivdi3+0x3d0>
 801be58:	1dc7883a 	add	r3,r3,r23
 801be5c:	113fffc4 	addi	r4,r2,-1
 801be60:	1dc06b2e 	bgeu	r3,r23,801c010 <__udivdi3+0x578>
 801be64:	2005883a 	mov	r2,r4
 801be68:	8020943a 	slli	r16,r16,16
 801be6c:	a9ffffcc 	andi	r7,r21,65535
 801be70:	a82ad43a 	srli	r21,r21,16
 801be74:	1404b03a 	or	r2,r2,r16
 801be78:	113fffcc 	andi	r4,r2,65535
 801be7c:	100cd43a 	srli	r6,r2,16
 801be80:	21d3383a 	mul	r9,r4,r7
 801be84:	2549383a 	mul	r4,r4,r21
 801be88:	31cf383a 	mul	r7,r6,r7
 801be8c:	4810d43a 	srli	r8,r9,16
 801be90:	1947c83a 	sub	r3,r3,r5
 801be94:	3909883a 	add	r4,r7,r4
 801be98:	2209883a 	add	r4,r4,r8
 801be9c:	354d383a 	mul	r6,r6,r21
 801bea0:	21c0022e 	bgeu	r4,r7,801beac <__udivdi3+0x414>
 801bea4:	01400074 	movhi	r5,1
 801bea8:	314d883a 	add	r6,r6,r5
 801beac:	202ad43a 	srli	r21,r4,16
 801beb0:	354d883a 	add	r6,r6,r21
 801beb4:	19803f36 	bltu	r3,r6,801bfb4 <__udivdi3+0x51c>
 801beb8:	19803926 	beq	r3,r6,801bfa0 <__udivdi3+0x508>
 801bebc:	0007883a 	mov	r3,zero
 801bec0:	003fa006 	br	801bd44 <__alt_data_end+0xf801bd44>
 801bec4:	90e4983a 	sll	r18,r18,r3
 801bec8:	80aad83a 	srl	r21,r16,r2
 801becc:	80e0983a 	sll	r16,r16,r3
 801bed0:	9028d43a 	srli	r20,r18,16
 801bed4:	9884d83a 	srl	r2,r19,r2
 801bed8:	a809883a 	mov	r4,r21
 801bedc:	a00b883a 	mov	r5,r20
 801bee0:	80acb03a 	or	r22,r16,r2
 801bee4:	98e2983a 	sll	r17,r19,r3
 801bee8:	800ca080 	call	800ca08 <__umodsi3>
 801beec:	a809883a 	mov	r4,r21
 801bef0:	a00b883a 	mov	r5,r20
 801bef4:	1021883a 	mov	r16,r2
 801bef8:	800ca000 	call	800ca00 <__udivsi3>
 801befc:	957fffcc 	andi	r21,r18,65535
 801bf00:	8020943a 	slli	r16,r16,16
 801bf04:	b00ad43a 	srli	r5,r22,16
 801bf08:	1567383a 	mul	r19,r2,r21
 801bf0c:	102f883a 	mov	r23,r2
 801bf10:	8148b03a 	or	r4,r16,r5
 801bf14:	24c0062e 	bgeu	r4,r19,801bf30 <__udivdi3+0x498>
 801bf18:	2489883a 	add	r4,r4,r18
 801bf1c:	10bfffc4 	addi	r2,r2,-1
 801bf20:	24804536 	bltu	r4,r18,801c038 <__udivdi3+0x5a0>
 801bf24:	24c0442e 	bgeu	r4,r19,801c038 <__udivdi3+0x5a0>
 801bf28:	bdffff84 	addi	r23,r23,-2
 801bf2c:	2489883a 	add	r4,r4,r18
 801bf30:	24e7c83a 	sub	r19,r4,r19
 801bf34:	9809883a 	mov	r4,r19
 801bf38:	a00b883a 	mov	r5,r20
 801bf3c:	800ca080 	call	800ca08 <__umodsi3>
 801bf40:	1021883a 	mov	r16,r2
 801bf44:	9809883a 	mov	r4,r19
 801bf48:	a00b883a 	mov	r5,r20
 801bf4c:	800ca000 	call	800ca00 <__udivsi3>
 801bf50:	8020943a 	slli	r16,r16,16
 801bf54:	1007883a 	mov	r3,r2
 801bf58:	1545383a 	mul	r2,r2,r21
 801bf5c:	b13fffcc 	andi	r4,r22,65535
 801bf60:	8108b03a 	or	r4,r16,r4
 801bf64:	2080062e 	bgeu	r4,r2,801bf80 <__udivdi3+0x4e8>
 801bf68:	2489883a 	add	r4,r4,r18
 801bf6c:	197fffc4 	addi	r5,r3,-1
 801bf70:	24802f36 	bltu	r4,r18,801c030 <__udivdi3+0x598>
 801bf74:	20802e2e 	bgeu	r4,r2,801c030 <__udivdi3+0x598>
 801bf78:	18ffff84 	addi	r3,r3,-2
 801bf7c:	2489883a 	add	r4,r4,r18
 801bf80:	b82e943a 	slli	r23,r23,16
 801bf84:	20a1c83a 	sub	r16,r4,r2
 801bf88:	1dc6b03a 	or	r3,r3,r23
 801bf8c:	003f4006 	br	801bc90 <__alt_data_end+0xf801bc90>
 801bf90:	2005883a 	mov	r2,r4
 801bf94:	003f6606 	br	801bd30 <__alt_data_end+0xf801bd30>
 801bf98:	1805883a 	mov	r2,r3
 801bf9c:	003f0a06 	br	801bbc8 <__alt_data_end+0xf801bbc8>
 801bfa0:	2006943a 	slli	r3,r4,16
 801bfa4:	9c88983a 	sll	r4,r19,r18
 801bfa8:	4a7fffcc 	andi	r9,r9,65535
 801bfac:	1a47883a 	add	r3,r3,r9
 801bfb0:	20ffc22e 	bgeu	r4,r3,801bebc <__alt_data_end+0xf801bebc>
 801bfb4:	10bfffc4 	addi	r2,r2,-1
 801bfb8:	003fc006 	br	801bebc <__alt_data_end+0xf801bebc>
 801bfbc:	00c00404 	movi	r3,16
 801bfc0:	180b883a 	mov	r5,r3
 801bfc4:	003f0c06 	br	801bbf8 <__alt_data_end+0xf801bbf8>
 801bfc8:	0007883a 	mov	r3,zero
 801bfcc:	000b883a 	mov	r5,zero
 801bfd0:	003f0906 	br	801bbf8 <__alt_data_end+0xf801bbf8>
 801bfd4:	00800404 	movi	r2,16
 801bfd8:	1007883a 	mov	r3,r2
 801bfdc:	003ec606 	br	801baf8 <__alt_data_end+0xf801baf8>
 801bfe0:	00800404 	movi	r2,16
 801bfe4:	1007883a 	mov	r3,r2
 801bfe8:	003f1c06 	br	801bc5c <__alt_data_end+0xf801bc5c>
 801bfec:	0005883a 	mov	r2,zero
 801bff0:	0007883a 	mov	r3,zero
 801bff4:	003f1906 	br	801bc5c <__alt_data_end+0xf801bc5c>
 801bff8:	0005883a 	mov	r2,zero
 801bffc:	0007883a 	mov	r3,zero
 801c000:	003ebd06 	br	801baf8 <__alt_data_end+0xf801baf8>
 801c004:	0007883a 	mov	r3,zero
 801c008:	00800044 	movi	r2,1
 801c00c:	003f4d06 	br	801bd44 <__alt_data_end+0xf801bd44>
 801c010:	197f942e 	bgeu	r3,r5,801be64 <__alt_data_end+0xf801be64>
 801c014:	10bfff84 	addi	r2,r2,-2
 801c018:	1dc7883a 	add	r3,r3,r23
 801c01c:	003f9206 	br	801be68 <__alt_data_end+0xf801be68>
 801c020:	15bf7e2e 	bgeu	r2,r22,801be1c <__alt_data_end+0xf801be1c>
 801c024:	843fff84 	addi	r16,r16,-2
 801c028:	15c5883a 	add	r2,r2,r23
 801c02c:	003f7c06 	br	801be20 <__alt_data_end+0xf801be20>
 801c030:	2807883a 	mov	r3,r5
 801c034:	003fd206 	br	801bf80 <__alt_data_end+0xf801bf80>
 801c038:	102f883a 	mov	r23,r2
 801c03c:	003fbc06 	br	801bf30 <__alt_data_end+0xf801bf30>
 801c040:	843fff84 	addi	r16,r16,-2
 801c044:	2489883a 	add	r4,r4,r18
 801c048:	003f2506 	br	801bce0 <__alt_data_end+0xf801bce0>
 801c04c:	843fff84 	addi	r16,r16,-2
 801c050:	1485883a 	add	r2,r2,r18
 801c054:	003eca06 	br	801bb80 <__alt_data_end+0xf801bb80>

0801c058 <__umoddi3>:
 801c058:	defff404 	addi	sp,sp,-48
 801c05c:	ddc00915 	stw	r23,36(sp)
 801c060:	dc400315 	stw	r17,12(sp)
 801c064:	dc000215 	stw	r16,8(sp)
 801c068:	dfc00b15 	stw	ra,44(sp)
 801c06c:	df000a15 	stw	fp,40(sp)
 801c070:	dd800815 	stw	r22,32(sp)
 801c074:	dd400715 	stw	r21,28(sp)
 801c078:	dd000615 	stw	r20,24(sp)
 801c07c:	dcc00515 	stw	r19,20(sp)
 801c080:	dc800415 	stw	r18,16(sp)
 801c084:	2021883a 	mov	r16,r4
 801c088:	2823883a 	mov	r17,r5
 801c08c:	282f883a 	mov	r23,r5
 801c090:	3800381e 	bne	r7,zero,801c174 <__umoddi3+0x11c>
 801c094:	3027883a 	mov	r19,r6
 801c098:	2029883a 	mov	r20,r4
 801c09c:	29804e2e 	bgeu	r5,r6,801c1d8 <__umoddi3+0x180>
 801c0a0:	00bfffd4 	movui	r2,65535
 801c0a4:	11809c36 	bltu	r2,r6,801c318 <__umoddi3+0x2c0>
 801c0a8:	00803fc4 	movi	r2,255
 801c0ac:	11813b2e 	bgeu	r2,r6,801c59c <__umoddi3+0x544>
 801c0b0:	01400204 	movi	r5,8
 801c0b4:	2805883a 	mov	r2,r5
 801c0b8:	314ad83a 	srl	r5,r6,r5
 801c0bc:	00c205b4 	movhi	r3,2070
 801c0c0:	18d77904 	addi	r3,r3,24036
 801c0c4:	194b883a 	add	r5,r3,r5
 801c0c8:	29000003 	ldbu	r4,0(r5)
 801c0cc:	2089883a 	add	r4,r4,r2
 801c0d0:	00800804 	movi	r2,32
 801c0d4:	1105c83a 	sub	r2,r2,r4
 801c0d8:	1000ec26 	beq	r2,zero,801c48c <__umoddi3+0x434>
 801c0dc:	88a2983a 	sll	r17,r17,r2
 801c0e0:	8108d83a 	srl	r4,r16,r4
 801c0e4:	30a6983a 	sll	r19,r6,r2
 801c0e8:	80a8983a 	sll	r20,r16,r2
 801c0ec:	1025883a 	mov	r18,r2
 801c0f0:	892eb03a 	or	r23,r17,r4
 801c0f4:	982cd43a 	srli	r22,r19,16
 801c0f8:	b809883a 	mov	r4,r23
 801c0fc:	9d7fffcc 	andi	r21,r19,65535
 801c100:	b00b883a 	mov	r5,r22
 801c104:	800ca080 	call	800ca08 <__umodsi3>
 801c108:	b809883a 	mov	r4,r23
 801c10c:	b00b883a 	mov	r5,r22
 801c110:	1021883a 	mov	r16,r2
 801c114:	800ca000 	call	800ca00 <__udivsi3>
 801c118:	8020943a 	slli	r16,r16,16
 801c11c:	a00cd43a 	srli	r6,r20,16
 801c120:	1545383a 	mul	r2,r2,r21
 801c124:	8188b03a 	or	r4,r16,r6
 801c128:	2080042e 	bgeu	r4,r2,801c13c <__umoddi3+0xe4>
 801c12c:	24c9883a 	add	r4,r4,r19
 801c130:	24c00236 	bltu	r4,r19,801c13c <__umoddi3+0xe4>
 801c134:	2080012e 	bgeu	r4,r2,801c13c <__umoddi3+0xe4>
 801c138:	24c9883a 	add	r4,r4,r19
 801c13c:	20a3c83a 	sub	r17,r4,r2
 801c140:	8809883a 	mov	r4,r17
 801c144:	b00b883a 	mov	r5,r22
 801c148:	800ca080 	call	800ca08 <__umodsi3>
 801c14c:	8809883a 	mov	r4,r17
 801c150:	b00b883a 	mov	r5,r22
 801c154:	1021883a 	mov	r16,r2
 801c158:	800ca000 	call	800ca00 <__udivsi3>
 801c15c:	8006943a 	slli	r3,r16,16
 801c160:	1545383a 	mul	r2,r2,r21
 801c164:	a13fffcc 	andi	r4,r20,65535
 801c168:	1906b03a 	or	r3,r3,r4
 801c16c:	1880532e 	bgeu	r3,r2,801c2bc <__umoddi3+0x264>
 801c170:	00004e06 	br	801c2ac <__umoddi3+0x254>
 801c174:	29c05536 	bltu	r5,r7,801c2cc <__umoddi3+0x274>
 801c178:	00bfffd4 	movui	r2,65535
 801c17c:	11c0612e 	bgeu	r2,r7,801c304 <__umoddi3+0x2ac>
 801c180:	00804034 	movhi	r2,256
 801c184:	10bfffc4 	addi	r2,r2,-1
 801c188:	11c0f82e 	bgeu	r2,r7,801c56c <__umoddi3+0x514>
 801c18c:	01400604 	movi	r5,24
 801c190:	282b883a 	mov	r21,r5
 801c194:	394ad83a 	srl	r5,r7,r5
 801c198:	00c205b4 	movhi	r3,2070
 801c19c:	18d77904 	addi	r3,r3,24036
 801c1a0:	194b883a 	add	r5,r3,r5
 801c1a4:	28800003 	ldbu	r2,0(r5)
 801c1a8:	00c00804 	movi	r3,32
 801c1ac:	156b883a 	add	r21,r2,r21
 801c1b0:	1d69c83a 	sub	r20,r3,r21
 801c1b4:	a000631e 	bne	r20,zero,801c344 <__umoddi3+0x2ec>
 801c1b8:	3c400136 	bltu	r7,r17,801c1c0 <__umoddi3+0x168>
 801c1bc:	81810436 	bltu	r16,r6,801c5d0 <__umoddi3+0x578>
 801c1c0:	8185c83a 	sub	r2,r16,r6
 801c1c4:	89e3c83a 	sub	r17,r17,r7
 801c1c8:	8087803a 	cmpltu	r3,r16,r2
 801c1cc:	88efc83a 	sub	r23,r17,r3
 801c1d0:	b807883a 	mov	r3,r23
 801c1d4:	00003f06 	br	801c2d4 <__umoddi3+0x27c>
 801c1d8:	3000041e 	bne	r6,zero,801c1ec <__umoddi3+0x194>
 801c1dc:	01000044 	movi	r4,1
 801c1e0:	000b883a 	mov	r5,zero
 801c1e4:	800ca000 	call	800ca00 <__udivsi3>
 801c1e8:	1027883a 	mov	r19,r2
 801c1ec:	00bfffd4 	movui	r2,65535
 801c1f0:	14c04f2e 	bgeu	r2,r19,801c330 <__umoddi3+0x2d8>
 801c1f4:	00804034 	movhi	r2,256
 801c1f8:	10bfffc4 	addi	r2,r2,-1
 801c1fc:	14c0e42e 	bgeu	r2,r19,801c590 <__umoddi3+0x538>
 801c200:	00800604 	movi	r2,24
 801c204:	1007883a 	mov	r3,r2
 801c208:	9884d83a 	srl	r2,r19,r2
 801c20c:	010205b4 	movhi	r4,2070
 801c210:	21177904 	addi	r4,r4,24036
 801c214:	2085883a 	add	r2,r4,r2
 801c218:	11000003 	ldbu	r4,0(r2)
 801c21c:	00800804 	movi	r2,32
 801c220:	20c7883a 	add	r3,r4,r3
 801c224:	10c5c83a 	sub	r2,r2,r3
 801c228:	10009a1e 	bne	r2,zero,801c494 <__umoddi3+0x43c>
 801c22c:	982cd43a 	srli	r22,r19,16
 801c230:	8ce3c83a 	sub	r17,r17,r19
 801c234:	9c3fffcc 	andi	r16,r19,65535
 801c238:	0025883a 	mov	r18,zero
 801c23c:	8809883a 	mov	r4,r17
 801c240:	b00b883a 	mov	r5,r22
 801c244:	800ca080 	call	800ca08 <__umodsi3>
 801c248:	8809883a 	mov	r4,r17
 801c24c:	b00b883a 	mov	r5,r22
 801c250:	102b883a 	mov	r21,r2
 801c254:	800ca000 	call	800ca00 <__udivsi3>
 801c258:	a806943a 	slli	r3,r21,16
 801c25c:	a008d43a 	srli	r4,r20,16
 801c260:	1405383a 	mul	r2,r2,r16
 801c264:	190cb03a 	or	r6,r3,r4
 801c268:	3080032e 	bgeu	r6,r2,801c278 <__umoddi3+0x220>
 801c26c:	34cd883a 	add	r6,r6,r19
 801c270:	34c00136 	bltu	r6,r19,801c278 <__umoddi3+0x220>
 801c274:	3080d436 	bltu	r6,r2,801c5c8 <__umoddi3+0x570>
 801c278:	30abc83a 	sub	r21,r6,r2
 801c27c:	a809883a 	mov	r4,r21
 801c280:	b00b883a 	mov	r5,r22
 801c284:	800ca080 	call	800ca08 <__umodsi3>
 801c288:	1023883a 	mov	r17,r2
 801c28c:	a809883a 	mov	r4,r21
 801c290:	b00b883a 	mov	r5,r22
 801c294:	800ca000 	call	800ca00 <__udivsi3>
 801c298:	8822943a 	slli	r17,r17,16
 801c29c:	1405383a 	mul	r2,r2,r16
 801c2a0:	a13fffcc 	andi	r4,r20,65535
 801c2a4:	8906b03a 	or	r3,r17,r4
 801c2a8:	1880042e 	bgeu	r3,r2,801c2bc <__umoddi3+0x264>
 801c2ac:	1cc7883a 	add	r3,r3,r19
 801c2b0:	1cc00236 	bltu	r3,r19,801c2bc <__umoddi3+0x264>
 801c2b4:	1880012e 	bgeu	r3,r2,801c2bc <__umoddi3+0x264>
 801c2b8:	1cc7883a 	add	r3,r3,r19
 801c2bc:	1887c83a 	sub	r3,r3,r2
 801c2c0:	1c84d83a 	srl	r2,r3,r18
 801c2c4:	0007883a 	mov	r3,zero
 801c2c8:	00000206 	br	801c2d4 <__umoddi3+0x27c>
 801c2cc:	2005883a 	mov	r2,r4
 801c2d0:	2807883a 	mov	r3,r5
 801c2d4:	dfc00b17 	ldw	ra,44(sp)
 801c2d8:	df000a17 	ldw	fp,40(sp)
 801c2dc:	ddc00917 	ldw	r23,36(sp)
 801c2e0:	dd800817 	ldw	r22,32(sp)
 801c2e4:	dd400717 	ldw	r21,28(sp)
 801c2e8:	dd000617 	ldw	r20,24(sp)
 801c2ec:	dcc00517 	ldw	r19,20(sp)
 801c2f0:	dc800417 	ldw	r18,16(sp)
 801c2f4:	dc400317 	ldw	r17,12(sp)
 801c2f8:	dc000217 	ldw	r16,8(sp)
 801c2fc:	dec00c04 	addi	sp,sp,48
 801c300:	f800283a 	ret
 801c304:	00803fc4 	movi	r2,255
 801c308:	11c0952e 	bgeu	r2,r7,801c560 <__umoddi3+0x508>
 801c30c:	01400204 	movi	r5,8
 801c310:	282b883a 	mov	r21,r5
 801c314:	003f9f06 	br	801c194 <__alt_data_end+0xf801c194>
 801c318:	00804034 	movhi	r2,256
 801c31c:	10bfffc4 	addi	r2,r2,-1
 801c320:	1180952e 	bgeu	r2,r6,801c578 <__umoddi3+0x520>
 801c324:	01400604 	movi	r5,24
 801c328:	2805883a 	mov	r2,r5
 801c32c:	003f6206 	br	801c0b8 <__alt_data_end+0xf801c0b8>
 801c330:	00803fc4 	movi	r2,255
 801c334:	14c0932e 	bgeu	r2,r19,801c584 <__umoddi3+0x52c>
 801c338:	00800204 	movi	r2,8
 801c33c:	1007883a 	mov	r3,r2
 801c340:	003fb106 	br	801c208 <__alt_data_end+0xf801c208>
 801c344:	3548d83a 	srl	r4,r6,r21
 801c348:	3d0e983a 	sll	r7,r7,r20
 801c34c:	8d10983a 	sll	r8,r17,r20
 801c350:	8d6cd83a 	srl	r22,r17,r21
 801c354:	3922b03a 	or	r17,r7,r4
 801c358:	882ed43a 	srli	r23,r17,16
 801c35c:	8564d83a 	srl	r18,r16,r21
 801c360:	b009883a 	mov	r4,r22
 801c364:	b80b883a 	mov	r5,r23
 801c368:	44a4b03a 	or	r18,r8,r18
 801c36c:	3526983a 	sll	r19,r6,r20
 801c370:	800ca080 	call	800ca08 <__umodsi3>
 801c374:	b009883a 	mov	r4,r22
 801c378:	b80b883a 	mov	r5,r23
 801c37c:	1039883a 	mov	fp,r2
 801c380:	800ca000 	call	800ca00 <__udivsi3>
 801c384:	102d883a 	mov	r22,r2
 801c388:	8a3fffcc 	andi	r8,r17,65535
 801c38c:	e004943a 	slli	r2,fp,16
 801c390:	900cd43a 	srli	r6,r18,16
 801c394:	b239383a 	mul	fp,r22,r8
 801c398:	8520983a 	sll	r16,r16,r20
 801c39c:	118ab03a 	or	r5,r2,r6
 801c3a0:	2f00042e 	bgeu	r5,fp,801c3b4 <__umoddi3+0x35c>
 801c3a4:	2c4b883a 	add	r5,r5,r17
 801c3a8:	b0bfffc4 	addi	r2,r22,-1
 801c3ac:	2c40822e 	bgeu	r5,r17,801c5b8 <__umoddi3+0x560>
 801c3b0:	102d883a 	mov	r22,r2
 801c3b4:	2f39c83a 	sub	fp,r5,fp
 801c3b8:	e009883a 	mov	r4,fp
 801c3bc:	b80b883a 	mov	r5,r23
 801c3c0:	da000115 	stw	r8,4(sp)
 801c3c4:	800ca080 	call	800ca08 <__umodsi3>
 801c3c8:	e009883a 	mov	r4,fp
 801c3cc:	b80b883a 	mov	r5,r23
 801c3d0:	d8800015 	stw	r2,0(sp)
 801c3d4:	800ca000 	call	800ca00 <__udivsi3>
 801c3d8:	d9800017 	ldw	r6,0(sp)
 801c3dc:	da000117 	ldw	r8,4(sp)
 801c3e0:	94bfffcc 	andi	r18,r18,65535
 801c3e4:	300c943a 	slli	r6,r6,16
 801c3e8:	1209383a 	mul	r4,r2,r8
 801c3ec:	3490b03a 	or	r8,r6,r18
 801c3f0:	4100042e 	bgeu	r8,r4,801c404 <__umoddi3+0x3ac>
 801c3f4:	4451883a 	add	r8,r8,r17
 801c3f8:	10ffffc4 	addi	r3,r2,-1
 801c3fc:	44406a2e 	bgeu	r8,r17,801c5a8 <__umoddi3+0x550>
 801c400:	1805883a 	mov	r2,r3
 801c404:	b012943a 	slli	r9,r22,16
 801c408:	9abfffcc 	andi	r10,r19,65535
 801c40c:	980ed43a 	srli	r7,r19,16
 801c410:	124ab03a 	or	r5,r2,r9
 801c414:	2a7fffcc 	andi	r9,r5,65535
 801c418:	280ad43a 	srli	r5,r5,16
 801c41c:	4a8d383a 	mul	r6,r9,r10
 801c420:	49d3383a 	mul	r9,r9,r7
 801c424:	2a95383a 	mul	r10,r5,r10
 801c428:	3004d43a 	srli	r2,r6,16
 801c42c:	4111c83a 	sub	r8,r8,r4
 801c430:	5253883a 	add	r9,r10,r9
 801c434:	4893883a 	add	r9,r9,r2
 801c438:	29cb383a 	mul	r5,r5,r7
 801c43c:	4a80022e 	bgeu	r9,r10,801c448 <__umoddi3+0x3f0>
 801c440:	00800074 	movhi	r2,1
 801c444:	288b883a 	add	r5,r5,r2
 801c448:	4808d43a 	srli	r4,r9,16
 801c44c:	4812943a 	slli	r9,r9,16
 801c450:	31bfffcc 	andi	r6,r6,65535
 801c454:	290b883a 	add	r5,r5,r4
 801c458:	498d883a 	add	r6,r9,r6
 801c45c:	41403a36 	bltu	r8,r5,801c548 <__umoddi3+0x4f0>
 801c460:	41405d26 	beq	r8,r5,801c5d8 <__umoddi3+0x580>
 801c464:	4149c83a 	sub	r4,r8,r5
 801c468:	300f883a 	mov	r7,r6
 801c46c:	81cfc83a 	sub	r7,r16,r7
 801c470:	81c7803a 	cmpltu	r3,r16,r7
 801c474:	20c7c83a 	sub	r3,r4,r3
 801c478:	1d44983a 	sll	r2,r3,r21
 801c47c:	3d0ed83a 	srl	r7,r7,r20
 801c480:	1d06d83a 	srl	r3,r3,r20
 801c484:	11c4b03a 	or	r2,r2,r7
 801c488:	003f9206 	br	801c2d4 <__alt_data_end+0xf801c2d4>
 801c48c:	0025883a 	mov	r18,zero
 801c490:	003f1806 	br	801c0f4 <__alt_data_end+0xf801c0f4>
 801c494:	98a6983a 	sll	r19,r19,r2
 801c498:	88e8d83a 	srl	r20,r17,r3
 801c49c:	80c6d83a 	srl	r3,r16,r3
 801c4a0:	982cd43a 	srli	r22,r19,16
 801c4a4:	88a2983a 	sll	r17,r17,r2
 801c4a8:	a009883a 	mov	r4,r20
 801c4ac:	b00b883a 	mov	r5,r22
 801c4b0:	88eab03a 	or	r21,r17,r3
 801c4b4:	1025883a 	mov	r18,r2
 801c4b8:	800ca080 	call	800ca08 <__umodsi3>
 801c4bc:	a009883a 	mov	r4,r20
 801c4c0:	b00b883a 	mov	r5,r22
 801c4c4:	1023883a 	mov	r17,r2
 801c4c8:	800ca000 	call	800ca00 <__udivsi3>
 801c4cc:	9f3fffcc 	andi	fp,r19,65535
 801c4d0:	8822943a 	slli	r17,r17,16
 801c4d4:	a80ad43a 	srli	r5,r21,16
 801c4d8:	1705383a 	mul	r2,r2,fp
 801c4dc:	84a8983a 	sll	r20,r16,r18
 801c4e0:	8948b03a 	or	r4,r17,r5
 801c4e4:	2080042e 	bgeu	r4,r2,801c4f8 <__umoddi3+0x4a0>
 801c4e8:	24c9883a 	add	r4,r4,r19
 801c4ec:	24c00236 	bltu	r4,r19,801c4f8 <__umoddi3+0x4a0>
 801c4f0:	2080012e 	bgeu	r4,r2,801c4f8 <__umoddi3+0x4a0>
 801c4f4:	24c9883a 	add	r4,r4,r19
 801c4f8:	20afc83a 	sub	r23,r4,r2
 801c4fc:	b809883a 	mov	r4,r23
 801c500:	b00b883a 	mov	r5,r22
 801c504:	800ca080 	call	800ca08 <__umodsi3>
 801c508:	1023883a 	mov	r17,r2
 801c50c:	b809883a 	mov	r4,r23
 801c510:	b00b883a 	mov	r5,r22
 801c514:	800ca000 	call	800ca00 <__udivsi3>
 801c518:	8822943a 	slli	r17,r17,16
 801c51c:	1705383a 	mul	r2,r2,fp
 801c520:	a93fffcc 	andi	r4,r21,65535
 801c524:	8908b03a 	or	r4,r17,r4
 801c528:	2080042e 	bgeu	r4,r2,801c53c <__umoddi3+0x4e4>
 801c52c:	24c9883a 	add	r4,r4,r19
 801c530:	24c00236 	bltu	r4,r19,801c53c <__umoddi3+0x4e4>
 801c534:	2080012e 	bgeu	r4,r2,801c53c <__umoddi3+0x4e4>
 801c538:	24c9883a 	add	r4,r4,r19
 801c53c:	20a3c83a 	sub	r17,r4,r2
 801c540:	e021883a 	mov	r16,fp
 801c544:	003f3d06 	br	801c23c <__alt_data_end+0xf801c23c>
 801c548:	34cfc83a 	sub	r7,r6,r19
 801c54c:	2c4bc83a 	sub	r5,r5,r17
 801c550:	31cd803a 	cmpltu	r6,r6,r7
 801c554:	298dc83a 	sub	r6,r5,r6
 801c558:	4189c83a 	sub	r4,r8,r6
 801c55c:	003fc306 	br	801c46c <__alt_data_end+0xf801c46c>
 801c560:	000b883a 	mov	r5,zero
 801c564:	002b883a 	mov	r21,zero
 801c568:	003f0a06 	br	801c194 <__alt_data_end+0xf801c194>
 801c56c:	01400404 	movi	r5,16
 801c570:	282b883a 	mov	r21,r5
 801c574:	003f0706 	br	801c194 <__alt_data_end+0xf801c194>
 801c578:	01400404 	movi	r5,16
 801c57c:	2805883a 	mov	r2,r5
 801c580:	003ecd06 	br	801c0b8 <__alt_data_end+0xf801c0b8>
 801c584:	0005883a 	mov	r2,zero
 801c588:	0007883a 	mov	r3,zero
 801c58c:	003f1e06 	br	801c208 <__alt_data_end+0xf801c208>
 801c590:	00800404 	movi	r2,16
 801c594:	1007883a 	mov	r3,r2
 801c598:	003f1b06 	br	801c208 <__alt_data_end+0xf801c208>
 801c59c:	000b883a 	mov	r5,zero
 801c5a0:	0005883a 	mov	r2,zero
 801c5a4:	003ec406 	br	801c0b8 <__alt_data_end+0xf801c0b8>
 801c5a8:	413f952e 	bgeu	r8,r4,801c400 <__alt_data_end+0xf801c400>
 801c5ac:	10bfff84 	addi	r2,r2,-2
 801c5b0:	4451883a 	add	r8,r8,r17
 801c5b4:	003f9306 	br	801c404 <__alt_data_end+0xf801c404>
 801c5b8:	2f3f7d2e 	bgeu	r5,fp,801c3b0 <__alt_data_end+0xf801c3b0>
 801c5bc:	b5bfff84 	addi	r22,r22,-2
 801c5c0:	2c4b883a 	add	r5,r5,r17
 801c5c4:	003f7b06 	br	801c3b4 <__alt_data_end+0xf801c3b4>
 801c5c8:	34cd883a 	add	r6,r6,r19
 801c5cc:	003f2a06 	br	801c278 <__alt_data_end+0xf801c278>
 801c5d0:	8005883a 	mov	r2,r16
 801c5d4:	003efe06 	br	801c1d0 <__alt_data_end+0xf801c1d0>
 801c5d8:	81bfdb36 	bltu	r16,r6,801c548 <__alt_data_end+0xf801c548>
 801c5dc:	300f883a 	mov	r7,r6
 801c5e0:	0009883a 	mov	r4,zero
 801c5e4:	003fa106 	br	801c46c <__alt_data_end+0xf801c46c>

0801c5e8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801c5e8:	defffe04 	addi	sp,sp,-8
 801c5ec:	dfc00115 	stw	ra,4(sp)
 801c5f0:	df000015 	stw	fp,0(sp)
 801c5f4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801c5f8:	008205f4 	movhi	r2,2071
 801c5fc:	10a34e04 	addi	r2,r2,-29384
 801c600:	10800017 	ldw	r2,0(r2)
 801c604:	10000526 	beq	r2,zero,801c61c <alt_get_errno+0x34>
 801c608:	008205f4 	movhi	r2,2071
 801c60c:	10a34e04 	addi	r2,r2,-29384
 801c610:	10800017 	ldw	r2,0(r2)
 801c614:	103ee83a 	callr	r2
 801c618:	00000206 	br	801c624 <alt_get_errno+0x3c>
 801c61c:	008205f4 	movhi	r2,2071
 801c620:	10ae6904 	addi	r2,r2,-18012
}
 801c624:	e037883a 	mov	sp,fp
 801c628:	dfc00117 	ldw	ra,4(sp)
 801c62c:	df000017 	ldw	fp,0(sp)
 801c630:	dec00204 	addi	sp,sp,8
 801c634:	f800283a 	ret

0801c638 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 801c638:	defffb04 	addi	sp,sp,-20
 801c63c:	dfc00415 	stw	ra,16(sp)
 801c640:	df000315 	stw	fp,12(sp)
 801c644:	df000304 	addi	fp,sp,12
 801c648:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 801c64c:	e0bfff17 	ldw	r2,-4(fp)
 801c650:	10000616 	blt	r2,zero,801c66c <close+0x34>
 801c654:	e0bfff17 	ldw	r2,-4(fp)
 801c658:	10c00324 	muli	r3,r2,12
 801c65c:	008205b4 	movhi	r2,2070
 801c660:	109ebe04 	addi	r2,r2,31480
 801c664:	1885883a 	add	r2,r3,r2
 801c668:	00000106 	br	801c670 <close+0x38>
 801c66c:	0005883a 	mov	r2,zero
 801c670:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 801c674:	e0bffd17 	ldw	r2,-12(fp)
 801c678:	10001926 	beq	r2,zero,801c6e0 <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 801c67c:	e0bffd17 	ldw	r2,-12(fp)
 801c680:	10800017 	ldw	r2,0(r2)
 801c684:	10800417 	ldw	r2,16(r2)
 801c688:	10000626 	beq	r2,zero,801c6a4 <close+0x6c>
 801c68c:	e0bffd17 	ldw	r2,-12(fp)
 801c690:	10800017 	ldw	r2,0(r2)
 801c694:	10800417 	ldw	r2,16(r2)
 801c698:	e13ffd17 	ldw	r4,-12(fp)
 801c69c:	103ee83a 	callr	r2
 801c6a0:	00000106 	br	801c6a8 <close+0x70>
 801c6a4:	0005883a 	mov	r2,zero
 801c6a8:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 801c6ac:	e13fff17 	ldw	r4,-4(fp)
 801c6b0:	801d0140 	call	801d014 <alt_release_fd>
    if (rval < 0)
 801c6b4:	e0bffe17 	ldw	r2,-8(fp)
 801c6b8:	1000070e 	bge	r2,zero,801c6d8 <close+0xa0>
    {
      ALT_ERRNO = -rval;
 801c6bc:	801c5e80 	call	801c5e8 <alt_get_errno>
 801c6c0:	1007883a 	mov	r3,r2
 801c6c4:	e0bffe17 	ldw	r2,-8(fp)
 801c6c8:	0085c83a 	sub	r2,zero,r2
 801c6cc:	18800015 	stw	r2,0(r3)
      return -1;
 801c6d0:	00bfffc4 	movi	r2,-1
 801c6d4:	00000706 	br	801c6f4 <close+0xbc>
    }
    return 0;
 801c6d8:	0005883a 	mov	r2,zero
 801c6dc:	00000506 	br	801c6f4 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801c6e0:	801c5e80 	call	801c5e8 <alt_get_errno>
 801c6e4:	1007883a 	mov	r3,r2
 801c6e8:	00801444 	movi	r2,81
 801c6ec:	18800015 	stw	r2,0(r3)
    return -1;
 801c6f0:	00bfffc4 	movi	r2,-1
  }
}
 801c6f4:	e037883a 	mov	sp,fp
 801c6f8:	dfc00117 	ldw	ra,4(sp)
 801c6fc:	df000017 	ldw	fp,0(sp)
 801c700:	dec00204 	addi	sp,sp,8
 801c704:	f800283a 	ret

0801c708 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 801c708:	defffc04 	addi	sp,sp,-16
 801c70c:	df000315 	stw	fp,12(sp)
 801c710:	df000304 	addi	fp,sp,12
 801c714:	e13ffd15 	stw	r4,-12(fp)
 801c718:	e17ffe15 	stw	r5,-8(fp)
 801c71c:	e1bfff15 	stw	r6,-4(fp)
  return len;
 801c720:	e0bfff17 	ldw	r2,-4(fp)
}
 801c724:	e037883a 	mov	sp,fp
 801c728:	df000017 	ldw	fp,0(sp)
 801c72c:	dec00104 	addi	sp,sp,4
 801c730:	f800283a 	ret

0801c734 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801c734:	defffe04 	addi	sp,sp,-8
 801c738:	dfc00115 	stw	ra,4(sp)
 801c73c:	df000015 	stw	fp,0(sp)
 801c740:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801c744:	008205f4 	movhi	r2,2071
 801c748:	10a34e04 	addi	r2,r2,-29384
 801c74c:	10800017 	ldw	r2,0(r2)
 801c750:	10000526 	beq	r2,zero,801c768 <alt_get_errno+0x34>
 801c754:	008205f4 	movhi	r2,2071
 801c758:	10a34e04 	addi	r2,r2,-29384
 801c75c:	10800017 	ldw	r2,0(r2)
 801c760:	103ee83a 	callr	r2
 801c764:	00000206 	br	801c770 <alt_get_errno+0x3c>
 801c768:	008205f4 	movhi	r2,2071
 801c76c:	10ae6904 	addi	r2,r2,-18012
}
 801c770:	e037883a 	mov	sp,fp
 801c774:	dfc00117 	ldw	ra,4(sp)
 801c778:	df000017 	ldw	fp,0(sp)
 801c77c:	dec00204 	addi	sp,sp,8
 801c780:	f800283a 	ret

0801c784 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 801c784:	defffb04 	addi	sp,sp,-20
 801c788:	dfc00415 	stw	ra,16(sp)
 801c78c:	df000315 	stw	fp,12(sp)
 801c790:	df000304 	addi	fp,sp,12
 801c794:	e13ffe15 	stw	r4,-8(fp)
 801c798:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801c79c:	e0bffe17 	ldw	r2,-8(fp)
 801c7a0:	10000616 	blt	r2,zero,801c7bc <fstat+0x38>
 801c7a4:	e0bffe17 	ldw	r2,-8(fp)
 801c7a8:	10c00324 	muli	r3,r2,12
 801c7ac:	008205b4 	movhi	r2,2070
 801c7b0:	109ebe04 	addi	r2,r2,31480
 801c7b4:	1885883a 	add	r2,r3,r2
 801c7b8:	00000106 	br	801c7c0 <fstat+0x3c>
 801c7bc:	0005883a 	mov	r2,zero
 801c7c0:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 801c7c4:	e0bffd17 	ldw	r2,-12(fp)
 801c7c8:	10001026 	beq	r2,zero,801c80c <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 801c7cc:	e0bffd17 	ldw	r2,-12(fp)
 801c7d0:	10800017 	ldw	r2,0(r2)
 801c7d4:	10800817 	ldw	r2,32(r2)
 801c7d8:	10000726 	beq	r2,zero,801c7f8 <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 801c7dc:	e0bffd17 	ldw	r2,-12(fp)
 801c7e0:	10800017 	ldw	r2,0(r2)
 801c7e4:	10800817 	ldw	r2,32(r2)
 801c7e8:	e13ffd17 	ldw	r4,-12(fp)
 801c7ec:	e17fff17 	ldw	r5,-4(fp)
 801c7f0:	103ee83a 	callr	r2
 801c7f4:	00000a06 	br	801c820 <fstat+0x9c>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 801c7f8:	e0bfff17 	ldw	r2,-4(fp)
 801c7fc:	00c80004 	movi	r3,8192
 801c800:	10c00115 	stw	r3,4(r2)
      return 0;
 801c804:	0005883a 	mov	r2,zero
 801c808:	00000506 	br	801c820 <fstat+0x9c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801c80c:	801c7340 	call	801c734 <alt_get_errno>
 801c810:	1007883a 	mov	r3,r2
 801c814:	00801444 	movi	r2,81
 801c818:	18800015 	stw	r2,0(r3)
    return -1;
 801c81c:	00bfffc4 	movi	r2,-1
  }
}
 801c820:	e037883a 	mov	sp,fp
 801c824:	dfc00117 	ldw	ra,4(sp)
 801c828:	df000017 	ldw	fp,0(sp)
 801c82c:	dec00204 	addi	sp,sp,8
 801c830:	f800283a 	ret

0801c834 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801c834:	defff904 	addi	sp,sp,-28
 801c838:	dfc00615 	stw	ra,24(sp)
 801c83c:	df000515 	stw	fp,20(sp)
 801c840:	df000504 	addi	fp,sp,20
 801c844:	e13ffc15 	stw	r4,-16(fp)
 801c848:	e17ffd15 	stw	r5,-12(fp)
 801c84c:	e1bffe15 	stw	r6,-8(fp)
 801c850:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 801c854:	e0800217 	ldw	r2,8(fp)
 801c858:	d8800015 	stw	r2,0(sp)
 801c85c:	e13ffc17 	ldw	r4,-16(fp)
 801c860:	e17ffd17 	ldw	r5,-12(fp)
 801c864:	e1bffe17 	ldw	r6,-8(fp)
 801c868:	e1ffff17 	ldw	r7,-4(fp)
 801c86c:	801ca140 	call	801ca14 <alt_iic_isr_register>
}  
 801c870:	e037883a 	mov	sp,fp
 801c874:	dfc00117 	ldw	ra,4(sp)
 801c878:	df000017 	ldw	fp,0(sp)
 801c87c:	dec00204 	addi	sp,sp,8
 801c880:	f800283a 	ret

0801c884 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 801c884:	defff904 	addi	sp,sp,-28
 801c888:	df000615 	stw	fp,24(sp)
 801c88c:	df000604 	addi	fp,sp,24
 801c890:	e13ffe15 	stw	r4,-8(fp)
 801c894:	e17fff15 	stw	r5,-4(fp)
 801c898:	e0bfff17 	ldw	r2,-4(fp)
 801c89c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801c8a0:	0005303a 	rdctl	r2,status
 801c8a4:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c8a8:	e0fffb17 	ldw	r3,-20(fp)
 801c8ac:	00bfff84 	movi	r2,-2
 801c8b0:	1884703a 	and	r2,r3,r2
 801c8b4:	1001703a 	wrctl	status,r2
  
  return context;
 801c8b8:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801c8bc:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 801c8c0:	e0bffa17 	ldw	r2,-24(fp)
 801c8c4:	00c00044 	movi	r3,1
 801c8c8:	1884983a 	sll	r2,r3,r2
 801c8cc:	1007883a 	mov	r3,r2
 801c8d0:	008205f4 	movhi	r2,2071
 801c8d4:	10ae6d04 	addi	r2,r2,-17996
 801c8d8:	10800017 	ldw	r2,0(r2)
 801c8dc:	1886b03a 	or	r3,r3,r2
 801c8e0:	008205f4 	movhi	r2,2071
 801c8e4:	10ae6d04 	addi	r2,r2,-17996
 801c8e8:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801c8ec:	008205f4 	movhi	r2,2071
 801c8f0:	10ae6d04 	addi	r2,r2,-17996
 801c8f4:	10800017 	ldw	r2,0(r2)
 801c8f8:	100170fa 	wrctl	ienable,r2
 801c8fc:	e0bffc17 	ldw	r2,-16(fp)
 801c900:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801c904:	e0bffd17 	ldw	r2,-12(fp)
 801c908:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801c90c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 801c910:	0001883a 	nop
}
 801c914:	e037883a 	mov	sp,fp
 801c918:	df000017 	ldw	fp,0(sp)
 801c91c:	dec00104 	addi	sp,sp,4
 801c920:	f800283a 	ret

0801c924 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 801c924:	defff904 	addi	sp,sp,-28
 801c928:	df000615 	stw	fp,24(sp)
 801c92c:	df000604 	addi	fp,sp,24
 801c930:	e13ffe15 	stw	r4,-8(fp)
 801c934:	e17fff15 	stw	r5,-4(fp)
 801c938:	e0bfff17 	ldw	r2,-4(fp)
 801c93c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801c940:	0005303a 	rdctl	r2,status
 801c944:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801c948:	e0fffb17 	ldw	r3,-20(fp)
 801c94c:	00bfff84 	movi	r2,-2
 801c950:	1884703a 	and	r2,r3,r2
 801c954:	1001703a 	wrctl	status,r2
  
  return context;
 801c958:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 801c95c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 801c960:	e0bffa17 	ldw	r2,-24(fp)
 801c964:	00c00044 	movi	r3,1
 801c968:	1884983a 	sll	r2,r3,r2
 801c96c:	0084303a 	nor	r2,zero,r2
 801c970:	1007883a 	mov	r3,r2
 801c974:	008205f4 	movhi	r2,2071
 801c978:	10ae6d04 	addi	r2,r2,-17996
 801c97c:	10800017 	ldw	r2,0(r2)
 801c980:	1886703a 	and	r3,r3,r2
 801c984:	008205f4 	movhi	r2,2071
 801c988:	10ae6d04 	addi	r2,r2,-17996
 801c98c:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 801c990:	008205f4 	movhi	r2,2071
 801c994:	10ae6d04 	addi	r2,r2,-17996
 801c998:	10800017 	ldw	r2,0(r2)
 801c99c:	100170fa 	wrctl	ienable,r2
 801c9a0:	e0bffc17 	ldw	r2,-16(fp)
 801c9a4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801c9a8:	e0bffd17 	ldw	r2,-12(fp)
 801c9ac:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 801c9b0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 801c9b4:	0001883a 	nop
}
 801c9b8:	e037883a 	mov	sp,fp
 801c9bc:	df000017 	ldw	fp,0(sp)
 801c9c0:	dec00104 	addi	sp,sp,4
 801c9c4:	f800283a 	ret

0801c9c8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 801c9c8:	defffc04 	addi	sp,sp,-16
 801c9cc:	df000315 	stw	fp,12(sp)
 801c9d0:	df000304 	addi	fp,sp,12
 801c9d4:	e13ffe15 	stw	r4,-8(fp)
 801c9d8:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 801c9dc:	000530fa 	rdctl	r2,ienable
 801c9e0:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 801c9e4:	e0bfff17 	ldw	r2,-4(fp)
 801c9e8:	00c00044 	movi	r3,1
 801c9ec:	1884983a 	sll	r2,r3,r2
 801c9f0:	1007883a 	mov	r3,r2
 801c9f4:	e0bffd17 	ldw	r2,-12(fp)
 801c9f8:	1884703a 	and	r2,r3,r2
 801c9fc:	1004c03a 	cmpne	r2,r2,zero
 801ca00:	10803fcc 	andi	r2,r2,255
}
 801ca04:	e037883a 	mov	sp,fp
 801ca08:	df000017 	ldw	fp,0(sp)
 801ca0c:	dec00104 	addi	sp,sp,4
 801ca10:	f800283a 	ret

0801ca14 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 801ca14:	defff504 	addi	sp,sp,-44
 801ca18:	dfc00a15 	stw	ra,40(sp)
 801ca1c:	df000915 	stw	fp,36(sp)
 801ca20:	df000904 	addi	fp,sp,36
 801ca24:	e13ffc15 	stw	r4,-16(fp)
 801ca28:	e17ffd15 	stw	r5,-12(fp)
 801ca2c:	e1bffe15 	stw	r6,-8(fp)
 801ca30:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 801ca34:	00bffa84 	movi	r2,-22
 801ca38:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 801ca3c:	e0bffd17 	ldw	r2,-12(fp)
 801ca40:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 801ca44:	e0bff817 	ldw	r2,-32(fp)
 801ca48:	10800808 	cmpgei	r2,r2,32
 801ca4c:	1000271e 	bne	r2,zero,801caec <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801ca50:	0005303a 	rdctl	r2,status
 801ca54:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ca58:	e0fffa17 	ldw	r3,-24(fp)
 801ca5c:	00bfff84 	movi	r2,-2
 801ca60:	1884703a 	and	r2,r3,r2
 801ca64:	1001703a 	wrctl	status,r2
  
  return context;
 801ca68:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 801ca6c:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 801ca70:	008205f4 	movhi	r2,2071
 801ca74:	10af9004 	addi	r2,r2,-16832
 801ca78:	e0fff817 	ldw	r3,-32(fp)
 801ca7c:	180690fa 	slli	r3,r3,3
 801ca80:	10c5883a 	add	r2,r2,r3
 801ca84:	e0fffe17 	ldw	r3,-8(fp)
 801ca88:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 801ca8c:	008205f4 	movhi	r2,2071
 801ca90:	10af9004 	addi	r2,r2,-16832
 801ca94:	e0fff817 	ldw	r3,-32(fp)
 801ca98:	180690fa 	slli	r3,r3,3
 801ca9c:	18c00104 	addi	r3,r3,4
 801caa0:	10c5883a 	add	r2,r2,r3
 801caa4:	e0ffff17 	ldw	r3,-4(fp)
 801caa8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 801caac:	e0bffe17 	ldw	r2,-8(fp)
 801cab0:	10000526 	beq	r2,zero,801cac8 <alt_iic_isr_register+0xb4>
 801cab4:	e0bff817 	ldw	r2,-32(fp)
 801cab8:	e13ffc17 	ldw	r4,-16(fp)
 801cabc:	100b883a 	mov	r5,r2
 801cac0:	801c8840 	call	801c884 <alt_ic_irq_enable>
 801cac4:	00000406 	br	801cad8 <alt_iic_isr_register+0xc4>
 801cac8:	e0bff817 	ldw	r2,-32(fp)
 801cacc:	e13ffc17 	ldw	r4,-16(fp)
 801cad0:	100b883a 	mov	r5,r2
 801cad4:	801c9240 	call	801c924 <alt_ic_irq_disable>
 801cad8:	e0bff715 	stw	r2,-36(fp)
 801cadc:	e0bff917 	ldw	r2,-28(fp)
 801cae0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801cae4:	e0bffb17 	ldw	r2,-20(fp)
 801cae8:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 801caec:	e0bff717 	ldw	r2,-36(fp)
}
 801caf0:	e037883a 	mov	sp,fp
 801caf4:	dfc00117 	ldw	ra,4(sp)
 801caf8:	df000017 	ldw	fp,0(sp)
 801cafc:	dec00204 	addi	sp,sp,8
 801cb00:	f800283a 	ret

0801cb04 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801cb04:	defffe04 	addi	sp,sp,-8
 801cb08:	dfc00115 	stw	ra,4(sp)
 801cb0c:	df000015 	stw	fp,0(sp)
 801cb10:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801cb14:	008205f4 	movhi	r2,2071
 801cb18:	10a34e04 	addi	r2,r2,-29384
 801cb1c:	10800017 	ldw	r2,0(r2)
 801cb20:	10000526 	beq	r2,zero,801cb38 <alt_get_errno+0x34>
 801cb24:	008205f4 	movhi	r2,2071
 801cb28:	10a34e04 	addi	r2,r2,-29384
 801cb2c:	10800017 	ldw	r2,0(r2)
 801cb30:	103ee83a 	callr	r2
 801cb34:	00000206 	br	801cb40 <alt_get_errno+0x3c>
 801cb38:	008205f4 	movhi	r2,2071
 801cb3c:	10ae6904 	addi	r2,r2,-18012
}
 801cb40:	e037883a 	mov	sp,fp
 801cb44:	dfc00117 	ldw	ra,4(sp)
 801cb48:	df000017 	ldw	fp,0(sp)
 801cb4c:	dec00204 	addi	sp,sp,8
 801cb50:	f800283a 	ret

0801cb54 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 801cb54:	deffed04 	addi	sp,sp,-76
 801cb58:	dfc01215 	stw	ra,72(sp)
 801cb5c:	df001115 	stw	fp,68(sp)
 801cb60:	df001104 	addi	fp,sp,68
 801cb64:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801cb68:	e0bfff17 	ldw	r2,-4(fp)
 801cb6c:	10000616 	blt	r2,zero,801cb88 <isatty+0x34>
 801cb70:	e0bfff17 	ldw	r2,-4(fp)
 801cb74:	10c00324 	muli	r3,r2,12
 801cb78:	008205b4 	movhi	r2,2070
 801cb7c:	109ebe04 	addi	r2,r2,31480
 801cb80:	1885883a 	add	r2,r3,r2
 801cb84:	00000106 	br	801cb8c <isatty+0x38>
 801cb88:	0005883a 	mov	r2,zero
 801cb8c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 801cb90:	e0bfef17 	ldw	r2,-68(fp)
 801cb94:	10000e26 	beq	r2,zero,801cbd0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 801cb98:	e0bfef17 	ldw	r2,-68(fp)
 801cb9c:	10800017 	ldw	r2,0(r2)
 801cba0:	10800817 	ldw	r2,32(r2)
 801cba4:	1000021e 	bne	r2,zero,801cbb0 <isatty+0x5c>
    {
      return 1;
 801cba8:	00800044 	movi	r2,1
 801cbac:	00000d06 	br	801cbe4 <isatty+0x90>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 801cbb0:	e0bff004 	addi	r2,fp,-64
 801cbb4:	e13fff17 	ldw	r4,-4(fp)
 801cbb8:	100b883a 	mov	r5,r2
 801cbbc:	801c7840 	call	801c784 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 801cbc0:	e0bff117 	ldw	r2,-60(fp)
 801cbc4:	10880020 	cmpeqi	r2,r2,8192
 801cbc8:	10803fcc 	andi	r2,r2,255
 801cbcc:	00000506 	br	801cbe4 <isatty+0x90>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 801cbd0:	801cb040 	call	801cb04 <alt_get_errno>
 801cbd4:	1007883a 	mov	r3,r2
 801cbd8:	00801444 	movi	r2,81
 801cbdc:	18800015 	stw	r2,0(r3)
    return 0;
 801cbe0:	0005883a 	mov	r2,zero
  }
}
 801cbe4:	e037883a 	mov	sp,fp
 801cbe8:	dfc00117 	ldw	ra,4(sp)
 801cbec:	df000017 	ldw	fp,0(sp)
 801cbf0:	dec00204 	addi	sp,sp,8
 801cbf4:	f800283a 	ret

0801cbf8 <alt_load_section>:
 801cbf8:	defffc04 	addi	sp,sp,-16
 801cbfc:	df000315 	stw	fp,12(sp)
 801cc00:	df000304 	addi	fp,sp,12
 801cc04:	e13ffd15 	stw	r4,-12(fp)
 801cc08:	e17ffe15 	stw	r5,-8(fp)
 801cc0c:	e1bfff15 	stw	r6,-4(fp)
 801cc10:	e0fffe17 	ldw	r3,-8(fp)
 801cc14:	e0bffd17 	ldw	r2,-12(fp)
 801cc18:	18800c26 	beq	r3,r2,801cc4c <alt_load_section+0x54>
 801cc1c:	00000806 	br	801cc40 <alt_load_section+0x48>
 801cc20:	e0bffe17 	ldw	r2,-8(fp)
 801cc24:	10c00104 	addi	r3,r2,4
 801cc28:	e0fffe15 	stw	r3,-8(fp)
 801cc2c:	e0fffd17 	ldw	r3,-12(fp)
 801cc30:	19000104 	addi	r4,r3,4
 801cc34:	e13ffd15 	stw	r4,-12(fp)
 801cc38:	18c00017 	ldw	r3,0(r3)
 801cc3c:	10c00015 	stw	r3,0(r2)
 801cc40:	e0fffe17 	ldw	r3,-8(fp)
 801cc44:	e0bfff17 	ldw	r2,-4(fp)
 801cc48:	18bff51e 	bne	r3,r2,801cc20 <__alt_data_end+0xf801cc20>
 801cc4c:	0001883a 	nop
 801cc50:	e037883a 	mov	sp,fp
 801cc54:	df000017 	ldw	fp,0(sp)
 801cc58:	dec00104 	addi	sp,sp,4
 801cc5c:	f800283a 	ret

0801cc60 <alt_load>:
 801cc60:	defffe04 	addi	sp,sp,-8
 801cc64:	dfc00115 	stw	ra,4(sp)
 801cc68:	df000015 	stw	fp,0(sp)
 801cc6c:	d839883a 	mov	fp,sp
 801cc70:	018205f4 	movhi	r6,2071
 801cc74:	31a35504 	addi	r6,r6,-29356
 801cc78:	014205b4 	movhi	r5,2070
 801cc7c:	29584b04 	addi	r5,r5,24876
 801cc80:	010205f4 	movhi	r4,2071
 801cc84:	21235504 	addi	r4,r4,-29356
 801cc88:	801cbf80 	call	801cbf8 <alt_load_section>
 801cc8c:	01820034 	movhi	r6,2048
 801cc90:	31809004 	addi	r6,r6,576
 801cc94:	01420034 	movhi	r5,2048
 801cc98:	29400804 	addi	r5,r5,32
 801cc9c:	01020034 	movhi	r4,2048
 801cca0:	21000804 	addi	r4,r4,32
 801cca4:	801cbf80 	call	801cbf8 <alt_load_section>
 801cca8:	018205b4 	movhi	r6,2070
 801ccac:	31984b04 	addi	r6,r6,24876
 801ccb0:	014200b4 	movhi	r5,2050
 801ccb4:	297fa704 	addi	r5,r5,-356
 801ccb8:	010200b4 	movhi	r4,2050
 801ccbc:	213fa704 	addi	r4,r4,-356
 801ccc0:	801cbf80 	call	801cbf8 <alt_load_section>
 801ccc4:	801f1840 	call	801f184 <alt_dcache_flush_all>
 801ccc8:	801f40c0 	call	801f40c <alt_icache_flush_all>
 801cccc:	0001883a 	nop
 801ccd0:	e037883a 	mov	sp,fp
 801ccd4:	dfc00117 	ldw	ra,4(sp)
 801ccd8:	df000017 	ldw	fp,0(sp)
 801ccdc:	dec00204 	addi	sp,sp,8
 801cce0:	f800283a 	ret

0801cce4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801cce4:	defffe04 	addi	sp,sp,-8
 801cce8:	dfc00115 	stw	ra,4(sp)
 801ccec:	df000015 	stw	fp,0(sp)
 801ccf0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801ccf4:	008205f4 	movhi	r2,2071
 801ccf8:	10a34e04 	addi	r2,r2,-29384
 801ccfc:	10800017 	ldw	r2,0(r2)
 801cd00:	10000526 	beq	r2,zero,801cd18 <alt_get_errno+0x34>
 801cd04:	008205f4 	movhi	r2,2071
 801cd08:	10a34e04 	addi	r2,r2,-29384
 801cd0c:	10800017 	ldw	r2,0(r2)
 801cd10:	103ee83a 	callr	r2
 801cd14:	00000206 	br	801cd20 <alt_get_errno+0x3c>
 801cd18:	008205f4 	movhi	r2,2071
 801cd1c:	10ae6904 	addi	r2,r2,-18012
}
 801cd20:	e037883a 	mov	sp,fp
 801cd24:	dfc00117 	ldw	ra,4(sp)
 801cd28:	df000017 	ldw	fp,0(sp)
 801cd2c:	dec00204 	addi	sp,sp,8
 801cd30:	f800283a 	ret

0801cd34 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 801cd34:	defff904 	addi	sp,sp,-28
 801cd38:	dfc00615 	stw	ra,24(sp)
 801cd3c:	df000515 	stw	fp,20(sp)
 801cd40:	df000504 	addi	fp,sp,20
 801cd44:	e13ffd15 	stw	r4,-12(fp)
 801cd48:	e17ffe15 	stw	r5,-8(fp)
 801cd4c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 801cd50:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801cd54:	e0bffd17 	ldw	r2,-12(fp)
 801cd58:	10000616 	blt	r2,zero,801cd74 <lseek+0x40>
 801cd5c:	e0bffd17 	ldw	r2,-12(fp)
 801cd60:	10c00324 	muli	r3,r2,12
 801cd64:	008205b4 	movhi	r2,2070
 801cd68:	109ebe04 	addi	r2,r2,31480
 801cd6c:	1885883a 	add	r2,r3,r2
 801cd70:	00000106 	br	801cd78 <lseek+0x44>
 801cd74:	0005883a 	mov	r2,zero
 801cd78:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 801cd7c:	e0bffc17 	ldw	r2,-16(fp)
 801cd80:	10001026 	beq	r2,zero,801cdc4 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 801cd84:	e0bffc17 	ldw	r2,-16(fp)
 801cd88:	10800017 	ldw	r2,0(r2)
 801cd8c:	10800717 	ldw	r2,28(r2)
 801cd90:	10000926 	beq	r2,zero,801cdb8 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 801cd94:	e0bffc17 	ldw	r2,-16(fp)
 801cd98:	10800017 	ldw	r2,0(r2)
 801cd9c:	10800717 	ldw	r2,28(r2)
 801cda0:	e13ffc17 	ldw	r4,-16(fp)
 801cda4:	e17ffe17 	ldw	r5,-8(fp)
 801cda8:	e1bfff17 	ldw	r6,-4(fp)
 801cdac:	103ee83a 	callr	r2
 801cdb0:	e0bffb15 	stw	r2,-20(fp)
 801cdb4:	00000506 	br	801cdcc <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 801cdb8:	00bfde84 	movi	r2,-134
 801cdbc:	e0bffb15 	stw	r2,-20(fp)
 801cdc0:	00000206 	br	801cdcc <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 801cdc4:	00bfebc4 	movi	r2,-81
 801cdc8:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 801cdcc:	e0bffb17 	ldw	r2,-20(fp)
 801cdd0:	1000070e 	bge	r2,zero,801cdf0 <lseek+0xbc>
  {
    ALT_ERRNO = -rc;
 801cdd4:	801cce40 	call	801cce4 <alt_get_errno>
 801cdd8:	1007883a 	mov	r3,r2
 801cddc:	e0bffb17 	ldw	r2,-20(fp)
 801cde0:	0085c83a 	sub	r2,zero,r2
 801cde4:	18800015 	stw	r2,0(r3)
    rc = -1;
 801cde8:	00bfffc4 	movi	r2,-1
 801cdec:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 801cdf0:	e0bffb17 	ldw	r2,-20(fp)
}
 801cdf4:	e037883a 	mov	sp,fp
 801cdf8:	dfc00117 	ldw	ra,4(sp)
 801cdfc:	df000017 	ldw	fp,0(sp)
 801ce00:	dec00204 	addi	sp,sp,8
 801ce04:	f800283a 	ret

0801ce08 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 801ce08:	defffd04 	addi	sp,sp,-12
 801ce0c:	dfc00215 	stw	ra,8(sp)
 801ce10:	df000115 	stw	fp,4(sp)
 801ce14:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 801ce18:	0009883a 	mov	r4,zero
 801ce1c:	801d51c0 	call	801d51c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 801ce20:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 801ce24:	801d5500 	call	801d550 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 801ce28:	010205b4 	movhi	r4,2070
 801ce2c:	21183f04 	addi	r4,r4,24828
 801ce30:	014205b4 	movhi	r5,2070
 801ce34:	29583f04 	addi	r5,r5,24828
 801ce38:	018205b4 	movhi	r6,2070
 801ce3c:	31983f04 	addi	r6,r6,24828
 801ce40:	801f5980 	call	801f598 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 801ce44:	801f2bc0 	call	801f2bc <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 801ce48:	010200b4 	movhi	r4,2050
 801ce4c:	213cc704 	addi	r4,r4,-3300
 801ce50:	801faf80 	call	801faf8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 801ce54:	d12b2c17 	ldw	r4,-21328(gp)
 801ce58:	d0eb2d17 	ldw	r3,-21324(gp)
 801ce5c:	d0ab2e17 	ldw	r2,-21320(gp)
 801ce60:	180b883a 	mov	r5,r3
 801ce64:	100d883a 	mov	r6,r2
 801ce68:	80065d40 	call	80065d4 <main>
 801ce6c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 801ce70:	01000044 	movi	r4,1
 801ce74:	801c6380 	call	801c638 <close>
  exit (result);
 801ce78:	e13fff17 	ldw	r4,-4(fp)
 801ce7c:	801fb0c0 	call	801fb0c <exit>

0801ce80 <__malloc_lock>:
 801ce80:	defffe04 	addi	sp,sp,-8
 801ce84:	df000115 	stw	fp,4(sp)
 801ce88:	df000104 	addi	fp,sp,4
 801ce8c:	e13fff15 	stw	r4,-4(fp)
 801ce90:	0001883a 	nop
 801ce94:	e037883a 	mov	sp,fp
 801ce98:	df000017 	ldw	fp,0(sp)
 801ce9c:	dec00104 	addi	sp,sp,4
 801cea0:	f800283a 	ret

0801cea4 <__malloc_unlock>:
 801cea4:	defffe04 	addi	sp,sp,-8
 801cea8:	df000115 	stw	fp,4(sp)
 801ceac:	df000104 	addi	fp,sp,4
 801ceb0:	e13fff15 	stw	r4,-4(fp)
 801ceb4:	0001883a 	nop
 801ceb8:	e037883a 	mov	sp,fp
 801cebc:	df000017 	ldw	fp,0(sp)
 801cec0:	dec00104 	addi	sp,sp,4
 801cec4:	f800283a 	ret

0801cec8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801cec8:	defffe04 	addi	sp,sp,-8
 801cecc:	dfc00115 	stw	ra,4(sp)
 801ced0:	df000015 	stw	fp,0(sp)
 801ced4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801ced8:	008205f4 	movhi	r2,2071
 801cedc:	10a34e04 	addi	r2,r2,-29384
 801cee0:	10800017 	ldw	r2,0(r2)
 801cee4:	10000526 	beq	r2,zero,801cefc <alt_get_errno+0x34>
 801cee8:	008205f4 	movhi	r2,2071
 801ceec:	10a34e04 	addi	r2,r2,-29384
 801cef0:	10800017 	ldw	r2,0(r2)
 801cef4:	103ee83a 	callr	r2
 801cef8:	00000206 	br	801cf04 <alt_get_errno+0x3c>
 801cefc:	008205f4 	movhi	r2,2071
 801cf00:	10ae6904 	addi	r2,r2,-18012
}
 801cf04:	e037883a 	mov	sp,fp
 801cf08:	dfc00117 	ldw	ra,4(sp)
 801cf0c:	df000017 	ldw	fp,0(sp)
 801cf10:	dec00204 	addi	sp,sp,8
 801cf14:	f800283a 	ret

0801cf18 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 801cf18:	defff904 	addi	sp,sp,-28
 801cf1c:	dfc00615 	stw	ra,24(sp)
 801cf20:	df000515 	stw	fp,20(sp)
 801cf24:	df000504 	addi	fp,sp,20
 801cf28:	e13ffd15 	stw	r4,-12(fp)
 801cf2c:	e17ffe15 	stw	r5,-8(fp)
 801cf30:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801cf34:	e0bffd17 	ldw	r2,-12(fp)
 801cf38:	10000616 	blt	r2,zero,801cf54 <read+0x3c>
 801cf3c:	e0bffd17 	ldw	r2,-12(fp)
 801cf40:	10c00324 	muli	r3,r2,12
 801cf44:	008205b4 	movhi	r2,2070
 801cf48:	109ebe04 	addi	r2,r2,31480
 801cf4c:	1885883a 	add	r2,r3,r2
 801cf50:	00000106 	br	801cf58 <read+0x40>
 801cf54:	0005883a 	mov	r2,zero
 801cf58:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801cf5c:	e0bffb17 	ldw	r2,-20(fp)
 801cf60:	10002226 	beq	r2,zero,801cfec <read+0xd4>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801cf64:	e0bffb17 	ldw	r2,-20(fp)
 801cf68:	10800217 	ldw	r2,8(r2)
 801cf6c:	108000cc 	andi	r2,r2,3
 801cf70:	10800060 	cmpeqi	r2,r2,1
 801cf74:	1000181e 	bne	r2,zero,801cfd8 <read+0xc0>
        (fd->dev->read))
 801cf78:	e0bffb17 	ldw	r2,-20(fp)
 801cf7c:	10800017 	ldw	r2,0(r2)
 801cf80:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 801cf84:	10001426 	beq	r2,zero,801cfd8 <read+0xc0>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 801cf88:	e0bffb17 	ldw	r2,-20(fp)
 801cf8c:	10800017 	ldw	r2,0(r2)
 801cf90:	10800517 	ldw	r2,20(r2)
 801cf94:	e0ffff17 	ldw	r3,-4(fp)
 801cf98:	e13ffb17 	ldw	r4,-20(fp)
 801cf9c:	e17ffe17 	ldw	r5,-8(fp)
 801cfa0:	180d883a 	mov	r6,r3
 801cfa4:	103ee83a 	callr	r2
 801cfa8:	e0bffc15 	stw	r2,-16(fp)
 801cfac:	e0bffc17 	ldw	r2,-16(fp)
 801cfb0:	1000070e 	bge	r2,zero,801cfd0 <read+0xb8>
        {
          ALT_ERRNO = -rval;
 801cfb4:	801cec80 	call	801cec8 <alt_get_errno>
 801cfb8:	1007883a 	mov	r3,r2
 801cfbc:	e0bffc17 	ldw	r2,-16(fp)
 801cfc0:	0085c83a 	sub	r2,zero,r2
 801cfc4:	18800015 	stw	r2,0(r3)
          return -1;
 801cfc8:	00bfffc4 	movi	r2,-1
 801cfcc:	00000c06 	br	801d000 <read+0xe8>
        }
        return rval;
 801cfd0:	e0bffc17 	ldw	r2,-16(fp)
 801cfd4:	00000a06 	br	801d000 <read+0xe8>
      }
      else
      {
        ALT_ERRNO = EACCES;
 801cfd8:	801cec80 	call	801cec8 <alt_get_errno>
 801cfdc:	1007883a 	mov	r3,r2
 801cfe0:	00800344 	movi	r2,13
 801cfe4:	18800015 	stw	r2,0(r3)
 801cfe8:	00000406 	br	801cffc <read+0xe4>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 801cfec:	801cec80 	call	801cec8 <alt_get_errno>
 801cff0:	1007883a 	mov	r3,r2
 801cff4:	00801444 	movi	r2,81
 801cff8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801cffc:	00bfffc4 	movi	r2,-1
}
 801d000:	e037883a 	mov	sp,fp
 801d004:	dfc00117 	ldw	ra,4(sp)
 801d008:	df000017 	ldw	fp,0(sp)
 801d00c:	dec00204 	addi	sp,sp,8
 801d010:	f800283a 	ret

0801d014 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 801d014:	defffe04 	addi	sp,sp,-8
 801d018:	df000115 	stw	fp,4(sp)
 801d01c:	df000104 	addi	fp,sp,4
 801d020:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 801d024:	e0bfff17 	ldw	r2,-4(fp)
 801d028:	108000d0 	cmplti	r2,r2,3
 801d02c:	10000d1e 	bne	r2,zero,801d064 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 801d030:	008205b4 	movhi	r2,2070
 801d034:	109ebe04 	addi	r2,r2,31480
 801d038:	e0ffff17 	ldw	r3,-4(fp)
 801d03c:	18c00324 	muli	r3,r3,12
 801d040:	18c00204 	addi	r3,r3,8
 801d044:	10c5883a 	add	r2,r2,r3
 801d048:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 801d04c:	008205b4 	movhi	r2,2070
 801d050:	109ebe04 	addi	r2,r2,31480
 801d054:	e0ffff17 	ldw	r3,-4(fp)
 801d058:	18c00324 	muli	r3,r3,12
 801d05c:	10c5883a 	add	r2,r2,r3
 801d060:	10000015 	stw	zero,0(r2)
  }
}
 801d064:	e037883a 	mov	sp,fp
 801d068:	df000017 	ldw	fp,0(sp)
 801d06c:	dec00104 	addi	sp,sp,4
 801d070:	f800283a 	ret

0801d074 <alt_remap_cached>:
 * Return a pointer that should be used to access the cached memory.
 */

void* 
alt_remap_cached(volatile void* ptr, alt_u32 len)
{
 801d074:	defffd04 	addi	sp,sp,-12
 801d078:	df000215 	stw	fp,8(sp)
 801d07c:	df000204 	addi	fp,sp,8
 801d080:	e13ffe15 	stw	r4,-8(fp)
 801d084:	e17fff15 	stw	r5,-4(fp)
#if ALT_CPU_DCACHE_SIZE > 0
#ifdef ALT_CPU_DCACHE_BYPASS_MASK
  return (void*) (((alt_u32)ptr) & ~ALT_CPU_DCACHE_BYPASS_MASK);
 801d088:	e0fffe17 	ldw	r3,-8(fp)
 801d08c:	00a00034 	movhi	r2,32768
 801d090:	10bfffc4 	addi	r2,r2,-1
 801d094:	1884703a 	and	r2,r3,r2
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Nothing needs to be done to the pointer. */
  return (void*) ptr;
#endif /* No data cache */
}
 801d098:	e037883a 	mov	sp,fp
 801d09c:	df000017 	ldw	fp,0(sp)
 801d0a0:	dec00104 	addi	sp,sp,4
 801d0a4:	f800283a 	ret

0801d0a8 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 801d0a8:	defff904 	addi	sp,sp,-28
 801d0ac:	df000615 	stw	fp,24(sp)
 801d0b0:	df000604 	addi	fp,sp,24
 801d0b4:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801d0b8:	0005303a 	rdctl	r2,status
 801d0bc:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801d0c0:	e0fffc17 	ldw	r3,-16(fp)
 801d0c4:	00bfff84 	movi	r2,-2
 801d0c8:	1884703a 	and	r2,r3,r2
 801d0cc:	1001703a 	wrctl	status,r2
  
  return context;
 801d0d0:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 801d0d4:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 801d0d8:	d0a00e17 	ldw	r2,-32712(gp)
 801d0dc:	10c000c4 	addi	r3,r2,3
 801d0e0:	00bfff04 	movi	r2,-4
 801d0e4:	1884703a 	and	r2,r3,r2
 801d0e8:	d0a00e15 	stw	r2,-32712(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 801d0ec:	d0e00e17 	ldw	r3,-32712(gp)
 801d0f0:	e0bfff17 	ldw	r2,-4(fp)
 801d0f4:	1887883a 	add	r3,r3,r2
 801d0f8:	00840034 	movhi	r2,4096
 801d0fc:	10800004 	addi	r2,r2,0
 801d100:	10c0062e 	bgeu	r2,r3,801d11c <sbrk+0x74>
 801d104:	e0bffa17 	ldw	r2,-24(fp)
 801d108:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801d10c:	e0bffd17 	ldw	r2,-12(fp)
 801d110:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 801d114:	00bfffc4 	movi	r2,-1
 801d118:	00000b06 	br	801d148 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 801d11c:	d0a00e17 	ldw	r2,-32712(gp)
 801d120:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 801d124:	d0e00e17 	ldw	r3,-32712(gp)
 801d128:	e0bfff17 	ldw	r2,-4(fp)
 801d12c:	1885883a 	add	r2,r3,r2
 801d130:	d0a00e15 	stw	r2,-32712(gp)
 801d134:	e0bffa17 	ldw	r2,-24(fp)
 801d138:	e0bffe15 	stw	r2,-8(fp)
 801d13c:	e0bffe17 	ldw	r2,-8(fp)
 801d140:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 801d144:	e0bffb17 	ldw	r2,-20(fp)
} 
 801d148:	e037883a 	mov	sp,fp
 801d14c:	df000017 	ldw	fp,0(sp)
 801d150:	dec00104 	addi	sp,sp,4
 801d154:	f800283a 	ret

0801d158 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 801d158:	defffa04 	addi	sp,sp,-24
 801d15c:	df000515 	stw	fp,20(sp)
 801d160:	df000504 	addi	fp,sp,20
 801d164:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801d168:	0005303a 	rdctl	r2,status
 801d16c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801d170:	e0fffc17 	ldw	r3,-16(fp)
 801d174:	00bfff84 	movi	r2,-2
 801d178:	1884703a 	and	r2,r3,r2
 801d17c:	1001703a 	wrctl	status,r2
  
  return context;
 801d180:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 801d184:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 801d188:	e0bfff17 	ldw	r2,-4(fp)
 801d18c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 801d190:	e0bffd17 	ldw	r2,-12(fp)
 801d194:	10800017 	ldw	r2,0(r2)
 801d198:	e0fffd17 	ldw	r3,-12(fp)
 801d19c:	18c00117 	ldw	r3,4(r3)
 801d1a0:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 801d1a4:	e0bffd17 	ldw	r2,-12(fp)
 801d1a8:	10800117 	ldw	r2,4(r2)
 801d1ac:	e0fffd17 	ldw	r3,-12(fp)
 801d1b0:	18c00017 	ldw	r3,0(r3)
 801d1b4:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 801d1b8:	e0bffd17 	ldw	r2,-12(fp)
 801d1bc:	e0fffd17 	ldw	r3,-12(fp)
 801d1c0:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 801d1c4:	e0bffd17 	ldw	r2,-12(fp)
 801d1c8:	e0fffd17 	ldw	r3,-12(fp)
 801d1cc:	10c00015 	stw	r3,0(r2)
 801d1d0:	e0bffb17 	ldw	r2,-20(fp)
 801d1d4:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801d1d8:	e0bffe17 	ldw	r2,-8(fp)
 801d1dc:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 801d1e0:	e037883a 	mov	sp,fp
 801d1e4:	df000017 	ldw	fp,0(sp)
 801d1e8:	dec00104 	addi	sp,sp,4
 801d1ec:	f800283a 	ret

0801d1f0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 801d1f0:	defffb04 	addi	sp,sp,-20
 801d1f4:	dfc00415 	stw	ra,16(sp)
 801d1f8:	df000315 	stw	fp,12(sp)
 801d1fc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 801d200:	d0a00f17 	ldw	r2,-32708(gp)
 801d204:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 801d208:	d0ab3017 	ldw	r2,-21312(gp)
 801d20c:	10800044 	addi	r2,r2,1
 801d210:	d0ab3015 	stw	r2,-21312(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801d214:	00002e06 	br	801d2d0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 801d218:	e0bffd17 	ldw	r2,-12(fp)
 801d21c:	10800017 	ldw	r2,0(r2)
 801d220:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 801d224:	e0bffd17 	ldw	r2,-12(fp)
 801d228:	10800403 	ldbu	r2,16(r2)
 801d22c:	10803fcc 	andi	r2,r2,255
 801d230:	10000426 	beq	r2,zero,801d244 <alt_tick+0x54>
 801d234:	d0ab3017 	ldw	r2,-21312(gp)
 801d238:	1000021e 	bne	r2,zero,801d244 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 801d23c:	e0bffd17 	ldw	r2,-12(fp)
 801d240:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 801d244:	e0bffd17 	ldw	r2,-12(fp)
 801d248:	10800217 	ldw	r2,8(r2)
 801d24c:	d0eb3017 	ldw	r3,-21312(gp)
 801d250:	18801d36 	bltu	r3,r2,801d2c8 <alt_tick+0xd8>
 801d254:	e0bffd17 	ldw	r2,-12(fp)
 801d258:	10800403 	ldbu	r2,16(r2)
 801d25c:	10803fcc 	andi	r2,r2,255
 801d260:	1000191e 	bne	r2,zero,801d2c8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 801d264:	e0bffd17 	ldw	r2,-12(fp)
 801d268:	10800317 	ldw	r2,12(r2)
 801d26c:	e0fffd17 	ldw	r3,-12(fp)
 801d270:	18c00517 	ldw	r3,20(r3)
 801d274:	1809883a 	mov	r4,r3
 801d278:	103ee83a 	callr	r2
 801d27c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 801d280:	e0bfff17 	ldw	r2,-4(fp)
 801d284:	1000031e 	bne	r2,zero,801d294 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 801d288:	e13ffd17 	ldw	r4,-12(fp)
 801d28c:	801d1580 	call	801d158 <alt_alarm_stop>
 801d290:	00000d06 	br	801d2c8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 801d294:	e0bffd17 	ldw	r2,-12(fp)
 801d298:	10c00217 	ldw	r3,8(r2)
 801d29c:	e0bfff17 	ldw	r2,-4(fp)
 801d2a0:	1887883a 	add	r3,r3,r2
 801d2a4:	e0bffd17 	ldw	r2,-12(fp)
 801d2a8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 801d2ac:	e0bffd17 	ldw	r2,-12(fp)
 801d2b0:	10c00217 	ldw	r3,8(r2)
 801d2b4:	d0ab3017 	ldw	r2,-21312(gp)
 801d2b8:	1880032e 	bgeu	r3,r2,801d2c8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 801d2bc:	e0bffd17 	ldw	r2,-12(fp)
 801d2c0:	00c00044 	movi	r3,1
 801d2c4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 801d2c8:	e0bffe17 	ldw	r2,-8(fp)
 801d2cc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 801d2d0:	e0fffd17 	ldw	r3,-12(fp)
 801d2d4:	d0a00f04 	addi	r2,gp,-32708
 801d2d8:	18bfcf1e 	bne	r3,r2,801d218 <__alt_data_end+0xf801d218>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 801d2dc:	0001883a 	nop
}
 801d2e0:	e037883a 	mov	sp,fp
 801d2e4:	dfc00117 	ldw	ra,4(sp)
 801d2e8:	df000017 	ldw	fp,0(sp)
 801d2ec:	dec00204 	addi	sp,sp,8
 801d2f0:	f800283a 	ret

0801d2f4 <alt_uncached_malloc>:
 * Return pointer to the block of memory or NULL if can't allocate it.
 */

volatile void* 
alt_uncached_malloc(size_t size)
{
 801d2f4:	defffa04 	addi	sp,sp,-24
 801d2f8:	dfc00515 	stw	ra,20(sp)
 801d2fc:	df000415 	stw	fp,16(sp)
 801d300:	df000404 	addi	fp,sp,16
 801d304:	e13fff15 	stw	r4,-4(fp)

  void* ptr;

  /* Round up size to an integer number of data cache lines. Required to guarantee that
   * cacheable and non-cacheable data won't be mixed on the same cache line. */ 
  const size_t num_lines = (size + ALT_CPU_DCACHE_LINE_SIZE - 1) / ALT_CPU_DCACHE_LINE_SIZE;
 801d308:	e0bfff17 	ldw	r2,-4(fp)
 801d30c:	108007c4 	addi	r2,r2,31
 801d310:	1004d17a 	srli	r2,r2,5
 801d314:	e0bffc15 	stw	r2,-16(fp)
  const size_t aligned_size = num_lines * ALT_CPU_DCACHE_LINE_SIZE;
 801d318:	e0bffc17 	ldw	r2,-16(fp)
 801d31c:	1004917a 	slli	r2,r2,5
 801d320:	e0bffd15 	stw	r2,-12(fp)

  /* Use memalign() Newlib routine to allocate starting on a data cache aligned address.
   * Required to guarantee that cacheable and non-cacheable data won't be mixed on the
   * same cache line. */ 
  ptr = memalign(ALT_CPU_DCACHE_LINE_SIZE, aligned_size);
 801d324:	01000804 	movi	r4,32
 801d328:	e17ffd17 	ldw	r5,-12(fp)
 801d32c:	800f2b80 	call	800f2b8 <memalign>
 801d330:	e0bffe15 	stw	r2,-8(fp)

  if (ptr == NULL) {
 801d334:	e0bffe17 	ldw	r2,-8(fp)
 801d338:	1000021e 	bne	r2,zero,801d344 <alt_uncached_malloc+0x50>
    return NULL; /* Out of memory */
 801d33c:	0005883a 	mov	r2,zero
 801d340:	00000506 	br	801d358 <alt_uncached_malloc+0x64>
  }

  /* Ensure that the memory region isn't in the data cache. */
  alt_dcache_flush(ptr, aligned_size);
 801d344:	e13ffe17 	ldw	r4,-8(fp)
 801d348:	e17ffd17 	ldw	r5,-12(fp)
 801d34c:	801f1100 	call	801f110 <alt_dcache_flush>

  return (volatile void*) (((alt_u32)ptr) | ALT_CPU_DCACHE_BYPASS_MASK);
 801d350:	e0bffe17 	ldw	r2,-8(fp)
 801d354:	10a00034 	orhi	r2,r2,32768
#endif /* No address mask option enabled. */
#else /* No data cache */
  /* Just use regular malloc. */
  return malloc(size);
#endif /* No data cache */
}
 801d358:	e037883a 	mov	sp,fp
 801d35c:	dfc00117 	ldw	ra,4(sp)
 801d360:	df000017 	ldw	fp,0(sp)
 801d364:	dec00204 	addi	sp,sp,8
 801d368:	f800283a 	ret

0801d36c <usleep>:
 801d36c:	defffd04 	addi	sp,sp,-12
 801d370:	dfc00215 	stw	ra,8(sp)
 801d374:	df000115 	stw	fp,4(sp)
 801d378:	df000104 	addi	fp,sp,4
 801d37c:	e13fff15 	stw	r4,-4(fp)
 801d380:	e13fff17 	ldw	r4,-4(fp)
 801d384:	801efb80 	call	801efb8 <alt_busy_sleep>
 801d388:	e037883a 	mov	sp,fp
 801d38c:	dfc00117 	ldw	ra,4(sp)
 801d390:	df000017 	ldw	fp,0(sp)
 801d394:	dec00204 	addi	sp,sp,8
 801d398:	f800283a 	ret

0801d39c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801d39c:	defffe04 	addi	sp,sp,-8
 801d3a0:	dfc00115 	stw	ra,4(sp)
 801d3a4:	df000015 	stw	fp,0(sp)
 801d3a8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801d3ac:	008205f4 	movhi	r2,2071
 801d3b0:	10a34e04 	addi	r2,r2,-29384
 801d3b4:	10800017 	ldw	r2,0(r2)
 801d3b8:	10000526 	beq	r2,zero,801d3d0 <alt_get_errno+0x34>
 801d3bc:	008205f4 	movhi	r2,2071
 801d3c0:	10a34e04 	addi	r2,r2,-29384
 801d3c4:	10800017 	ldw	r2,0(r2)
 801d3c8:	103ee83a 	callr	r2
 801d3cc:	00000206 	br	801d3d8 <alt_get_errno+0x3c>
 801d3d0:	008205f4 	movhi	r2,2071
 801d3d4:	10ae6904 	addi	r2,r2,-18012
}
 801d3d8:	e037883a 	mov	sp,fp
 801d3dc:	dfc00117 	ldw	ra,4(sp)
 801d3e0:	df000017 	ldw	fp,0(sp)
 801d3e4:	dec00204 	addi	sp,sp,8
 801d3e8:	f800283a 	ret

0801d3ec <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 801d3ec:	defff904 	addi	sp,sp,-28
 801d3f0:	dfc00615 	stw	ra,24(sp)
 801d3f4:	df000515 	stw	fp,20(sp)
 801d3f8:	df000504 	addi	fp,sp,20
 801d3fc:	e13ffd15 	stw	r4,-12(fp)
 801d400:	e17ffe15 	stw	r5,-8(fp)
 801d404:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 801d408:	e0bffd17 	ldw	r2,-12(fp)
 801d40c:	10000616 	blt	r2,zero,801d428 <write+0x3c>
 801d410:	e0bffd17 	ldw	r2,-12(fp)
 801d414:	10c00324 	muli	r3,r2,12
 801d418:	008205b4 	movhi	r2,2070
 801d41c:	109ebe04 	addi	r2,r2,31480
 801d420:	1885883a 	add	r2,r3,r2
 801d424:	00000106 	br	801d42c <write+0x40>
 801d428:	0005883a 	mov	r2,zero
 801d42c:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 801d430:	e0bffb17 	ldw	r2,-20(fp)
 801d434:	10002126 	beq	r2,zero,801d4bc <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 801d438:	e0bffb17 	ldw	r2,-20(fp)
 801d43c:	10800217 	ldw	r2,8(r2)
 801d440:	108000cc 	andi	r2,r2,3
 801d444:	10001826 	beq	r2,zero,801d4a8 <write+0xbc>
 801d448:	e0bffb17 	ldw	r2,-20(fp)
 801d44c:	10800017 	ldw	r2,0(r2)
 801d450:	10800617 	ldw	r2,24(r2)
 801d454:	10001426 	beq	r2,zero,801d4a8 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 801d458:	e0bffb17 	ldw	r2,-20(fp)
 801d45c:	10800017 	ldw	r2,0(r2)
 801d460:	10800617 	ldw	r2,24(r2)
 801d464:	e0ffff17 	ldw	r3,-4(fp)
 801d468:	e13ffb17 	ldw	r4,-20(fp)
 801d46c:	e17ffe17 	ldw	r5,-8(fp)
 801d470:	180d883a 	mov	r6,r3
 801d474:	103ee83a 	callr	r2
 801d478:	e0bffc15 	stw	r2,-16(fp)
 801d47c:	e0bffc17 	ldw	r2,-16(fp)
 801d480:	1000070e 	bge	r2,zero,801d4a0 <write+0xb4>
      {
        ALT_ERRNO = -rval;
 801d484:	801d39c0 	call	801d39c <alt_get_errno>
 801d488:	1007883a 	mov	r3,r2
 801d48c:	e0bffc17 	ldw	r2,-16(fp)
 801d490:	0085c83a 	sub	r2,zero,r2
 801d494:	18800015 	stw	r2,0(r3)
        return -1;
 801d498:	00bfffc4 	movi	r2,-1
 801d49c:	00000c06 	br	801d4d0 <write+0xe4>
      }
      return rval;
 801d4a0:	e0bffc17 	ldw	r2,-16(fp)
 801d4a4:	00000a06 	br	801d4d0 <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
 801d4a8:	801d39c0 	call	801d39c <alt_get_errno>
 801d4ac:	1007883a 	mov	r3,r2
 801d4b0:	00800344 	movi	r2,13
 801d4b4:	18800015 	stw	r2,0(r3)
 801d4b8:	00000406 	br	801d4cc <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 801d4bc:	801d39c0 	call	801d39c <alt_get_errno>
 801d4c0:	1007883a 	mov	r3,r2
 801d4c4:	00801444 	movi	r2,81
 801d4c8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 801d4cc:	00bfffc4 	movi	r2,-1
}
 801d4d0:	e037883a 	mov	sp,fp
 801d4d4:	dfc00117 	ldw	ra,4(sp)
 801d4d8:	df000017 	ldw	fp,0(sp)
 801d4dc:	dec00204 	addi	sp,sp,8
 801d4e0:	f800283a 	ret

0801d4e4 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 801d4e4:	defffd04 	addi	sp,sp,-12
 801d4e8:	dfc00215 	stw	ra,8(sp)
 801d4ec:	df000115 	stw	fp,4(sp)
 801d4f0:	df000104 	addi	fp,sp,4
 801d4f4:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 801d4f8:	e13fff17 	ldw	r4,-4(fp)
 801d4fc:	014205f4 	movhi	r5,2071
 801d500:	29634b04 	addi	r5,r5,-29396
 801d504:	801f2180 	call	801f218 <alt_dev_llist_insert>
}
 801d508:	e037883a 	mov	sp,fp
 801d50c:	dfc00117 	ldw	ra,4(sp)
 801d510:	df000017 	ldw	fp,0(sp)
 801d514:	dec00204 	addi	sp,sp,8
 801d518:	f800283a 	ret

0801d51c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 801d51c:	defffd04 	addi	sp,sp,-12
 801d520:	dfc00215 	stw	ra,8(sp)
 801d524:	df000115 	stw	fp,4(sp)
 801d528:	df000104 	addi	fp,sp,4
 801d52c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
 801d530:	801f8840 	call	801f884 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 801d534:	00800044 	movi	r2,1
 801d538:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 801d53c:	e037883a 	mov	sp,fp
 801d540:	dfc00117 	ldw	ra,4(sp)
 801d544:	df000017 	ldw	fp,0(sp)
 801d548:	dec00204 	addi	sp,sp,8
 801d54c:	f800283a 	ret

0801d550 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 801d550:	defffe04 	addi	sp,sp,-8
 801d554:	dfc00115 	stw	ra,4(sp)
 801d558:	df000015 	stw	fp,0(sp)
 801d55c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER, timer);
 801d560:	01040034 	movhi	r4,4096
 801d564:	000b883a 	mov	r5,zero
 801d568:	01800044 	movi	r6,1
 801d56c:	01c0fa04 	movi	r7,1000
 801d570:	801edf00 	call	801edf0 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 801d574:	010205b4 	movhi	r4,2070
 801d578:	211f2804 	addi	r4,r4,31904
 801d57c:	000b883a 	mov	r5,zero
 801d580:	01800084 	movi	r6,2
 801d584:	801d7240 	call	801d724 <altera_avalon_jtag_uart_init>
 801d588:	010205b4 	movhi	r4,2070
 801d58c:	211f1e04 	addi	r4,r4,31864
 801d590:	801d4e40 	call	801d4e4 <alt_dev_reg>
    ALTERA_AVALON_SGDMA_INIT ( LCD_SGDMA, lcd_sgdma);
 801d594:	010205f4 	movhi	r4,2071
 801d598:	21233604 	addi	r4,r4,-29480
 801d59c:	000b883a 	mov	r5,zero
 801d5a0:	000d883a 	mov	r6,zero
 801d5a4:	801ecd80 	call	801ecd8 <alt_avalon_sgdma_init>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 801d5a8:	0001883a 	nop
}
 801d5ac:	e037883a 	mov	sp,fp
 801d5b0:	dfc00117 	ldw	ra,4(sp)
 801d5b4:	df000017 	ldw	fp,0(sp)
 801d5b8:	dec00204 	addi	sp,sp,8
 801d5bc:	f800283a 	ret

0801d5c0 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 801d5c0:	defffa04 	addi	sp,sp,-24
 801d5c4:	dfc00515 	stw	ra,20(sp)
 801d5c8:	df000415 	stw	fp,16(sp)
 801d5cc:	df000404 	addi	fp,sp,16
 801d5d0:	e13ffd15 	stw	r4,-12(fp)
 801d5d4:	e17ffe15 	stw	r5,-8(fp)
 801d5d8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801d5dc:	e0bffd17 	ldw	r2,-12(fp)
 801d5e0:	10800017 	ldw	r2,0(r2)
 801d5e4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 801d5e8:	e0bffc17 	ldw	r2,-16(fp)
 801d5ec:	10c00a04 	addi	r3,r2,40
 801d5f0:	e0bffd17 	ldw	r2,-12(fp)
 801d5f4:	10800217 	ldw	r2,8(r2)
 801d5f8:	1809883a 	mov	r4,r3
 801d5fc:	e17ffe17 	ldw	r5,-8(fp)
 801d600:	e1bfff17 	ldw	r6,-4(fp)
 801d604:	100f883a 	mov	r7,r2
 801d608:	801dbe80 	call	801dbe8 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 801d60c:	e037883a 	mov	sp,fp
 801d610:	dfc00117 	ldw	ra,4(sp)
 801d614:	df000017 	ldw	fp,0(sp)
 801d618:	dec00204 	addi	sp,sp,8
 801d61c:	f800283a 	ret

0801d620 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 801d620:	defffa04 	addi	sp,sp,-24
 801d624:	dfc00515 	stw	ra,20(sp)
 801d628:	df000415 	stw	fp,16(sp)
 801d62c:	df000404 	addi	fp,sp,16
 801d630:	e13ffd15 	stw	r4,-12(fp)
 801d634:	e17ffe15 	stw	r5,-8(fp)
 801d638:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801d63c:	e0bffd17 	ldw	r2,-12(fp)
 801d640:	10800017 	ldw	r2,0(r2)
 801d644:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 801d648:	e0bffc17 	ldw	r2,-16(fp)
 801d64c:	10c00a04 	addi	r3,r2,40
 801d650:	e0bffd17 	ldw	r2,-12(fp)
 801d654:	10800217 	ldw	r2,8(r2)
 801d658:	1809883a 	mov	r4,r3
 801d65c:	e17ffe17 	ldw	r5,-8(fp)
 801d660:	e1bfff17 	ldw	r6,-4(fp)
 801d664:	100f883a 	mov	r7,r2
 801d668:	801ddf40 	call	801ddf4 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 801d66c:	e037883a 	mov	sp,fp
 801d670:	dfc00117 	ldw	ra,4(sp)
 801d674:	df000017 	ldw	fp,0(sp)
 801d678:	dec00204 	addi	sp,sp,8
 801d67c:	f800283a 	ret

0801d680 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 801d680:	defffc04 	addi	sp,sp,-16
 801d684:	dfc00315 	stw	ra,12(sp)
 801d688:	df000215 	stw	fp,8(sp)
 801d68c:	df000204 	addi	fp,sp,8
 801d690:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 801d694:	e0bfff17 	ldw	r2,-4(fp)
 801d698:	10800017 	ldw	r2,0(r2)
 801d69c:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 801d6a0:	e0bffe17 	ldw	r2,-8(fp)
 801d6a4:	10c00a04 	addi	r3,r2,40
 801d6a8:	e0bfff17 	ldw	r2,-4(fp)
 801d6ac:	10800217 	ldw	r2,8(r2)
 801d6b0:	1809883a 	mov	r4,r3
 801d6b4:	100b883a 	mov	r5,r2
 801d6b8:	801da940 	call	801da94 <altera_avalon_jtag_uart_close>
}
 801d6bc:	e037883a 	mov	sp,fp
 801d6c0:	dfc00117 	ldw	ra,4(sp)
 801d6c4:	df000017 	ldw	fp,0(sp)
 801d6c8:	dec00204 	addi	sp,sp,8
 801d6cc:	f800283a 	ret

0801d6d0 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 801d6d0:	defffa04 	addi	sp,sp,-24
 801d6d4:	dfc00515 	stw	ra,20(sp)
 801d6d8:	df000415 	stw	fp,16(sp)
 801d6dc:	df000404 	addi	fp,sp,16
 801d6e0:	e13ffd15 	stw	r4,-12(fp)
 801d6e4:	e17ffe15 	stw	r5,-8(fp)
 801d6e8:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 801d6ec:	e0bffd17 	ldw	r2,-12(fp)
 801d6f0:	10800017 	ldw	r2,0(r2)
 801d6f4:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 801d6f8:	e0bffc17 	ldw	r2,-16(fp)
 801d6fc:	10800a04 	addi	r2,r2,40
 801d700:	1009883a 	mov	r4,r2
 801d704:	e17ffe17 	ldw	r5,-8(fp)
 801d708:	e1bfff17 	ldw	r6,-4(fp)
 801d70c:	801dafc0 	call	801dafc <altera_avalon_jtag_uart_ioctl>
}
 801d710:	e037883a 	mov	sp,fp
 801d714:	dfc00117 	ldw	ra,4(sp)
 801d718:	df000017 	ldw	fp,0(sp)
 801d71c:	dec00204 	addi	sp,sp,8
 801d720:	f800283a 	ret

0801d724 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 801d724:	defffa04 	addi	sp,sp,-24
 801d728:	dfc00515 	stw	ra,20(sp)
 801d72c:	df000415 	stw	fp,16(sp)
 801d730:	df000404 	addi	fp,sp,16
 801d734:	e13ffd15 	stw	r4,-12(fp)
 801d738:	e17ffe15 	stw	r5,-8(fp)
 801d73c:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801d740:	e0bffd17 	ldw	r2,-12(fp)
 801d744:	00c00044 	movi	r3,1
 801d748:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 801d74c:	e0bffd17 	ldw	r2,-12(fp)
 801d750:	10800017 	ldw	r2,0(r2)
 801d754:	10800104 	addi	r2,r2,4
 801d758:	1007883a 	mov	r3,r2
 801d75c:	e0bffd17 	ldw	r2,-12(fp)
 801d760:	10800817 	ldw	r2,32(r2)
 801d764:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 801d768:	e0fffe17 	ldw	r3,-8(fp)
 801d76c:	e0bfff17 	ldw	r2,-4(fp)
 801d770:	d8000015 	stw	zero,0(sp)
 801d774:	1809883a 	mov	r4,r3
 801d778:	100b883a 	mov	r5,r2
 801d77c:	018200b4 	movhi	r6,2050
 801d780:	31b5fa04 	addi	r6,r6,-10264
 801d784:	e1fffd17 	ldw	r7,-12(fp)
 801d788:	801c8340 	call	801c834 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 801d78c:	e0bffd17 	ldw	r2,-12(fp)
 801d790:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 801d794:	e0bffd17 	ldw	r2,-12(fp)
 801d798:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801d79c:	008205f4 	movhi	r2,2071
 801d7a0:	10ae7104 	addi	r2,r2,-17980
 801d7a4:	10800017 	ldw	r2,0(r2)
 801d7a8:	1809883a 	mov	r4,r3
 801d7ac:	100b883a 	mov	r5,r2
 801d7b0:	018200b4 	movhi	r6,2050
 801d7b4:	31b67b04 	addi	r6,r6,-9748
 801d7b8:	e1fffd17 	ldw	r7,-12(fp)
 801d7bc:	801ee780 	call	801ee78 <alt_alarm_start>
 801d7c0:	1000040e 	bge	r2,zero,801d7d4 <altera_avalon_jtag_uart_init+0xb0>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 801d7c4:	e0fffd17 	ldw	r3,-12(fp)
 801d7c8:	00a00034 	movhi	r2,32768
 801d7cc:	10bfffc4 	addi	r2,r2,-1
 801d7d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 801d7d4:	e037883a 	mov	sp,fp
 801d7d8:	dfc00117 	ldw	ra,4(sp)
 801d7dc:	df000017 	ldw	fp,0(sp)
 801d7e0:	dec00204 	addi	sp,sp,8
 801d7e4:	f800283a 	ret

0801d7e8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 801d7e8:	defff804 	addi	sp,sp,-32
 801d7ec:	df000715 	stw	fp,28(sp)
 801d7f0:	df000704 	addi	fp,sp,28
 801d7f4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 801d7f8:	e0bfff17 	ldw	r2,-4(fp)
 801d7fc:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 801d800:	e0bffb17 	ldw	r2,-20(fp)
 801d804:	10800017 	ldw	r2,0(r2)
 801d808:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801d80c:	e0bffc17 	ldw	r2,-16(fp)
 801d810:	10800104 	addi	r2,r2,4
 801d814:	10800037 	ldwio	r2,0(r2)
 801d818:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 801d81c:	e0bffd17 	ldw	r2,-12(fp)
 801d820:	1080c00c 	andi	r2,r2,768
 801d824:	1000011e 	bne	r2,zero,801d82c <altera_avalon_jtag_uart_irq+0x44>
      break;
 801d828:	00006c06 	br	801d9dc <altera_avalon_jtag_uart_irq+0x1f4>

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 801d82c:	e0bffd17 	ldw	r2,-12(fp)
 801d830:	1080400c 	andi	r2,r2,256
 801d834:	10003426 	beq	r2,zero,801d908 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 801d838:	00800074 	movhi	r2,1
 801d83c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801d840:	e0bffb17 	ldw	r2,-20(fp)
 801d844:	10800a17 	ldw	r2,40(r2)
 801d848:	10800044 	addi	r2,r2,1
 801d84c:	1081ffcc 	andi	r2,r2,2047
 801d850:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 801d854:	e0bffb17 	ldw	r2,-20(fp)
 801d858:	10c00b17 	ldw	r3,44(r2)
 801d85c:	e0bffe17 	ldw	r2,-8(fp)
 801d860:	1880011e 	bne	r3,r2,801d868 <altera_avalon_jtag_uart_irq+0x80>
          break;
 801d864:	00001606 	br	801d8c0 <altera_avalon_jtag_uart_irq+0xd8>

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 801d868:	e0bffc17 	ldw	r2,-16(fp)
 801d86c:	10800037 	ldwio	r2,0(r2)
 801d870:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 801d874:	e0bff917 	ldw	r2,-28(fp)
 801d878:	10a0000c 	andi	r2,r2,32768
 801d87c:	1000011e 	bne	r2,zero,801d884 <altera_avalon_jtag_uart_irq+0x9c>
          break;
 801d880:	00000f06 	br	801d8c0 <altera_avalon_jtag_uart_irq+0xd8>

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 801d884:	e0bffb17 	ldw	r2,-20(fp)
 801d888:	10800a17 	ldw	r2,40(r2)
 801d88c:	e0fff917 	ldw	r3,-28(fp)
 801d890:	1809883a 	mov	r4,r3
 801d894:	e0fffb17 	ldw	r3,-20(fp)
 801d898:	1885883a 	add	r2,r3,r2
 801d89c:	10800e04 	addi	r2,r2,56
 801d8a0:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801d8a4:	e0bffb17 	ldw	r2,-20(fp)
 801d8a8:	10800a17 	ldw	r2,40(r2)
 801d8ac:	10800044 	addi	r2,r2,1
 801d8b0:	10c1ffcc 	andi	r3,r2,2047
 801d8b4:	e0bffb17 	ldw	r2,-20(fp)
 801d8b8:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 801d8bc:	003fe006 	br	801d840 <__alt_data_end+0xf801d840>

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 801d8c0:	e0bff917 	ldw	r2,-28(fp)
 801d8c4:	10bfffec 	andhi	r2,r2,65535
 801d8c8:	10000f26 	beq	r2,zero,801d908 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801d8cc:	e0bffb17 	ldw	r2,-20(fp)
 801d8d0:	10c00817 	ldw	r3,32(r2)
 801d8d4:	00bfff84 	movi	r2,-2
 801d8d8:	1886703a 	and	r3,r3,r2
 801d8dc:	e0bffb17 	ldw	r2,-20(fp)
 801d8e0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 801d8e4:	e0bffc17 	ldw	r2,-16(fp)
 801d8e8:	10800104 	addi	r2,r2,4
 801d8ec:	1007883a 	mov	r3,r2
 801d8f0:	e0bffb17 	ldw	r2,-20(fp)
 801d8f4:	10800817 	ldw	r2,32(r2)
 801d8f8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801d8fc:	e0bffc17 	ldw	r2,-16(fp)
 801d900:	10800104 	addi	r2,r2,4
 801d904:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 801d908:	e0bffd17 	ldw	r2,-12(fp)
 801d90c:	1080800c 	andi	r2,r2,512
 801d910:	10003126 	beq	r2,zero,801d9d8 <altera_avalon_jtag_uart_irq+0x1f0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 801d914:	e0bffd17 	ldw	r2,-12(fp)
 801d918:	1004d43a 	srli	r2,r2,16
 801d91c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 801d920:	00001406 	br	801d974 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 801d924:	e0bffc17 	ldw	r2,-16(fp)
 801d928:	e0fffb17 	ldw	r3,-20(fp)
 801d92c:	18c00d17 	ldw	r3,52(r3)
 801d930:	e13ffb17 	ldw	r4,-20(fp)
 801d934:	20c7883a 	add	r3,r4,r3
 801d938:	18c20e04 	addi	r3,r3,2104
 801d93c:	18c00003 	ldbu	r3,0(r3)
 801d940:	18c03fcc 	andi	r3,r3,255
 801d944:	18c0201c 	xori	r3,r3,128
 801d948:	18ffe004 	addi	r3,r3,-128
 801d94c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801d950:	e0bffb17 	ldw	r2,-20(fp)
 801d954:	10800d17 	ldw	r2,52(r2)
 801d958:	10800044 	addi	r2,r2,1
 801d95c:	10c1ffcc 	andi	r3,r2,2047
 801d960:	e0bffb17 	ldw	r2,-20(fp)
 801d964:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 801d968:	e0bffa17 	ldw	r2,-24(fp)
 801d96c:	10bfffc4 	addi	r2,r2,-1
 801d970:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 801d974:	e0bffa17 	ldw	r2,-24(fp)
 801d978:	10000526 	beq	r2,zero,801d990 <altera_avalon_jtag_uart_irq+0x1a8>
 801d97c:	e0bffb17 	ldw	r2,-20(fp)
 801d980:	10c00d17 	ldw	r3,52(r2)
 801d984:	e0bffb17 	ldw	r2,-20(fp)
 801d988:	10800c17 	ldw	r2,48(r2)
 801d98c:	18bfe51e 	bne	r3,r2,801d924 <__alt_data_end+0xf801d924>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 801d990:	e0bffa17 	ldw	r2,-24(fp)
 801d994:	10001026 	beq	r2,zero,801d9d8 <altera_avalon_jtag_uart_irq+0x1f0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801d998:	e0bffb17 	ldw	r2,-20(fp)
 801d99c:	10c00817 	ldw	r3,32(r2)
 801d9a0:	00bfff44 	movi	r2,-3
 801d9a4:	1886703a 	and	r3,r3,r2
 801d9a8:	e0bffb17 	ldw	r2,-20(fp)
 801d9ac:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801d9b0:	e0bffb17 	ldw	r2,-20(fp)
 801d9b4:	10800017 	ldw	r2,0(r2)
 801d9b8:	10800104 	addi	r2,r2,4
 801d9bc:	1007883a 	mov	r3,r2
 801d9c0:	e0bffb17 	ldw	r2,-20(fp)
 801d9c4:	10800817 	ldw	r2,32(r2)
 801d9c8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 801d9cc:	e0bffc17 	ldw	r2,-16(fp)
 801d9d0:	10800104 	addi	r2,r2,4
 801d9d4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 801d9d8:	003f8c06 	br	801d80c <__alt_data_end+0xf801d80c>
}
 801d9dc:	e037883a 	mov	sp,fp
 801d9e0:	df000017 	ldw	fp,0(sp)
 801d9e4:	dec00104 	addi	sp,sp,4
 801d9e8:	f800283a 	ret

0801d9ec <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 801d9ec:	defff804 	addi	sp,sp,-32
 801d9f0:	df000715 	stw	fp,28(sp)
 801d9f4:	df000704 	addi	fp,sp,28
 801d9f8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 801d9fc:	e0bffb17 	ldw	r2,-20(fp)
 801da00:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 801da04:	e0bff917 	ldw	r2,-28(fp)
 801da08:	10800017 	ldw	r2,0(r2)
 801da0c:	10800104 	addi	r2,r2,4
 801da10:	10800037 	ldwio	r2,0(r2)
 801da14:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 801da18:	e0bffa17 	ldw	r2,-24(fp)
 801da1c:	1081000c 	andi	r2,r2,1024
 801da20:	10000b26 	beq	r2,zero,801da50 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 801da24:	e0bff917 	ldw	r2,-28(fp)
 801da28:	10800017 	ldw	r2,0(r2)
 801da2c:	10800104 	addi	r2,r2,4
 801da30:	1007883a 	mov	r3,r2
 801da34:	e0bff917 	ldw	r2,-28(fp)
 801da38:	10800817 	ldw	r2,32(r2)
 801da3c:	10810014 	ori	r2,r2,1024
 801da40:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 801da44:	e0bff917 	ldw	r2,-28(fp)
 801da48:	10000915 	stw	zero,36(r2)
 801da4c:	00000a06 	br	801da78 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 801da50:	e0bff917 	ldw	r2,-28(fp)
 801da54:	10c00917 	ldw	r3,36(r2)
 801da58:	00a00034 	movhi	r2,32768
 801da5c:	10bfff04 	addi	r2,r2,-4
 801da60:	10c00536 	bltu	r2,r3,801da78 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 801da64:	e0bff917 	ldw	r2,-28(fp)
 801da68:	10800917 	ldw	r2,36(r2)
 801da6c:	10c00044 	addi	r3,r2,1
 801da70:	e0bff917 	ldw	r2,-28(fp)
 801da74:	10c00915 	stw	r3,36(r2)
 801da78:	008205f4 	movhi	r2,2071
 801da7c:	10ae7104 	addi	r2,r2,-17980
 801da80:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 801da84:	e037883a 	mov	sp,fp
 801da88:	df000017 	ldw	fp,0(sp)
 801da8c:	dec00104 	addi	sp,sp,4
 801da90:	f800283a 	ret

0801da94 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 801da94:	defffd04 	addi	sp,sp,-12
 801da98:	df000215 	stw	fp,8(sp)
 801da9c:	df000204 	addi	fp,sp,8
 801daa0:	e13ffe15 	stw	r4,-8(fp)
 801daa4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801daa8:	00000506 	br	801dac0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 801daac:	e0bfff17 	ldw	r2,-4(fp)
 801dab0:	1090000c 	andi	r2,r2,16384
 801dab4:	10000226 	beq	r2,zero,801dac0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 801dab8:	00bffd44 	movi	r2,-11
 801dabc:	00000b06 	br	801daec <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 801dac0:	e0bffe17 	ldw	r2,-8(fp)
 801dac4:	10c00d17 	ldw	r3,52(r2)
 801dac8:	e0bffe17 	ldw	r2,-8(fp)
 801dacc:	10800c17 	ldw	r2,48(r2)
 801dad0:	18800526 	beq	r3,r2,801dae8 <altera_avalon_jtag_uart_close+0x54>
 801dad4:	e0bffe17 	ldw	r2,-8(fp)
 801dad8:	10c00917 	ldw	r3,36(r2)
 801dadc:	e0bffe17 	ldw	r2,-8(fp)
 801dae0:	10800117 	ldw	r2,4(r2)
 801dae4:	18bff136 	bltu	r3,r2,801daac <__alt_data_end+0xf801daac>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 801dae8:	0005883a 	mov	r2,zero
}
 801daec:	e037883a 	mov	sp,fp
 801daf0:	df000017 	ldw	fp,0(sp)
 801daf4:	dec00104 	addi	sp,sp,4
 801daf8:	f800283a 	ret

0801dafc <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 801dafc:	defffa04 	addi	sp,sp,-24
 801db00:	df000515 	stw	fp,20(sp)
 801db04:	df000504 	addi	fp,sp,20
 801db08:	e13ffd15 	stw	r4,-12(fp)
 801db0c:	e17ffe15 	stw	r5,-8(fp)
 801db10:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 801db14:	00bff9c4 	movi	r2,-25
 801db18:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 801db1c:	e0bffe17 	ldw	r2,-8(fp)
 801db20:	10da8060 	cmpeqi	r3,r2,27137
 801db24:	1800031e 	bne	r3,zero,801db34 <altera_avalon_jtag_uart_ioctl+0x38>
 801db28:	109a80a0 	cmpeqi	r2,r2,27138
 801db2c:	1000191e 	bne	r2,zero,801db94 <altera_avalon_jtag_uart_ioctl+0x98>
      rc = 0;
    }
    break;

  default:
    break;
 801db30:	00002806 	br	801dbd4 <altera_avalon_jtag_uart_ioctl+0xd8>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 801db34:	e0bffd17 	ldw	r2,-12(fp)
 801db38:	10c00117 	ldw	r3,4(r2)
 801db3c:	00a00034 	movhi	r2,32768
 801db40:	10bfffc4 	addi	r2,r2,-1
 801db44:	18801226 	beq	r3,r2,801db90 <altera_avalon_jtag_uart_ioctl+0x94>
    {
      int timeout = *((int *)arg);
 801db48:	e0bfff17 	ldw	r2,-4(fp)
 801db4c:	10800017 	ldw	r2,0(r2)
 801db50:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 801db54:	e0bffc17 	ldw	r2,-16(fp)
 801db58:	10800090 	cmplti	r2,r2,2
 801db5c:	1000061e 	bne	r2,zero,801db78 <altera_avalon_jtag_uart_ioctl+0x7c>
 801db60:	e0fffc17 	ldw	r3,-16(fp)
 801db64:	00a00034 	movhi	r2,32768
 801db68:	10bfffc4 	addi	r2,r2,-1
 801db6c:	18800226 	beq	r3,r2,801db78 <altera_avalon_jtag_uart_ioctl+0x7c>
 801db70:	e0bffc17 	ldw	r2,-16(fp)
 801db74:	00000206 	br	801db80 <altera_avalon_jtag_uart_ioctl+0x84>
 801db78:	00a00034 	movhi	r2,32768
 801db7c:	10bfff84 	addi	r2,r2,-2
 801db80:	e0fffd17 	ldw	r3,-12(fp)
 801db84:	18800115 	stw	r2,4(r3)
      rc = 0;
 801db88:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801db8c:	00001106 	br	801dbd4 <altera_avalon_jtag_uart_ioctl+0xd8>
 801db90:	00001006 	br	801dbd4 <altera_avalon_jtag_uart_ioctl+0xd8>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 801db94:	e0bffd17 	ldw	r2,-12(fp)
 801db98:	10c00117 	ldw	r3,4(r2)
 801db9c:	00a00034 	movhi	r2,32768
 801dba0:	10bfffc4 	addi	r2,r2,-1
 801dba4:	18800a26 	beq	r3,r2,801dbd0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 801dba8:	e0bffd17 	ldw	r2,-12(fp)
 801dbac:	10c00917 	ldw	r3,36(r2)
 801dbb0:	e0bffd17 	ldw	r2,-12(fp)
 801dbb4:	10800117 	ldw	r2,4(r2)
 801dbb8:	1885803a 	cmpltu	r2,r3,r2
 801dbbc:	10c03fcc 	andi	r3,r2,255
 801dbc0:	e0bfff17 	ldw	r2,-4(fp)
 801dbc4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 801dbc8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 801dbcc:	00000006 	br	801dbd0 <altera_avalon_jtag_uart_ioctl+0xd4>
 801dbd0:	0001883a 	nop

  default:
    break;
  }

  return rc;
 801dbd4:	e0bffb17 	ldw	r2,-20(fp)
}
 801dbd8:	e037883a 	mov	sp,fp
 801dbdc:	df000017 	ldw	fp,0(sp)
 801dbe0:	dec00104 	addi	sp,sp,4
 801dbe4:	f800283a 	ret

0801dbe8 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 801dbe8:	defff304 	addi	sp,sp,-52
 801dbec:	dfc00c15 	stw	ra,48(sp)
 801dbf0:	df000b15 	stw	fp,44(sp)
 801dbf4:	df000b04 	addi	fp,sp,44
 801dbf8:	e13ffc15 	stw	r4,-16(fp)
 801dbfc:	e17ffd15 	stw	r5,-12(fp)
 801dc00:	e1bffe15 	stw	r6,-8(fp)
 801dc04:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 801dc08:	e0bffd17 	ldw	r2,-12(fp)
 801dc0c:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801dc10:	00004906 	br	801dd38 <altera_avalon_jtag_uart_read+0x150>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 801dc14:	e0bffc17 	ldw	r2,-16(fp)
 801dc18:	10800a17 	ldw	r2,40(r2)
 801dc1c:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 801dc20:	e0bffc17 	ldw	r2,-16(fp)
 801dc24:	10800b17 	ldw	r2,44(r2)
 801dc28:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 801dc2c:	e0fff717 	ldw	r3,-36(fp)
 801dc30:	e0bff817 	ldw	r2,-32(fp)
 801dc34:	18800536 	bltu	r3,r2,801dc4c <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 801dc38:	e0fff717 	ldw	r3,-36(fp)
 801dc3c:	e0bff817 	ldw	r2,-32(fp)
 801dc40:	1885c83a 	sub	r2,r3,r2
 801dc44:	e0bff615 	stw	r2,-40(fp)
 801dc48:	00000406 	br	801dc5c <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 801dc4c:	00c20004 	movi	r3,2048
 801dc50:	e0bff817 	ldw	r2,-32(fp)
 801dc54:	1885c83a 	sub	r2,r3,r2
 801dc58:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801dc5c:	e0bff617 	ldw	r2,-40(fp)
 801dc60:	1000011e 	bne	r2,zero,801dc68 <altera_avalon_jtag_uart_read+0x80>
        break; /* No more data available */
 801dc64:	00001d06 	br	801dcdc <altera_avalon_jtag_uart_read+0xf4>

      if (n > space)
 801dc68:	e0fffe17 	ldw	r3,-8(fp)
 801dc6c:	e0bff617 	ldw	r2,-40(fp)
 801dc70:	1880022e 	bgeu	r3,r2,801dc7c <altera_avalon_jtag_uart_read+0x94>
        n = space;
 801dc74:	e0bffe17 	ldw	r2,-8(fp)
 801dc78:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 801dc7c:	e0bff817 	ldw	r2,-32(fp)
 801dc80:	10800e04 	addi	r2,r2,56
 801dc84:	e0fffc17 	ldw	r3,-16(fp)
 801dc88:	1885883a 	add	r2,r3,r2
 801dc8c:	e13ff517 	ldw	r4,-44(fp)
 801dc90:	100b883a 	mov	r5,r2
 801dc94:	e1bff617 	ldw	r6,-40(fp)
 801dc98:	800fc580 	call	800fc58 <memcpy>
      ptr   += n;
 801dc9c:	e0fff517 	ldw	r3,-44(fp)
 801dca0:	e0bff617 	ldw	r2,-40(fp)
 801dca4:	1885883a 	add	r2,r3,r2
 801dca8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 801dcac:	e0fffe17 	ldw	r3,-8(fp)
 801dcb0:	e0bff617 	ldw	r2,-40(fp)
 801dcb4:	1885c83a 	sub	r2,r3,r2
 801dcb8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801dcbc:	e0fff817 	ldw	r3,-32(fp)
 801dcc0:	e0bff617 	ldw	r2,-40(fp)
 801dcc4:	1885883a 	add	r2,r3,r2
 801dcc8:	10c1ffcc 	andi	r3,r2,2047
 801dccc:	e0bffc17 	ldw	r2,-16(fp)
 801dcd0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 801dcd4:	e0bffe17 	ldw	r2,-8(fp)
 801dcd8:	00bfce16 	blt	zero,r2,801dc14 <__alt_data_end+0xf801dc14>

    /* If we read any data then return it */
    if (ptr != buffer)
 801dcdc:	e0fff517 	ldw	r3,-44(fp)
 801dce0:	e0bffd17 	ldw	r2,-12(fp)
 801dce4:	18800126 	beq	r3,r2,801dcec <altera_avalon_jtag_uart_read+0x104>
      break;
 801dce8:	00001506 	br	801dd40 <altera_avalon_jtag_uart_read+0x158>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 801dcec:	e0bfff17 	ldw	r2,-4(fp)
 801dcf0:	1090000c 	andi	r2,r2,16384
 801dcf4:	10000126 	beq	r2,zero,801dcfc <altera_avalon_jtag_uart_read+0x114>
      break;
 801dcf8:	00001106 	br	801dd40 <altera_avalon_jtag_uart_read+0x158>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 801dcfc:	0001883a 	nop
 801dd00:	e0bffc17 	ldw	r2,-16(fp)
 801dd04:	10c00a17 	ldw	r3,40(r2)
 801dd08:	e0bff717 	ldw	r2,-36(fp)
 801dd0c:	1880051e 	bne	r3,r2,801dd24 <altera_avalon_jtag_uart_read+0x13c>
 801dd10:	e0bffc17 	ldw	r2,-16(fp)
 801dd14:	10c00917 	ldw	r3,36(r2)
 801dd18:	e0bffc17 	ldw	r2,-16(fp)
 801dd1c:	10800117 	ldw	r2,4(r2)
 801dd20:	18bff736 	bltu	r3,r2,801dd00 <__alt_data_end+0xf801dd00>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 801dd24:	e0bffc17 	ldw	r2,-16(fp)
 801dd28:	10c00a17 	ldw	r3,40(r2)
 801dd2c:	e0bff717 	ldw	r2,-36(fp)
 801dd30:	1880011e 	bne	r3,r2,801dd38 <altera_avalon_jtag_uart_read+0x150>
      break;
 801dd34:	00000206 	br	801dd40 <altera_avalon_jtag_uart_read+0x158>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 801dd38:	e0bffe17 	ldw	r2,-8(fp)
 801dd3c:	00bfb516 	blt	zero,r2,801dc14 <__alt_data_end+0xf801dc14>
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 801dd40:	e0fff517 	ldw	r3,-44(fp)
 801dd44:	e0bffd17 	ldw	r2,-12(fp)
 801dd48:	18801826 	beq	r3,r2,801ddac <altera_avalon_jtag_uart_read+0x1c4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801dd4c:	0005303a 	rdctl	r2,status
 801dd50:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801dd54:	e0fffa17 	ldw	r3,-24(fp)
 801dd58:	00bfff84 	movi	r2,-2
 801dd5c:	1884703a 	and	r2,r3,r2
 801dd60:	1001703a 	wrctl	status,r2
  
  return context;
 801dd64:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 801dd68:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 801dd6c:	e0bffc17 	ldw	r2,-16(fp)
 801dd70:	10800817 	ldw	r2,32(r2)
 801dd74:	10c00054 	ori	r3,r2,1
 801dd78:	e0bffc17 	ldw	r2,-16(fp)
 801dd7c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801dd80:	e0bffc17 	ldw	r2,-16(fp)
 801dd84:	10800017 	ldw	r2,0(r2)
 801dd88:	10800104 	addi	r2,r2,4
 801dd8c:	1007883a 	mov	r3,r2
 801dd90:	e0bffc17 	ldw	r2,-16(fp)
 801dd94:	10800817 	ldw	r2,32(r2)
 801dd98:	18800035 	stwio	r2,0(r3)
 801dd9c:	e0bff917 	ldw	r2,-28(fp)
 801dda0:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801dda4:	e0bffb17 	ldw	r2,-20(fp)
 801dda8:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 801ddac:	e0fff517 	ldw	r3,-44(fp)
 801ddb0:	e0bffd17 	ldw	r2,-12(fp)
 801ddb4:	18800426 	beq	r3,r2,801ddc8 <altera_avalon_jtag_uart_read+0x1e0>
    return ptr - buffer;
 801ddb8:	e0fff517 	ldw	r3,-44(fp)
 801ddbc:	e0bffd17 	ldw	r2,-12(fp)
 801ddc0:	1885c83a 	sub	r2,r3,r2
 801ddc4:	00000606 	br	801dde0 <altera_avalon_jtag_uart_read+0x1f8>
  else if (flags & O_NONBLOCK)
 801ddc8:	e0bfff17 	ldw	r2,-4(fp)
 801ddcc:	1090000c 	andi	r2,r2,16384
 801ddd0:	10000226 	beq	r2,zero,801dddc <altera_avalon_jtag_uart_read+0x1f4>
    return -EWOULDBLOCK;
 801ddd4:	00bffd44 	movi	r2,-11
 801ddd8:	00000106 	br	801dde0 <altera_avalon_jtag_uart_read+0x1f8>
  else
    return -EIO;
 801dddc:	00bffec4 	movi	r2,-5
}
 801dde0:	e037883a 	mov	sp,fp
 801dde4:	dfc00117 	ldw	ra,4(sp)
 801dde8:	df000017 	ldw	fp,0(sp)
 801ddec:	dec00204 	addi	sp,sp,8
 801ddf0:	f800283a 	ret

0801ddf4 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 801ddf4:	defff304 	addi	sp,sp,-52
 801ddf8:	dfc00c15 	stw	ra,48(sp)
 801ddfc:	df000b15 	stw	fp,44(sp)
 801de00:	df000b04 	addi	fp,sp,44
 801de04:	e13ffc15 	stw	r4,-16(fp)
 801de08:	e17ffd15 	stw	r5,-12(fp)
 801de0c:	e1bffe15 	stw	r6,-8(fp)
 801de10:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 801de14:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 801de18:	e0bffd17 	ldw	r2,-12(fp)
 801de1c:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801de20:	00003806 	br	801df04 <altera_avalon_jtag_uart_write+0x110>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 801de24:	e0bffc17 	ldw	r2,-16(fp)
 801de28:	10800c17 	ldw	r2,48(r2)
 801de2c:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 801de30:	e0bffc17 	ldw	r2,-16(fp)
 801de34:	10800d17 	ldw	r2,52(r2)
 801de38:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 801de3c:	e0fff817 	ldw	r3,-32(fp)
 801de40:	e0bff517 	ldw	r2,-44(fp)
 801de44:	1880062e 	bgeu	r3,r2,801de60 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 801de48:	e0fff517 	ldw	r3,-44(fp)
 801de4c:	e0bff817 	ldw	r2,-32(fp)
 801de50:	1885c83a 	sub	r2,r3,r2
 801de54:	10bfffc4 	addi	r2,r2,-1
 801de58:	e0bff615 	stw	r2,-40(fp)
 801de5c:	00000b06 	br	801de8c <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 801de60:	e0bff517 	ldw	r2,-44(fp)
 801de64:	10000526 	beq	r2,zero,801de7c <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 801de68:	00c20004 	movi	r3,2048
 801de6c:	e0bff817 	ldw	r2,-32(fp)
 801de70:	1885c83a 	sub	r2,r3,r2
 801de74:	e0bff615 	stw	r2,-40(fp)
 801de78:	00000406 	br	801de8c <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 801de7c:	00c1ffc4 	movi	r3,2047
 801de80:	e0bff817 	ldw	r2,-32(fp)
 801de84:	1885c83a 	sub	r2,r3,r2
 801de88:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 801de8c:	e0bff617 	ldw	r2,-40(fp)
 801de90:	1000011e 	bne	r2,zero,801de98 <altera_avalon_jtag_uart_write+0xa4>
        break;
 801de94:	00001d06 	br	801df0c <altera_avalon_jtag_uart_write+0x118>

      if (n > count)
 801de98:	e0fffe17 	ldw	r3,-8(fp)
 801de9c:	e0bff617 	ldw	r2,-40(fp)
 801dea0:	1880022e 	bgeu	r3,r2,801deac <altera_avalon_jtag_uart_write+0xb8>
        n = count;
 801dea4:	e0bffe17 	ldw	r2,-8(fp)
 801dea8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 801deac:	e0bff817 	ldw	r2,-32(fp)
 801deb0:	10820e04 	addi	r2,r2,2104
 801deb4:	e0fffc17 	ldw	r3,-16(fp)
 801deb8:	1885883a 	add	r2,r3,r2
 801debc:	1009883a 	mov	r4,r2
 801dec0:	e17ffd17 	ldw	r5,-12(fp)
 801dec4:	e1bff617 	ldw	r6,-40(fp)
 801dec8:	800fc580 	call	800fc58 <memcpy>
      ptr   += n;
 801decc:	e0fffd17 	ldw	r3,-12(fp)
 801ded0:	e0bff617 	ldw	r2,-40(fp)
 801ded4:	1885883a 	add	r2,r3,r2
 801ded8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 801dedc:	e0fffe17 	ldw	r3,-8(fp)
 801dee0:	e0bff617 	ldw	r2,-40(fp)
 801dee4:	1885c83a 	sub	r2,r3,r2
 801dee8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 801deec:	e0fff817 	ldw	r3,-32(fp)
 801def0:	e0bff617 	ldw	r2,-40(fp)
 801def4:	1885883a 	add	r2,r3,r2
 801def8:	10c1ffcc 	andi	r3,r2,2047
 801defc:	e0bffc17 	ldw	r2,-16(fp)
 801df00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 801df04:	e0bffe17 	ldw	r2,-8(fp)
 801df08:	00bfc616 	blt	zero,r2,801de24 <__alt_data_end+0xf801de24>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801df0c:	0005303a 	rdctl	r2,status
 801df10:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801df14:	e0fffa17 	ldw	r3,-24(fp)
 801df18:	00bfff84 	movi	r2,-2
 801df1c:	1884703a 	and	r2,r3,r2
 801df20:	1001703a 	wrctl	status,r2
  
  return context;
 801df24:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 801df28:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 801df2c:	e0bffc17 	ldw	r2,-16(fp)
 801df30:	10800817 	ldw	r2,32(r2)
 801df34:	10c00094 	ori	r3,r2,2
 801df38:	e0bffc17 	ldw	r2,-16(fp)
 801df3c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 801df40:	e0bffc17 	ldw	r2,-16(fp)
 801df44:	10800017 	ldw	r2,0(r2)
 801df48:	10800104 	addi	r2,r2,4
 801df4c:	1007883a 	mov	r3,r2
 801df50:	e0bffc17 	ldw	r2,-16(fp)
 801df54:	10800817 	ldw	r2,32(r2)
 801df58:	18800035 	stwio	r2,0(r3)
 801df5c:	e0bff917 	ldw	r2,-28(fp)
 801df60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801df64:	e0bffb17 	ldw	r2,-20(fp)
 801df68:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 801df6c:	e0bffe17 	ldw	r2,-8(fp)
 801df70:	0080120e 	bge	zero,r2,801dfbc <altera_avalon_jtag_uart_write+0x1c8>
    {
      if (flags & O_NONBLOCK)
 801df74:	e0bfff17 	ldw	r2,-4(fp)
 801df78:	1090000c 	andi	r2,r2,16384
 801df7c:	10000126 	beq	r2,zero,801df84 <altera_avalon_jtag_uart_write+0x190>
        break;
 801df80:	00001006 	br	801dfc4 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 801df84:	0001883a 	nop
 801df88:	e0bffc17 	ldw	r2,-16(fp)
 801df8c:	10c00d17 	ldw	r3,52(r2)
 801df90:	e0bff517 	ldw	r2,-44(fp)
 801df94:	1880051e 	bne	r3,r2,801dfac <altera_avalon_jtag_uart_write+0x1b8>
 801df98:	e0bffc17 	ldw	r2,-16(fp)
 801df9c:	10c00917 	ldw	r3,36(r2)
 801dfa0:	e0bffc17 	ldw	r2,-16(fp)
 801dfa4:	10800117 	ldw	r2,4(r2)
 801dfa8:	18bff736 	bltu	r3,r2,801df88 <__alt_data_end+0xf801df88>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 801dfac:	e0bffc17 	ldw	r2,-16(fp)
 801dfb0:	10800917 	ldw	r2,36(r2)
 801dfb4:	10000126 	beq	r2,zero,801dfbc <altera_avalon_jtag_uart_write+0x1c8>
         break;
 801dfb8:	00000206 	br	801dfc4 <altera_avalon_jtag_uart_write+0x1d0>
    }
  }
  while (count > 0);
 801dfbc:	e0bffe17 	ldw	r2,-8(fp)
 801dfc0:	00bf9716 	blt	zero,r2,801de20 <__alt_data_end+0xf801de20>
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 801dfc4:	e0fffd17 	ldw	r3,-12(fp)
 801dfc8:	e0bff717 	ldw	r2,-36(fp)
 801dfcc:	18800426 	beq	r3,r2,801dfe0 <altera_avalon_jtag_uart_write+0x1ec>
    return ptr - start;
 801dfd0:	e0fffd17 	ldw	r3,-12(fp)
 801dfd4:	e0bff717 	ldw	r2,-36(fp)
 801dfd8:	1885c83a 	sub	r2,r3,r2
 801dfdc:	00000606 	br	801dff8 <altera_avalon_jtag_uart_write+0x204>
  else if (flags & O_NONBLOCK)
 801dfe0:	e0bfff17 	ldw	r2,-4(fp)
 801dfe4:	1090000c 	andi	r2,r2,16384
 801dfe8:	10000226 	beq	r2,zero,801dff4 <altera_avalon_jtag_uart_write+0x200>
    return -EWOULDBLOCK;
 801dfec:	00bffd44 	movi	r2,-11
 801dff0:	00000106 	br	801dff8 <altera_avalon_jtag_uart_write+0x204>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 801dff4:	00bffec4 	movi	r2,-5
}
 801dff8:	e037883a 	mov	sp,fp
 801dffc:	dfc00117 	ldw	ra,4(sp)
 801e000:	df000017 	ldw	fp,0(sp)
 801e004:	dec00204 	addi	sp,sp,8
 801e008:	f800283a 	ret

0801e00c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801e00c:	defffe04 	addi	sp,sp,-8
 801e010:	dfc00115 	stw	ra,4(sp)
 801e014:	df000015 	stw	fp,0(sp)
 801e018:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801e01c:	008205f4 	movhi	r2,2071
 801e020:	10a34e04 	addi	r2,r2,-29384
 801e024:	10800017 	ldw	r2,0(r2)
 801e028:	10000526 	beq	r2,zero,801e040 <alt_get_errno+0x34>
 801e02c:	008205f4 	movhi	r2,2071
 801e030:	10a34e04 	addi	r2,r2,-29384
 801e034:	10800017 	ldw	r2,0(r2)
 801e038:	103ee83a 	callr	r2
 801e03c:	00000206 	br	801e048 <alt_get_errno+0x3c>
 801e040:	008205f4 	movhi	r2,2071
 801e044:	10ae6904 	addi	r2,r2,-18012
}
 801e048:	e037883a 	mov	sp,fp
 801e04c:	dfc00117 	ldw	ra,4(sp)
 801e050:	df000017 	ldw	fp,0(sp)
 801e054:	dec00204 	addi	sp,sp,8
 801e058:	f800283a 	ret

0801e05c <alt_avalon_sgdma_do_async_transfer>:
 * - 0 for success, or various errors defined in <errno.h>
 */
int alt_avalon_sgdma_do_async_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 801e05c:	defffc04 	addi	sp,sp,-16
 801e060:	df000315 	stw	fp,12(sp)
 801e064:	df000304 	addi	fp,sp,12
 801e068:	e13ffe15 	stw	r4,-8(fp)
 801e06c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  /* Return with error immediately if controller is busy */
  if( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 801e070:	e0bffe17 	ldw	r2,-8(fp)
 801e074:	10800317 	ldw	r2,12(r2)
 801e078:	10800037 	ldwio	r2,0(r2)
 801e07c:	1080040c 	andi	r2,r2,16
 801e080:	10000226 	beq	r2,zero,801e08c <alt_avalon_sgdma_do_async_transfer+0x30>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) ) {
    return -EBUSY;
 801e084:	00bffc04 	movi	r2,-16
 801e088:	00003906 	br	801e170 <alt_avalon_sgdma_do_async_transfer+0x114>
  }

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 801e08c:	e0bffe17 	ldw	r2,-8(fp)
 801e090:	10800317 	ldw	r2,12(r2)
 801e094:	10800404 	addi	r2,r2,16
 801e098:	e0fffe17 	ldw	r3,-8(fp)
 801e09c:	18c00317 	ldw	r3,12(r3)
 801e0a0:	18c00404 	addi	r3,r3,16
 801e0a4:	19000037 	ldwio	r4,0(r3)
 801e0a8:	00fff7c4 	movi	r3,-33
 801e0ac:	20c6703a 	and	r3,r4,r3
 801e0b0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 801e0b4:	e0bffe17 	ldw	r2,-8(fp)
 801e0b8:	10800317 	ldw	r2,12(r2)
 801e0bc:	00c03fc4 	movi	r3,255
 801e0c0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 801e0c4:	e0bffe17 	ldw	r2,-8(fp)
 801e0c8:	10800317 	ldw	r2,12(r2)
 801e0cc:	10800804 	addi	r2,r2,32
 801e0d0:	e0ffff17 	ldw	r3,-4(fp)
 801e0d4:	10c00035 	stwio	r3,0(r2)
   *  - Stop on an error with any particular descriptor
   *  - Include any control register bits registered with along with
   *    the callback routine (effectively, interrupts are controlled
   *    via the control bits set during callback-register time).
   */
  if(dev->callback) {
 801e0d8:	e0bffe17 	ldw	r2,-8(fp)
 801e0dc:	10800917 	ldw	r2,36(r2)
 801e0e0:	10001126 	beq	r2,zero,801e128 <alt_avalon_sgdma_do_async_transfer+0xcc>
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801e0e4:	e0bffe17 	ldw	r2,-8(fp)
 801e0e8:	10800317 	ldw	r2,12(r2)
 801e0ec:	10800404 	addi	r2,r2,16
 801e0f0:	10800037 	ldwio	r2,0(r2)
 801e0f4:	e0bffd15 	stw	r2,-12(fp)

    control |= (dev->chain_control                          |
 801e0f8:	e0bffe17 	ldw	r2,-8(fp)
 801e0fc:	10c00b17 	ldw	r3,44(r2)
 801e100:	e0bffd17 	ldw	r2,-12(fp)
 801e104:	1884b03a 	or	r2,r3,r2
 801e108:	10801814 	ori	r2,r2,96
 801e10c:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK  );

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801e110:	e0bffe17 	ldw	r2,-8(fp)
 801e114:	10800317 	ldw	r2,12(r2)
 801e118:	10800404 	addi	r2,r2,16
 801e11c:	e0fffd17 	ldw	r3,-12(fp)
 801e120:	10c00035 	stwio	r3,0(r2)
 801e124:	00001106 	br	801e16c <alt_avalon_sgdma_do_async_transfer+0x110>
   *   - Run
   *   - Stop on an error with any particular descriptor
   *   - Disable interrupt generation
   */
  else {
    control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801e128:	e0bffe17 	ldw	r2,-8(fp)
 801e12c:	10800317 	ldw	r2,12(r2)
 801e130:	10800404 	addi	r2,r2,16
 801e134:	10800037 	ldwio	r2,0(r2)
 801e138:	e0bffd15 	stw	r2,-12(fp)

    control |= (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK         |
 801e13c:	e0bffd17 	ldw	r2,-12(fp)
 801e140:	10801814 	ori	r2,r2,96
 801e144:	e0bffd15 	stw	r2,-12(fp)
                ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK );
    control &= ~ALTERA_AVALON_SGDMA_CONTROL_IE_GLOBAL_MSK;
 801e148:	e0fffd17 	ldw	r3,-12(fp)
 801e14c:	00bffbc4 	movi	r2,-17
 801e150:	1884703a 	and	r2,r3,r2
 801e154:	e0bffd15 	stw	r2,-12(fp)

    IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801e158:	e0bffe17 	ldw	r2,-8(fp)
 801e15c:	10800317 	ldw	r2,12(r2)
 801e160:	10800404 	addi	r2,r2,16
 801e164:	e0fffd17 	ldw	r3,-12(fp)
 801e168:	10c00035 	stwio	r3,0(r2)

  /*
   * Error detection/handling should be performed at the application
   * or callback level as appropriate.
   */
  return 0;
 801e16c:	0005883a 	mov	r2,zero
}
 801e170:	e037883a 	mov	sp,fp
 801e174:	df000017 	ldw	fp,0(sp)
 801e178:	dec00104 	addi	sp,sp,4
 801e17c:	f800283a 	ret

0801e180 <alt_avalon_sgdma_do_sync_transfer>:
 * - status: Content of SGDMA status register.
 */
alt_u8 alt_avalon_sgdma_do_sync_transfer(
  alt_sgdma_dev *dev,
  alt_sgdma_descriptor *desc)
{
 801e180:	defffc04 	addi	sp,sp,-16
 801e184:	df000315 	stw	fp,12(sp)
 801e188:	df000304 	addi	fp,sp,12
 801e18c:	e13ffe15 	stw	r4,-8(fp)
 801e190:	e17fff15 	stw	r5,-4(fp)
  alt_u8 status;

  /* Wait for any pending transfers to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 801e194:	0001883a 	nop
 801e198:	e0bffe17 	ldw	r2,-8(fp)
 801e19c:	10800317 	ldw	r2,12(r2)
 801e1a0:	10800037 	ldwio	r2,0(r2)
 801e1a4:	1080040c 	andi	r2,r2,16
 801e1a8:	103ffb1e 	bne	r2,zero,801e198 <__alt_data_end+0xf801e198>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );


  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 801e1ac:	e0bffe17 	ldw	r2,-8(fp)
 801e1b0:	10800317 	ldw	r2,12(r2)
 801e1b4:	10800404 	addi	r2,r2,16
 801e1b8:	e0fffe17 	ldw	r3,-8(fp)
 801e1bc:	18c00317 	ldw	r3,12(r3)
 801e1c0:	18c00404 	addi	r3,r3,16
 801e1c4:	19000037 	ldwio	r4,0(r3)
 801e1c8:	00fff7c4 	movi	r3,-33
 801e1cc:	20c6703a 	and	r3,r4,r3
 801e1d0:	10c00035 	stwio	r3,0(r2)

  /*
   * Clear any (previous) status register information
   * that might occlude our error checking later.
   */
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 801e1d4:	e0bffe17 	ldw	r2,-8(fp)
 801e1d8:	10800317 	ldw	r2,12(r2)
 801e1dc:	00c03fc4 	movi	r3,255
 801e1e0:	10c00035 	stwio	r3,0(r2)

  /* Point the controller at the descriptor */
  IOWR_ALTERA_AVALON_SGDMA_NEXT_DESC_POINTER(dev->base, (alt_u32) desc);
 801e1e4:	e0bffe17 	ldw	r2,-8(fp)
 801e1e8:	10800317 	ldw	r2,12(r2)
 801e1ec:	10800804 	addi	r2,r2,32
 801e1f0:	e0ffff17 	ldw	r3,-4(fp)
 801e1f4:	10c00035 	stwio	r3,0(r2)
   * Set up SGDMA controller to:
   * - Disable interrupt generation
   * - Run once a valid descriptor is written to controller
   * - Stop on an error with any particular descriptor
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 801e1f8:	e0bffe17 	ldw	r2,-8(fp)
 801e1fc:	10800317 	ldw	r2,12(r2)
 801e200:	10800404 	addi	r2,r2,16
 801e204:	e0fffe17 	ldw	r3,-8(fp)
 801e208:	18c00317 	ldw	r3,12(r3)
 801e20c:	18c00404 	addi	r3,r3,16
 801e210:	18c00037 	ldwio	r3,0(r3)
 801e214:	18c01814 	ori	r3,r3,96
 801e218:	10c00035 	stwio	r3,0(r2)
    (ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK |
     ALTERA_AVALON_SGDMA_CONTROL_STOP_DMA_ER_MSK | 
     IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base)) );

  /* Wait for the descriptor (chain) to complete */
  while ( (IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base) &
 801e21c:	0001883a 	nop
 801e220:	e0bffe17 	ldw	r2,-8(fp)
 801e224:	10800317 	ldw	r2,12(r2)
 801e228:	10800037 	ldwio	r2,0(r2)
 801e22c:	1080040c 	andi	r2,r2,16
 801e230:	103ffb1e 	bne	r2,zero,801e220 <__alt_data_end+0xf801e220>
           ALTERA_AVALON_SGDMA_STATUS_BUSY_MSK) );

  /* Clear Run */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 801e234:	e0bffe17 	ldw	r2,-8(fp)
 801e238:	10800317 	ldw	r2,12(r2)
 801e23c:	10800404 	addi	r2,r2,16
 801e240:	e0fffe17 	ldw	r3,-8(fp)
 801e244:	18c00317 	ldw	r3,12(r3)
 801e248:	18c00404 	addi	r3,r3,16
 801e24c:	19000037 	ldwio	r4,0(r3)
 801e250:	00fff7c4 	movi	r3,-33
 801e254:	20c6703a 	and	r3,r4,r3
 801e258:	10c00035 	stwio	r3,0(r2)
    (IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) &
     ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK) );

  /* Get & clear status register contents */
  status = IORD_ALTERA_AVALON_SGDMA_STATUS(dev->base);
 801e25c:	e0bffe17 	ldw	r2,-8(fp)
 801e260:	10800317 	ldw	r2,12(r2)
 801e264:	10800037 	ldwio	r2,0(r2)
 801e268:	e0bffd05 	stb	r2,-12(fp)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 801e26c:	e0bffe17 	ldw	r2,-8(fp)
 801e270:	10800317 	ldw	r2,12(r2)
 801e274:	00c03fc4 	movi	r3,255
 801e278:	10c00035 	stwio	r3,0(r2)

  return status;
 801e27c:	e0bffd03 	ldbu	r2,-12(fp)
}
 801e280:	e037883a 	mov	sp,fp
 801e284:	df000017 	ldw	fp,0(sp)
 801e288:	dec00104 	addi	sp,sp,4
 801e28c:	f800283a 	ret

0801e290 <alt_avalon_sgdma_construct_mem_to_mem_desc>:
  alt_u32              *read_addr,
  alt_u32              *write_addr,
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed)
{
 801e290:	defff404 	addi	sp,sp,-48
 801e294:	dfc00b15 	stw	ra,44(sp)
 801e298:	df000a15 	stw	fp,40(sp)
 801e29c:	df000a04 	addi	fp,sp,40
 801e2a0:	e13ffb15 	stw	r4,-20(fp)
 801e2a4:	e17ffc15 	stw	r5,-16(fp)
 801e2a8:	e1bffd15 	stw	r6,-12(fp)
 801e2ac:	e1fffe15 	stw	r7,-8(fp)
 801e2b0:	e0800217 	ldw	r2,8(fp)
 801e2b4:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_mem_desc_burst(desc, next, read_addr, 
 801e2b8:	e0bfff0b 	ldhu	r2,-4(fp)
 801e2bc:	d8800015 	stw	r2,0(sp)
 801e2c0:	e0800317 	ldw	r2,12(fp)
 801e2c4:	d8800115 	stw	r2,4(sp)
 801e2c8:	e0800417 	ldw	r2,16(fp)
 801e2cc:	d8800215 	stw	r2,8(sp)
 801e2d0:	d8000315 	stw	zero,12(sp)
 801e2d4:	d8000415 	stw	zero,16(sp)
 801e2d8:	e13ffb17 	ldw	r4,-20(fp)
 801e2dc:	e17ffc17 	ldw	r5,-16(fp)
 801e2e0:	e1bffd17 	ldw	r6,-12(fp)
 801e2e4:	e1fffe17 	ldw	r7,-8(fp)
 801e2e8:	801e3000 	call	801e300 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>
    write_addr, length, read_fixed, write_fixed, 0, 0);
}
 801e2ec:	e037883a 	mov	sp,fp
 801e2f0:	dfc00117 	ldw	ra,4(sp)
 801e2f4:	df000017 	ldw	fp,0(sp)
 801e2f8:	dec00204 	addi	sp,sp,8
 801e2fc:	f800283a 	ret

0801e300 <alt_avalon_sgdma_construct_mem_to_mem_desc_burst>:
  alt_u16               length,
  int                   read_fixed,
  int                   write_fixed,
  int                   read_burst,
  int                   write_burst)
{
 801e300:	defff204 	addi	sp,sp,-56
 801e304:	dfc00d15 	stw	ra,52(sp)
 801e308:	df000c15 	stw	fp,48(sp)
 801e30c:	df000c04 	addi	fp,sp,48
 801e310:	e13ffb15 	stw	r4,-20(fp)
 801e314:	e17ffc15 	stw	r5,-16(fp)
 801e318:	e1bffd15 	stw	r6,-12(fp)
 801e31c:	e1fffe15 	stw	r7,-8(fp)
 801e320:	e0800217 	ldw	r2,8(fp)
 801e324:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 801e328:	e0bfff0b 	ldhu	r2,-4(fp)
 801e32c:	d8800015 	stw	r2,0(sp)
 801e330:	d8000115 	stw	zero,4(sp)
 801e334:	e0800317 	ldw	r2,12(fp)
 801e338:	d8800215 	stw	r2,8(sp)
 801e33c:	e0800417 	ldw	r2,16(fp)
 801e340:	d8800315 	stw	r2,12(sp)
 801e344:	e0800517 	ldw	r2,20(fp)
 801e348:	d8800415 	stw	r2,16(sp)
 801e34c:	e0800617 	ldw	r2,24(fp)
 801e350:	d8800515 	stw	r2,20(sp)
 801e354:	d8000615 	stw	zero,24(sp)
 801e358:	e13ffb17 	ldw	r4,-20(fp)
 801e35c:	e17ffc17 	ldw	r5,-16(fp)
 801e360:	e1bffd17 	ldw	r6,-12(fp)
 801e364:	e1fffe17 	ldw	r7,-8(fp)
 801e368:	801e86c0 	call	801e86c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    write_fixed,
    read_burst,
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in mem-to-mem mode
}
 801e36c:	e037883a 	mov	sp,fp
 801e370:	dfc00117 	ldw	ra,4(sp)
 801e374:	df000017 	ldw	fp,0(sp)
 801e378:	dec00204 	addi	sp,sp,8
 801e37c:	f800283a 	ret

0801e380 <alt_avalon_sgdma_construct_stream_to_mem_desc>:
  alt_sgdma_descriptor *desc,
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed)
{
 801e380:	defff804 	addi	sp,sp,-32
 801e384:	dfc00715 	stw	ra,28(sp)
 801e388:	df000615 	stw	fp,24(sp)
 801e38c:	df000604 	addi	fp,sp,24
 801e390:	e13ffc15 	stw	r4,-16(fp)
 801e394:	e17ffd15 	stw	r5,-12(fp)
 801e398:	e1bffe15 	stw	r6,-8(fp)
 801e39c:	3805883a 	mov	r2,r7
 801e3a0:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_stream_to_mem_desc_burst(desc, next, write_addr, 
 801e3a4:	e0ffff0b 	ldhu	r3,-4(fp)
 801e3a8:	e0800217 	ldw	r2,8(fp)
 801e3ac:	d8800015 	stw	r2,0(sp)
 801e3b0:	d8000115 	stw	zero,4(sp)
 801e3b4:	e13ffc17 	ldw	r4,-16(fp)
 801e3b8:	e17ffd17 	ldw	r5,-12(fp)
 801e3bc:	e1bffe17 	ldw	r6,-8(fp)
 801e3c0:	180f883a 	mov	r7,r3
 801e3c4:	801e3dc0 	call	801e3dc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>
    length_or_eop, write_fixed, 0);
}
 801e3c8:	e037883a 	mov	sp,fp
 801e3cc:	dfc00117 	ldw	ra,4(sp)
 801e3d0:	df000017 	ldw	fp,0(sp)
 801e3d4:	dec00204 	addi	sp,sp,8
 801e3d8:	f800283a 	ret

0801e3dc <alt_avalon_sgdma_construct_stream_to_mem_desc_burst>:
  alt_sgdma_descriptor *next,
  alt_u32              *write_addr,
  alt_u16               length_or_eop,
  int                   write_fixed,
  int                   write_burst)
{
 801e3dc:	defff304 	addi	sp,sp,-52
 801e3e0:	dfc00c15 	stw	ra,48(sp)
 801e3e4:	df000b15 	stw	fp,44(sp)
 801e3e8:	df000b04 	addi	fp,sp,44
 801e3ec:	e13ffc15 	stw	r4,-16(fp)
 801e3f0:	e17ffd15 	stw	r5,-12(fp)
 801e3f4:	e1bffe15 	stw	r6,-8(fp)
 801e3f8:	3805883a 	mov	r2,r7
 801e3fc:	e0bfff0d 	sth	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 801e400:	e0bfff0b 	ldhu	r2,-4(fp)
 801e404:	d8800015 	stw	r2,0(sp)
 801e408:	d8000115 	stw	zero,4(sp)
 801e40c:	d8000215 	stw	zero,8(sp)
 801e410:	e0800217 	ldw	r2,8(fp)
 801e414:	d8800315 	stw	r2,12(sp)
 801e418:	d8000415 	stw	zero,16(sp)
 801e41c:	e0800317 	ldw	r2,12(fp)
 801e420:	d8800515 	stw	r2,20(sp)
 801e424:	d8000615 	stw	zero,24(sp)
 801e428:	e13ffc17 	ldw	r4,-16(fp)
 801e42c:	e17ffd17 	ldw	r5,-12(fp)
 801e430:	000d883a 	mov	r6,zero
 801e434:	e1fffe17 	ldw	r7,-8(fp)
 801e438:	801e86c0 	call	801e86c <alt_avalon_sgdma_construct_descriptor_burst>
    0x0,            // Read fixed: N/A in stream-to-mem mode
    write_fixed,
    0,              // Read_burst : N/A in stream-to-mem mode
    write_burst,
    (alt_u8) 0x0);  // Atlantic channel: N/A in stream-to-mem mode
}
 801e43c:	e037883a 	mov	sp,fp
 801e440:	dfc00117 	ldw	ra,4(sp)
 801e444:	df000017 	ldw	fp,0(sp)
 801e448:	dec00204 	addi	sp,sp,8
 801e44c:	f800283a 	ret

0801e450 <alt_avalon_sgdma_construct_mem_to_stream_desc>:
  alt_u16               length,
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  alt_u8                atlantic_channel)
{
 801e450:	defff404 	addi	sp,sp,-48
 801e454:	dfc00b15 	stw	ra,44(sp)
 801e458:	df000a15 	stw	fp,40(sp)
 801e45c:	df000a04 	addi	fp,sp,40
 801e460:	e13ffb15 	stw	r4,-20(fp)
 801e464:	e17ffc15 	stw	r5,-16(fp)
 801e468:	e1bffd15 	stw	r6,-12(fp)
 801e46c:	3807883a 	mov	r3,r7
 801e470:	e0800517 	ldw	r2,20(fp)
 801e474:	e0fffe0d 	sth	r3,-8(fp)
 801e478:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_mem_to_stream_desc_burst(desc, next, read_addr, 
 801e47c:	e1fffe0b 	ldhu	r7,-8(fp)
 801e480:	e0bfff03 	ldbu	r2,-4(fp)
 801e484:	e0c00217 	ldw	r3,8(fp)
 801e488:	d8c00015 	stw	r3,0(sp)
 801e48c:	e0c00317 	ldw	r3,12(fp)
 801e490:	d8c00115 	stw	r3,4(sp)
 801e494:	e0c00417 	ldw	r3,16(fp)
 801e498:	d8c00215 	stw	r3,8(sp)
 801e49c:	d8000315 	stw	zero,12(sp)
 801e4a0:	d8800415 	stw	r2,16(sp)
 801e4a4:	e13ffb17 	ldw	r4,-20(fp)
 801e4a8:	e17ffc17 	ldw	r5,-16(fp)
 801e4ac:	e1bffd17 	ldw	r6,-12(fp)
 801e4b0:	801e4c80 	call	801e4c8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>
    length, read_fixed, generate_sop, generate_eop, 0, atlantic_channel);

}
 801e4b4:	e037883a 	mov	sp,fp
 801e4b8:	dfc00117 	ldw	ra,4(sp)
 801e4bc:	df000017 	ldw	fp,0(sp)
 801e4c0:	dec00204 	addi	sp,sp,8
 801e4c4:	f800283a 	ret

0801e4c8 <alt_avalon_sgdma_construct_mem_to_stream_desc_burst>:
  int                   read_fixed,
  int                   generate_sop,
  int                   generate_eop,
  int                   read_burst,
  alt_u8                atlantic_channel)
{
 801e4c8:	defff204 	addi	sp,sp,-56
 801e4cc:	dfc00d15 	stw	ra,52(sp)
 801e4d0:	df000c15 	stw	fp,48(sp)
 801e4d4:	df000c04 	addi	fp,sp,48
 801e4d8:	e13ffb15 	stw	r4,-20(fp)
 801e4dc:	e17ffc15 	stw	r5,-16(fp)
 801e4e0:	e1bffd15 	stw	r6,-12(fp)
 801e4e4:	3807883a 	mov	r3,r7
 801e4e8:	e0800617 	ldw	r2,24(fp)
 801e4ec:	e0fffe0d 	sth	r3,-8(fp)
 801e4f0:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(
 801e4f4:	e0fffe0b 	ldhu	r3,-8(fp)
 801e4f8:	e0bfff03 	ldbu	r2,-4(fp)
 801e4fc:	d8c00015 	stw	r3,0(sp)
 801e500:	e0c00417 	ldw	r3,16(fp)
 801e504:	d8c00115 	stw	r3,4(sp)
 801e508:	e0c00217 	ldw	r3,8(fp)
 801e50c:	d8c00215 	stw	r3,8(sp)
 801e510:	e0c00317 	ldw	r3,12(fp)
 801e514:	d8c00315 	stw	r3,12(sp)
 801e518:	e0c00517 	ldw	r3,20(fp)
 801e51c:	d8c00415 	stw	r3,16(sp)
 801e520:	d8000515 	stw	zero,20(sp)
 801e524:	d8800615 	stw	r2,24(sp)
 801e528:	e13ffb17 	ldw	r4,-20(fp)
 801e52c:	e17ffc17 	ldw	r5,-16(fp)
 801e530:	e1bffd17 	ldw	r6,-12(fp)
 801e534:	000f883a 	mov	r7,zero
 801e538:	801e86c0 	call	801e86c <alt_avalon_sgdma_construct_descriptor_burst>
    read_fixed,
    generate_sop,
    read_burst,
    0,                 // Write_burst : N/A in mem-to-stream mode
    atlantic_channel);
}
 801e53c:	e037883a 	mov	sp,fp
 801e540:	dfc00117 	ldw	ra,4(sp)
 801e544:	df000017 	ldw	fp,0(sp)
 801e548:	dec00204 	addi	sp,sp,8
 801e54c:	f800283a 	ret

0801e550 <alt_avalon_sgdma_register_callback>:
void alt_avalon_sgdma_register_callback(
  alt_sgdma_dev *dev,
  alt_avalon_sgdma_callback callback,
  alt_u32 chain_control,
  void *context)
{
 801e550:	defffb04 	addi	sp,sp,-20
 801e554:	df000415 	stw	fp,16(sp)
 801e558:	df000404 	addi	fp,sp,16
 801e55c:	e13ffc15 	stw	r4,-16(fp)
 801e560:	e17ffd15 	stw	r5,-12(fp)
 801e564:	e1bffe15 	stw	r6,-8(fp)
 801e568:	e1ffff15 	stw	r7,-4(fp)
  dev->callback         = callback;
 801e56c:	e0bffc17 	ldw	r2,-16(fp)
 801e570:	e0fffd17 	ldw	r3,-12(fp)
 801e574:	10c00915 	stw	r3,36(r2)
  dev->callback_context = context;
 801e578:	e0bffc17 	ldw	r2,-16(fp)
 801e57c:	e0ffff17 	ldw	r3,-4(fp)
 801e580:	10c00a15 	stw	r3,40(r2)
  dev->chain_control    = chain_control;
 801e584:	e0bffc17 	ldw	r2,-16(fp)
 801e588:	e0fffe17 	ldw	r3,-8(fp)
 801e58c:	10c00b15 	stw	r3,44(r2)
}
 801e590:	e037883a 	mov	sp,fp
 801e594:	df000017 	ldw	fp,0(sp)
 801e598:	dec00104 	addi	sp,sp,4
 801e59c:	f800283a 	ret

0801e5a0 <alt_avalon_sgdma_start>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct.
 */
void alt_avalon_sgdma_start(alt_sgdma_dev *dev)
{
 801e5a0:	defffd04 	addi	sp,sp,-12
 801e5a4:	df000215 	stw	fp,8(sp)
 801e5a8:	df000204 	addi	fp,sp,8
 801e5ac:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801e5b0:	e0bfff17 	ldw	r2,-4(fp)
 801e5b4:	10800317 	ldw	r2,12(r2)
 801e5b8:	10800404 	addi	r2,r2,16
 801e5bc:	10800037 	ldwio	r2,0(r2)
 801e5c0:	e0bffe15 	stw	r2,-8(fp)
  control |= ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 801e5c4:	e0bffe17 	ldw	r2,-8(fp)
 801e5c8:	10800814 	ori	r2,r2,32
 801e5cc:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801e5d0:	e0bfff17 	ldw	r2,-4(fp)
 801e5d4:	10800317 	ldw	r2,12(r2)
 801e5d8:	10800404 	addi	r2,r2,16
 801e5dc:	e0fffe17 	ldw	r3,-8(fp)
 801e5e0:	10c00035 	stwio	r3,0(r2)
}
 801e5e4:	e037883a 	mov	sp,fp
 801e5e8:	df000017 	ldw	fp,0(sp)
 801e5ec:	dec00104 	addi	sp,sp,4
 801e5f0:	f800283a 	ret

0801e5f4 <alt_avalon_sgdma_stop>:
 *
 * Arguments:
 * - *dev: Pointer to SGDMA device (instance) struct
 */
void alt_avalon_sgdma_stop(alt_sgdma_dev *dev)
{
 801e5f4:	defffd04 	addi	sp,sp,-12
 801e5f8:	df000215 	stw	fp,8(sp)
 801e5fc:	df000204 	addi	fp,sp,8
 801e600:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801e604:	e0bfff17 	ldw	r2,-4(fp)
 801e608:	10800317 	ldw	r2,12(r2)
 801e60c:	10800404 	addi	r2,r2,16
 801e610:	10800037 	ldwio	r2,0(r2)
 801e614:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_RUN_MSK;
 801e618:	e0fffe17 	ldw	r3,-8(fp)
 801e61c:	00bff7c4 	movi	r2,-33
 801e620:	1884703a 	and	r2,r3,r2
 801e624:	e0bffe15 	stw	r2,-8(fp)
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801e628:	e0bfff17 	ldw	r2,-4(fp)
 801e62c:	10800317 	ldw	r2,12(r2)
 801e630:	10800404 	addi	r2,r2,16
 801e634:	e0fffe17 	ldw	r3,-8(fp)
 801e638:	10c00035 	stwio	r3,0(r2)
}
 801e63c:	e037883a 	mov	sp,fp
 801e640:	df000017 	ldw	fp,0(sp)
 801e644:	dec00104 	addi	sp,sp,4
 801e648:	f800283a 	ret

0801e64c <alt_avalon_sgdma_check_descriptor_status>:
 * - 0 if the descriptor is error-free, not "owned by hardware", or
 *   a previously requested transfer has appeared to have completed
 *   normally. Or, various error conditions defined in <errno.h>
 */
int alt_avalon_sgdma_check_descriptor_status(alt_sgdma_descriptor *desc)
{
 801e64c:	defffe04 	addi	sp,sp,-8
 801e650:	df000115 	stw	fp,4(sp)
 801e654:	df000104 	addi	fp,sp,4
 801e658:	e13fff15 	stw	r4,-4(fp)
  /* Errors take precedence */
  if( IORD_8DIRECT(&desc->status, 0) &
 801e65c:	e0bfff17 	ldw	r2,-4(fp)
 801e660:	10800784 	addi	r2,r2,30
 801e664:	10800023 	ldbuio	r2,0(r2)
 801e668:	10803fcc 	andi	r2,r2,255
 801e66c:	10801fcc 	andi	r2,r2,127
 801e670:	10000226 	beq	r2,zero,801e67c <alt_avalon_sgdma_check_descriptor_status+0x30>
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_OVERFLOW_MSK |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_SYNC_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_UEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MEOP_MSK     |
        ALTERA_AVALON_SGDMA_DESCRIPTOR_STATUS_E_MSOP_MSK ) ) {
    return -EIO;
 801e674:	00bffec4 	movi	r2,-5
 801e678:	00000906 	br	801e6a0 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

  if( IORD_8DIRECT(&desc->control, 0) &
 801e67c:	e0bfff17 	ldw	r2,-4(fp)
 801e680:	108007c4 	addi	r2,r2,31
 801e684:	10800023 	ldbuio	r2,0(r2)
 801e688:	10803fcc 	andi	r2,r2,255
 801e68c:	1080200c 	andi	r2,r2,128
 801e690:	10000226 	beq	r2,zero,801e69c <alt_avalon_sgdma_check_descriptor_status+0x50>
      ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK) {
    return -EINPROGRESS;
 801e694:	00bfe244 	movi	r2,-119
 801e698:	00000106 	br	801e6a0 <alt_avalon_sgdma_check_descriptor_status+0x54>
  }

    return 0;
 801e69c:	0005883a 	mov	r2,zero
}
 801e6a0:	e037883a 	mov	sp,fp
 801e6a4:	df000017 	ldw	fp,0(sp)
 801e6a8:	dec00104 	addi	sp,sp,4
 801e6ac:	f800283a 	ret

0801e6b0 <alt_avalon_sgdma_open>:
 * Returns:
 * - Pointer to SGDMA device instance struct, or null if the device
 *   could not be opened.
 */
alt_sgdma_dev* alt_avalon_sgdma_open (const char* name)
{
 801e6b0:	defffc04 	addi	sp,sp,-16
 801e6b4:	dfc00315 	stw	ra,12(sp)
 801e6b8:	df000215 	stw	fp,8(sp)
 801e6bc:	df000204 	addi	fp,sp,8
 801e6c0:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev* dev;

  dev = (alt_sgdma_dev*) alt_find_dev (name, &alt_sgdma_list);
 801e6c4:	e13fff17 	ldw	r4,-4(fp)
 801e6c8:	d1601104 	addi	r5,gp,-32700
 801e6cc:	801f37c0 	call	801f37c <alt_find_dev>
 801e6d0:	e0bffe15 	stw	r2,-8(fp)

  if (NULL == dev) {
 801e6d4:	e0bffe17 	ldw	r2,-8(fp)
 801e6d8:	1000041e 	bne	r2,zero,801e6ec <alt_avalon_sgdma_open+0x3c>
    ALT_ERRNO = ENODEV;
 801e6dc:	801e00c0 	call	801e00c <alt_get_errno>
 801e6e0:	1007883a 	mov	r3,r2
 801e6e4:	008004c4 	movi	r2,19
 801e6e8:	18800015 	stw	r2,0(r3)
  }

  return dev;
 801e6ec:	e0bffe17 	ldw	r2,-8(fp)
}
 801e6f0:	e037883a 	mov	sp,fp
 801e6f4:	dfc00117 	ldw	ra,4(sp)
 801e6f8:	df000017 	ldw	fp,0(sp)
 801e6fc:	dec00204 	addi	sp,sp,8
 801e700:	f800283a 	ret

0801e704 <alt_avalon_sgdma_construct_descriptor>:
  alt_u16               length_or_eop,
  int                   generate_eop,
  int                   read_fixed,
  int                   write_fixed_or_sop,
  alt_u8                atlantic_channel)
{
 801e704:	defff104 	addi	sp,sp,-60
 801e708:	dfc00e15 	stw	ra,56(sp)
 801e70c:	df000d15 	stw	fp,52(sp)
 801e710:	df000d04 	addi	fp,sp,52
 801e714:	e13ffa15 	stw	r4,-24(fp)
 801e718:	e17ffb15 	stw	r5,-20(fp)
 801e71c:	e1bffc15 	stw	r6,-16(fp)
 801e720:	e1fffd15 	stw	r7,-12(fp)
 801e724:	e0c00217 	ldw	r3,8(fp)
 801e728:	e0800617 	ldw	r2,24(fp)
 801e72c:	e0fffe0d 	sth	r3,-8(fp)
 801e730:	e0bfff05 	stb	r2,-4(fp)
  alt_avalon_sgdma_construct_descriptor_burst(desc, next, read_addr, 
 801e734:	e0fffe0b 	ldhu	r3,-8(fp)
 801e738:	e0bfff03 	ldbu	r2,-4(fp)
 801e73c:	d8c00015 	stw	r3,0(sp)
 801e740:	e0c00317 	ldw	r3,12(fp)
 801e744:	d8c00115 	stw	r3,4(sp)
 801e748:	e0c00417 	ldw	r3,16(fp)
 801e74c:	d8c00215 	stw	r3,8(sp)
 801e750:	e0c00517 	ldw	r3,20(fp)
 801e754:	d8c00315 	stw	r3,12(sp)
 801e758:	d8000415 	stw	zero,16(sp)
 801e75c:	d8000515 	stw	zero,20(sp)
 801e760:	d8800615 	stw	r2,24(sp)
 801e764:	e13ffa17 	ldw	r4,-24(fp)
 801e768:	e17ffb17 	ldw	r5,-20(fp)
 801e76c:	e1bffc17 	ldw	r6,-16(fp)
 801e770:	e1fffd17 	ldw	r7,-12(fp)
 801e774:	801e86c0 	call	801e86c <alt_avalon_sgdma_construct_descriptor_burst>
    write_addr, length_or_eop, generate_eop, read_fixed, write_fixed_or_sop, 
    0, 0, atlantic_channel);
}
 801e778:	e037883a 	mov	sp,fp
 801e77c:	dfc00117 	ldw	ra,4(sp)
 801e780:	df000017 	ldw	fp,0(sp)
 801e784:	dec00204 	addi	sp,sp,8
 801e788:	f800283a 	ret

0801e78c <alt_avalon_sgdma_enable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_enable_desc_poll(alt_sgdma_dev *dev, alt_u32 frequency)
{
 801e78c:	defffc04 	addi	sp,sp,-16
 801e790:	df000315 	stw	fp,12(sp)
 801e794:	df000304 	addi	fp,sp,12
 801e798:	e13ffe15 	stw	r4,-8(fp)
 801e79c:	e17fff15 	stw	r5,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801e7a0:	e0bffe17 	ldw	r2,-8(fp)
 801e7a4:	10800317 	ldw	r2,12(r2)
 801e7a8:	10800404 	addi	r2,r2,16
 801e7ac:	10800037 	ldwio	r2,0(r2)
 801e7b0:	e0bffd15 	stw	r2,-12(fp)
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
 801e7b4:	e0fffd17 	ldw	r3,-12(fp)
 801e7b8:	00a00434 	movhi	r2,32784
 801e7bc:	10bfffc4 	addi	r2,r2,-1
 801e7c0:	1884703a 	and	r2,r3,r2
 801e7c4:	e0bffd15 	stw	r2,-12(fp)
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
 801e7c8:	e0bfff17 	ldw	r2,-4(fp)
 801e7cc:	1004953a 	slli	r2,r2,20
 801e7d0:	10dffc2c 	andhi	r3,r2,32752

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
  /* Clear descriptor polling frequency */
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK;
  
  control |= ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK | 
 801e7d4:	e0bffd17 	ldw	r2,-12(fp)
 801e7d8:	1884b03a 	or	r2,r3,r2
 801e7dc:	10800134 	orhi	r2,r2,4
 801e7e0:	e0bffd15 	stw	r2,-12(fp)
            ((frequency << ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_OFST) & 
            ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_FREQ_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801e7e4:	e0bffe17 	ldw	r2,-8(fp)
 801e7e8:	10800317 	ldw	r2,12(r2)
 801e7ec:	10800404 	addi	r2,r2,16
 801e7f0:	e0fffd17 	ldw	r3,-12(fp)
 801e7f4:	10c00035 	stwio	r3,0(r2)
  
  return;
 801e7f8:	0001883a 	nop
}
 801e7fc:	e037883a 	mov	sp,fp
 801e800:	df000017 	ldw	fp,0(sp)
 801e804:	dec00104 	addi	sp,sp,4
 801e808:	f800283a 	ret

0801e80c <alt_avalon_sgdma_disable_desc_poll>:
 *
 * Returns:
 * - None
 */
void alt_avalon_sgdma_disable_desc_poll(alt_sgdma_dev *dev)
{
 801e80c:	defffd04 	addi	sp,sp,-12
 801e810:	df000215 	stw	fp,8(sp)
 801e814:	df000204 	addi	fp,sp,8
 801e818:	e13fff15 	stw	r4,-4(fp)
  alt_u32 control;

  control = IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801e81c:	e0bfff17 	ldw	r2,-4(fp)
 801e820:	10800317 	ldw	r2,12(r2)
 801e824:	10800404 	addi	r2,r2,16
 801e828:	10800037 	ldwio	r2,0(r2)
 801e82c:	e0bffe15 	stw	r2,-8(fp)
  control &= ~ALTERA_AVALON_SGDMA_CONTROL_DESC_POLL_EN_MSK;
 801e830:	e0fffe17 	ldw	r3,-8(fp)
 801e834:	00bfff34 	movhi	r2,65532
 801e838:	10bfffc4 	addi	r2,r2,-1
 801e83c:	1884703a 	and	r2,r3,r2
 801e840:	e0bffe15 	stw	r2,-8(fp)

  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, control);
 801e844:	e0bfff17 	ldw	r2,-4(fp)
 801e848:	10800317 	ldw	r2,12(r2)
 801e84c:	10800404 	addi	r2,r2,16
 801e850:	e0fffe17 	ldw	r3,-8(fp)
 801e854:	10c00035 	stwio	r3,0(r2)
  
  return;
 801e858:	0001883a 	nop
}
 801e85c:	e037883a 	mov	sp,fp
 801e860:	df000017 	ldw	fp,0(sp)
 801e864:	dec00104 	addi	sp,sp,4
 801e868:	f800283a 	ret

0801e86c <alt_avalon_sgdma_construct_descriptor_burst>:
  int                   read_fixed,
  int                   write_fixed_or_sop,
  int                   read_burst,
  int                   write_burst,
  alt_u8                atlantic_channel)
{
 801e86c:	defff804 	addi	sp,sp,-32
 801e870:	dfc00715 	stw	ra,28(sp)
 801e874:	df000615 	stw	fp,24(sp)
 801e878:	df000604 	addi	fp,sp,24
 801e87c:	e13ffa15 	stw	r4,-24(fp)
 801e880:	e17ffb15 	stw	r5,-20(fp)
 801e884:	e1bffc15 	stw	r6,-16(fp)
 801e888:	e1fffd15 	stw	r7,-12(fp)
 801e88c:	e0c00217 	ldw	r3,8(fp)
 801e890:	e0800817 	ldw	r2,32(fp)
 801e894:	e0fffe0d 	sth	r3,-8(fp)
 801e898:	e0bfff05 	stb	r2,-4(fp)
   * The SGDMA controller from continuing to process the chain. This is
   * done as a single IO write to bypass cache, without flushing
   * the entire descriptor, since only the 8-bit descriptor status must
   * be flushed.
   */
  IOWR_8DIRECT(&next->control, 0,
 801e89c:	e0bffb17 	ldw	r2,-20(fp)
 801e8a0:	108007c4 	addi	r2,r2,31
 801e8a4:	e0fffb17 	ldw	r3,-20(fp)
 801e8a8:	18c007c3 	ldbu	r3,31(r3)
 801e8ac:	19003fcc 	andi	r4,r3,255
 801e8b0:	00ffdfc4 	movi	r3,-129
 801e8b4:	20c6703a 	and	r3,r4,r3
 801e8b8:	10c00025 	stbio	r3,0(r2)
    (next->control & ~ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_OWNED_BY_HW_MSK));

  desc->read_addr                = read_addr;
 801e8bc:	e0bffa17 	ldw	r2,-24(fp)
 801e8c0:	e0fffc17 	ldw	r3,-16(fp)
 801e8c4:	19403fcc 	andi	r5,r3,255
 801e8c8:	10c00003 	ldbu	r3,0(r2)
 801e8cc:	1806703a 	and	r3,r3,zero
 801e8d0:	1809883a 	mov	r4,r3
 801e8d4:	2807883a 	mov	r3,r5
 801e8d8:	20c6b03a 	or	r3,r4,r3
 801e8dc:	10c00005 	stb	r3,0(r2)
 801e8e0:	e0fffc17 	ldw	r3,-16(fp)
 801e8e4:	1806d23a 	srli	r3,r3,8
 801e8e8:	19403fcc 	andi	r5,r3,255
 801e8ec:	10c00043 	ldbu	r3,1(r2)
 801e8f0:	1806703a 	and	r3,r3,zero
 801e8f4:	1809883a 	mov	r4,r3
 801e8f8:	2807883a 	mov	r3,r5
 801e8fc:	20c6b03a 	or	r3,r4,r3
 801e900:	10c00045 	stb	r3,1(r2)
 801e904:	e0fffc17 	ldw	r3,-16(fp)
 801e908:	1806d43a 	srli	r3,r3,16
 801e90c:	19403fcc 	andi	r5,r3,255
 801e910:	10c00083 	ldbu	r3,2(r2)
 801e914:	1806703a 	and	r3,r3,zero
 801e918:	1809883a 	mov	r4,r3
 801e91c:	2807883a 	mov	r3,r5
 801e920:	20c6b03a 	or	r3,r4,r3
 801e924:	10c00085 	stb	r3,2(r2)
 801e928:	e0fffc17 	ldw	r3,-16(fp)
 801e92c:	180ad63a 	srli	r5,r3,24
 801e930:	10c000c3 	ldbu	r3,3(r2)
 801e934:	1806703a 	and	r3,r3,zero
 801e938:	1809883a 	mov	r4,r3
 801e93c:	2807883a 	mov	r3,r5
 801e940:	20c6b03a 	or	r3,r4,r3
 801e944:	10c000c5 	stb	r3,3(r2)
  desc->write_addr               = write_addr;
 801e948:	e0bffa17 	ldw	r2,-24(fp)
 801e94c:	e0fffd17 	ldw	r3,-12(fp)
 801e950:	19403fcc 	andi	r5,r3,255
 801e954:	10c00203 	ldbu	r3,8(r2)
 801e958:	1806703a 	and	r3,r3,zero
 801e95c:	1809883a 	mov	r4,r3
 801e960:	2807883a 	mov	r3,r5
 801e964:	20c6b03a 	or	r3,r4,r3
 801e968:	10c00205 	stb	r3,8(r2)
 801e96c:	e0fffd17 	ldw	r3,-12(fp)
 801e970:	1806d23a 	srli	r3,r3,8
 801e974:	19403fcc 	andi	r5,r3,255
 801e978:	10c00243 	ldbu	r3,9(r2)
 801e97c:	1806703a 	and	r3,r3,zero
 801e980:	1809883a 	mov	r4,r3
 801e984:	2807883a 	mov	r3,r5
 801e988:	20c6b03a 	or	r3,r4,r3
 801e98c:	10c00245 	stb	r3,9(r2)
 801e990:	e0fffd17 	ldw	r3,-12(fp)
 801e994:	1806d43a 	srli	r3,r3,16
 801e998:	19403fcc 	andi	r5,r3,255
 801e99c:	10c00283 	ldbu	r3,10(r2)
 801e9a0:	1806703a 	and	r3,r3,zero
 801e9a4:	1809883a 	mov	r4,r3
 801e9a8:	2807883a 	mov	r3,r5
 801e9ac:	20c6b03a 	or	r3,r4,r3
 801e9b0:	10c00285 	stb	r3,10(r2)
 801e9b4:	e0fffd17 	ldw	r3,-12(fp)
 801e9b8:	180ad63a 	srli	r5,r3,24
 801e9bc:	10c002c3 	ldbu	r3,11(r2)
 801e9c0:	1806703a 	and	r3,r3,zero
 801e9c4:	1809883a 	mov	r4,r3
 801e9c8:	2807883a 	mov	r3,r5
 801e9cc:	20c6b03a 	or	r3,r4,r3
 801e9d0:	10c002c5 	stb	r3,11(r2)
  desc->next                     = (alt_u32 *) next;
 801e9d4:	e0bffa17 	ldw	r2,-24(fp)
 801e9d8:	e0fffb17 	ldw	r3,-20(fp)
 801e9dc:	19403fcc 	andi	r5,r3,255
 801e9e0:	10c00403 	ldbu	r3,16(r2)
 801e9e4:	1806703a 	and	r3,r3,zero
 801e9e8:	1809883a 	mov	r4,r3
 801e9ec:	2807883a 	mov	r3,r5
 801e9f0:	20c6b03a 	or	r3,r4,r3
 801e9f4:	10c00405 	stb	r3,16(r2)
 801e9f8:	e0fffb17 	ldw	r3,-20(fp)
 801e9fc:	1806d23a 	srli	r3,r3,8
 801ea00:	19403fcc 	andi	r5,r3,255
 801ea04:	10c00443 	ldbu	r3,17(r2)
 801ea08:	1806703a 	and	r3,r3,zero
 801ea0c:	1809883a 	mov	r4,r3
 801ea10:	2807883a 	mov	r3,r5
 801ea14:	20c6b03a 	or	r3,r4,r3
 801ea18:	10c00445 	stb	r3,17(r2)
 801ea1c:	e0fffb17 	ldw	r3,-20(fp)
 801ea20:	1806d43a 	srli	r3,r3,16
 801ea24:	19403fcc 	andi	r5,r3,255
 801ea28:	10c00483 	ldbu	r3,18(r2)
 801ea2c:	1806703a 	and	r3,r3,zero
 801ea30:	1809883a 	mov	r4,r3
 801ea34:	2807883a 	mov	r3,r5
 801ea38:	20c6b03a 	or	r3,r4,r3
 801ea3c:	10c00485 	stb	r3,18(r2)
 801ea40:	e0fffb17 	ldw	r3,-20(fp)
 801ea44:	180ad63a 	srli	r5,r3,24
 801ea48:	10c004c3 	ldbu	r3,19(r2)
 801ea4c:	1806703a 	and	r3,r3,zero
 801ea50:	1809883a 	mov	r4,r3
 801ea54:	2807883a 	mov	r3,r5
 801ea58:	20c6b03a 	or	r3,r4,r3
 801ea5c:	10c004c5 	stb	r3,19(r2)
  desc->read_addr_pad            = 0x0;
 801ea60:	e0bffa17 	ldw	r2,-24(fp)
 801ea64:	10c00103 	ldbu	r3,4(r2)
 801ea68:	1806703a 	and	r3,r3,zero
 801ea6c:	10c00105 	stb	r3,4(r2)
 801ea70:	10c00143 	ldbu	r3,5(r2)
 801ea74:	1806703a 	and	r3,r3,zero
 801ea78:	10c00145 	stb	r3,5(r2)
 801ea7c:	10c00183 	ldbu	r3,6(r2)
 801ea80:	1806703a 	and	r3,r3,zero
 801ea84:	10c00185 	stb	r3,6(r2)
 801ea88:	10c001c3 	ldbu	r3,7(r2)
 801ea8c:	1806703a 	and	r3,r3,zero
 801ea90:	10c001c5 	stb	r3,7(r2)
  desc->write_addr_pad           = 0x0;
 801ea94:	e0bffa17 	ldw	r2,-24(fp)
 801ea98:	10c00303 	ldbu	r3,12(r2)
 801ea9c:	1806703a 	and	r3,r3,zero
 801eaa0:	10c00305 	stb	r3,12(r2)
 801eaa4:	10c00343 	ldbu	r3,13(r2)
 801eaa8:	1806703a 	and	r3,r3,zero
 801eaac:	10c00345 	stb	r3,13(r2)
 801eab0:	10c00383 	ldbu	r3,14(r2)
 801eab4:	1806703a 	and	r3,r3,zero
 801eab8:	10c00385 	stb	r3,14(r2)
 801eabc:	10c003c3 	ldbu	r3,15(r2)
 801eac0:	1806703a 	and	r3,r3,zero
 801eac4:	10c003c5 	stb	r3,15(r2)
  desc->next_pad                 = 0x0;
 801eac8:	e0bffa17 	ldw	r2,-24(fp)
 801eacc:	10c00503 	ldbu	r3,20(r2)
 801ead0:	1806703a 	and	r3,r3,zero
 801ead4:	10c00505 	stb	r3,20(r2)
 801ead8:	10c00543 	ldbu	r3,21(r2)
 801eadc:	1806703a 	and	r3,r3,zero
 801eae0:	10c00545 	stb	r3,21(r2)
 801eae4:	10c00583 	ldbu	r3,22(r2)
 801eae8:	1806703a 	and	r3,r3,zero
 801eaec:	10c00585 	stb	r3,22(r2)
 801eaf0:	10c005c3 	ldbu	r3,23(r2)
 801eaf4:	1806703a 	and	r3,r3,zero
 801eaf8:	10c005c5 	stb	r3,23(r2)
  desc->bytes_to_transfer        = length_or_eop;
 801eafc:	e0bffa17 	ldw	r2,-24(fp)
 801eb00:	e0fffe17 	ldw	r3,-8(fp)
 801eb04:	19403fcc 	andi	r5,r3,255
 801eb08:	10c00603 	ldbu	r3,24(r2)
 801eb0c:	1806703a 	and	r3,r3,zero
 801eb10:	1809883a 	mov	r4,r3
 801eb14:	2807883a 	mov	r3,r5
 801eb18:	20c6b03a 	or	r3,r4,r3
 801eb1c:	10c00605 	stb	r3,24(r2)
 801eb20:	e0fffe17 	ldw	r3,-8(fp)
 801eb24:	1806d23a 	srli	r3,r3,8
 801eb28:	19403fcc 	andi	r5,r3,255
 801eb2c:	10c00643 	ldbu	r3,25(r2)
 801eb30:	1806703a 	and	r3,r3,zero
 801eb34:	1809883a 	mov	r4,r3
 801eb38:	2807883a 	mov	r3,r5
 801eb3c:	20c6b03a 	or	r3,r4,r3
 801eb40:	10c00645 	stb	r3,25(r2)
  desc->actual_bytes_transferred = 0;
 801eb44:	e0bffa17 	ldw	r2,-24(fp)
 801eb48:	10c00703 	ldbu	r3,28(r2)
 801eb4c:	1806703a 	and	r3,r3,zero
 801eb50:	10c00705 	stb	r3,28(r2)
 801eb54:	10c00743 	ldbu	r3,29(r2)
 801eb58:	1806703a 	and	r3,r3,zero
 801eb5c:	10c00745 	stb	r3,29(r2)
  desc->status                   = 0x0;
 801eb60:	e0bffa17 	ldw	r2,-24(fp)
 801eb64:	10000785 	stb	zero,30(r2)

  /* SGDMA burst not currently supported */
  desc->read_burst               = read_burst;
 801eb68:	e0800617 	ldw	r2,24(fp)
 801eb6c:	1007883a 	mov	r3,r2
 801eb70:	e0bffa17 	ldw	r2,-24(fp)
 801eb74:	10c00685 	stb	r3,26(r2)
  desc->write_burst              = write_burst;
 801eb78:	e0800717 	ldw	r2,28(fp)
 801eb7c:	1007883a 	mov	r3,r2
 801eb80:	e0bffa17 	ldw	r2,-24(fp)
 801eb84:	10c006c5 	stb	r3,27(r2)
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 801eb88:	e0800317 	ldw	r2,12(fp)
 801eb8c:	10000226 	beq	r2,zero,801eb98 <alt_avalon_sgdma_construct_descriptor_burst+0x32c>
 801eb90:	00bfe044 	movi	r2,-127
 801eb94:	00000106 	br	801eb9c <alt_avalon_sgdma_construct_descriptor_burst+0x330>
 801eb98:	00bfe004 	movi	r2,-128
 801eb9c:	e0c00417 	ldw	r3,16(fp)
 801eba0:	18000226 	beq	r3,zero,801ebac <alt_avalon_sgdma_construct_descriptor_burst+0x340>
 801eba4:	00c00084 	movi	r3,2
 801eba8:	00000106 	br	801ebb0 <alt_avalon_sgdma_construct_descriptor_burst+0x344>
 801ebac:	0007883a 	mov	r3,zero
 801ebb0:	10c4b03a 	or	r2,r2,r3
 801ebb4:	1007883a 	mov	r3,r2
 801ebb8:	e0800517 	ldw	r2,20(fp)
 801ebbc:	10000226 	beq	r2,zero,801ebc8 <alt_avalon_sgdma_construct_descriptor_burst+0x35c>
 801ebc0:	00800104 	movi	r2,4
 801ebc4:	00000106 	br	801ebcc <alt_avalon_sgdma_construct_descriptor_burst+0x360>
 801ebc8:	0005883a 	mov	r2,zero
 801ebcc:	1884b03a 	or	r2,r3,r2
 801ebd0:	1007883a 	mov	r3,r2
 801ebd4:	e0bfff03 	ldbu	r2,-4(fp)
 801ebd8:	10000426 	beq	r2,zero,801ebec <alt_avalon_sgdma_construct_descriptor_burst+0x380>
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_GENERATE_EOP_MSK : 0x0)        |
    (read_fixed ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_READ_FIXED_ADDRESS_MSK : 0x0)  |
    (write_fixed_or_sop ?
       ALTERA_AVALON_SGDMA_DESCRIPTOR_CONTROL_WRITE_FIXED_ADDRESS_MSK : 0x0) |
    (atlantic_channel ? ( (atlantic_channel & 0x0F) << 3) : 0)
 801ebdc:	e0bfff03 	ldbu	r2,-4(fp)
 801ebe0:	108003cc 	andi	r2,r2,15
 801ebe4:	100490fa 	slli	r2,r2,3
 801ebe8:	00000106 	br	801ebf0 <alt_avalon_sgdma_construct_descriptor_burst+0x384>
   * Note that this step is performed after all other descriptor information
   * has been filled out so that, if the controller already happens to be
   * pointing at this descriptor, it will not run (via the "owned by hardware"
   * bit) until all other descriptor information has been set up.
   */
  desc->control = (
 801ebec:	0005883a 	mov	r2,zero
 801ebf0:	1884b03a 	or	r2,r3,r2
 801ebf4:	1007883a 	mov	r3,r2
 801ebf8:	e0bffa17 	ldw	r2,-24(fp)
 801ebfc:	10c007c5 	stb	r3,31(r2)
  /*
   * Flush completed buffer out of cache. This is done rather than
   * individual cache-bypassed writes to take advantage of any
   * burst-capabilities in the memory we're writing to.
   */
  alt_dcache_flush(desc, sizeof(alt_sgdma_descriptor));
 801ec00:	e13ffa17 	ldw	r4,-24(fp)
 801ec04:	01400804 	movi	r5,32
 801ec08:	801f1100 	call	801f110 <alt_dcache_flush>
}
 801ec0c:	e037883a 	mov	sp,fp
 801ec10:	dfc00117 	ldw	ra,4(sp)
 801ec14:	df000017 	ldw	fp,0(sp)
 801ec18:	dec00204 	addi	sp,sp,8
 801ec1c:	f800283a 	ret

0801ec20 <alt_avalon_sgdma_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_sgdma_irq(void *context)
#else
static void alt_avalon_sgdma_irq(void *context, alt_u32 id)
#endif
{
 801ec20:	defff904 	addi	sp,sp,-28
 801ec24:	dfc00615 	stw	ra,24(sp)
 801ec28:	df000515 	stw	fp,20(sp)
 801ec2c:	df000504 	addi	fp,sp,20
 801ec30:	e13fff15 	stw	r4,-4(fp)
  alt_sgdma_dev *dev = (alt_sgdma_dev *) context;
 801ec34:	e0bfff17 	ldw	r2,-4(fp)
 801ec38:	e0bffb15 	stw	r2,-20(fp)
   * Note: This is explicitly done before calling user interrupt-handling
   * code rather than after; if user ISR code initiates another SGDMA
   * transfer which completes quickly, reading the control register after
   * the callback routine may result in a lost interrupt.
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 
 801ec3c:	e0bffb17 	ldw	r2,-20(fp)
 801ec40:	10800317 	ldw	r2,12(r2)
 801ec44:	10800404 	addi	r2,r2,16
 801ec48:	e0fffb17 	ldw	r3,-20(fp)
 801ec4c:	18c00317 	ldw	r3,12(r3)
 801ec50:	18c00404 	addi	r3,r3,16
 801ec54:	18c00037 	ldwio	r3,0(r3)
 801ec58:	18e00034 	orhi	r3,r3,32768
 801ec5c:	10c00035 	stwio	r3,0(r2)
    IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base) | 0x80000000);
  
  /* Dummy read to ensure IRQ is negated before the ISR returns */
  IORD_ALTERA_AVALON_SGDMA_CONTROL(dev->base);
 801ec60:	e0bffb17 	ldw	r2,-20(fp)
 801ec64:	10800317 	ldw	r2,12(r2)
 801ec68:	10800404 	addi	r2,r2,16
 801ec6c:	10800037 	ldwio	r2,0(r2)
   * Other interrupts are explicitly disabled if callbacks
   * are registered because there is no guarantee that they are 
   * preemption-safe. This allows the driver to support 
   * interrupt preemption.
   */
  if(dev->callback) {
 801ec70:	e0bffb17 	ldw	r2,-20(fp)
 801ec74:	10800917 	ldw	r2,36(r2)
 801ec78:	10001226 	beq	r2,zero,801ecc4 <alt_avalon_sgdma_irq+0xa4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801ec7c:	0005303a 	rdctl	r2,status
 801ec80:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801ec84:	e0fffd17 	ldw	r3,-12(fp)
 801ec88:	00bfff84 	movi	r2,-2
 801ec8c:	1884703a 	and	r2,r3,r2
 801ec90:	1001703a 	wrctl	status,r2
  
  return context;
 801ec94:	e0bffd17 	ldw	r2,-12(fp)
    cpu_sr = alt_irq_disable_all();
 801ec98:	e0bffc15 	stw	r2,-16(fp)
    (dev->callback)(dev->callback_context);
 801ec9c:	e0bffb17 	ldw	r2,-20(fp)
 801eca0:	10800917 	ldw	r2,36(r2)
 801eca4:	e0fffb17 	ldw	r3,-20(fp)
 801eca8:	18c00a17 	ldw	r3,40(r3)
 801ecac:	1809883a 	mov	r4,r3
 801ecb0:	103ee83a 	callr	r2
 801ecb4:	e0bffc17 	ldw	r2,-16(fp)
 801ecb8:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801ecbc:	e0bffe17 	ldw	r2,-8(fp)
 801ecc0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(cpu_sr);
  }
}
 801ecc4:	e037883a 	mov	sp,fp
 801ecc8:	dfc00117 	ldw	ra,4(sp)
 801eccc:	df000017 	ldw	fp,0(sp)
 801ecd0:	dec00204 	addi	sp,sp,8
 801ecd4:	f800283a 	ret

0801ecd8 <alt_avalon_sgdma_init>:
 * This routine disables interrupts, future descriptor processing,
 * registers a specific instance of the device with the HAL,
 * and installs an interrupt handler for the device.
 */
void alt_avalon_sgdma_init (alt_sgdma_dev *dev, alt_u32 ic_id, alt_u32 irq)
{
 801ecd8:	defffa04 	addi	sp,sp,-24
 801ecdc:	dfc00515 	stw	ra,20(sp)
 801ece0:	df000415 	stw	fp,16(sp)
 801ece4:	df000404 	addi	fp,sp,16
 801ece8:	e13ffd15 	stw	r4,-12(fp)
 801ecec:	e17ffe15 	stw	r5,-8(fp)
 801ecf0:	e1bfff15 	stw	r6,-4(fp)

  /* 
   * Halt any current transactions (reset the device)
   * SW reset is written twice per SGDMA documentation 
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 801ecf4:	e0bffd17 	ldw	r2,-12(fp)
 801ecf8:	10800317 	ldw	r2,12(r2)
 801ecfc:	10800404 	addi	r2,r2,16
 801ed00:	00c00074 	movhi	r3,1
 801ed04:	10c00035 	stwio	r3,0(r2)
    ALTERA_AVALON_SGDMA_CONTROL_SOFTWARERESET_MSK);
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base,
 801ed08:	e0bffd17 	ldw	r2,-12(fp)
 801ed0c:	10800317 	ldw	r2,12(r2)
 801ed10:	10800404 	addi	r2,r2,16
 801ed14:	00c00074 	movhi	r3,1
 801ed18:	10c00035 	stwio	r3,0(r2)

  /*
   * Disable interrupts, halt future descriptor processing,
   * and clear status register content
   */
  IOWR_ALTERA_AVALON_SGDMA_CONTROL(dev->base, 0x0);
 801ed1c:	e0bffd17 	ldw	r2,-12(fp)
 801ed20:	10800317 	ldw	r2,12(r2)
 801ed24:	10800404 	addi	r2,r2,16
 801ed28:	0007883a 	mov	r3,zero
 801ed2c:	10c00035 	stwio	r3,0(r2)
  IOWR_ALTERA_AVALON_SGDMA_STATUS(dev->base, 0xFF);
 801ed30:	e0bffd17 	ldw	r2,-12(fp)
 801ed34:	10800317 	ldw	r2,12(r2)
 801ed38:	00c03fc4 	movi	r3,255
 801ed3c:	10c00035 	stwio	r3,0(r2)

  /* Register this instance of the SGDMA controller with HAL */
  alt_dev_llist_insert((alt_dev_llist*) dev, &alt_sgdma_list);
 801ed40:	e13ffd17 	ldw	r4,-12(fp)
 801ed44:	d1601104 	addi	r5,gp,-32700
 801ed48:	801f2180 	call	801f218 <alt_dev_llist_insert>

  /* Install IRQ handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(ic_id, irq, alt_avalon_sgdma_irq, dev, 0x0);
 801ed4c:	d8000015 	stw	zero,0(sp)
 801ed50:	e13ffe17 	ldw	r4,-8(fp)
 801ed54:	e17fff17 	ldw	r5,-4(fp)
 801ed58:	018200b4 	movhi	r6,2050
 801ed5c:	31bb0804 	addi	r6,r6,-5088
 801ed60:	e1fffd17 	ldw	r7,-12(fp)
 801ed64:	801c8340 	call	801c834 <alt_ic_isr_register>
#else
  alt_irq_register(irq, dev, alt_avalon_sgdma_irq);
#endif  
}
 801ed68:	e037883a 	mov	sp,fp
 801ed6c:	dfc00117 	ldw	ra,4(sp)
 801ed70:	df000017 	ldw	fp,0(sp)
 801ed74:	dec00204 	addi	sp,sp,8
 801ed78:	f800283a 	ret

0801ed7c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
 801ed7c:	defffa04 	addi	sp,sp,-24
 801ed80:	dfc00515 	stw	ra,20(sp)
 801ed84:	df000415 	stw	fp,16(sp)
 801ed88:	df000404 	addi	fp,sp,16
 801ed8c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
 801ed90:	0007883a 	mov	r3,zero
 801ed94:	e0bfff17 	ldw	r2,-4(fp)
 801ed98:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
 801ed9c:	e0bfff17 	ldw	r2,-4(fp)
 801eda0:	10800104 	addi	r2,r2,4
 801eda4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801eda8:	0005303a 	rdctl	r2,status
 801edac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801edb0:	e0fffd17 	ldw	r3,-12(fp)
 801edb4:	00bfff84 	movi	r2,-2
 801edb8:	1884703a 	and	r2,r3,r2
 801edbc:	1001703a 	wrctl	status,r2
  
  return context;
 801edc0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
 801edc4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
 801edc8:	801d1f00 	call	801d1f0 <alt_tick>
 801edcc:	e0bffc17 	ldw	r2,-16(fp)
 801edd0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801edd4:	e0bffe17 	ldw	r2,-8(fp)
 801edd8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
 801eddc:	e037883a 	mov	sp,fp
 801ede0:	dfc00117 	ldw	ra,4(sp)
 801ede4:	df000017 	ldw	fp,0(sp)
 801ede8:	dec00204 	addi	sp,sp,8
 801edec:	f800283a 	ret

0801edf0 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
 801edf0:	defff804 	addi	sp,sp,-32
 801edf4:	dfc00715 	stw	ra,28(sp)
 801edf8:	df000615 	stw	fp,24(sp)
 801edfc:	df000604 	addi	fp,sp,24
 801ee00:	e13ffc15 	stw	r4,-16(fp)
 801ee04:	e17ffd15 	stw	r5,-12(fp)
 801ee08:	e1bffe15 	stw	r6,-8(fp)
 801ee0c:	e1ffff15 	stw	r7,-4(fp)
 801ee10:	e0bfff17 	ldw	r2,-4(fp)
 801ee14:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
 801ee18:	008205f4 	movhi	r2,2071
 801ee1c:	10ae7104 	addi	r2,r2,-17980
 801ee20:	10800017 	ldw	r2,0(r2)
 801ee24:	1000041e 	bne	r2,zero,801ee38 <alt_avalon_timer_sc_init+0x48>
  {
    _alt_tick_rate = nticks;
 801ee28:	008205f4 	movhi	r2,2071
 801ee2c:	10ae7104 	addi	r2,r2,-17980
 801ee30:	e0fffb17 	ldw	r3,-20(fp)
 801ee34:	10c00015 	stw	r3,0(r2)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
 801ee38:	e0bffc17 	ldw	r2,-16(fp)
 801ee3c:	10800104 	addi	r2,r2,4
 801ee40:	00c001c4 	movi	r3,7
 801ee44:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
 801ee48:	d8000015 	stw	zero,0(sp)
 801ee4c:	e13ffd17 	ldw	r4,-12(fp)
 801ee50:	e17ffe17 	ldw	r5,-8(fp)
 801ee54:	018200b4 	movhi	r6,2050
 801ee58:	31bb5f04 	addi	r6,r6,-4740
 801ee5c:	e1fffc17 	ldw	r7,-16(fp)
 801ee60:	801c8340 	call	801c834 <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
 801ee64:	e037883a 	mov	sp,fp
 801ee68:	dfc00117 	ldw	ra,4(sp)
 801ee6c:	df000017 	ldw	fp,0(sp)
 801ee70:	dec00204 	addi	sp,sp,8
 801ee74:	f800283a 	ret

0801ee78 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 801ee78:	defff504 	addi	sp,sp,-44
 801ee7c:	df000a15 	stw	fp,40(sp)
 801ee80:	df000a04 	addi	fp,sp,40
 801ee84:	e13ffc15 	stw	r4,-16(fp)
 801ee88:	e17ffd15 	stw	r5,-12(fp)
 801ee8c:	e1bffe15 	stw	r6,-8(fp)
 801ee90:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 801ee94:	e03ff615 	stw	zero,-40(fp)
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 801ee98:	008205f4 	movhi	r2,2071
 801ee9c:	10ae7104 	addi	r2,r2,-17980
 801eea0:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 801eea4:	10003f26 	beq	r2,zero,801efa4 <alt_alarm_start+0x12c>
  {
    if (alarm)
 801eea8:	e0bffc17 	ldw	r2,-16(fp)
 801eeac:	10003b26 	beq	r2,zero,801ef9c <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 801eeb0:	e0bffc17 	ldw	r2,-16(fp)
 801eeb4:	e0fffe17 	ldw	r3,-8(fp)
 801eeb8:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 801eebc:	e0bffc17 	ldw	r2,-16(fp)
 801eec0:	e0ffff17 	ldw	r3,-4(fp)
 801eec4:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 801eec8:	0005303a 	rdctl	r2,status
 801eecc:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 801eed0:	e0fff817 	ldw	r3,-32(fp)
 801eed4:	00bfff84 	movi	r2,-2
 801eed8:	1884703a 	and	r2,r3,r2
 801eedc:	1001703a 	wrctl	status,r2
  
  return context;
 801eee0:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 801eee4:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 801eee8:	008205f4 	movhi	r2,2071
 801eeec:	10ae7204 	addi	r2,r2,-17976
 801eef0:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 801eef4:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 801eef8:	e0fffd17 	ldw	r3,-12(fp)
 801eefc:	e0bff617 	ldw	r2,-40(fp)
 801ef00:	1885883a 	add	r2,r3,r2
 801ef04:	10c00044 	addi	r3,r2,1
 801ef08:	e0bffc17 	ldw	r2,-16(fp)
 801ef0c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 801ef10:	e0bffc17 	ldw	r2,-16(fp)
 801ef14:	10c00217 	ldw	r3,8(r2)
 801ef18:	e0bff617 	ldw	r2,-40(fp)
 801ef1c:	1880042e 	bgeu	r3,r2,801ef30 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 801ef20:	e0bffc17 	ldw	r2,-16(fp)
 801ef24:	00c00044 	movi	r3,1
 801ef28:	10c00405 	stb	r3,16(r2)
 801ef2c:	00000206 	br	801ef38 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 801ef30:	e0bffc17 	ldw	r2,-16(fp)
 801ef34:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 801ef38:	e0fffc17 	ldw	r3,-16(fp)
 801ef3c:	008205f4 	movhi	r2,2071
 801ef40:	10a35104 	addi	r2,r2,-29372
 801ef44:	e0bff915 	stw	r2,-28(fp)
 801ef48:	e0fffa15 	stw	r3,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 801ef4c:	e0bffa17 	ldw	r2,-24(fp)
 801ef50:	e0fff917 	ldw	r3,-28(fp)
 801ef54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 801ef58:	e0bff917 	ldw	r2,-28(fp)
 801ef5c:	10c00017 	ldw	r3,0(r2)
 801ef60:	e0bffa17 	ldw	r2,-24(fp)
 801ef64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 801ef68:	e0bff917 	ldw	r2,-28(fp)
 801ef6c:	10800017 	ldw	r2,0(r2)
 801ef70:	e0fffa17 	ldw	r3,-24(fp)
 801ef74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 801ef78:	e0bff917 	ldw	r2,-28(fp)
 801ef7c:	e0fffa17 	ldw	r3,-24(fp)
 801ef80:	10c00015 	stw	r3,0(r2)
 801ef84:	e0bff717 	ldw	r2,-36(fp)
 801ef88:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 801ef8c:	e0bffb17 	ldw	r2,-20(fp)
 801ef90:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 801ef94:	0005883a 	mov	r2,zero
 801ef98:	00000306 	br	801efa8 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 801ef9c:	00bffa84 	movi	r2,-22
 801efa0:	00000106 	br	801efa8 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 801efa4:	00bfde84 	movi	r2,-134
  }
}
 801efa8:	e037883a 	mov	sp,fp
 801efac:	df000017 	ldw	fp,0(sp)
 801efb0:	dec00104 	addi	sp,sp,4
 801efb4:	f800283a 	ret

0801efb8 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 801efb8:	defffa04 	addi	sp,sp,-24
 801efbc:	dfc00515 	stw	ra,20(sp)
 801efc0:	df000415 	stw	fp,16(sp)
 801efc4:	df000404 	addi	fp,sp,16
 801efc8:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
 801efcc:	008000c4 	movi	r2,3
 801efd0:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 801efd4:	e0fffd17 	ldw	r3,-12(fp)
 801efd8:	008003f4 	movhi	r2,15
 801efdc:	10909004 	addi	r2,r2,16960
 801efe0:	1885383a 	mul	r2,r3,r2
 801efe4:	01017db4 	movhi	r4,1526
 801efe8:	21384004 	addi	r4,r4,-7936
 801efec:	100b883a 	mov	r5,r2
 801eff0:	800ca000 	call	800ca00 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 801eff4:	01200034 	movhi	r4,32768
 801eff8:	213fffc4 	addi	r4,r4,-1
 801effc:	100b883a 	mov	r5,r2
 801f000:	800ca000 	call	800ca00 <__udivsi3>
 801f004:	e13fff17 	ldw	r4,-4(fp)
 801f008:	100b883a 	mov	r5,r2
 801f00c:	800ca000 	call	800ca00 <__udivsi3>
 801f010:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 801f014:	e0bffe17 	ldw	r2,-8(fp)
 801f018:	10002a26 	beq	r2,zero,801f0c4 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 801f01c:	e03ffc15 	stw	zero,-16(fp)
 801f020:	00001706 	br	801f080 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 801f024:	00a00034 	movhi	r2,32768
 801f028:	10bfffc4 	addi	r2,r2,-1
 801f02c:	10bfffc4 	addi	r2,r2,-1
 801f030:	103ffe1e 	bne	r2,zero,801f02c <__alt_data_end+0xf801f02c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 801f034:	e0fffd17 	ldw	r3,-12(fp)
 801f038:	008003f4 	movhi	r2,15
 801f03c:	10909004 	addi	r2,r2,16960
 801f040:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 801f044:	01017db4 	movhi	r4,1526
 801f048:	21384004 	addi	r4,r4,-7936
 801f04c:	100b883a 	mov	r5,r2
 801f050:	800ca000 	call	800ca00 <__udivsi3>
 801f054:	01200034 	movhi	r4,32768
 801f058:	213fffc4 	addi	r4,r4,-1
 801f05c:	100b883a 	mov	r5,r2
 801f060:	800ca000 	call	800ca00 <__udivsi3>
 801f064:	1007883a 	mov	r3,r2
 801f068:	e0bfff17 	ldw	r2,-4(fp)
 801f06c:	10c5c83a 	sub	r2,r2,r3
 801f070:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 801f074:	e0bffc17 	ldw	r2,-16(fp)
 801f078:	10800044 	addi	r2,r2,1
 801f07c:	e0bffc15 	stw	r2,-16(fp)
 801f080:	e0fffc17 	ldw	r3,-16(fp)
 801f084:	e0bffe17 	ldw	r2,-8(fp)
 801f088:	18bfe616 	blt	r3,r2,801f024 <__alt_data_end+0xf801f024>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801f08c:	e0fffd17 	ldw	r3,-12(fp)
 801f090:	008003f4 	movhi	r2,15
 801f094:	10909004 	addi	r2,r2,16960
 801f098:	1885383a 	mul	r2,r3,r2
 801f09c:	01017db4 	movhi	r4,1526
 801f0a0:	21384004 	addi	r4,r4,-7936
 801f0a4:	100b883a 	mov	r5,r2
 801f0a8:	800ca000 	call	800ca00 <__udivsi3>
 801f0ac:	1007883a 	mov	r3,r2
 801f0b0:	e0bfff17 	ldw	r2,-4(fp)
 801f0b4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801f0b8:	10bfffc4 	addi	r2,r2,-1
 801f0bc:	103ffe1e 	bne	r2,zero,801f0b8 <__alt_data_end+0xf801f0b8>
 801f0c0:	00000d06 	br	801f0f8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 801f0c4:	e0fffd17 	ldw	r3,-12(fp)
 801f0c8:	008003f4 	movhi	r2,15
 801f0cc:	10909004 	addi	r2,r2,16960
 801f0d0:	1885383a 	mul	r2,r3,r2
 801f0d4:	01017db4 	movhi	r4,1526
 801f0d8:	21384004 	addi	r4,r4,-7936
 801f0dc:	100b883a 	mov	r5,r2
 801f0e0:	800ca000 	call	800ca00 <__udivsi3>
 801f0e4:	1007883a 	mov	r3,r2
 801f0e8:	e0bfff17 	ldw	r2,-4(fp)
 801f0ec:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 801f0f0:	10bfffc4 	addi	r2,r2,-1
 801f0f4:	00bffe16 	blt	zero,r2,801f0f0 <__alt_data_end+0xf801f0f0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 801f0f8:	0005883a 	mov	r2,zero
}
 801f0fc:	e037883a 	mov	sp,fp
 801f100:	dfc00117 	ldw	ra,4(sp)
 801f104:	df000017 	ldw	fp,0(sp)
 801f108:	dec00204 	addi	sp,sp,8
 801f10c:	f800283a 	ret

0801f110 <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 801f110:	defffb04 	addi	sp,sp,-20
 801f114:	df000415 	stw	fp,16(sp)
 801f118:	df000404 	addi	fp,sp,16
 801f11c:	e13ffe15 	stw	r4,-8(fp)
 801f120:	e17fff15 	stw	r5,-4(fp)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 
 801f124:	e0fffe17 	ldw	r3,-8(fp)
 801f128:	e0bfff17 	ldw	r2,-4(fp)
 801f12c:	1885883a 	add	r2,r3,r2
 801f130:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 801f134:	e0bffe17 	ldw	r2,-8(fp)
 801f138:	e0bffc15 	stw	r2,-16(fp)
 801f13c:	00000506 	br	801f154 <alt_dcache_flush+0x44>
  { 
    ALT_FLUSH_DATA(i); 
 801f140:	e0bffc17 	ldw	r2,-16(fp)
 801f144:	1000001b 	flushda	0(r2)
#if NIOS2_DCACHE_SIZE > 0

  char* i;
  char* end = ((char*) start) + len; 

  for (i = start; i < end; i+= NIOS2_DCACHE_LINE_SIZE)
 801f148:	e0bffc17 	ldw	r2,-16(fp)
 801f14c:	10800804 	addi	r2,r2,32
 801f150:	e0bffc15 	stw	r2,-16(fp)
 801f154:	e0fffc17 	ldw	r3,-16(fp)
 801f158:	e0bffd17 	ldw	r2,-12(fp)
 801f15c:	18bff836 	bltu	r3,r2,801f140 <__alt_data_end+0xf801f140>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_DCACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_DCACHE_LINE_SIZE - 1))
 801f160:	e0bffe17 	ldw	r2,-8(fp)
 801f164:	108007cc 	andi	r2,r2,31
 801f168:	10000226 	beq	r2,zero,801f174 <alt_dcache_flush+0x64>
  {
    ALT_FLUSH_DATA(i);
 801f16c:	e0bffc17 	ldw	r2,-16(fp)
 801f170:	1000001b 	flushda	0(r2)
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801f174:	e037883a 	mov	sp,fp
 801f178:	df000017 	ldw	fp,0(sp)
 801f17c:	dec00104 	addi	sp,sp,4
 801f180:	f800283a 	ret

0801f184 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 801f184:	defffe04 	addi	sp,sp,-8
 801f188:	df000115 	stw	fp,4(sp)
 801f18c:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 801f190:	e03fff15 	stw	zero,-4(fp)
 801f194:	00000506 	br	801f1ac <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 801f198:	e0bfff17 	ldw	r2,-4(fp)
 801f19c:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 801f1a0:	e0bfff17 	ldw	r2,-4(fp)
 801f1a4:	10800804 	addi	r2,r2,32
 801f1a8:	e0bfff15 	stw	r2,-4(fp)
 801f1ac:	e0bfff17 	ldw	r2,-4(fp)
 801f1b0:	10820030 	cmpltui	r2,r2,2048
 801f1b4:	103ff81e 	bne	r2,zero,801f198 <__alt_data_end+0xf801f198>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 801f1b8:	e037883a 	mov	sp,fp
 801f1bc:	df000017 	ldw	fp,0(sp)
 801f1c0:	dec00104 	addi	sp,sp,4
 801f1c4:	f800283a 	ret

0801f1c8 <alt_get_errno>:
 801f1c8:	defffe04 	addi	sp,sp,-8
 801f1cc:	dfc00115 	stw	ra,4(sp)
 801f1d0:	df000015 	stw	fp,0(sp)
 801f1d4:	d839883a 	mov	fp,sp
 801f1d8:	008205f4 	movhi	r2,2071
 801f1dc:	10a34e04 	addi	r2,r2,-29384
 801f1e0:	10800017 	ldw	r2,0(r2)
 801f1e4:	10000526 	beq	r2,zero,801f1fc <alt_get_errno+0x34>
 801f1e8:	008205f4 	movhi	r2,2071
 801f1ec:	10a34e04 	addi	r2,r2,-29384
 801f1f0:	10800017 	ldw	r2,0(r2)
 801f1f4:	103ee83a 	callr	r2
 801f1f8:	00000206 	br	801f204 <alt_get_errno+0x3c>
 801f1fc:	008205f4 	movhi	r2,2071
 801f200:	10ae6904 	addi	r2,r2,-18012
 801f204:	e037883a 	mov	sp,fp
 801f208:	dfc00117 	ldw	ra,4(sp)
 801f20c:	df000017 	ldw	fp,0(sp)
 801f210:	dec00204 	addi	sp,sp,8
 801f214:	f800283a 	ret

0801f218 <alt_dev_llist_insert>:
 801f218:	defffa04 	addi	sp,sp,-24
 801f21c:	dfc00515 	stw	ra,20(sp)
 801f220:	df000415 	stw	fp,16(sp)
 801f224:	df000404 	addi	fp,sp,16
 801f228:	e13ffe15 	stw	r4,-8(fp)
 801f22c:	e17fff15 	stw	r5,-4(fp)
 801f230:	e0bffe17 	ldw	r2,-8(fp)
 801f234:	10000326 	beq	r2,zero,801f244 <alt_dev_llist_insert+0x2c>
 801f238:	e0bffe17 	ldw	r2,-8(fp)
 801f23c:	10800217 	ldw	r2,8(r2)
 801f240:	1000061e 	bne	r2,zero,801f25c <alt_dev_llist_insert+0x44>
 801f244:	801f1c80 	call	801f1c8 <alt_get_errno>
 801f248:	1007883a 	mov	r3,r2
 801f24c:	00800584 	movi	r2,22
 801f250:	18800015 	stw	r2,0(r3)
 801f254:	00bffa84 	movi	r2,-22
 801f258:	00001306 	br	801f2a8 <alt_dev_llist_insert+0x90>
 801f25c:	e0bffe17 	ldw	r2,-8(fp)
 801f260:	e0ffff17 	ldw	r3,-4(fp)
 801f264:	e0fffc15 	stw	r3,-16(fp)
 801f268:	e0bffd15 	stw	r2,-12(fp)
 801f26c:	e0bffd17 	ldw	r2,-12(fp)
 801f270:	e0fffc17 	ldw	r3,-16(fp)
 801f274:	10c00115 	stw	r3,4(r2)
 801f278:	e0bffc17 	ldw	r2,-16(fp)
 801f27c:	10c00017 	ldw	r3,0(r2)
 801f280:	e0bffd17 	ldw	r2,-12(fp)
 801f284:	10c00015 	stw	r3,0(r2)
 801f288:	e0bffc17 	ldw	r2,-16(fp)
 801f28c:	10800017 	ldw	r2,0(r2)
 801f290:	e0fffd17 	ldw	r3,-12(fp)
 801f294:	10c00115 	stw	r3,4(r2)
 801f298:	e0bffc17 	ldw	r2,-16(fp)
 801f29c:	e0fffd17 	ldw	r3,-12(fp)
 801f2a0:	10c00015 	stw	r3,0(r2)
 801f2a4:	0005883a 	mov	r2,zero
 801f2a8:	e037883a 	mov	sp,fp
 801f2ac:	dfc00117 	ldw	ra,4(sp)
 801f2b0:	df000017 	ldw	fp,0(sp)
 801f2b4:	dec00204 	addi	sp,sp,8
 801f2b8:	f800283a 	ret

0801f2bc <_do_ctors>:
 801f2bc:	defffd04 	addi	sp,sp,-12
 801f2c0:	dfc00215 	stw	ra,8(sp)
 801f2c4:	df000115 	stw	fp,4(sp)
 801f2c8:	df000104 	addi	fp,sp,4
 801f2cc:	008200b4 	movhi	r2,2050
 801f2d0:	10bfa604 	addi	r2,r2,-360
 801f2d4:	e0bfff15 	stw	r2,-4(fp)
 801f2d8:	00000606 	br	801f2f4 <_do_ctors+0x38>
 801f2dc:	e0bfff17 	ldw	r2,-4(fp)
 801f2e0:	10800017 	ldw	r2,0(r2)
 801f2e4:	103ee83a 	callr	r2
 801f2e8:	e0bfff17 	ldw	r2,-4(fp)
 801f2ec:	10bfff04 	addi	r2,r2,-4
 801f2f0:	e0bfff15 	stw	r2,-4(fp)
 801f2f4:	e0ffff17 	ldw	r3,-4(fp)
 801f2f8:	008200b4 	movhi	r2,2050
 801f2fc:	10bfa704 	addi	r2,r2,-356
 801f300:	18bff62e 	bgeu	r3,r2,801f2dc <__alt_data_end+0xf801f2dc>
 801f304:	0001883a 	nop
 801f308:	e037883a 	mov	sp,fp
 801f30c:	dfc00117 	ldw	ra,4(sp)
 801f310:	df000017 	ldw	fp,0(sp)
 801f314:	dec00204 	addi	sp,sp,8
 801f318:	f800283a 	ret

0801f31c <_do_dtors>:
 801f31c:	defffd04 	addi	sp,sp,-12
 801f320:	dfc00215 	stw	ra,8(sp)
 801f324:	df000115 	stw	fp,4(sp)
 801f328:	df000104 	addi	fp,sp,4
 801f32c:	008200b4 	movhi	r2,2050
 801f330:	10bfa604 	addi	r2,r2,-360
 801f334:	e0bfff15 	stw	r2,-4(fp)
 801f338:	00000606 	br	801f354 <_do_dtors+0x38>
 801f33c:	e0bfff17 	ldw	r2,-4(fp)
 801f340:	10800017 	ldw	r2,0(r2)
 801f344:	103ee83a 	callr	r2
 801f348:	e0bfff17 	ldw	r2,-4(fp)
 801f34c:	10bfff04 	addi	r2,r2,-4
 801f350:	e0bfff15 	stw	r2,-4(fp)
 801f354:	e0ffff17 	ldw	r3,-4(fp)
 801f358:	008200b4 	movhi	r2,2050
 801f35c:	10bfa704 	addi	r2,r2,-356
 801f360:	18bff62e 	bgeu	r3,r2,801f33c <__alt_data_end+0xf801f33c>
 801f364:	0001883a 	nop
 801f368:	e037883a 	mov	sp,fp
 801f36c:	dfc00117 	ldw	ra,4(sp)
 801f370:	df000017 	ldw	fp,0(sp)
 801f374:	dec00204 	addi	sp,sp,8
 801f378:	f800283a 	ret

0801f37c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 801f37c:	defffa04 	addi	sp,sp,-24
 801f380:	dfc00515 	stw	ra,20(sp)
 801f384:	df000415 	stw	fp,16(sp)
 801f388:	df000404 	addi	fp,sp,16
 801f38c:	e13ffe15 	stw	r4,-8(fp)
 801f390:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 801f394:	e0bfff17 	ldw	r2,-4(fp)
 801f398:	10800017 	ldw	r2,0(r2)
 801f39c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 801f3a0:	e13ffe17 	ldw	r4,-8(fp)
 801f3a4:	801033c0 	call	801033c <strlen>
 801f3a8:	10800044 	addi	r2,r2,1
 801f3ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801f3b0:	00000d06 	br	801f3e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 801f3b4:	e0bffc17 	ldw	r2,-16(fp)
 801f3b8:	10c00217 	ldw	r3,8(r2)
 801f3bc:	e0bffd17 	ldw	r2,-12(fp)
 801f3c0:	1809883a 	mov	r4,r3
 801f3c4:	e17ffe17 	ldw	r5,-8(fp)
 801f3c8:	100d883a 	mov	r6,r2
 801f3cc:	801fb440 	call	801fb44 <memcmp>
 801f3d0:	1000021e 	bne	r2,zero,801f3dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 801f3d4:	e0bffc17 	ldw	r2,-16(fp)
 801f3d8:	00000706 	br	801f3f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 801f3dc:	e0bffc17 	ldw	r2,-16(fp)
 801f3e0:	10800017 	ldw	r2,0(r2)
 801f3e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 801f3e8:	e0fffc17 	ldw	r3,-16(fp)
 801f3ec:	e0bfff17 	ldw	r2,-4(fp)
 801f3f0:	18bff01e 	bne	r3,r2,801f3b4 <__alt_data_end+0xf801f3b4>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 801f3f4:	0005883a 	mov	r2,zero
}
 801f3f8:	e037883a 	mov	sp,fp
 801f3fc:	dfc00117 	ldw	ra,4(sp)
 801f400:	df000017 	ldw	fp,0(sp)
 801f404:	dec00204 	addi	sp,sp,8
 801f408:	f800283a 	ret

0801f40c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 801f40c:	defffe04 	addi	sp,sp,-8
 801f410:	dfc00115 	stw	ra,4(sp)
 801f414:	df000015 	stw	fp,0(sp)
 801f418:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 801f41c:	0009883a 	mov	r4,zero
 801f420:	01440004 	movi	r5,4096
 801f424:	801fa6c0 	call	801fa6c <alt_icache_flush>
#endif
}
 801f428:	e037883a 	mov	sp,fp
 801f42c:	dfc00117 	ldw	ra,4(sp)
 801f430:	df000017 	ldw	fp,0(sp)
 801f434:	dec00204 	addi	sp,sp,8
 801f438:	f800283a 	ret

0801f43c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 801f43c:	defffe04 	addi	sp,sp,-8
 801f440:	df000115 	stw	fp,4(sp)
 801f444:	df000104 	addi	fp,sp,4
 801f448:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 801f44c:	e0bfff17 	ldw	r2,-4(fp)
 801f450:	10bffe84 	addi	r2,r2,-6
 801f454:	10c00428 	cmpgeui	r3,r2,16
 801f458:	18001a1e 	bne	r3,zero,801f4c4 <alt_exception_cause_generated_bad_addr+0x88>
 801f45c:	100690ba 	slli	r3,r2,2
 801f460:	008200b4 	movhi	r2,2050
 801f464:	10bd1d04 	addi	r2,r2,-2956
 801f468:	1885883a 	add	r2,r3,r2
 801f46c:	10800017 	ldw	r2,0(r2)
 801f470:	1000683a 	jmp	r2
 801f474:	0801f4b4 	orhi	zero,at,2002
 801f478:	0801f4b4 	orhi	zero,at,2002
 801f47c:	0801f4c4 	addi	zero,at,2003
 801f480:	0801f4c4 	addi	zero,at,2003
 801f484:	0801f4c4 	addi	zero,at,2003
 801f488:	0801f4b4 	orhi	zero,at,2002
 801f48c:	0801f4bc 	xorhi	zero,at,2002
 801f490:	0801f4c4 	addi	zero,at,2003
 801f494:	0801f4b4 	orhi	zero,at,2002
 801f498:	0801f4b4 	orhi	zero,at,2002
 801f49c:	0801f4c4 	addi	zero,at,2003
 801f4a0:	0801f4b4 	orhi	zero,at,2002
 801f4a4:	0801f4bc 	xorhi	zero,at,2002
 801f4a8:	0801f4c4 	addi	zero,at,2003
 801f4ac:	0801f4c4 	addi	zero,at,2003
 801f4b0:	0801f4b4 	orhi	zero,at,2002
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 801f4b4:	00800044 	movi	r2,1
 801f4b8:	00000306 	br	801f4c8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 801f4bc:	0005883a 	mov	r2,zero
 801f4c0:	00000106 	br	801f4c8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 801f4c4:	0005883a 	mov	r2,zero
  }
}
 801f4c8:	e037883a 	mov	sp,fp
 801f4cc:	df000017 	ldw	fp,0(sp)
 801f4d0:	dec00104 	addi	sp,sp,4
 801f4d4:	f800283a 	ret

0801f4d8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 801f4d8:	defff904 	addi	sp,sp,-28
 801f4dc:	dfc00615 	stw	ra,24(sp)
 801f4e0:	df000515 	stw	fp,20(sp)
 801f4e4:	df000504 	addi	fp,sp,20
 801f4e8:	e13ffc15 	stw	r4,-16(fp)
 801f4ec:	e17ffd15 	stw	r5,-12(fp)
 801f4f0:	e1bffe15 	stw	r6,-8(fp)
 801f4f4:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 801f4f8:	e13ffd17 	ldw	r4,-12(fp)
 801f4fc:	e17ffe17 	ldw	r5,-8(fp)
 801f500:	e1bfff17 	ldw	r6,-4(fp)
 801f504:	801f72c0 	call	801f72c <open>
 801f508:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 801f50c:	e0bffb17 	ldw	r2,-20(fp)
 801f510:	10001c16 	blt	r2,zero,801f584 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 801f514:	008205b4 	movhi	r2,2070
 801f518:	109ebe04 	addi	r2,r2,31480
 801f51c:	e0fffb17 	ldw	r3,-20(fp)
 801f520:	18c00324 	muli	r3,r3,12
 801f524:	10c5883a 	add	r2,r2,r3
 801f528:	10c00017 	ldw	r3,0(r2)
 801f52c:	e0bffc17 	ldw	r2,-16(fp)
 801f530:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 801f534:	008205b4 	movhi	r2,2070
 801f538:	109ebe04 	addi	r2,r2,31480
 801f53c:	e0fffb17 	ldw	r3,-20(fp)
 801f540:	18c00324 	muli	r3,r3,12
 801f544:	18c00104 	addi	r3,r3,4
 801f548:	10c5883a 	add	r2,r2,r3
 801f54c:	10c00017 	ldw	r3,0(r2)
 801f550:	e0bffc17 	ldw	r2,-16(fp)
 801f554:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 801f558:	008205b4 	movhi	r2,2070
 801f55c:	109ebe04 	addi	r2,r2,31480
 801f560:	e0fffb17 	ldw	r3,-20(fp)
 801f564:	18c00324 	muli	r3,r3,12
 801f568:	18c00204 	addi	r3,r3,8
 801f56c:	10c5883a 	add	r2,r2,r3
 801f570:	10c00017 	ldw	r3,0(r2)
 801f574:	e0bffc17 	ldw	r2,-16(fp)
 801f578:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 801f57c:	e13ffb17 	ldw	r4,-20(fp)
 801f580:	801d0140 	call	801d014 <alt_release_fd>
  }
} 
 801f584:	e037883a 	mov	sp,fp
 801f588:	dfc00117 	ldw	ra,4(sp)
 801f58c:	df000017 	ldw	fp,0(sp)
 801f590:	dec00204 	addi	sp,sp,8
 801f594:	f800283a 	ret

0801f598 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 801f598:	defffb04 	addi	sp,sp,-20
 801f59c:	dfc00415 	stw	ra,16(sp)
 801f5a0:	df000315 	stw	fp,12(sp)
 801f5a4:	df000304 	addi	fp,sp,12
 801f5a8:	e13ffd15 	stw	r4,-12(fp)
 801f5ac:	e17ffe15 	stw	r5,-8(fp)
 801f5b0:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 801f5b4:	010205b4 	movhi	r4,2070
 801f5b8:	211ec104 	addi	r4,r4,31492
 801f5bc:	e17ffd17 	ldw	r5,-12(fp)
 801f5c0:	01800044 	movi	r6,1
 801f5c4:	01c07fc4 	movi	r7,511
 801f5c8:	801f4d80 	call	801f4d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 801f5cc:	010205b4 	movhi	r4,2070
 801f5d0:	211ebe04 	addi	r4,r4,31480
 801f5d4:	e17ffe17 	ldw	r5,-8(fp)
 801f5d8:	000d883a 	mov	r6,zero
 801f5dc:	01c07fc4 	movi	r7,511
 801f5e0:	801f4d80 	call	801f4d8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 801f5e4:	010205b4 	movhi	r4,2070
 801f5e8:	211ec404 	addi	r4,r4,31504
 801f5ec:	e17fff17 	ldw	r5,-4(fp)
 801f5f0:	01800044 	movi	r6,1
 801f5f4:	01c07fc4 	movi	r7,511
 801f5f8:	801f4d80 	call	801f4d8 <alt_open_fd>
}  
 801f5fc:	e037883a 	mov	sp,fp
 801f600:	dfc00117 	ldw	ra,4(sp)
 801f604:	df000017 	ldw	fp,0(sp)
 801f608:	dec00204 	addi	sp,sp,8
 801f60c:	f800283a 	ret

0801f610 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 801f610:	defffe04 	addi	sp,sp,-8
 801f614:	dfc00115 	stw	ra,4(sp)
 801f618:	df000015 	stw	fp,0(sp)
 801f61c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 801f620:	008205f4 	movhi	r2,2071
 801f624:	10a34e04 	addi	r2,r2,-29384
 801f628:	10800017 	ldw	r2,0(r2)
 801f62c:	10000526 	beq	r2,zero,801f644 <alt_get_errno+0x34>
 801f630:	008205f4 	movhi	r2,2071
 801f634:	10a34e04 	addi	r2,r2,-29384
 801f638:	10800017 	ldw	r2,0(r2)
 801f63c:	103ee83a 	callr	r2
 801f640:	00000206 	br	801f64c <alt_get_errno+0x3c>
 801f644:	008205f4 	movhi	r2,2071
 801f648:	10ae6904 	addi	r2,r2,-18012
}
 801f64c:	e037883a 	mov	sp,fp
 801f650:	dfc00117 	ldw	ra,4(sp)
 801f654:	df000017 	ldw	fp,0(sp)
 801f658:	dec00204 	addi	sp,sp,8
 801f65c:	f800283a 	ret

0801f660 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 801f660:	defffd04 	addi	sp,sp,-12
 801f664:	df000215 	stw	fp,8(sp)
 801f668:	df000204 	addi	fp,sp,8
 801f66c:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 801f670:	e0bfff17 	ldw	r2,-4(fp)
 801f674:	10800217 	ldw	r2,8(r2)
 801f678:	10d00034 	orhi	r3,r2,16384
 801f67c:	e0bfff17 	ldw	r2,-4(fp)
 801f680:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801f684:	e03ffe15 	stw	zero,-8(fp)
 801f688:	00001d06 	br	801f700 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801f68c:	008205b4 	movhi	r2,2070
 801f690:	109ebe04 	addi	r2,r2,31480
 801f694:	e0fffe17 	ldw	r3,-8(fp)
 801f698:	18c00324 	muli	r3,r3,12
 801f69c:	10c5883a 	add	r2,r2,r3
 801f6a0:	10c00017 	ldw	r3,0(r2)
 801f6a4:	e0bfff17 	ldw	r2,-4(fp)
 801f6a8:	10800017 	ldw	r2,0(r2)
 801f6ac:	1880111e 	bne	r3,r2,801f6f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801f6b0:	008205b4 	movhi	r2,2070
 801f6b4:	109ebe04 	addi	r2,r2,31480
 801f6b8:	e0fffe17 	ldw	r3,-8(fp)
 801f6bc:	18c00324 	muli	r3,r3,12
 801f6c0:	18c00204 	addi	r3,r3,8
 801f6c4:	10c5883a 	add	r2,r2,r3
 801f6c8:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 801f6cc:	1000090e 	bge	r2,zero,801f6f4 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 801f6d0:	e0bffe17 	ldw	r2,-8(fp)
 801f6d4:	10c00324 	muli	r3,r2,12
 801f6d8:	008205b4 	movhi	r2,2070
 801f6dc:	109ebe04 	addi	r2,r2,31480
 801f6e0:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 801f6e4:	e0bfff17 	ldw	r2,-4(fp)
 801f6e8:	18800226 	beq	r3,r2,801f6f4 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 801f6ec:	00bffcc4 	movi	r2,-13
 801f6f0:	00000a06 	br	801f71c <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 801f6f4:	e0bffe17 	ldw	r2,-8(fp)
 801f6f8:	10800044 	addi	r2,r2,1
 801f6fc:	e0bffe15 	stw	r2,-8(fp)
 801f700:	008205f4 	movhi	r2,2071
 801f704:	10a34d04 	addi	r2,r2,-29388
 801f708:	10800017 	ldw	r2,0(r2)
 801f70c:	1007883a 	mov	r3,r2
 801f710:	e0bffe17 	ldw	r2,-8(fp)
 801f714:	18bfdd2e 	bgeu	r3,r2,801f68c <__alt_data_end+0xf801f68c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 801f718:	0005883a 	mov	r2,zero
}
 801f71c:	e037883a 	mov	sp,fp
 801f720:	df000017 	ldw	fp,0(sp)
 801f724:	dec00104 	addi	sp,sp,4
 801f728:	f800283a 	ret

0801f72c <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 801f72c:	defff604 	addi	sp,sp,-40
 801f730:	dfc00915 	stw	ra,36(sp)
 801f734:	df000815 	stw	fp,32(sp)
 801f738:	df000804 	addi	fp,sp,32
 801f73c:	e13ffd15 	stw	r4,-12(fp)
 801f740:	e17ffe15 	stw	r5,-8(fp)
 801f744:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 801f748:	00bfffc4 	movi	r2,-1
 801f74c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 801f750:	00bffb44 	movi	r2,-19
 801f754:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 801f758:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 801f75c:	e13ffd17 	ldw	r4,-12(fp)
 801f760:	014205f4 	movhi	r5,2071
 801f764:	29634b04 	addi	r5,r5,-29396
 801f768:	801f37c0 	call	801f37c <alt_find_dev>
 801f76c:	e0bff815 	stw	r2,-32(fp)
 801f770:	e0bff817 	ldw	r2,-32(fp)
 801f774:	1000051e 	bne	r2,zero,801f78c <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 801f778:	e13ffd17 	ldw	r4,-12(fp)
 801f77c:	801f8a40 	call	801f8a4 <alt_find_file>
 801f780:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 801f784:	00800044 	movi	r2,1
 801f788:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 801f78c:	e0bff817 	ldw	r2,-32(fp)
 801f790:	10002926 	beq	r2,zero,801f838 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 801f794:	e13ff817 	ldw	r4,-32(fp)
 801f798:	801f9b80 	call	801f9b8 <alt_get_fd>
 801f79c:	e0bff915 	stw	r2,-28(fp)
 801f7a0:	e0bff917 	ldw	r2,-28(fp)
 801f7a4:	1000030e 	bge	r2,zero,801f7b4 <open+0x88>
    {
      status = index;
 801f7a8:	e0bff917 	ldw	r2,-28(fp)
 801f7ac:	e0bffa15 	stw	r2,-24(fp)
 801f7b0:	00002306 	br	801f840 <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 801f7b4:	e0bff917 	ldw	r2,-28(fp)
 801f7b8:	10c00324 	muli	r3,r2,12
 801f7bc:	008205b4 	movhi	r2,2070
 801f7c0:	109ebe04 	addi	r2,r2,31480
 801f7c4:	1885883a 	add	r2,r3,r2
 801f7c8:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 801f7cc:	e0fffe17 	ldw	r3,-8(fp)
 801f7d0:	00900034 	movhi	r2,16384
 801f7d4:	10bfffc4 	addi	r2,r2,-1
 801f7d8:	1886703a 	and	r3,r3,r2
 801f7dc:	e0bffc17 	ldw	r2,-16(fp)
 801f7e0:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 801f7e4:	e0bffb17 	ldw	r2,-20(fp)
 801f7e8:	1000051e 	bne	r2,zero,801f800 <open+0xd4>
 801f7ec:	e13ffc17 	ldw	r4,-16(fp)
 801f7f0:	801f6600 	call	801f660 <alt_file_locked>
 801f7f4:	e0bffa15 	stw	r2,-24(fp)
 801f7f8:	e0bffa17 	ldw	r2,-24(fp)
 801f7fc:	10001016 	blt	r2,zero,801f840 <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 801f800:	e0bff817 	ldw	r2,-32(fp)
 801f804:	10800317 	ldw	r2,12(r2)
 801f808:	10000826 	beq	r2,zero,801f82c <open+0x100>
 801f80c:	e0bff817 	ldw	r2,-32(fp)
 801f810:	10800317 	ldw	r2,12(r2)
 801f814:	e13ffc17 	ldw	r4,-16(fp)
 801f818:	e17ffd17 	ldw	r5,-12(fp)
 801f81c:	e1bffe17 	ldw	r6,-8(fp)
 801f820:	e1ffff17 	ldw	r7,-4(fp)
 801f824:	103ee83a 	callr	r2
 801f828:	00000106 	br	801f830 <open+0x104>
 801f82c:	0005883a 	mov	r2,zero
 801f830:	e0bffa15 	stw	r2,-24(fp)
 801f834:	00000206 	br	801f840 <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 801f838:	00bffb44 	movi	r2,-19
 801f83c:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 801f840:	e0bffa17 	ldw	r2,-24(fp)
 801f844:	1000090e 	bge	r2,zero,801f86c <open+0x140>
  {
    alt_release_fd (index);  
 801f848:	e13ff917 	ldw	r4,-28(fp)
 801f84c:	801d0140 	call	801d014 <alt_release_fd>
    ALT_ERRNO = -status;
 801f850:	801f6100 	call	801f610 <alt_get_errno>
 801f854:	1007883a 	mov	r3,r2
 801f858:	e0bffa17 	ldw	r2,-24(fp)
 801f85c:	0085c83a 	sub	r2,zero,r2
 801f860:	18800015 	stw	r2,0(r3)
    return -1;
 801f864:	00bfffc4 	movi	r2,-1
 801f868:	00000106 	br	801f870 <open+0x144>
  }
  
  /* return the reference upon success */

  return index;
 801f86c:	e0bff917 	ldw	r2,-28(fp)
}
 801f870:	e037883a 	mov	sp,fp
 801f874:	dfc00117 	ldw	ra,4(sp)
 801f878:	df000017 	ldw	fp,0(sp)
 801f87c:	dec00204 	addi	sp,sp,8
 801f880:	f800283a 	ret

0801f884 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 801f884:	deffff04 	addi	sp,sp,-4
 801f888:	df000015 	stw	fp,0(sp)
 801f88c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 801f890:	000170fa 	wrctl	ienable,zero
}
 801f894:	e037883a 	mov	sp,fp
 801f898:	df000017 	ldw	fp,0(sp)
 801f89c:	dec00104 	addi	sp,sp,4
 801f8a0:	f800283a 	ret

0801f8a4 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 801f8a4:	defffb04 	addi	sp,sp,-20
 801f8a8:	dfc00415 	stw	ra,16(sp)
 801f8ac:	df000315 	stw	fp,12(sp)
 801f8b0:	df000304 	addi	fp,sp,12
 801f8b4:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 801f8b8:	008205f4 	movhi	r2,2071
 801f8bc:	10a34904 	addi	r2,r2,-29404
 801f8c0:	10800017 	ldw	r2,0(r2)
 801f8c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801f8c8:	00003106 	br	801f990 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 801f8cc:	e0bffd17 	ldw	r2,-12(fp)
 801f8d0:	10800217 	ldw	r2,8(r2)
 801f8d4:	1009883a 	mov	r4,r2
 801f8d8:	801033c0 	call	801033c <strlen>
 801f8dc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 801f8e0:	e0bffd17 	ldw	r2,-12(fp)
 801f8e4:	10c00217 	ldw	r3,8(r2)
 801f8e8:	e0bffe17 	ldw	r2,-8(fp)
 801f8ec:	10bfffc4 	addi	r2,r2,-1
 801f8f0:	1885883a 	add	r2,r3,r2
 801f8f4:	10800003 	ldbu	r2,0(r2)
 801f8f8:	10803fcc 	andi	r2,r2,255
 801f8fc:	1080201c 	xori	r2,r2,128
 801f900:	10bfe004 	addi	r2,r2,-128
 801f904:	10800bd8 	cmpnei	r2,r2,47
 801f908:	1000031e 	bne	r2,zero,801f918 <alt_find_file+0x74>
    {
      len -= 1;
 801f90c:	e0bffe17 	ldw	r2,-8(fp)
 801f910:	10bfffc4 	addi	r2,r2,-1
 801f914:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801f918:	e0bffe17 	ldw	r2,-8(fp)
 801f91c:	e0ffff17 	ldw	r3,-4(fp)
 801f920:	1885883a 	add	r2,r3,r2
 801f924:	10800003 	ldbu	r2,0(r2)
 801f928:	10803fcc 	andi	r2,r2,255
 801f92c:	1080201c 	xori	r2,r2,128
 801f930:	10bfe004 	addi	r2,r2,-128
 801f934:	10800be0 	cmpeqi	r2,r2,47
 801f938:	1000081e 	bne	r2,zero,801f95c <alt_find_file+0xb8>
 801f93c:	e0bffe17 	ldw	r2,-8(fp)
 801f940:	e0ffff17 	ldw	r3,-4(fp)
 801f944:	1885883a 	add	r2,r3,r2
 801f948:	10800003 	ldbu	r2,0(r2)
 801f94c:	10803fcc 	andi	r2,r2,255
 801f950:	1080201c 	xori	r2,r2,128
 801f954:	10bfe004 	addi	r2,r2,-128
 801f958:	10000a1e 	bne	r2,zero,801f984 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 801f95c:	e0bffd17 	ldw	r2,-12(fp)
 801f960:	10c00217 	ldw	r3,8(r2)
 801f964:	e0bffe17 	ldw	r2,-8(fp)
 801f968:	1809883a 	mov	r4,r3
 801f96c:	e17fff17 	ldw	r5,-4(fp)
 801f970:	100d883a 	mov	r6,r2
 801f974:	801fb440 	call	801fb44 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 801f978:	1000021e 	bne	r2,zero,801f984 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 801f97c:	e0bffd17 	ldw	r2,-12(fp)
 801f980:	00000806 	br	801f9a4 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 801f984:	e0bffd17 	ldw	r2,-12(fp)
 801f988:	10800017 	ldw	r2,0(r2)
 801f98c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 801f990:	e0fffd17 	ldw	r3,-12(fp)
 801f994:	008205f4 	movhi	r2,2071
 801f998:	10a34904 	addi	r2,r2,-29404
 801f99c:	18bfcb1e 	bne	r3,r2,801f8cc <__alt_data_end+0xf801f8cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 801f9a0:	0005883a 	mov	r2,zero
}
 801f9a4:	e037883a 	mov	sp,fp
 801f9a8:	dfc00117 	ldw	ra,4(sp)
 801f9ac:	df000017 	ldw	fp,0(sp)
 801f9b0:	dec00204 	addi	sp,sp,8
 801f9b4:	f800283a 	ret

0801f9b8 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 801f9b8:	defffc04 	addi	sp,sp,-16
 801f9bc:	df000315 	stw	fp,12(sp)
 801f9c0:	df000304 	addi	fp,sp,12
 801f9c4:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 801f9c8:	00bffa04 	movi	r2,-24
 801f9cc:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801f9d0:	e03ffd15 	stw	zero,-12(fp)
 801f9d4:	00001d06 	br	801fa4c <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 801f9d8:	008205b4 	movhi	r2,2070
 801f9dc:	109ebe04 	addi	r2,r2,31480
 801f9e0:	e0fffd17 	ldw	r3,-12(fp)
 801f9e4:	18c00324 	muli	r3,r3,12
 801f9e8:	10c5883a 	add	r2,r2,r3
 801f9ec:	10800017 	ldw	r2,0(r2)
 801f9f0:	1000131e 	bne	r2,zero,801fa40 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 801f9f4:	008205b4 	movhi	r2,2070
 801f9f8:	109ebe04 	addi	r2,r2,31480
 801f9fc:	e0fffd17 	ldw	r3,-12(fp)
 801fa00:	18c00324 	muli	r3,r3,12
 801fa04:	10c5883a 	add	r2,r2,r3
 801fa08:	e0ffff17 	ldw	r3,-4(fp)
 801fa0c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 801fa10:	008205f4 	movhi	r2,2071
 801fa14:	10a34d04 	addi	r2,r2,-29388
 801fa18:	10c00017 	ldw	r3,0(r2)
 801fa1c:	e0bffd17 	ldw	r2,-12(fp)
 801fa20:	1880040e 	bge	r3,r2,801fa34 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 801fa24:	008205f4 	movhi	r2,2071
 801fa28:	10a34d04 	addi	r2,r2,-29388
 801fa2c:	e0fffd17 	ldw	r3,-12(fp)
 801fa30:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 801fa34:	e0bffd17 	ldw	r2,-12(fp)
 801fa38:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 801fa3c:	00000606 	br	801fa58 <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 801fa40:	e0bffd17 	ldw	r2,-12(fp)
 801fa44:	10800044 	addi	r2,r2,1
 801fa48:	e0bffd15 	stw	r2,-12(fp)
 801fa4c:	e0bffd17 	ldw	r2,-12(fp)
 801fa50:	10800810 	cmplti	r2,r2,32
 801fa54:	103fe01e 	bne	r2,zero,801f9d8 <__alt_data_end+0xf801f9d8>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 801fa58:	e0bffe17 	ldw	r2,-8(fp)
}
 801fa5c:	e037883a 	mov	sp,fp
 801fa60:	df000017 	ldw	fp,0(sp)
 801fa64:	dec00104 	addi	sp,sp,4
 801fa68:	f800283a 	ret

0801fa6c <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 801fa6c:	defffb04 	addi	sp,sp,-20
 801fa70:	df000415 	stw	fp,16(sp)
 801fa74:	df000404 	addi	fp,sp,16
 801fa78:	e13ffe15 	stw	r4,-8(fp)
 801fa7c:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 801fa80:	e0bfff17 	ldw	r2,-4(fp)
 801fa84:	10840070 	cmpltui	r2,r2,4097
 801fa88:	1000021e 	bne	r2,zero,801fa94 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 801fa8c:	00840004 	movi	r2,4096
 801fa90:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 801fa94:	e0fffe17 	ldw	r3,-8(fp)
 801fa98:	e0bfff17 	ldw	r2,-4(fp)
 801fa9c:	1885883a 	add	r2,r3,r2
 801faa0:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 801faa4:	e0bffe17 	ldw	r2,-8(fp)
 801faa8:	e0bffc15 	stw	r2,-16(fp)
 801faac:	00000506 	br	801fac4 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 801fab0:	e0bffc17 	ldw	r2,-16(fp)
 801fab4:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 801fab8:	e0bffc17 	ldw	r2,-16(fp)
 801fabc:	10800804 	addi	r2,r2,32
 801fac0:	e0bffc15 	stw	r2,-16(fp)
 801fac4:	e0fffc17 	ldw	r3,-16(fp)
 801fac8:	e0bffd17 	ldw	r2,-12(fp)
 801facc:	18bff836 	bltu	r3,r2,801fab0 <__alt_data_end+0xf801fab0>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 801fad0:	e0bffe17 	ldw	r2,-8(fp)
 801fad4:	108007cc 	andi	r2,r2,31
 801fad8:	10000226 	beq	r2,zero,801fae4 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 801fadc:	e0bffc17 	ldw	r2,-16(fp)
 801fae0:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 801fae4:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 801fae8:	e037883a 	mov	sp,fp
 801faec:	df000017 	ldw	fp,0(sp)
 801faf0:	dec00104 	addi	sp,sp,4
 801faf4:	f800283a 	ret

0801faf8 <atexit>:
 801faf8:	200b883a 	mov	r5,r4
 801fafc:	000d883a 	mov	r6,zero
 801fb00:	0009883a 	mov	r4,zero
 801fb04:	000f883a 	mov	r7,zero
 801fb08:	801fbc01 	jmpi	801fbc0 <__register_exitproc>

0801fb0c <exit>:
 801fb0c:	defffe04 	addi	sp,sp,-8
 801fb10:	000b883a 	mov	r5,zero
 801fb14:	dc000015 	stw	r16,0(sp)
 801fb18:	dfc00115 	stw	ra,4(sp)
 801fb1c:	2021883a 	mov	r16,r4
 801fb20:	801fcd40 	call	801fcd4 <__call_exitprocs>
 801fb24:	008205f4 	movhi	r2,2071
 801fb28:	10a34504 	addi	r2,r2,-29420
 801fb2c:	11000017 	ldw	r4,0(r2)
 801fb30:	20800f17 	ldw	r2,60(r4)
 801fb34:	10000126 	beq	r2,zero,801fb3c <exit+0x30>
 801fb38:	103ee83a 	callr	r2
 801fb3c:	8009883a 	mov	r4,r16
 801fb40:	801fe680 	call	801fe68 <_exit>

0801fb44 <memcmp>:
 801fb44:	01c000c4 	movi	r7,3
 801fb48:	3980192e 	bgeu	r7,r6,801fbb0 <memcmp+0x6c>
 801fb4c:	2144b03a 	or	r2,r4,r5
 801fb50:	11c4703a 	and	r2,r2,r7
 801fb54:	10000f26 	beq	r2,zero,801fb94 <memcmp+0x50>
 801fb58:	20800003 	ldbu	r2,0(r4)
 801fb5c:	28c00003 	ldbu	r3,0(r5)
 801fb60:	10c0151e 	bne	r2,r3,801fbb8 <memcmp+0x74>
 801fb64:	31bfff84 	addi	r6,r6,-2
 801fb68:	01ffffc4 	movi	r7,-1
 801fb6c:	00000406 	br	801fb80 <memcmp+0x3c>
 801fb70:	20800003 	ldbu	r2,0(r4)
 801fb74:	28c00003 	ldbu	r3,0(r5)
 801fb78:	31bfffc4 	addi	r6,r6,-1
 801fb7c:	10c00e1e 	bne	r2,r3,801fbb8 <memcmp+0x74>
 801fb80:	21000044 	addi	r4,r4,1
 801fb84:	29400044 	addi	r5,r5,1
 801fb88:	31fff91e 	bne	r6,r7,801fb70 <__alt_data_end+0xf801fb70>
 801fb8c:	0005883a 	mov	r2,zero
 801fb90:	f800283a 	ret
 801fb94:	20c00017 	ldw	r3,0(r4)
 801fb98:	28800017 	ldw	r2,0(r5)
 801fb9c:	1880041e 	bne	r3,r2,801fbb0 <memcmp+0x6c>
 801fba0:	31bfff04 	addi	r6,r6,-4
 801fba4:	21000104 	addi	r4,r4,4
 801fba8:	29400104 	addi	r5,r5,4
 801fbac:	39bff936 	bltu	r7,r6,801fb94 <__alt_data_end+0xf801fb94>
 801fbb0:	303fe91e 	bne	r6,zero,801fb58 <__alt_data_end+0xf801fb58>
 801fbb4:	003ff506 	br	801fb8c <__alt_data_end+0xf801fb8c>
 801fbb8:	10c5c83a 	sub	r2,r2,r3
 801fbbc:	f800283a 	ret

0801fbc0 <__register_exitproc>:
 801fbc0:	008205f4 	movhi	r2,2071
 801fbc4:	defffa04 	addi	sp,sp,-24
 801fbc8:	10a34504 	addi	r2,r2,-29420
 801fbcc:	dc000315 	stw	r16,12(sp)
 801fbd0:	14000017 	ldw	r16,0(r2)
 801fbd4:	dc400415 	stw	r17,16(sp)
 801fbd8:	dfc00515 	stw	ra,20(sp)
 801fbdc:	80805217 	ldw	r2,328(r16)
 801fbe0:	2023883a 	mov	r17,r4
 801fbe4:	10003626 	beq	r2,zero,801fcc0 <__register_exitproc+0x100>
 801fbe8:	10c00117 	ldw	r3,4(r2)
 801fbec:	010007c4 	movi	r4,31
 801fbf0:	20c00e16 	blt	r4,r3,801fc2c <__register_exitproc+0x6c>
 801fbf4:	1a400044 	addi	r9,r3,1
 801fbf8:	8800211e 	bne	r17,zero,801fc80 <__register_exitproc+0xc0>
 801fbfc:	18c00084 	addi	r3,r3,2
 801fc00:	18c7883a 	add	r3,r3,r3
 801fc04:	18c7883a 	add	r3,r3,r3
 801fc08:	12400115 	stw	r9,4(r2)
 801fc0c:	10c7883a 	add	r3,r2,r3
 801fc10:	19400015 	stw	r5,0(r3)
 801fc14:	0005883a 	mov	r2,zero
 801fc18:	dfc00517 	ldw	ra,20(sp)
 801fc1c:	dc400417 	ldw	r17,16(sp)
 801fc20:	dc000317 	ldw	r16,12(sp)
 801fc24:	dec00604 	addi	sp,sp,24
 801fc28:	f800283a 	ret
 801fc2c:	00820074 	movhi	r2,2049
 801fc30:	10bd2204 	addi	r2,r2,-2936
 801fc34:	10002526 	beq	r2,zero,801fccc <__register_exitproc+0x10c>
 801fc38:	01006404 	movi	r4,400
 801fc3c:	d9400015 	stw	r5,0(sp)
 801fc40:	d9800115 	stw	r6,4(sp)
 801fc44:	d9c00215 	stw	r7,8(sp)
 801fc48:	800f4880 	call	800f488 <malloc>
 801fc4c:	d9400017 	ldw	r5,0(sp)
 801fc50:	d9800117 	ldw	r6,4(sp)
 801fc54:	d9c00217 	ldw	r7,8(sp)
 801fc58:	10001c26 	beq	r2,zero,801fccc <__register_exitproc+0x10c>
 801fc5c:	80c05217 	ldw	r3,328(r16)
 801fc60:	10000115 	stw	zero,4(r2)
 801fc64:	02400044 	movi	r9,1
 801fc68:	10c00015 	stw	r3,0(r2)
 801fc6c:	80805215 	stw	r2,328(r16)
 801fc70:	10006215 	stw	zero,392(r2)
 801fc74:	10006315 	stw	zero,396(r2)
 801fc78:	0007883a 	mov	r3,zero
 801fc7c:	883fdf26 	beq	r17,zero,801fbfc <__alt_data_end+0xf801fbfc>
 801fc80:	18d1883a 	add	r8,r3,r3
 801fc84:	4211883a 	add	r8,r8,r8
 801fc88:	1211883a 	add	r8,r2,r8
 801fc8c:	41802215 	stw	r6,136(r8)
 801fc90:	01000044 	movi	r4,1
 801fc94:	11806217 	ldw	r6,392(r2)
 801fc98:	20c8983a 	sll	r4,r4,r3
 801fc9c:	310cb03a 	or	r6,r6,r4
 801fca0:	11806215 	stw	r6,392(r2)
 801fca4:	41c04215 	stw	r7,264(r8)
 801fca8:	01800084 	movi	r6,2
 801fcac:	89bfd31e 	bne	r17,r6,801fbfc <__alt_data_end+0xf801fbfc>
 801fcb0:	11806317 	ldw	r6,396(r2)
 801fcb4:	3108b03a 	or	r4,r6,r4
 801fcb8:	11006315 	stw	r4,396(r2)
 801fcbc:	003fcf06 	br	801fbfc <__alt_data_end+0xf801fbfc>
 801fcc0:	80805304 	addi	r2,r16,332
 801fcc4:	80805215 	stw	r2,328(r16)
 801fcc8:	003fc706 	br	801fbe8 <__alt_data_end+0xf801fbe8>
 801fccc:	00bfffc4 	movi	r2,-1
 801fcd0:	003fd106 	br	801fc18 <__alt_data_end+0xf801fc18>

0801fcd4 <__call_exitprocs>:
 801fcd4:	008205f4 	movhi	r2,2071
 801fcd8:	10a34504 	addi	r2,r2,-29420
 801fcdc:	10800017 	ldw	r2,0(r2)
 801fce0:	defff404 	addi	sp,sp,-48
 801fce4:	dd800815 	stw	r22,32(sp)
 801fce8:	d8800015 	stw	r2,0(sp)
 801fcec:	10805204 	addi	r2,r2,328
 801fcf0:	dd000615 	stw	r20,24(sp)
 801fcf4:	dc800415 	stw	r18,16(sp)
 801fcf8:	dfc00b15 	stw	ra,44(sp)
 801fcfc:	df000a15 	stw	fp,40(sp)
 801fd00:	ddc00915 	stw	r23,36(sp)
 801fd04:	dd400715 	stw	r21,28(sp)
 801fd08:	dcc00515 	stw	r19,20(sp)
 801fd0c:	dc400315 	stw	r17,12(sp)
 801fd10:	dc000215 	stw	r16,8(sp)
 801fd14:	2025883a 	mov	r18,r4
 801fd18:	2829883a 	mov	r20,r5
 801fd1c:	d8800115 	stw	r2,4(sp)
 801fd20:	05bfffc4 	movi	r22,-1
 801fd24:	d8800017 	ldw	r2,0(sp)
 801fd28:	14c05217 	ldw	r19,328(r2)
 801fd2c:	98001d26 	beq	r19,zero,801fda4 <__call_exitprocs+0xd0>
 801fd30:	dd400117 	ldw	r21,4(sp)
 801fd34:	98800117 	ldw	r2,4(r19)
 801fd38:	173fffc4 	addi	fp,r2,-1
 801fd3c:	e0000d16 	blt	fp,zero,801fd74 <__call_exitprocs+0xa0>
 801fd40:	14000044 	addi	r16,r2,1
 801fd44:	8421883a 	add	r16,r16,r16
 801fd48:	8421883a 	add	r16,r16,r16
 801fd4c:	84402004 	addi	r17,r16,128
 801fd50:	9c63883a 	add	r17,r19,r17
 801fd54:	9c21883a 	add	r16,r19,r16
 801fd58:	a0001e26 	beq	r20,zero,801fdd4 <__call_exitprocs+0x100>
 801fd5c:	80804017 	ldw	r2,256(r16)
 801fd60:	15001c26 	beq	r2,r20,801fdd4 <__call_exitprocs+0x100>
 801fd64:	e73fffc4 	addi	fp,fp,-1
 801fd68:	843fff04 	addi	r16,r16,-4
 801fd6c:	8c7fff04 	addi	r17,r17,-4
 801fd70:	e5bff91e 	bne	fp,r22,801fd58 <__alt_data_end+0xf801fd58>
 801fd74:	00820074 	movhi	r2,2049
 801fd78:	10bd2704 	addi	r2,r2,-2916
 801fd7c:	10000926 	beq	r2,zero,801fda4 <__call_exitprocs+0xd0>
 801fd80:	98800117 	ldw	r2,4(r19)
 801fd84:	1000311e 	bne	r2,zero,801fe4c <__call_exitprocs+0x178>
 801fd88:	98800017 	ldw	r2,0(r19)
 801fd8c:	10003426 	beq	r2,zero,801fe60 <__call_exitprocs+0x18c>
 801fd90:	9809883a 	mov	r4,r19
 801fd94:	a8800015 	stw	r2,0(r21)
 801fd98:	800f49c0 	call	800f49c <free>
 801fd9c:	acc00017 	ldw	r19,0(r21)
 801fda0:	983fe41e 	bne	r19,zero,801fd34 <__alt_data_end+0xf801fd34>
 801fda4:	dfc00b17 	ldw	ra,44(sp)
 801fda8:	df000a17 	ldw	fp,40(sp)
 801fdac:	ddc00917 	ldw	r23,36(sp)
 801fdb0:	dd800817 	ldw	r22,32(sp)
 801fdb4:	dd400717 	ldw	r21,28(sp)
 801fdb8:	dd000617 	ldw	r20,24(sp)
 801fdbc:	dcc00517 	ldw	r19,20(sp)
 801fdc0:	dc800417 	ldw	r18,16(sp)
 801fdc4:	dc400317 	ldw	r17,12(sp)
 801fdc8:	dc000217 	ldw	r16,8(sp)
 801fdcc:	dec00c04 	addi	sp,sp,48
 801fdd0:	f800283a 	ret
 801fdd4:	98800117 	ldw	r2,4(r19)
 801fdd8:	80c00017 	ldw	r3,0(r16)
 801fddc:	10bfffc4 	addi	r2,r2,-1
 801fde0:	17001526 	beq	r2,fp,801fe38 <__call_exitprocs+0x164>
 801fde4:	80000015 	stw	zero,0(r16)
 801fde8:	183fde26 	beq	r3,zero,801fd64 <__alt_data_end+0xf801fd64>
 801fdec:	00800044 	movi	r2,1
 801fdf0:	1708983a 	sll	r4,r2,fp
 801fdf4:	98806217 	ldw	r2,392(r19)
 801fdf8:	9dc00117 	ldw	r23,4(r19)
 801fdfc:	2084703a 	and	r2,r4,r2
 801fe00:	1000061e 	bne	r2,zero,801fe1c <__call_exitprocs+0x148>
 801fe04:	183ee83a 	callr	r3
 801fe08:	98800117 	ldw	r2,4(r19)
 801fe0c:	15ffc51e 	bne	r2,r23,801fd24 <__alt_data_end+0xf801fd24>
 801fe10:	a8800017 	ldw	r2,0(r21)
 801fe14:	14ffd326 	beq	r2,r19,801fd64 <__alt_data_end+0xf801fd64>
 801fe18:	003fc206 	br	801fd24 <__alt_data_end+0xf801fd24>
 801fe1c:	98806317 	ldw	r2,396(r19)
 801fe20:	2084703a 	and	r2,r4,r2
 801fe24:	1000061e 	bne	r2,zero,801fe40 <__call_exitprocs+0x16c>
 801fe28:	89400017 	ldw	r5,0(r17)
 801fe2c:	9009883a 	mov	r4,r18
 801fe30:	183ee83a 	callr	r3
 801fe34:	003ff406 	br	801fe08 <__alt_data_end+0xf801fe08>
 801fe38:	9f000115 	stw	fp,4(r19)
 801fe3c:	003fea06 	br	801fde8 <__alt_data_end+0xf801fde8>
 801fe40:	89000017 	ldw	r4,0(r17)
 801fe44:	183ee83a 	callr	r3
 801fe48:	003fef06 	br	801fe08 <__alt_data_end+0xf801fe08>
 801fe4c:	98800017 	ldw	r2,0(r19)
 801fe50:	982b883a 	mov	r21,r19
 801fe54:	1027883a 	mov	r19,r2
 801fe58:	983fb61e 	bne	r19,zero,801fd34 <__alt_data_end+0xf801fd34>
 801fe5c:	003fd106 	br	801fda4 <__alt_data_end+0xf801fda4>
 801fe60:	0005883a 	mov	r2,zero
 801fe64:	003ffa06 	br	801fe50 <__alt_data_end+0xf801fe50>

0801fe68 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 801fe68:	defffd04 	addi	sp,sp,-12
 801fe6c:	df000215 	stw	fp,8(sp)
 801fe70:	df000204 	addi	fp,sp,8
 801fe74:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 801fe78:	0001883a 	nop
 801fe7c:	e0bfff17 	ldw	r2,-4(fp)
 801fe80:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 801fe84:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 801fe88:	10000226 	beq	r2,zero,801fe94 <_exit+0x2c>
    ALT_SIM_FAIL();
 801fe8c:	002af070 	cmpltui	zero,zero,43969
 801fe90:	00000106 	br	801fe98 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 801fe94:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 801fe98:	003fff06 	br	801fe98 <__alt_data_end+0xf801fe98>
