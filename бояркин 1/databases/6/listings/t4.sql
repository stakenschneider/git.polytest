CREATE EXCEPTION INDICATION_IS_CONTRAINDICATION 'Indicalion contains into contraindication table.';
CREATE EXCEPTION INDICATION_ALREADY_EXISTS 'Indicalion is already exists.';



CREATE PROCEDURE GET_INDICATION_ID(ID_DISEASE INTEGER NOT NULL, ID_DRUG INTEGER NOT NULL)
    RETURNS(INDICATION_ID INTEGER)
AS
BEGIN
    INDICATION_ID = NULL;
    INDICATION_ID = ( SELECT INDICATION.ID_INDICATION FROM INDICATION
                      WHERE INDICATION.ID_DISEASE = :ID_DISEASE AND INDICATION.ID_DRUG = :ID_DRUG );
END;



CREATE PROCEDURE GET_CONTRAINDICATION_ID(ID_DISEASE INTEGER NOT NULL, ID_DRUG INTEGER NOT NULL)
    RETURNS(CONTRAINDICATION_ID INTEGER)
AS
BEGIN
    CONTRAINDICATION_ID = NULL;
    CONTRAINDICATION_ID = ( SELECT CONTRAINDICATION.ID_CONTRAINDICATION FROM CONTRAINDICATION
                            WHERE CONTRAINDICATION.ID_DISEASE = :ID_DISEASE AND CONTRAINDICATION.ID_DRAG = :ID_DRUG );
END;



CREATE TRIGGER INDICATION_CHECK_CONFLICT FOR INDICATION
    ACTIVE BEFORE INSERT
AS
    DECLARE VARIABLE CHECK_NULL INTEGER;
BEGIN
    EXECUTE PROCEDURE GET_INDICATION_ID
        NEW.ID_DISEASE, NEW.ID_DRUG
        RETURNING_VALUES :CHECK_NULL;

    IF(NOT (CHECK_NULL IS NULL)) THEN
        EXCEPTION INDICATION_ALREADY_EXISTS;

    EXECUTE PROCEDURE GET_CONTRAINDICATION_ID
        NEW.ID_DISEASE, NEW.ID_DRUG
        RETURNING_VALUES :CHECK_NULL;

    IF(NOT (CHECK_NULL IS NULL)) THEN
        EXCEPTION INDICATION_IS_CONTRAINDICATION;
END;